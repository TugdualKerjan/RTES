
mini_project_v3.elf:     file format elf32-littlenios2
mini_project_v3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000180f0 memsz 0x000180f0 flags r-x
    LOAD off    0x00019110 vaddr 0x00018110 paddr 0x00019c84 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001b7f8 vaddr 0x0001b7f8 paddr 0x0001b7f8 align 2**12
         filesz 0x00000000 memsz 0x000063ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017988  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000544  00017bcc  00017bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  00018110  00019c84  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000063ec  0001b7f8  0001b7f8  0001b7f8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  00021be4  00021be4  0001ac84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001ac84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001020  00000000  00000000  0001aca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d7cd  00000000  00000000  0001bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ac98  00000000  00000000  00049495  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e1ff  00000000  00000000  0005412d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000031cc  00000000  00000000  0006232c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000049e8  00000000  00000000  000654f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  00069ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000817a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  000817b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00087b52  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00087b58  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00087b64  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00087b65  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00087b66  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00087b6a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00087b6e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00087b72  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00087b7d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00087b88  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00087b93  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  00087b9d  2**0
                  CONTENTS, READONLY
 29 .jdi          00005085  00000000  00000000  00087be9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ee46  00000000  00000000  0008cc6e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00017bcc l    d  .rodata	00000000 .rodata
00018110 l    d  .rwdata	00000000 .rwdata
0001b7f8 l    d  .bss	00000000 .bss
00021be4 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/nathan/Documents/Cours/EPFL_RTES_CS476/Code/mini_project_v2/sw/mini_project_v3_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 mini_project_with_fake_camera.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00017d32 l     O .rodata	00000010 zeroes.4404
00003898 l     F .text	000000bc __sbprintf
00017d42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003aa8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000055d8 l     F .text	00000008 __fp_unlock
000055ec l     F .text	0000019c __sinit.part.1
00005788 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00018518 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001895c l     O .rwdata	00000020 lc_ctype_charset
0001893c l     O .rwdata	00000020 lc_message_charset
0001897c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017d74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008324 l     F .text	000000fc __sprint_r.part.0
00017ea8 l     O .rodata	00000010 blanks.4348
00017e98 l     O .rodata	00000010 zeroes.4349
000098b0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d3b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d4c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d4f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d5dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d6bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d974 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019bf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dbc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00019bfc l     O .rwdata	00000004 lockid
0001b828 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00019c00 l     O .rwdata	00000004 lockid
0001b830 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f5f0 l     F .text	00000048 OS_InitMisc
0000f638 l     F .text	0000006c OS_InitRdyList
0000f7a4 l     F .text	000000e4 OS_InitTCBList
0000f510 l     F .text	000000e0 OS_InitEventList
0000f6a4 l     F .text	00000080 OS_InitTaskIdle
0000f724 l     F .text	00000080 OS_InitTaskStat
0000fa14 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011724 l     F .text	000000f4 OS_FlagTaskRdy
000114e4 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000157c8 l     F .text	00000034 alt_dev_reg
00018b5c l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015b54 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00015df8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000165d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016c74 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00016db4 l     F .text	0000003c alt_get_errno
00016df0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001b894 g     O .bss	00000004 alt_instruction_exception_handler
000079bc g     F .text	00000074 _mprec_log10
00019c4e g     O .rwdata	00000002 OSTaskNameSize
00007aa8 g     F .text	0000008c __any_on
00009e4c g     F .text	00000054 _isatty_r
00017d80 g     O .rodata	00000028 __mprec_tinytens
0000d8b8 g     F .text	000000bc alt_main
000014c4 g     F .text	000000c0 _puts_r
00021ae4 g     O .bss	00000100 alt_irq
00009ea0 g     F .text	00000060 _lseek_r
00011f44 g     F .text	000000cc OS_MemInit
00019c84 g       *ABS*	00000000 __flash_rwdata_start
00015768 g     F .text	00000060 OSTimeSet
0000bee4 g     F .text	00000088 .hidden __eqdf2
00017bcc g     O .rodata	00000010 map
0000e264 g     F .text	00000610 OSEventPendMulti
00021be4 g       *ABS*	00000000 __alt_heap_start
000173fc g     F .text	00000024 OSTaskCreateHook
0001b8c0 g     O .bss	00001000 task1_stk
00001488 g     F .text	0000003c printf
00019c26 g     O .rwdata	00000002 OSMboxEn
0000e8cc g     F .text	0000004c OSIntEnter
0000a0b8 g     F .text	0000009c _wcrtomb_r
000081e4 g     F .text	0000005c __sseek
00005928 g     F .text	00000010 __sinit
00009f60 g     F .text	00000140 __swbuf_r
00019c36 g     O .rwdata	00000002 OSQEn
000063f0 g     F .text	0000007c _setlocale_r
00005790 g     F .text	00000068 __sfmoreglue
0000df38 g     F .text	000000cc __malloc_unlock
00017464 g     F .text	00000020 OSTaskStatHook
0001b838 g     O .bss	00000001 OSLockNesting
00019c74 g     O .rwdata	00000002 OSDataSize
0001b839 g     O .bss	00000001 OSRunning
000068b4 g     F .text	0000015c memmove
000174a4 g     F .text	00000020 OSInitHookBegin
00019c6c g     O .rwdata	00000002 OSTmrSize
00005910 g     F .text	00000018 _cleanup
00006b38 g     F .text	000000a8 _Balloc
0001b83c g     O .bss	00000004 OSIdleCtr
0000bf6c g     F .text	000000dc .hidden __gtdf2
000171ac g     F .text	00000024 altera_nios2_gen2_irq_init
0001727c g       .text	00000000 OSStartTsk
0000fd44 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
00019c72 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00019c12 g     O .rwdata	00000002 OSEventSize
0001b840 g     O .bss	00000001 OSPrioHighRdy
00009df0 g     F .text	0000005c _fstat_r
00017420 g     F .text	00000024 OSTaskDelHook
0001b808 g     O .bss	00000004 errno
00008160 g     F .text	00000008 __seofread
0001725c g       .text	00000000 OSStartHighRdy
00014210 g     F .text	000001e4 OSTaskCreateExt
0001102c g     F .text	00000060 OSFlagPendGetFlagsRdy
00019c52 g     O .rwdata	00000002 OSTaskStatStkSize
000101a8 g     F .text	00000308 OSFlagAccept
0001257c g     F .text	000000b8 OSQFlush
00012010 g     F .text	00000140 OSQAccept
0001b820 g     O .bss	00000004 alt_argv
00021bc8 g       *ABS*	00000000 _gp
00014064 g     F .text	000001ac OSTaskCreate
00013b74 g     F .text	000004f0 OSTaskChangePrio
0001b834 g     O .bss	00000004 alt_heapsem
00010018 g     F .text	00000190 OSDebugInit
000143f4 g     F .text	00000344 OSTaskDel
000189dc g     O .rwdata	00000180 alt_fd_list
0001e8c0 g     O .bss	00000370 OSFlagTbl
0000f2f0 g     F .text	000000b8 OS_EventTaskRemove
00017528 g     F .text	00000090 alt_find_dev
0000676c g     F .text	00000148 memcpy
00019c3c g     O .rwdata	00000002 OSRdyTblSize
000055e0 g     F .text	0000000c _cleanup_r
0000d1d0 g     F .text	000000dc .hidden __floatsidf
00016d38 g     F .text	0000007c alt_io_redirect
0000c048 g     F .text	000000f4 .hidden __ltdf2
00017bcc g       *ABS*	00000000 __DTOR_END__
00001584 g     F .text	00000014 puts
0001779c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e004 g     F .text	00000120 OSEventNameGet
00019c20 g     O .rwdata	00000002 OSFlagMax
00008098 g     F .text	00000074 __fpclassifyd
00007918 g     F .text	000000a4 __ratio
0000e918 g     F .text	000000f8 OSIntExit
00009894 g     F .text	0000001c __vfiprintf_internal
00019c5a g     O .rwdata	00000002 OSTCBSize
0001b841 g     O .bss	00000001 OSPrioCur
00016054 g     F .text	000002bc altera_avalon_jtag_uart_read
00000c24 g     F .text	00000014 malloc
00001458 g     F .text	00000030 _printf_r
00000b68 g     F .text	00000064 .hidden __udivsi3
0000d618 g     F .text	000000a4 isatty
00019c40 g     O .rwdata	00000002 OSStkWidth
00017dd0 g     O .rodata	000000c8 __mprec_tens
00019c34 g     O .rwdata	00000002 OSPtrSize
0000646c g     F .text	0000000c __locale_charset
00019c14 g     O .rwdata	00000002 OSEventTblSize
000171d0 g       .text	00000000 OSCtxSw
0001b804 g     O .bss	00000004 __malloc_top_pad
0001b844 g     O .bss	00000004 OSTCBList
0001b818 g     O .bss	00000004 alt_fd_list_lock
00019bd8 g     O .rwdata	00000004 __mb_cur_max
0000649c g     F .text	0000000c _localeconv_r
00006f44 g     F .text	0000003c __i2b
00005dac g     F .text	000004bc __sfvwrite_r
0001ec30 g     O .bss	00000c30 OSMemTbl
0001b848 g     O .bss	00000001 OSTickStepState
00001598 g     F .text	00000054 _sbrk_r
00019c38 g     O .rwdata	00000002 OSQMax
0001f860 g     O .bss	00000800 OSTaskStatStk
00011b80 g     F .text	000000f0 OSMemNameGet
00019c18 g     O .rwdata	00000002 OSFlagEn
00009f00 g     F .text	00000060 _read_r
00019c5e g     O .rwdata	00000002 OSTimeTickHookEn
00011818 g     F .text	000000a4 OS_FlagUnlink
00012a2c g     F .text	00000168 OSQPost
00019bf0 g     O .rwdata	00000004 alt_max_fd
0000f8dc g     F .text	00000068 OS_MemCopy
0000f944 g     F .text	000000d0 OS_Sched
00009ae4 g     F .text	000000f0 _fclose_r
00011a90 g     F .text	000000f0 OSMemGet
00014a20 g     F .text	000001b4 OSTaskNameSet
000055a8 g     F .text	00000030 fflush
0001b800 g     O .bss	00000004 __malloc_max_sbrked_mem
0001b84c g     O .bss	00000004 OSCtxSwCtr
00017484 g     F .text	00000020 OSTimeTickHook
00019c22 g     O .rwdata	00000002 OSFlagNameSize
0000f3a8 g     F .text	00000100 OS_EventTaskRemoveMulti
0000ad50 g     F .text	000008ac .hidden __adddf3
0000f1a0 g     F .text	00000150 OS_EventTaskWaitMulti
000076c0 g     F .text	0000010c __b2d
00019c3a g     O .rwdata	00000002 OSQSize
0000a818 g     F .text	00000538 .hidden __umoddi3
0000d7e4 g     F .text	000000d4 lseek
000134dc g     F .text	0000020c OSSemPend
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
00019bd0 g     O .rwdata	00000004 _global_impure_ptr
00007b34 g     F .text	00000564 _realloc_r
00019c24 g     O .rwdata	00000002 OSLowestPrio
00021be4 g       *ABS*	00000000 __bss_end
00016b84 g     F .text	000000f0 alt_iic_isr_register
00017504 g     F .text	00000024 OSTCBInitHook
00019c6a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000170a4 g     F .text	00000108 alt_tick
0000a2a0 g     F .text	00000578 .hidden __udivdi3
00009d4c g     F .text	00000024 _fputwc_r
00019c0c g     O .rwdata	00000002 OSEventEn
00017da8 g     O .rodata	00000028 __mprec_bigtens
00006d28 g     F .text	00000104 __s2b
00019c66 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d2ac g     F .text	000000a8 .hidden __floatunsidf
00007400 g     F .text	00000060 __mcmp
00005948 g     F .text	00000018 __fp_lock_all
00016b38 g     F .text	0000004c alt_ic_irq_enabled
00011644 g     F .text	000000e0 OS_FlagInit
00017008 g     F .text	0000009c alt_alarm_stop
00019c48 g     O .rwdata	00000002 OSTaskIdleStkSize
0001b888 g     O .bss	00000004 alt_irq_active
00013114 g     F .text	000000b0 OSSemAccept
00011d84 g     F .text	000000d8 OSMemPut
000118bc g     F .text	000001d4 OSMemCreate
0001b850 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
000189b4 g     O .rwdata	00000028 alt_dev_null
00019c5c g     O .rwdata	00000002 OSTicksPerSec
000171d0 g       .text	00000000 OSIntCtxSw
000167f4 g     F .text	00000020 alt_dcache_flush_all
00006e2c g     F .text	00000068 __hi0bits
0000d150 g     F .text	00000080 .hidden __fixdfsi
0001b854 g     O .bss	00000004 OSTCBFreeList
00019c84 g       *ABS*	00000000 __ram_rwdata_end
000136e8 g     F .text	0000016c OSSemPendAbort
00019be8 g     O .rwdata	00000008 alt_dev_list
0000dbfc g     F .text	000000f8 write
00019c60 g     O .rwdata	00000002 OSVersionNbr
000007d4 g     F .text	000001d0 task_fake_camera
00018110 g       *ABS*	00000000 __ram_rodata_end
0000d52c g     F .text	000000b0 fstat
0000c048 g     F .text	000000f4 .hidden __ledf2
00019c08 g     O .rwdata	00000004 OSEndiannessTest
00007178 g     F .text	00000140 __pow5mult
00008438 g     F .text	0000145c ___vfiprintf_internal_r
0001b814 g     O .bss	00000004 __nlocale_changed
00000bcc g     F .text	00000058 .hidden __umodsi3
0001c8c0 g     O .bss	00001000 msg_queue
00019c1a g     O .rwdata	00000002 OSFlagGrpSize
00021be4 g       *ABS*	00000000 end
00015a0c g     F .text	00000148 altera_avalon_jtag_uart_init
0000fbac g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00017bcc g       *ABS*	00000000 __CTOR_LIST__
00000328 g     F .text	000000e4 print_byte
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001664c g     F .text	0000007c alt_avalon_timer_sc_init
0000d354 g     F .text	00000064 .hidden __clzsi2
00016310 g     F .text	000002c4 altera_avalon_jtag_uart_write
00005938 g     F .text	00000004 __sfp_lock_acquire
00006688 g     F .text	000000e4 memchr
0000f888 g     F .text	00000054 OS_MemClr
00001684 g     F .text	000021f8 ___vfprintf_internal_r
000172a0 g     F .text	0000015c OSTaskStkInit
00005a9c g     F .text	00000310 _free_r
00006478 g     F .text	00000010 __locale_mb_cur_max
0000eef8 g     F .text	00000198 OS_EventTaskRdy
00017a18 g     F .text	00000180 __call_exitprocs
0001b858 g     O .bss	00000001 OSCPUUsage
0001b810 g     O .bss	00000004 __mlocale_changed
00019bc8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001b88c g     O .bss	00000004 _alt_tick_rate
00012634 g     F .text	0000028c OSQPend
000152e0 g     F .text	00000104 OSTimeDly
000072b8 g     F .text	00000148 __lshift
0001b890 g     O .bss	00000004 _alt_nticks
0000d9b0 g     F .text	000000fc read
00015834 g     F .text	00000074 alt_sys_init
00017900 g     F .text	00000118 __register_exitproc
0001b859 g     O .bss	00000001 OSTaskCtr
000153e4 g     F .text	00000154 OSTimeDlyHMSM
00006f80 g     F .text	000001f8 __multiply
00015efc g     F .text	00000068 altera_avalon_jtag_uart_close
00018110 g       *ABS*	00000000 __ram_rwdata_start
00017bcc g       *ABS*	00000000 __ram_rodata_start
0001b898 g     O .bss	00000028 __malloc_current_mallinfo
00019c0e g     O .rwdata	00000002 OSEventMax
000077cc g     F .text	0000014c __d2b
00013854 g     F .text	00000110 OSSemPost
0000ea9c g     F .text	000000dc OSSchedUnlock
000158a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000176c0 g     F .text	000000dc alt_get_fd
0001b85c g     O .bss	00000004 OSMemFreeList
0000ebe8 g     F .text	000000b0 OSStatInit
00011420 g     F .text	000000c4 OSFlagQuery
00019c44 g     O .rwdata	00000002 OSTaskCreateExtEn
000099cc g     F .text	00000054 _close_r
00017884 g     F .text	0000007c memcmp
0000eed8 g     F .text	00000020 OS_Dummy
00015968 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00021be4 g       *ABS*	00000000 __alt_stack_base
000159b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003954 g     F .text	00000154 __swsetup_r
00020060 g     O .bss	000001e0 OSQTbl
0000b5fc g     F .text	000008e8 .hidden __divdf3
000057f8 g     F .text	00000118 __sfp
00007a30 g     F .text	00000078 __copybits
00018110 g     O .rwdata	00000408 __malloc_av_
00005944 g     F .text	00000004 __sinit_lock_release
0001b860 g     O .bss	00000004 OSTCBHighRdy
0000c13c g     F .text	00000718 .hidden __muldf3
0000810c g     F .text	00000054 __sread
0001b864 g     O .bss	00000004 OSQFreeList
000175b8 g     F .text	00000108 alt_find_file
00016850 g     F .text	000000a4 alt_dev_llist_insert
0000de18 g     F .text	00000120 __malloc_lock
0000db10 g     F .text	000000b0 sbrk
0000e124 g     F .text	00000140 OSEventNameSet
0000554c g     F .text	0000005c _fflush_r
00009a20 g     F .text	000000c4 _calloc_r
0001b868 g     O .bss	00000001 OSRdyGrp
0001b7f8 g       *ABS*	00000000 __bss_start
00006a10 g     F .text	00000128 memset
000009a4 g     F .text	000000cc main
0001b824 g     O .bss	00000004 alt_envp
0001b7fc g     O .bss	00000004 __malloc_max_total_mem
00015908 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000648 g     F .text	0000018c task_call_accel
0000a0a0 g     F .text	00000018 __swbuf
0000040c g     F .text	000000a4 print_pixel
00017fd8 g     O .rodata	00000100 OSUnMapTbl
00000280 g     F .text	00000038 byte_to_disp
00019c3e g     O .rwdata	00000002 OSSemEn
0000051c g     F .text	0000012c calculC
0001108c g     F .text	00000394 OSFlagPost
00008240 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009bd4 g     F .text	00000014 fclose
0000f090 g     F .text	00000110 OS_EventTaskWait
0001d8c0 g     O .bss	00001000 task2_stk
0000fc78 g     F .text	000000cc OS_TaskStatStkChk
00014738 g     F .text	00000150 OSTaskDelReq
00003ca8 g     F .text	00001688 _dtoa_r
00000c4c g     F .text	0000080c _malloc_r
0000a214 g     F .text	00000030 __ascii_wctomb
00019bf4 g     O .rwdata	00000004 alt_errno
0000eb78 g     F .text	00000070 OSStart
0000ddb8 g     F .text	00000060 __env_unlock
00006268 g     F .text	000000c4 _fwalk
00014bd4 g     F .text	000001d4 OSTaskResume
00011e5c g     F .text	000000e8 OSMemQuery
00019c50 g     O .rwdata	00000002 OSTaskStatEn
00019c2a g     O .rwdata	00000002 OSMemMax
00012b94 g     F .text	00000170 OSQPostFront
00000a70 g     F .text	00000084 .hidden __divsi3
0001b869 g     O .bss	00000003 OSRdyTbl
00019c04 g     O .rwdata	00000002 OSDebugEn
00005978 g     F .text	00000124 _malloc_trim_r
00017bcc g       *ABS*	00000000 __CTOR_END__
000004b0 g     F .text	0000006c calculAccel
00019c1c g     O .rwdata	00000002 OSFlagNodeSize
00019c64 g     O .rwdata	00000002 OSTmrCfgMax
00008248 g     F .text	000000dc strcmp
00012150 g     F .text	000001ac OSQCreate
00014888 g     F .text	00000198 OSTaskNameGet
00017bcc g       *ABS*	00000000 __flash_rodata_start
00012d04 g     F .text	0000020c OSQPostOpt
0000ec98 g     F .text	00000220 OSTimeTick
00019c4c g     O .rwdata	00000002 OSTaskMax
00017bcc g       *ABS*	00000000 __DTOR_LIST__
000131c4 g     F .text	000000d8 OSSemCreate
00019c70 g     O .rwdata	00000002 OSTmrWheelSize
0000bee4 g     F .text	00000088 .hidden __nedf2
00019c46 g     O .rwdata	00000002 OSTaskDelEn
00013964 g     F .text	00000110 OSSemQuery
000122fc g     F .text	00000280 OSQDel
000128c0 g     F .text	0000016c OSQPendAbort
000157fc g     F .text	00000038 alt_irq_init
0000daac g     F .text	00000064 alt_release_fd
00017eb8 g     O .rodata	00000100 .hidden __clz_tab
0001b80c g     O .bss	00000004 _PathLocale
00017838 g     F .text	00000014 atexit
0000996c g     F .text	00000060 _write_r
0000ea10 g     F .text	0000008c OSSchedLock
000064a8 g     F .text	00000018 setlocale
000104b0 g     F .text	00000108 OSFlagCreate
00019bd4 g     O .rwdata	00000004 _impure_ptr
0001b81c g     O .bss	00000004 alt_argc
00005330 g     F .text	0000021c __sflush_r
00016954 g     F .text	00000060 _do_dtors
00006494 g     F .text	00000008 __locale_cjk_lang
00019c16 g     O .rwdata	00000002 OSEventMultiEn
000105b8 g     F .text	00000248 OSFlagDel
0001b86c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000765c g     F .text	00000064 __ulp
00010a74 g     F .text	000005b8 OSFlagPend
00019c62 g     O .rwdata	00000002 OSTmrEn
00005960 g     F .text	00000018 __fp_unlock_all
00019be0 g     O .rwdata	00000008 alt_fs_list
0000fa88 g     F .text	00000074 OS_StrCopy
00019c2c g     O .rwdata	00000002 OSMemNameSize
000174c4 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00019c58 g     O .rwdata	00000002 OSTCBPrioTblMax
000064c0 g     F .text	0000000c localeconv
00019c54 g     O .rwdata	00000002 OSTaskStatStkChkEn
000169d4 g     F .text	00000050 alt_ic_isr_register
00019c28 g     O .rwdata	00000002 OSMemEn
00019c32 g     O .rwdata	00000002 OSMutexEn
00019c84 g       *ABS*	00000000 _edata
00021be4 g       *ABS*	00000000 _end
0001b870 g     O .bss	00000001 OSIntNesting
00009be8 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00015f64 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015538 g     F .text	000001d4 OSTimeDlyResume
00010928 g     F .text	0000014c OSFlagNameSet
00014da8 g     F .text	000001c0 OSTaskStkChk
00016aac g     F .text	0000008c alt_ic_irq_disable
00019c2e g     O .rwdata	00000002 OSMemSize
00008168 g     F .text	0000007c __swrite
00019bcc g     O .rwdata	00000004 __malloc_trim_threshold
00006488 g     F .text	0000000c __locale_msgcharset
0001b874 g     O .bss	00000004 OSTCBCur
0001784c g     F .text	00000038 exit
00019c30 g     O .rwdata	00000002 OSMemTblSize
0000632c g     F .text	000000c4 _fwalk_reent
00007460 g     F .text	000001fc __mdiff
00000af4 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000593c g     F .text	00000004 __sfp_lock_release
0000e874 g     F .text	00000058 OSInit
0001514c g     F .text	00000124 OSTaskQuery
0001306c g     F .text	000000a8 OS_QInit
0000fafc g     F .text	00000054 OS_StrLen
00011c70 g     F .text	00000114 OSMemNameSet
00019c4a g     O .rwdata	00000002 OSTaskProfileEn
0001b878 g     O .bss	00000004 OSTime
00020240 g     O .bss	00000800 OSTaskIdleStk
00017b98 g     F .text	00000034 _exit
000166c8 g     F .text	0000012c alt_alarm_start
00010800 g     F .text	00000128 OSFlagNameGet
0001570c g     F .text	0000005c OSTimeGet
000064cc g     F .text	000001bc __smakebuf_r
000015ec g     F .text	00000098 strlen
00017444 g     F .text	00000020 OSTaskSwHook
00016eb4 g     F .text	00000154 open
00020a40 g     O .bss	00000b40 OSEventTbl
0000bf6c g     F .text	000000dc .hidden __gedf2
00021580 g     O .bss	00000510 OSTCBTbl
00013a74 g     F .text	00000100 OSSemSet
00019bdc g     O .rwdata	00000004 __wctomb
00008420 g     F .text	00000018 __sprint_r
000169b4 g     F .text	00000020 alt_icache_flush_all
00019c78 g     O .rwdata	00000004 alt_priority_mask
0001329c g     F .text	00000240 OSSemDel
0001b87c g     O .bss	00000004 OSFlagFreeList
00016a24 g     F .text	00000088 alt_ic_irq_enable
00019c10 g     O .rwdata	00000002 OSEventNameSize
0000387c g     F .text	0000001c __vfprintf_internal
0001b880 g     O .bss	00000001 OSStatRdy
00021a90 g     O .bss	00000054 OSTCBPrioTbl
0000a244 g     F .text	0000005c _wctomb_r
0000dcf4 g     F .text	000000c4 __env_lock
00019c56 g     O .rwdata	00000002 OSTaskSwHookEn
0000c854 g     F .text	000008fc .hidden __subdf3
00006e94 g     F .text	000000b0 __lo0bits
00019c7c g     O .rwdata	00000008 alt_alarm_list
00019c1e g     O .rwdata	00000002 OSFlagWidth
000168f4 g     F .text	00000060 _do_ctors
0001b7f8 g     O .bss	00000004 queue_res
0000a154 g     F .text	000000c0 wcrtomb
0000d3f4 g     F .text	000000d0 close
0001b82c g     O .bss	00000004 alt_envsem
0001b884 g     O .bss	00000004 OSIdleCtrRun
0000eeb8 g     F .text	00000020 OSVersion
00019c68 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d724 g     F .text	00000084 alt_load
00015270 g     F .text	00000070 OS_TaskStkClr
00019c42 g     O .rwdata	00000002 OSTaskCreateEn
0000f4a8 g     F .text	00000068 OS_EventWaitListInit
00009d70 g     F .text	00000080 fputwc
000174e4 g     F .text	00000020 OSTaskIdleHook
00000c38 g     F .text	00000014 free
00005940 g     F .text	00000004 __sinit_lock_acquire
00006c08 g     F .text	00000120 __multadd
00014f68 g     F .text	000001e4 OSTaskSuspend
00006be0 g     F .text	00000028 _Bfree
000002b8 g     F .text	00000070 disp_to_byte
0000fb50 g     F .text	0000005c OS_TaskIdle
00019c6e g     O .rwdata	00000002 OSTmrTblSize
00012f10 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08409114 	ori	at,at,580
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e8cc0 	call	e8cc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	1086b904 	addi	r2,r2,6884
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1086b904 	addi	r2,r2,6884
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	000e9180 	call	e918 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73317 	ldw	r2,-25396(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73317 	ldw	r2,-25396(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d686f214 	ori	gp,gp,7112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10adfe14 	ori	r2,r2,47096

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18c6f914 	ori	r3,r3,7140

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000d7240 	call	d724 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000d8b80 	call	d8b8 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <byte_to_disp>:
	uint8_t r,g,b;
	uint8_t empty; // needed for proper alignment
} pixel;


uint8_t byte_to_disp(uint8_t b){
     280:	defffe04 	addi	sp,sp,-8
     284:	df000115 	stw	fp,4(sp)
     288:	df000104 	addi	fp,sp,4
     28c:	2005883a 	mov	r2,r4
     290:	e0bfff05 	stb	r2,-4(fp)
	return map[b];
     294:	e0ffff03 	ldbu	r3,-4(fp)
     298:	00800074 	movhi	r2,1
     29c:	109ef304 	addi	r2,r2,31692
     2a0:	10c5883a 	add	r2,r2,r3
     2a4:	10800003 	ldbu	r2,0(r2)
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00104 	addi	sp,sp,4
     2b4:	f800283a 	ret

000002b8 <disp_to_byte>:

uint8_t disp_to_byte(uint8_t d){
     2b8:	defffd04 	addi	sp,sp,-12
     2bc:	df000215 	stw	fp,8(sp)
     2c0:	df000204 	addi	fp,sp,8
     2c4:	2005883a 	mov	r2,r4
     2c8:	e0bfff05 	stb	r2,-4(fp)
	for (uint8_t i=0;i<16;i++){
     2cc:	e03ffe05 	stb	zero,-8(fp)
     2d0:	00000d06 	br	308 <disp_to_byte+0x50>
		if (map[i]==d){return i;}
     2d4:	e0fffe03 	ldbu	r3,-8(fp)
     2d8:	00800074 	movhi	r2,1
     2dc:	109ef304 	addi	r2,r2,31692
     2e0:	10c5883a 	add	r2,r2,r3
     2e4:	10800003 	ldbu	r2,0(r2)
     2e8:	10c03fcc 	andi	r3,r2,255
     2ec:	e0bfff03 	ldbu	r2,-4(fp)
     2f0:	1880021e 	bne	r3,r2,2fc <disp_to_byte+0x44>
     2f4:	e0bffe03 	ldbu	r2,-8(fp)
     2f8:	00000706 	br	318 <disp_to_byte+0x60>
uint8_t byte_to_disp(uint8_t b){
	return map[b];
}

uint8_t disp_to_byte(uint8_t d){
	for (uint8_t i=0;i<16;i++){
     2fc:	e0bffe03 	ldbu	r2,-8(fp)
     300:	10800044 	addi	r2,r2,1
     304:	e0bffe05 	stb	r2,-8(fp)
     308:	e0bffe03 	ldbu	r2,-8(fp)
     30c:	10800430 	cmpltui	r2,r2,16
     310:	103ff01e 	bne	r2,zero,2d4 <disp_to_byte+0x1c>
		if (map[i]==d){return i;}
	}
	return 0;
     314:	0005883a 	mov	r2,zero
}
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <print_byte>:

void print_byte(uint8_t val, int index){
     328:	defffb04 	addi	sp,sp,-20
     32c:	dfc00415 	stw	ra,16(sp)
     330:	df000315 	stw	fp,12(sp)
     334:	df000304 	addi	fp,sp,12
     338:	2005883a 	mov	r2,r4
     33c:	e17fff15 	stw	r5,-4(fp)
     340:	e0bffe05 	stb	r2,-8(fp)
//	Index: 0, 1, 2
	uint8_t hi,lo;
	hi = byte_to_disp(val>>4);
     344:	e0bffe03 	ldbu	r2,-8(fp)
     348:	1004d13a 	srli	r2,r2,4
     34c:	10803fcc 	andi	r2,r2,255
     350:	1009883a 	mov	r4,r2
     354:	00002800 	call	280 <byte_to_disp>
     358:	e0bffd05 	stb	r2,-12(fp)
	lo = byte_to_disp(val&0xf);
     35c:	e0bffe03 	ldbu	r2,-8(fp)
     360:	108003cc 	andi	r2,r2,15
     364:	1009883a 	mov	r4,r2
     368:	00002800 	call	280 <byte_to_disp>
     36c:	e0bffd45 	stb	r2,-11(fp)
	switch(index){
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	10c00060 	cmpeqi	r3,r2,1
     378:	18000d1e 	bne	r3,zero,3b0 <print_byte+0x88>
     37c:	10c000a0 	cmpeqi	r3,r2,2
     380:	1800141e 	bne	r3,zero,3d4 <print_byte+0xac>
     384:	10000126 	beq	r2,zero,38c <print_byte+0x64>
	case 2:
		IOWR(NIOS_HEX_5_BASE, 0, hi);
		IOWR(NIOS_HEX_4_BASE, 0, lo);
		break;
	default:
		return;
     388:	00001b06 	br	3f8 <print_byte+0xd0>
	uint8_t hi,lo;
	hi = byte_to_disp(val>>4);
	lo = byte_to_disp(val&0xf);
	switch(index){
	case 0:
		IOWR(NIOS_HEX_1_BASE, 0, hi);
     38c:	e0fffd03 	ldbu	r3,-12(fp)
     390:	00810034 	movhi	r2,1024
     394:	10842804 	addi	r2,r2,4256
     398:	10c00035 	stwio	r3,0(r2)
		IOWR(NIOS_HEX_0_BASE, 0, lo);
     39c:	e0fffd43 	ldbu	r3,-11(fp)
     3a0:	00810034 	movhi	r2,1024
     3a4:	10842c04 	addi	r2,r2,4272
     3a8:	10c00035 	stwio	r3,0(r2)
		break;
     3ac:	00001206 	br	3f8 <print_byte+0xd0>
	case 1:
		IOWR(NIOS_HEX_3_BASE, 0, hi);
     3b0:	e0fffd03 	ldbu	r3,-12(fp)
     3b4:	00810034 	movhi	r2,1024
     3b8:	10842004 	addi	r2,r2,4224
     3bc:	10c00035 	stwio	r3,0(r2)
		IOWR(NIOS_HEX_2_BASE, 0, lo);
     3c0:	e0fffd43 	ldbu	r3,-11(fp)
     3c4:	00810034 	movhi	r2,1024
     3c8:	10842404 	addi	r2,r2,4240
     3cc:	10c00035 	stwio	r3,0(r2)
		break;
     3d0:	00000906 	br	3f8 <print_byte+0xd0>
	case 2:
		IOWR(NIOS_HEX_5_BASE, 0, hi);
     3d4:	e0fffd03 	ldbu	r3,-12(fp)
     3d8:	00810034 	movhi	r2,1024
     3dc:	10841804 	addi	r2,r2,4192
     3e0:	10c00035 	stwio	r3,0(r2)
		IOWR(NIOS_HEX_4_BASE, 0, lo);
     3e4:	e0fffd43 	ldbu	r3,-11(fp)
     3e8:	00810034 	movhi	r2,1024
     3ec:	10841c04 	addi	r2,r2,4208
     3f0:	10c00035 	stwio	r3,0(r2)
		break;
     3f4:	0001883a 	nop
	default:
		return;
	}
}
     3f8:	e037883a 	mov	sp,fp
     3fc:	dfc00117 	ldw	ra,4(sp)
     400:	df000017 	ldw	fp,0(sp)
     404:	dec00204 	addi	sp,sp,8
     408:	f800283a 	ret

0000040c <print_pixel>:

void print_pixel(pixel p, int debug){
     40c:	defffc04 	addi	sp,sp,-16
     410:	dfc00315 	stw	ra,12(sp)
     414:	df000215 	stw	fp,8(sp)
     418:	df000204 	addi	fp,sp,8
     41c:	e13ffe15 	stw	r4,-8(fp)
     420:	e17fff15 	stw	r5,-4(fp)
	print_byte(p.r,2);
     424:	e0bffe03 	ldbu	r2,-8(fp)
     428:	10803fcc 	andi	r2,r2,255
     42c:	01400084 	movi	r5,2
     430:	1009883a 	mov	r4,r2
     434:	00003280 	call	328 <print_byte>
	print_byte(p.g,1);
     438:	e0bffe43 	ldbu	r2,-7(fp)
     43c:	10803fcc 	andi	r2,r2,255
     440:	01400044 	movi	r5,1
     444:	1009883a 	mov	r4,r2
     448:	00003280 	call	328 <print_byte>
	print_byte(p.b,0);
     44c:	e0bffe83 	ldbu	r2,-6(fp)
     450:	10803fcc 	andi	r2,r2,255
     454:	000b883a 	mov	r5,zero
     458:	1009883a 	mov	r4,r2
     45c:	00003280 	call	328 <print_byte>
	if (debug)
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	10000c26 	beq	r2,zero,498 <print_pixel+0x8c>
		printf("R:%x G:%x B:%x\n", p.r, p.g, p.b);
     468:	e0bffe03 	ldbu	r2,-8(fp)
     46c:	10803fcc 	andi	r2,r2,255
     470:	e0fffe43 	ldbu	r3,-7(fp)
     474:	18c03fcc 	andi	r3,r3,255
     478:	e13ffe83 	ldbu	r4,-6(fp)
     47c:	21003fcc 	andi	r4,r4,255
     480:	200f883a 	mov	r7,r4
     484:	180d883a 	mov	r6,r3
     488:	100b883a 	mov	r5,r2
     48c:	01000074 	movhi	r4,1
     490:	211ef704 	addi	r4,r4,31708
     494:	00014880 	call	1488 <printf>
}
     498:	0001883a 	nop
     49c:	e037883a 	mov	sp,fp
     4a0:	dfc00117 	ldw	ra,4(sp)
     4a4:	df000017 	ldw	fp,0(sp)
     4a8:	dec00204 	addi	sp,sp,8
     4ac:	f800283a 	ret

000004b0 <calculAccel>:
#include "system.h"
#include "includes.h"


void calculAccel(pixel image_array[IM_SIZE], pixel *result_address,
		size_t length) {
     4b0:	defffc04 	addi	sp,sp,-16
     4b4:	df000315 	stw	fp,12(sp)
     4b8:	df000304 	addi	fp,sp,12
     4bc:	e13ffd15 	stw	r4,-12(fp)
     4c0:	e17ffe15 	stw	r5,-8(fp)
     4c4:	e1bfff15 	stw	r6,-4(fp)
	// Ecrit l'adresse de base de la zone à calculer
	IOWR_32DIRECT(ACCEL_AVERAGE_0_BASE, 0 * 4, image_array);
     4c8:	e0fffd17 	ldw	r3,-12(fp)
     4cc:	00810034 	movhi	r2,1024
     4d0:	10843804 	addi	r2,r2,4320
     4d4:	10c00035 	stwio	r3,0(r2)
	// Ecrit la longueur
	IOWR_32DIRECT(ACCEL_AVERAGE_0_BASE, 1 * 4, result_address);
     4d8:	e0fffe17 	ldw	r3,-8(fp)
     4dc:	00810034 	movhi	r2,1024
     4e0:	10843904 	addi	r2,r2,4324
     4e4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(ACCEL_AVERAGE_0_BASE, 2 * 4, length);
     4e8:	e0ffff17 	ldw	r3,-4(fp)
     4ec:	00810034 	movhi	r2,1024
     4f0:	10843a04 	addi	r2,r2,4328
     4f4:	10c00035 	stwio	r3,0(r2)
	// ClrDone, start
	IOWR_32DIRECT(ACCEL_AVERAGE_0_BASE, 3 * 4, 0b1101);
     4f8:	00c00344 	movi	r3,13
     4fc:	00810034 	movhi	r2,1024
     500:	10843b04 	addi	r2,r2,4332
     504:	10c00035 	stwio	r3,0(r2)
}
     508:	0001883a 	nop
     50c:	e037883a 	mov	sp,fp
     510:	df000017 	ldw	fp,0(sp)
     514:	dec00104 	addi	sp,sp,4
     518:	f800283a 	ret

0000051c <calculC>:

void calculC(pixel image_array[IM_SIZE], pixel *result_address, size_t length) {
     51c:	defff704 	addi	sp,sp,-36
     520:	dfc00815 	stw	ra,32(sp)
     524:	df000715 	stw	fp,28(sp)
     528:	df000704 	addi	fp,sp,28
     52c:	e13ffd15 	stw	r4,-12(fp)
     530:	e17ffe15 	stw	r5,-8(fp)
     534:	e1bfff15 	stw	r6,-4(fp)
	uint32_t aggreg_r = 0, aggreg_g = 0, aggreg_b = 0;
     538:	e03ff915 	stw	zero,-28(fp)
     53c:	e03ffa15 	stw	zero,-24(fp)
     540:	e03ffb15 	stw	zero,-20(fp)
	for (size_t i = 0; i < length; i++) {
     544:	e03ffc15 	stw	zero,-16(fp)
     548:	00002406 	br	5dc <calculC+0xc0>
		aggreg_r += image_array[i].r;
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	1085883a 	add	r2,r2,r2
     554:	1085883a 	add	r2,r2,r2
     558:	1007883a 	mov	r3,r2
     55c:	e0bffd17 	ldw	r2,-12(fp)
     560:	10c5883a 	add	r2,r2,r3
     564:	10800003 	ldbu	r2,0(r2)
     568:	10803fcc 	andi	r2,r2,255
     56c:	e0fff917 	ldw	r3,-28(fp)
     570:	1885883a 	add	r2,r3,r2
     574:	e0bff915 	stw	r2,-28(fp)
		aggreg_g += image_array[i].g;
     578:	e0bffc17 	ldw	r2,-16(fp)
     57c:	1085883a 	add	r2,r2,r2
     580:	1085883a 	add	r2,r2,r2
     584:	1007883a 	mov	r3,r2
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	10c5883a 	add	r2,r2,r3
     590:	10800043 	ldbu	r2,1(r2)
     594:	10803fcc 	andi	r2,r2,255
     598:	e0fffa17 	ldw	r3,-24(fp)
     59c:	1885883a 	add	r2,r3,r2
     5a0:	e0bffa15 	stw	r2,-24(fp)
		aggreg_b += image_array[i].b;
     5a4:	e0bffc17 	ldw	r2,-16(fp)
     5a8:	1085883a 	add	r2,r2,r2
     5ac:	1085883a 	add	r2,r2,r2
     5b0:	1007883a 	mov	r3,r2
     5b4:	e0bffd17 	ldw	r2,-12(fp)
     5b8:	10c5883a 	add	r2,r2,r3
     5bc:	10800083 	ldbu	r2,2(r2)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	e0fffb17 	ldw	r3,-20(fp)
     5c8:	1885883a 	add	r2,r3,r2
     5cc:	e0bffb15 	stw	r2,-20(fp)
	IOWR_32DIRECT(ACCEL_AVERAGE_0_BASE, 3 * 4, 0b1101);
}

void calculC(pixel image_array[IM_SIZE], pixel *result_address, size_t length) {
	uint32_t aggreg_r = 0, aggreg_g = 0, aggreg_b = 0;
	for (size_t i = 0; i < length; i++) {
     5d0:	e0bffc17 	ldw	r2,-16(fp)
     5d4:	10800044 	addi	r2,r2,1
     5d8:	e0bffc15 	stw	r2,-16(fp)
     5dc:	e0fffc17 	ldw	r3,-16(fp)
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	18bfd936 	bltu	r3,r2,54c <calculC+0x30>
		aggreg_r += image_array[i].r;
		aggreg_g += image_array[i].g;
		aggreg_b += image_array[i].b;
	}
	result_address->r = (uint8_t) (aggreg_r / length);
     5e8:	e17fff17 	ldw	r5,-4(fp)
     5ec:	e13ff917 	ldw	r4,-28(fp)
     5f0:	0000b680 	call	b68 <__udivsi3>
     5f4:	1007883a 	mov	r3,r2
     5f8:	e0bffe17 	ldw	r2,-8(fp)
     5fc:	10c00005 	stb	r3,0(r2)
	result_address->g = (uint8_t) (aggreg_g / length);
     600:	e17fff17 	ldw	r5,-4(fp)
     604:	e13ffa17 	ldw	r4,-24(fp)
     608:	0000b680 	call	b68 <__udivsi3>
     60c:	1007883a 	mov	r3,r2
     610:	e0bffe17 	ldw	r2,-8(fp)
     614:	10c00045 	stb	r3,1(r2)
	result_address->b = (uint8_t) (aggreg_b / length);
     618:	e17fff17 	ldw	r5,-4(fp)
     61c:	e13ffb17 	ldw	r4,-20(fp)
     620:	0000b680 	call	b68 <__udivsi3>
     624:	1007883a 	mov	r3,r2
     628:	e0bffe17 	ldw	r2,-8(fp)
     62c:	10c00085 	stb	r3,2(r2)
}
     630:	0001883a 	nop
     634:	e037883a 	mov	sp,fp
     638:	dfc00117 	ldw	ra,4(sp)
     63c:	df000017 	ldw	fp,0(sp)
     640:	dec00204 	addi	sp,sp,8
     644:	f800283a 	ret

00000648 <task_call_accel>:

#define TASK1_PRIORITY 1
#define TASK2_PRIORITY 2

/* ISR for accelerator: send result to display, then send next image */
void task_call_accel(void* pdata) {
     648:	defff904 	addi	sp,sp,-28
     64c:	dfc00615 	stw	ra,24(sp)
     650:	df000515 	stw	fp,20(sp)
     654:	df000504 	addi	fp,sp,20
     658:	e13fff15 	stw	r4,-4(fp)
	int first = 1;
     65c:	00800044 	movi	r2,1
     660:	e0bffd15 	stw	r2,-12(fp)
	message* prev_msg = NULL;
     664:	e03ffc15 	stw	zero,-16(fp)
	while (1) {
		if (prev_msg) { // skip first iteration
     668:	e0bffc17 	ldw	r2,-16(fp)
     66c:	10001f26 	beq	r2,zero,6ec <task_call_accel+0xa4>
			while (IORD_32DIRECT(ACCEL_AVERAGE_0_BASE, 3 * 4) & 2 == 0) {
     670:	0001883a 	nop
     674:	00810034 	movhi	r2,1024
     678:	10843b04 	addi	r2,r2,4332
     67c:	10800037 	ldwio	r2,0(r2)
			} // wait for previous call to end, except in first iteration
//			printf("accel dest: %x, expected dest: %x\n", (void*)IORD_32DIRECT(ACCEL_AVERAGE_0_BASE, 1*4), (void*)(prev_msg->result));
			print_pixel(*(prev_msg->result), 0);
     680:	e0bffc17 	ldw	r2,-16(fp)
     684:	10800117 	ldw	r2,4(r2)
     688:	10c00003 	ldbu	r3,0(r2)
     68c:	11000043 	ldbu	r4,1(r2)
     690:	2008923a 	slli	r4,r4,8
     694:	20c6b03a 	or	r3,r4,r3
     698:	11000083 	ldbu	r4,2(r2)
     69c:	2008943a 	slli	r4,r4,16
     6a0:	20c6b03a 	or	r3,r4,r3
     6a4:	108000c3 	ldbu	r2,3(r2)
     6a8:	1004963a 	slli	r2,r2,24
     6ac:	10c4b03a 	or	r2,r2,r3
     6b0:	0007883a 	mov	r3,zero
     6b4:	1007883a 	mov	r3,r2
     6b8:	000b883a 	mov	r5,zero
     6bc:	1809883a 	mov	r4,r3
     6c0:	000040c0 	call	40c <print_pixel>
			free(prev_msg->image); // cleanup to avoid bloating memory
     6c4:	e0bffc17 	ldw	r2,-16(fp)
     6c8:	10800017 	ldw	r2,0(r2)
     6cc:	1009883a 	mov	r4,r2
     6d0:	0000c380 	call	c38 <free>
			free(prev_msg->result);
     6d4:	e0bffc17 	ldw	r2,-16(fp)
     6d8:	10800117 	ldw	r2,4(r2)
     6dc:	1009883a 	mov	r4,r2
     6e0:	0000c380 	call	c38 <free>
			free(prev_msg);
     6e4:	e13ffc17 	ldw	r4,-16(fp)
     6e8:	0000c380 	call	c38 <free>
//			printf("freeing: %x %x %x\n", prev_msg, prev_msg->image, prev_msg->result);
		}
		uint8_t err;
		printf("Accel caller waiting for a message...\n");
     6ec:	01000074 	movhi	r4,1
     6f0:	211efb04 	addi	r4,r4,31724
     6f4:	00015840 	call	1584 <puts>
		prev_msg = (message*) OSQPend(queue_res, 0, &err);
     6f8:	d0a70c17 	ldw	r2,-25552(gp)
     6fc:	e0fffe04 	addi	r3,fp,-8
     700:	180d883a 	mov	r6,r3
     704:	000b883a 	mov	r5,zero
     708:	1009883a 	mov	r4,r2
     70c:	00126340 	call	12634 <OSQPend>
     710:	e0bffc15 	stw	r2,-16(fp)
		if (err == OS_NO_ERR) {
     714:	e0bffe03 	ldbu	r2,-8(fp)
     718:	10803fcc 	andi	r2,r2,255
     71c:	1000101e 	bne	r2,zero,760 <task_call_accel+0x118>
			printf("Getting message from queue: %x, (%x->%x), first pix r: %x\n", prev_msg,
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10c00017 	ldw	r3,0(r2)
     728:	e0bffc17 	ldw	r2,-16(fp)
     72c:	11000117 	ldw	r4,4(r2)
					prev_msg->image, prev_msg->result, (prev_msg->image)[0].r);
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800017 	ldw	r2,0(r2)
     738:	10800003 	ldbu	r2,0(r2)
		}
		uint8_t err;
		printf("Accel caller waiting for a message...\n");
		prev_msg = (message*) OSQPend(queue_res, 0, &err);
		if (err == OS_NO_ERR) {
			printf("Getting message from queue: %x, (%x->%x), first pix r: %x\n", prev_msg,
     73c:	10803fcc 	andi	r2,r2,255
     740:	d8800015 	stw	r2,0(sp)
     744:	200f883a 	mov	r7,r4
     748:	180d883a 	mov	r6,r3
     74c:	e17ffc17 	ldw	r5,-16(fp)
     750:	01000074 	movhi	r4,1
     754:	211f0504 	addi	r4,r4,31764
     758:	00014880 	call	1488 <printf>
     75c:	00000306 	br	76c <task_call_accel+0x124>
					prev_msg->image, prev_msg->result, (prev_msg->image)[0].r);
		} else {
			printf("Not getting message\n");
     760:	01000074 	movhi	r4,1
     764:	211f1404 	addi	r4,r4,31824
     768:	00015840 	call	1584 <puts>
		}
		if (!prev_msg->image) {
     76c:	e0bffc17 	ldw	r2,-16(fp)
     770:	10800017 	ldw	r2,0(r2)
     774:	1000041e 	bne	r2,zero,788 <task_call_accel+0x140>
			printf("Received end frame, exiting.\n");
     778:	01000074 	movhi	r4,1
     77c:	211f1904 	addi	r4,r4,31844
     780:	00015840 	call	1584 <puts>
			return;
     784:	00000e06 	br	7c0 <task_call_accel+0x178>
		}
		calculAccel(prev_msg->image, prev_msg->result, IM_SIZE);
     788:	e0bffc17 	ldw	r2,-16(fp)
     78c:	10c00017 	ldw	r3,0(r2)
     790:	e0bffc17 	ldw	r2,-16(fp)
     794:	10800117 	ldw	r2,4(r2)
     798:	01804004 	movi	r6,256
     79c:	100b883a 	mov	r5,r2
     7a0:	1809883a 	mov	r4,r3
     7a4:	00004b00 	call	4b0 <calculAccel>
//		calculC(prev_msg->image, prev_msg->result, IM_SIZE);
		OSTimeDlyHMSM(0, 0, 0, 10); // small delay for visibility
     7a8:	01c00284 	movi	r7,10
     7ac:	000d883a 	mov	r6,zero
     7b0:	000b883a 	mov	r5,zero
     7b4:	0009883a 	mov	r4,zero
     7b8:	00153e40 	call	153e4 <OSTimeDlyHMSM>
	}
     7bc:	003faa06 	br	668 <task_call_accel+0x20>
}
     7c0:	e037883a 	mov	sp,fp
     7c4:	dfc00117 	ldw	ra,4(sp)
     7c8:	df000017 	ldw	fp,0(sp)
     7cc:	dec00204 	addi	sp,sp,8
     7d0:	f800283a 	ret

000007d4 <task_fake_camera>:

/* Generate fake images and post on Queue*/
void task_fake_camera(void* pdata) {
     7d4:	defff604 	addi	sp,sp,-40
     7d8:	dfc00915 	stw	ra,36(sp)
     7dc:	df000815 	stw	fp,32(sp)
     7e0:	df000804 	addi	fp,sp,32
     7e4:	e13fff15 	stw	r4,-4(fp)
	uint8_t val = 1;
     7e8:	00800044 	movi	r2,1
     7ec:	e0bff805 	stb	r2,-32(fp)
	printf("Camera task started...\n");
     7f0:	01000074 	movhi	r4,1
     7f4:	211f2104 	addi	r4,r4,31876
     7f8:	00015840 	call	1584 <puts>
	while (val) { // Stop after 255 images ~= 8.5s
     7fc:	00005706 	br	95c <task_fake_camera+0x188>
		pixel* img = (pixel*) malloc(sizeof(pixel) * IM_SIZE);
     800:	01010004 	movi	r4,1024
     804:	0000c240 	call	c24 <malloc>
     808:	e0bffa15 	stw	r2,-24(fp)
		message* msg = (message*) malloc(sizeof(message));
     80c:	01000204 	movi	r4,8
     810:	0000c240 	call	c24 <malloc>
     814:	e0bffb15 	stw	r2,-20(fp)
		pixel* dest = (pixel*) malloc(sizeof(pixel));
     818:	01000104 	movi	r4,4
     81c:	0000c240 	call	c24 <malloc>
     820:	e0bffc15 	stw	r2,-16(fp)
//		printf("Allocated: %x, %x, %x\n", msg, img, dest);
		dest->r = 0;
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	10000005 	stb	zero,0(r2)
		dest->g = 0;
     82c:	e0bffc17 	ldw	r2,-16(fp)
     830:	10000045 	stb	zero,1(r2)
		dest->b = 0;
     834:	e0bffc17 	ldw	r2,-16(fp)
     838:	10000085 	stb	zero,2(r2)
		dest->empty = 0;
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	100000c5 	stb	zero,3(r2)

		for (int j = 0; j < IM_SIZE; j++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00002506 	br	8e0 <task_fake_camera+0x10c>
			img[j].r = val + 1;
     84c:	e0bff917 	ldw	r2,-28(fp)
     850:	1085883a 	add	r2,r2,r2
     854:	1085883a 	add	r2,r2,r2
     858:	1007883a 	mov	r3,r2
     85c:	e0bffa17 	ldw	r2,-24(fp)
     860:	10c5883a 	add	r2,r2,r3
     864:	e0fff803 	ldbu	r3,-32(fp)
     868:	18c00044 	addi	r3,r3,1
     86c:	10c00005 	stb	r3,0(r2)
			img[j].g = val + 2;
     870:	e0bff917 	ldw	r2,-28(fp)
     874:	1085883a 	add	r2,r2,r2
     878:	1085883a 	add	r2,r2,r2
     87c:	1007883a 	mov	r3,r2
     880:	e0bffa17 	ldw	r2,-24(fp)
     884:	10c5883a 	add	r2,r2,r3
     888:	e0fff803 	ldbu	r3,-32(fp)
     88c:	18c00084 	addi	r3,r3,2
     890:	10c00045 	stb	r3,1(r2)
			img[j].b = val + 3;
     894:	e0bff917 	ldw	r2,-28(fp)
     898:	1085883a 	add	r2,r2,r2
     89c:	1085883a 	add	r2,r2,r2
     8a0:	1007883a 	mov	r3,r2
     8a4:	e0bffa17 	ldw	r2,-24(fp)
     8a8:	10c5883a 	add	r2,r2,r3
     8ac:	e0fff803 	ldbu	r3,-32(fp)
     8b0:	18c000c4 	addi	r3,r3,3
     8b4:	10c00085 	stb	r3,2(r2)
			img[j].empty = 0;
     8b8:	e0bff917 	ldw	r2,-28(fp)
     8bc:	1085883a 	add	r2,r2,r2
     8c0:	1085883a 	add	r2,r2,r2
     8c4:	1007883a 	mov	r3,r2
     8c8:	e0bffa17 	ldw	r2,-24(fp)
     8cc:	10c5883a 	add	r2,r2,r3
     8d0:	100000c5 	stb	zero,3(r2)
		dest->r = 0;
		dest->g = 0;
		dest->b = 0;
		dest->empty = 0;

		for (int j = 0; j < IM_SIZE; j++) {
     8d4:	e0bff917 	ldw	r2,-28(fp)
     8d8:	10800044 	addi	r2,r2,1
     8dc:	e0bff915 	stw	r2,-28(fp)
     8e0:	e0bff917 	ldw	r2,-28(fp)
     8e4:	10804010 	cmplti	r2,r2,256
     8e8:	103fd81e 	bne	r2,zero,84c <task_fake_camera+0x78>
			img[j].r = val + 1;
			img[j].g = val + 2;
			img[j].b = val + 3;
			img[j].empty = 0;
		}
		msg->image = img;
     8ec:	e0bffb17 	ldw	r2,-20(fp)
     8f0:	e0fffa17 	ldw	r3,-24(fp)
     8f4:	10c00015 	stw	r3,0(r2)
		msg->result = dest;
     8f8:	e0bffb17 	ldw	r2,-20(fp)
     8fc:	e0fffc17 	ldw	r3,-16(fp)
     900:	10c00115 	stw	r3,4(r2)
		printf("Posting message: %x, (%x->%x)\n", msg, msg->image, msg->result);
     904:	e0bffb17 	ldw	r2,-20(fp)
     908:	10c00017 	ldw	r3,0(r2)
     90c:	e0bffb17 	ldw	r2,-20(fp)
     910:	10800117 	ldw	r2,4(r2)
     914:	100f883a 	mov	r7,r2
     918:	180d883a 	mov	r6,r3
     91c:	e17ffb17 	ldw	r5,-20(fp)
     920:	01000074 	movhi	r4,1
     924:	211f2704 	addi	r4,r4,31900
     928:	00014880 	call	1488 <printf>
		OSQPost(queue_res, msg);
     92c:	d0a70c17 	ldw	r2,-25552(gp)
     930:	e17ffb17 	ldw	r5,-20(fp)
     934:	1009883a 	mov	r4,r2
     938:	0012a2c0 	call	12a2c <OSQPost>
		OSTimeDlyHMSM(0, 0, 0, 33); // ~30fps
     93c:	01c00844 	movi	r7,33
     940:	000d883a 	mov	r6,zero
     944:	000b883a 	mov	r5,zero
     948:	0009883a 	mov	r4,zero
     94c:	00153e40 	call	153e4 <OSTimeDlyHMSM>
		val++;
     950:	e0bff803 	ldbu	r2,-32(fp)
     954:	10800044 	addi	r2,r2,1
     958:	e0bff805 	stb	r2,-32(fp)

/* Generate fake images and post on Queue*/
void task_fake_camera(void* pdata) {
	uint8_t val = 1;
	printf("Camera task started...\n");
	while (val) { // Stop after 255 images ~= 8.5s
     95c:	e0bff803 	ldbu	r2,-32(fp)
     960:	103fa71e 	bne	r2,zero,800 <task_fake_camera+0x2c>
		printf("Posting message: %x, (%x->%x)\n", msg, msg->image, msg->result);
		OSQPost(queue_res, msg);
		OSTimeDlyHMSM(0, 0, 0, 33); // ~30fps
		val++;
	}
	printf("Posted last image, exiting\n");
     964:	01000074 	movhi	r4,1
     968:	211f2f04 	addi	r4,r4,31932
     96c:	00015840 	call	1584 <puts>
	message mess = { NULL, NULL };
     970:	e03ffd15 	stw	zero,-12(fp)
     974:	e03ffe15 	stw	zero,-8(fp)
	OSQPost(queue_res, &mess);
     978:	d0a70c17 	ldw	r2,-25552(gp)
     97c:	e0fffd04 	addi	r3,fp,-12
     980:	180b883a 	mov	r5,r3
     984:	1009883a 	mov	r4,r2
     988:	0012a2c0 	call	12a2c <OSQPost>
}
     98c:	0001883a 	nop
     990:	e037883a 	mov	sp,fp
     994:	dfc00117 	ldw	ra,4(sp)
     998:	df000017 	ldw	fp,0(sp)
     99c:	dec00204 	addi	sp,sp,8
     9a0:	f800283a 	ret

000009a4 <main>:

int main(void) {
     9a4:	defff904 	addi	sp,sp,-28
     9a8:	dfc00615 	stw	ra,24(sp)
     9ac:	df000515 	stw	fp,20(sp)
     9b0:	df000504 	addi	fp,sp,20
	queue_res = OSQCreate(msg_queue, QUEUE_SIZE);
     9b4:	01410004 	movi	r5,1024
     9b8:	010000b4 	movhi	r4,2
     9bc:	21323004 	addi	r4,r4,-14144
     9c0:	00121500 	call	12150 <OSQCreate>
     9c4:	d0a70c15 	stw	r2,-25552(gp)
	OSTaskCreateExt(task_fake_camera, NULL,
     9c8:	d8000415 	stw	zero,16(sp)
     9cc:	d8000315 	stw	zero,12(sp)
     9d0:	00810004 	movi	r2,1024
     9d4:	d8800215 	stw	r2,8(sp)
     9d8:	008000b4 	movhi	r2,2
     9dc:	10ae3004 	addi	r2,r2,-18240
     9e0:	d8800115 	stw	r2,4(sp)
     9e4:	00800044 	movi	r2,1
     9e8:	d8800015 	stw	r2,0(sp)
     9ec:	01c00044 	movi	r7,1
     9f0:	018000b4 	movhi	r6,2
     9f4:	31b22f04 	addi	r6,r6,-14148
     9f8:	000b883a 	mov	r5,zero
     9fc:	01000034 	movhi	r4,0
     a00:	2101f504 	addi	r4,r4,2004
     a04:	00142100 	call	14210 <OSTaskCreateExt>
			(void *) &task1_stk[TASK_STACKSIZE - 1],
			TASK1_PRIORITY, TASK1_PRIORITY, task1_stk, TASK_STACKSIZE,
			NULL, 0);
	OSTaskCreateExt(task_call_accel, NULL,
     a08:	d8000415 	stw	zero,16(sp)
     a0c:	d8000315 	stw	zero,12(sp)
     a10:	00810004 	movi	r2,1024
     a14:	d8800215 	stw	r2,8(sp)
     a18:	008000b4 	movhi	r2,2
     a1c:	10b63004 	addi	r2,r2,-10048
     a20:	d8800115 	stw	r2,4(sp)
     a24:	00800084 	movi	r2,2
     a28:	d8800015 	stw	r2,0(sp)
     a2c:	01c00084 	movi	r7,2
     a30:	018000b4 	movhi	r6,2
     a34:	31ba2f04 	addi	r6,r6,-5956
     a38:	000b883a 	mov	r5,zero
     a3c:	01000034 	movhi	r4,0
     a40:	21019204 	addi	r4,r4,1608
     a44:	00142100 	call	14210 <OSTaskCreateExt>
			(void *) &task2_stk[TASK_STACKSIZE - 1],
			TASK2_PRIORITY, TASK2_PRIORITY, task2_stk, TASK_STACKSIZE,
			NULL, 0);
	printf("Starting both tasks\n");
     a48:	01000074 	movhi	r4,1
     a4c:	211f3604 	addi	r4,r4,31960
     a50:	00015840 	call	1584 <puts>
//	OSInit();
	OSStart();
     a54:	000eb780 	call	eb78 <OSStart>

	return 0;
     a58:	0005883a 	mov	r2,zero
}
     a5c:	e037883a 	mov	sp,fp
     a60:	dfc00117 	ldw	ra,4(sp)
     a64:	df000017 	ldw	fp,0(sp)
     a68:	dec00204 	addi	sp,sp,8
     a6c:	f800283a 	ret

00000a70 <__divsi3>:
     a70:	20001b16 	blt	r4,zero,ae0 <__divsi3+0x70>
     a74:	000f883a 	mov	r7,zero
     a78:	28001616 	blt	r5,zero,ad4 <__divsi3+0x64>
     a7c:	200d883a 	mov	r6,r4
     a80:	29001a2e 	bgeu	r5,r4,aec <__divsi3+0x7c>
     a84:	00800804 	movi	r2,32
     a88:	00c00044 	movi	r3,1
     a8c:	00000106 	br	a94 <__divsi3+0x24>
     a90:	10000d26 	beq	r2,zero,ac8 <__divsi3+0x58>
     a94:	294b883a 	add	r5,r5,r5
     a98:	10bfffc4 	addi	r2,r2,-1
     a9c:	18c7883a 	add	r3,r3,r3
     aa0:	293ffb36 	bltu	r5,r4,a90 <__divsi3+0x20>
     aa4:	0005883a 	mov	r2,zero
     aa8:	18000726 	beq	r3,zero,ac8 <__divsi3+0x58>
     aac:	0005883a 	mov	r2,zero
     ab0:	31400236 	bltu	r6,r5,abc <__divsi3+0x4c>
     ab4:	314dc83a 	sub	r6,r6,r5
     ab8:	10c4b03a 	or	r2,r2,r3
     abc:	1806d07a 	srli	r3,r3,1
     ac0:	280ad07a 	srli	r5,r5,1
     ac4:	183ffa1e 	bne	r3,zero,ab0 <__divsi3+0x40>
     ac8:	38000126 	beq	r7,zero,ad0 <__divsi3+0x60>
     acc:	0085c83a 	sub	r2,zero,r2
     ad0:	f800283a 	ret
     ad4:	014bc83a 	sub	r5,zero,r5
     ad8:	39c0005c 	xori	r7,r7,1
     adc:	003fe706 	br	a7c <__divsi3+0xc>
     ae0:	0109c83a 	sub	r4,zero,r4
     ae4:	01c00044 	movi	r7,1
     ae8:	003fe306 	br	a78 <__divsi3+0x8>
     aec:	00c00044 	movi	r3,1
     af0:	003fee06 	br	aac <__divsi3+0x3c>

00000af4 <__modsi3>:
     af4:	20001716 	blt	r4,zero,b54 <__modsi3+0x60>
     af8:	000f883a 	mov	r7,zero
     afc:	2005883a 	mov	r2,r4
     b00:	28001216 	blt	r5,zero,b4c <__modsi3+0x58>
     b04:	2900162e 	bgeu	r5,r4,b60 <__modsi3+0x6c>
     b08:	01800804 	movi	r6,32
     b0c:	00c00044 	movi	r3,1
     b10:	00000106 	br	b18 <__modsi3+0x24>
     b14:	30000a26 	beq	r6,zero,b40 <__modsi3+0x4c>
     b18:	294b883a 	add	r5,r5,r5
     b1c:	31bfffc4 	addi	r6,r6,-1
     b20:	18c7883a 	add	r3,r3,r3
     b24:	293ffb36 	bltu	r5,r4,b14 <__modsi3+0x20>
     b28:	18000526 	beq	r3,zero,b40 <__modsi3+0x4c>
     b2c:	1806d07a 	srli	r3,r3,1
     b30:	11400136 	bltu	r2,r5,b38 <__modsi3+0x44>
     b34:	1145c83a 	sub	r2,r2,r5
     b38:	280ad07a 	srli	r5,r5,1
     b3c:	183ffb1e 	bne	r3,zero,b2c <__modsi3+0x38>
     b40:	38000126 	beq	r7,zero,b48 <__modsi3+0x54>
     b44:	0085c83a 	sub	r2,zero,r2
     b48:	f800283a 	ret
     b4c:	014bc83a 	sub	r5,zero,r5
     b50:	003fec06 	br	b04 <__modsi3+0x10>
     b54:	0109c83a 	sub	r4,zero,r4
     b58:	01c00044 	movi	r7,1
     b5c:	003fe706 	br	afc <__modsi3+0x8>
     b60:	00c00044 	movi	r3,1
     b64:	003ff106 	br	b2c <__modsi3+0x38>

00000b68 <__udivsi3>:
     b68:	200d883a 	mov	r6,r4
     b6c:	2900152e 	bgeu	r5,r4,bc4 <__udivsi3+0x5c>
     b70:	28001416 	blt	r5,zero,bc4 <__udivsi3+0x5c>
     b74:	00800804 	movi	r2,32
     b78:	00c00044 	movi	r3,1
     b7c:	00000206 	br	b88 <__udivsi3+0x20>
     b80:	10000e26 	beq	r2,zero,bbc <__udivsi3+0x54>
     b84:	28000516 	blt	r5,zero,b9c <__udivsi3+0x34>
     b88:	294b883a 	add	r5,r5,r5
     b8c:	10bfffc4 	addi	r2,r2,-1
     b90:	18c7883a 	add	r3,r3,r3
     b94:	293ffa36 	bltu	r5,r4,b80 <__udivsi3+0x18>
     b98:	18000826 	beq	r3,zero,bbc <__udivsi3+0x54>
     b9c:	0005883a 	mov	r2,zero
     ba0:	31400236 	bltu	r6,r5,bac <__udivsi3+0x44>
     ba4:	314dc83a 	sub	r6,r6,r5
     ba8:	10c4b03a 	or	r2,r2,r3
     bac:	1806d07a 	srli	r3,r3,1
     bb0:	280ad07a 	srli	r5,r5,1
     bb4:	183ffa1e 	bne	r3,zero,ba0 <__udivsi3+0x38>
     bb8:	f800283a 	ret
     bbc:	0005883a 	mov	r2,zero
     bc0:	f800283a 	ret
     bc4:	00c00044 	movi	r3,1
     bc8:	003ff406 	br	b9c <__udivsi3+0x34>

00000bcc <__umodsi3>:
     bcc:	2005883a 	mov	r2,r4
     bd0:	2900122e 	bgeu	r5,r4,c1c <__umodsi3+0x50>
     bd4:	28001116 	blt	r5,zero,c1c <__umodsi3+0x50>
     bd8:	01800804 	movi	r6,32
     bdc:	00c00044 	movi	r3,1
     be0:	00000206 	br	bec <__umodsi3+0x20>
     be4:	30000c26 	beq	r6,zero,c18 <__umodsi3+0x4c>
     be8:	28000516 	blt	r5,zero,c00 <__umodsi3+0x34>
     bec:	294b883a 	add	r5,r5,r5
     bf0:	31bfffc4 	addi	r6,r6,-1
     bf4:	18c7883a 	add	r3,r3,r3
     bf8:	293ffa36 	bltu	r5,r4,be4 <__umodsi3+0x18>
     bfc:	18000626 	beq	r3,zero,c18 <__umodsi3+0x4c>
     c00:	1806d07a 	srli	r3,r3,1
     c04:	11400136 	bltu	r2,r5,c0c <__umodsi3+0x40>
     c08:	1145c83a 	sub	r2,r2,r5
     c0c:	280ad07a 	srli	r5,r5,1
     c10:	183ffb1e 	bne	r3,zero,c00 <__umodsi3+0x34>
     c14:	f800283a 	ret
     c18:	f800283a 	ret
     c1c:	00c00044 	movi	r3,1
     c20:	003ff706 	br	c00 <__umodsi3+0x34>

00000c24 <malloc>:
     c24:	008000b4 	movhi	r2,2
     c28:	10a6f504 	addi	r2,r2,-25644
     c2c:	200b883a 	mov	r5,r4
     c30:	11000017 	ldw	r4,0(r2)
     c34:	0000c4c1 	jmpi	c4c <_malloc_r>

00000c38 <free>:
     c38:	008000b4 	movhi	r2,2
     c3c:	10a6f504 	addi	r2,r2,-25644
     c40:	200b883a 	mov	r5,r4
     c44:	11000017 	ldw	r4,0(r2)
     c48:	0005a9c1 	jmpi	5a9c <_free_r>

00000c4c <_malloc_r>:
     c4c:	defff504 	addi	sp,sp,-44
     c50:	dc800315 	stw	r18,12(sp)
     c54:	dfc00a15 	stw	ra,40(sp)
     c58:	df000915 	stw	fp,36(sp)
     c5c:	ddc00815 	stw	r23,32(sp)
     c60:	dd800715 	stw	r22,28(sp)
     c64:	dd400615 	stw	r21,24(sp)
     c68:	dd000515 	stw	r20,20(sp)
     c6c:	dcc00415 	stw	r19,16(sp)
     c70:	dc400215 	stw	r17,8(sp)
     c74:	dc000115 	stw	r16,4(sp)
     c78:	288002c4 	addi	r2,r5,11
     c7c:	00c00584 	movi	r3,22
     c80:	2025883a 	mov	r18,r4
     c84:	18807f2e 	bgeu	r3,r2,e84 <_malloc_r+0x238>
     c88:	047ffe04 	movi	r17,-8
     c8c:	1462703a 	and	r17,r2,r17
     c90:	8800a316 	blt	r17,zero,f20 <_malloc_r+0x2d4>
     c94:	8940a236 	bltu	r17,r5,f20 <_malloc_r+0x2d4>
     c98:	000de180 	call	de18 <__malloc_lock>
     c9c:	00807dc4 	movi	r2,503
     ca0:	1441e92e 	bgeu	r2,r17,1448 <_malloc_r+0x7fc>
     ca4:	8804d27a 	srli	r2,r17,9
     ca8:	1000a126 	beq	r2,zero,f30 <_malloc_r+0x2e4>
     cac:	00c00104 	movi	r3,4
     cb0:	18811e36 	bltu	r3,r2,112c <_malloc_r+0x4e0>
     cb4:	8804d1ba 	srli	r2,r17,6
     cb8:	12000e44 	addi	r8,r2,57
     cbc:	11c00e04 	addi	r7,r2,56
     cc0:	4209883a 	add	r4,r8,r8
     cc4:	04c000b4 	movhi	r19,2
     cc8:	2109883a 	add	r4,r4,r4
     ccc:	9ce04404 	addi	r19,r19,-32496
     cd0:	2109883a 	add	r4,r4,r4
     cd4:	9909883a 	add	r4,r19,r4
     cd8:	24000117 	ldw	r16,4(r4)
     cdc:	213ffe04 	addi	r4,r4,-8
     ce0:	24009726 	beq	r4,r16,f40 <_malloc_r+0x2f4>
     ce4:	80800117 	ldw	r2,4(r16)
     ce8:	01bfff04 	movi	r6,-4
     cec:	014003c4 	movi	r5,15
     cf0:	1184703a 	and	r2,r2,r6
     cf4:	1447c83a 	sub	r3,r2,r17
     cf8:	28c00716 	blt	r5,r3,d18 <_malloc_r+0xcc>
     cfc:	1800920e 	bge	r3,zero,f48 <_malloc_r+0x2fc>
     d00:	84000317 	ldw	r16,12(r16)
     d04:	24008e26 	beq	r4,r16,f40 <_malloc_r+0x2f4>
     d08:	80800117 	ldw	r2,4(r16)
     d0c:	1184703a 	and	r2,r2,r6
     d10:	1447c83a 	sub	r3,r2,r17
     d14:	28fff90e 	bge	r5,r3,cfc <_malloc_r+0xb0>
     d18:	3809883a 	mov	r4,r7
     d1c:	018000b4 	movhi	r6,2
     d20:	9c000417 	ldw	r16,16(r19)
     d24:	31a04404 	addi	r6,r6,-32496
     d28:	32000204 	addi	r8,r6,8
     d2c:	82013426 	beq	r16,r8,1200 <_malloc_r+0x5b4>
     d30:	80c00117 	ldw	r3,4(r16)
     d34:	00bfff04 	movi	r2,-4
     d38:	188e703a 	and	r7,r3,r2
     d3c:	3c45c83a 	sub	r2,r7,r17
     d40:	00c003c4 	movi	r3,15
     d44:	18811f16 	blt	r3,r2,11c4 <_malloc_r+0x578>
     d48:	32000515 	stw	r8,20(r6)
     d4c:	32000415 	stw	r8,16(r6)
     d50:	10007f0e 	bge	r2,zero,f50 <_malloc_r+0x304>
     d54:	00807fc4 	movi	r2,511
     d58:	11c0fd36 	bltu	r2,r7,1150 <_malloc_r+0x504>
     d5c:	3806d0fa 	srli	r3,r7,3
     d60:	01c00044 	movi	r7,1
     d64:	30800117 	ldw	r2,4(r6)
     d68:	19400044 	addi	r5,r3,1
     d6c:	294b883a 	add	r5,r5,r5
     d70:	1807d0ba 	srai	r3,r3,2
     d74:	294b883a 	add	r5,r5,r5
     d78:	294b883a 	add	r5,r5,r5
     d7c:	298b883a 	add	r5,r5,r6
     d80:	38c6983a 	sll	r3,r7,r3
     d84:	29c00017 	ldw	r7,0(r5)
     d88:	2a7ffe04 	addi	r9,r5,-8
     d8c:	1886b03a 	or	r3,r3,r2
     d90:	82400315 	stw	r9,12(r16)
     d94:	81c00215 	stw	r7,8(r16)
     d98:	30c00115 	stw	r3,4(r6)
     d9c:	2c000015 	stw	r16,0(r5)
     da0:	3c000315 	stw	r16,12(r7)
     da4:	2005d0ba 	srai	r2,r4,2
     da8:	01400044 	movi	r5,1
     dac:	288a983a 	sll	r5,r5,r2
     db0:	19406f36 	bltu	r3,r5,f70 <_malloc_r+0x324>
     db4:	28c4703a 	and	r2,r5,r3
     db8:	10000a1e 	bne	r2,zero,de4 <_malloc_r+0x198>
     dbc:	00bfff04 	movi	r2,-4
     dc0:	294b883a 	add	r5,r5,r5
     dc4:	2088703a 	and	r4,r4,r2
     dc8:	28c4703a 	and	r2,r5,r3
     dcc:	21000104 	addi	r4,r4,4
     dd0:	1000041e 	bne	r2,zero,de4 <_malloc_r+0x198>
     dd4:	294b883a 	add	r5,r5,r5
     dd8:	28c4703a 	and	r2,r5,r3
     ddc:	21000104 	addi	r4,r4,4
     de0:	103ffc26 	beq	r2,zero,dd4 <_malloc_r+0x188>
     de4:	02bfff04 	movi	r10,-4
     de8:	024003c4 	movi	r9,15
     dec:	21800044 	addi	r6,r4,1
     df0:	318d883a 	add	r6,r6,r6
     df4:	318d883a 	add	r6,r6,r6
     df8:	318d883a 	add	r6,r6,r6
     dfc:	998d883a 	add	r6,r19,r6
     e00:	333ffe04 	addi	r12,r6,-8
     e04:	2017883a 	mov	r11,r4
     e08:	31800104 	addi	r6,r6,4
     e0c:	34000017 	ldw	r16,0(r6)
     e10:	31fffd04 	addi	r7,r6,-12
     e14:	81c0041e 	bne	r16,r7,e28 <_malloc_r+0x1dc>
     e18:	0000fb06 	br	1208 <_malloc_r+0x5bc>
     e1c:	1801030e 	bge	r3,zero,122c <_malloc_r+0x5e0>
     e20:	84000317 	ldw	r16,12(r16)
     e24:	81c0f826 	beq	r16,r7,1208 <_malloc_r+0x5bc>
     e28:	80800117 	ldw	r2,4(r16)
     e2c:	1284703a 	and	r2,r2,r10
     e30:	1447c83a 	sub	r3,r2,r17
     e34:	48fff90e 	bge	r9,r3,e1c <_malloc_r+0x1d0>
     e38:	80800317 	ldw	r2,12(r16)
     e3c:	81000217 	ldw	r4,8(r16)
     e40:	89400054 	ori	r5,r17,1
     e44:	81400115 	stw	r5,4(r16)
     e48:	20800315 	stw	r2,12(r4)
     e4c:	11000215 	stw	r4,8(r2)
     e50:	8463883a 	add	r17,r16,r17
     e54:	9c400515 	stw	r17,20(r19)
     e58:	9c400415 	stw	r17,16(r19)
     e5c:	18800054 	ori	r2,r3,1
     e60:	88800115 	stw	r2,4(r17)
     e64:	8a000315 	stw	r8,12(r17)
     e68:	8a000215 	stw	r8,8(r17)
     e6c:	88e3883a 	add	r17,r17,r3
     e70:	88c00015 	stw	r3,0(r17)
     e74:	9009883a 	mov	r4,r18
     e78:	000df380 	call	df38 <__malloc_unlock>
     e7c:	80800204 	addi	r2,r16,8
     e80:	00001b06 	br	ef0 <_malloc_r+0x2a4>
     e84:	04400404 	movi	r17,16
     e88:	89402536 	bltu	r17,r5,f20 <_malloc_r+0x2d4>
     e8c:	000de180 	call	de18 <__malloc_lock>
     e90:	00800184 	movi	r2,6
     e94:	01000084 	movi	r4,2
     e98:	04c000b4 	movhi	r19,2
     e9c:	1085883a 	add	r2,r2,r2
     ea0:	9ce04404 	addi	r19,r19,-32496
     ea4:	1085883a 	add	r2,r2,r2
     ea8:	9885883a 	add	r2,r19,r2
     eac:	14000117 	ldw	r16,4(r2)
     eb0:	10fffe04 	addi	r3,r2,-8
     eb4:	80c0d926 	beq	r16,r3,121c <_malloc_r+0x5d0>
     eb8:	80c00117 	ldw	r3,4(r16)
     ebc:	81000317 	ldw	r4,12(r16)
     ec0:	00bfff04 	movi	r2,-4
     ec4:	1884703a 	and	r2,r3,r2
     ec8:	81400217 	ldw	r5,8(r16)
     ecc:	8085883a 	add	r2,r16,r2
     ed0:	10c00117 	ldw	r3,4(r2)
     ed4:	29000315 	stw	r4,12(r5)
     ed8:	21400215 	stw	r5,8(r4)
     edc:	18c00054 	ori	r3,r3,1
     ee0:	10c00115 	stw	r3,4(r2)
     ee4:	9009883a 	mov	r4,r18
     ee8:	000df380 	call	df38 <__malloc_unlock>
     eec:	80800204 	addi	r2,r16,8
     ef0:	dfc00a17 	ldw	ra,40(sp)
     ef4:	df000917 	ldw	fp,36(sp)
     ef8:	ddc00817 	ldw	r23,32(sp)
     efc:	dd800717 	ldw	r22,28(sp)
     f00:	dd400617 	ldw	r21,24(sp)
     f04:	dd000517 	ldw	r20,20(sp)
     f08:	dcc00417 	ldw	r19,16(sp)
     f0c:	dc800317 	ldw	r18,12(sp)
     f10:	dc400217 	ldw	r17,8(sp)
     f14:	dc000117 	ldw	r16,4(sp)
     f18:	dec00b04 	addi	sp,sp,44
     f1c:	f800283a 	ret
     f20:	00800304 	movi	r2,12
     f24:	90800015 	stw	r2,0(r18)
     f28:	0005883a 	mov	r2,zero
     f2c:	003ff006 	br	ef0 <_malloc_r+0x2a4>
     f30:	01002004 	movi	r4,128
     f34:	02001004 	movi	r8,64
     f38:	01c00fc4 	movi	r7,63
     f3c:	003f6106 	br	cc4 <_malloc_r+0x78>
     f40:	4009883a 	mov	r4,r8
     f44:	003f7506 	br	d1c <_malloc_r+0xd0>
     f48:	81000317 	ldw	r4,12(r16)
     f4c:	003fde06 	br	ec8 <_malloc_r+0x27c>
     f50:	81c5883a 	add	r2,r16,r7
     f54:	11400117 	ldw	r5,4(r2)
     f58:	9009883a 	mov	r4,r18
     f5c:	29400054 	ori	r5,r5,1
     f60:	11400115 	stw	r5,4(r2)
     f64:	000df380 	call	df38 <__malloc_unlock>
     f68:	80800204 	addi	r2,r16,8
     f6c:	003fe006 	br	ef0 <_malloc_r+0x2a4>
     f70:	9c000217 	ldw	r16,8(r19)
     f74:	00bfff04 	movi	r2,-4
     f78:	85800117 	ldw	r22,4(r16)
     f7c:	b0ac703a 	and	r22,r22,r2
     f80:	b4400336 	bltu	r22,r17,f90 <_malloc_r+0x344>
     f84:	b445c83a 	sub	r2,r22,r17
     f88:	00c003c4 	movi	r3,15
     f8c:	18805d16 	blt	r3,r2,1104 <_malloc_r+0x4b8>
     f90:	05c000b4 	movhi	r23,2
     f94:	008000b4 	movhi	r2,2
     f98:	10ae0104 	addi	r2,r2,-18428
     f9c:	bde6f204 	addi	r23,r23,-25656
     fa0:	15400017 	ldw	r21,0(r2)
     fa4:	b8c00017 	ldw	r3,0(r23)
     fa8:	00bfffc4 	movi	r2,-1
     fac:	858d883a 	add	r6,r16,r22
     fb0:	8d6b883a 	add	r21,r17,r21
     fb4:	1880ea26 	beq	r3,r2,1360 <_malloc_r+0x714>
     fb8:	ad4403c4 	addi	r21,r21,4111
     fbc:	00bc0004 	movi	r2,-4096
     fc0:	a8aa703a 	and	r21,r21,r2
     fc4:	a80b883a 	mov	r5,r21
     fc8:	9009883a 	mov	r4,r18
     fcc:	d9800015 	stw	r6,0(sp)
     fd0:	00015980 	call	1598 <_sbrk_r>
     fd4:	1029883a 	mov	r20,r2
     fd8:	00bfffc4 	movi	r2,-1
     fdc:	d9800017 	ldw	r6,0(sp)
     fe0:	a080e826 	beq	r20,r2,1384 <_malloc_r+0x738>
     fe4:	a180a636 	bltu	r20,r6,1280 <_malloc_r+0x634>
     fe8:	070000b4 	movhi	fp,2
     fec:	e72e2604 	addi	fp,fp,-18280
     ff0:	e0800017 	ldw	r2,0(fp)
     ff4:	a887883a 	add	r3,r21,r2
     ff8:	e0c00015 	stw	r3,0(fp)
     ffc:	3500e626 	beq	r6,r20,1398 <_malloc_r+0x74c>
    1000:	b9000017 	ldw	r4,0(r23)
    1004:	00bfffc4 	movi	r2,-1
    1008:	2080ee26 	beq	r4,r2,13c4 <_malloc_r+0x778>
    100c:	a185c83a 	sub	r2,r20,r6
    1010:	10c5883a 	add	r2,r2,r3
    1014:	e0800015 	stw	r2,0(fp)
    1018:	a0c001cc 	andi	r3,r20,7
    101c:	1800bc26 	beq	r3,zero,1310 <_malloc_r+0x6c4>
    1020:	a0e9c83a 	sub	r20,r20,r3
    1024:	00840204 	movi	r2,4104
    1028:	a5000204 	addi	r20,r20,8
    102c:	10c7c83a 	sub	r3,r2,r3
    1030:	a545883a 	add	r2,r20,r21
    1034:	1083ffcc 	andi	r2,r2,4095
    1038:	18abc83a 	sub	r21,r3,r2
    103c:	a80b883a 	mov	r5,r21
    1040:	9009883a 	mov	r4,r18
    1044:	00015980 	call	1598 <_sbrk_r>
    1048:	00ffffc4 	movi	r3,-1
    104c:	10c0e126 	beq	r2,r3,13d4 <_malloc_r+0x788>
    1050:	1505c83a 	sub	r2,r2,r20
    1054:	1545883a 	add	r2,r2,r21
    1058:	10800054 	ori	r2,r2,1
    105c:	e0c00017 	ldw	r3,0(fp)
    1060:	9d000215 	stw	r20,8(r19)
    1064:	a0800115 	stw	r2,4(r20)
    1068:	a8c7883a 	add	r3,r21,r3
    106c:	e0c00015 	stw	r3,0(fp)
    1070:	84c00e26 	beq	r16,r19,10ac <_malloc_r+0x460>
    1074:	018003c4 	movi	r6,15
    1078:	3580a72e 	bgeu	r6,r22,1318 <_malloc_r+0x6cc>
    107c:	81400117 	ldw	r5,4(r16)
    1080:	013ffe04 	movi	r4,-8
    1084:	b0bffd04 	addi	r2,r22,-12
    1088:	1104703a 	and	r2,r2,r4
    108c:	2900004c 	andi	r4,r5,1
    1090:	2088b03a 	or	r4,r4,r2
    1094:	81000115 	stw	r4,4(r16)
    1098:	01400144 	movi	r5,5
    109c:	8089883a 	add	r4,r16,r2
    10a0:	21400115 	stw	r5,4(r4)
    10a4:	21400215 	stw	r5,8(r4)
    10a8:	3080cd36 	bltu	r6,r2,13e0 <_malloc_r+0x794>
    10ac:	008000b4 	movhi	r2,2
    10b0:	10ae0004 	addi	r2,r2,-18432
    10b4:	11000017 	ldw	r4,0(r2)
    10b8:	20c0012e 	bgeu	r4,r3,10c0 <_malloc_r+0x474>
    10bc:	10c00015 	stw	r3,0(r2)
    10c0:	008000b4 	movhi	r2,2
    10c4:	10adff04 	addi	r2,r2,-18436
    10c8:	11000017 	ldw	r4,0(r2)
    10cc:	9c000217 	ldw	r16,8(r19)
    10d0:	20c0012e 	bgeu	r4,r3,10d8 <_malloc_r+0x48c>
    10d4:	10c00015 	stw	r3,0(r2)
    10d8:	80c00117 	ldw	r3,4(r16)
    10dc:	00bfff04 	movi	r2,-4
    10e0:	1886703a 	and	r3,r3,r2
    10e4:	1c45c83a 	sub	r2,r3,r17
    10e8:	1c400236 	bltu	r3,r17,10f4 <_malloc_r+0x4a8>
    10ec:	00c003c4 	movi	r3,15
    10f0:	18800416 	blt	r3,r2,1104 <_malloc_r+0x4b8>
    10f4:	9009883a 	mov	r4,r18
    10f8:	000df380 	call	df38 <__malloc_unlock>
    10fc:	0005883a 	mov	r2,zero
    1100:	003f7b06 	br	ef0 <_malloc_r+0x2a4>
    1104:	88c00054 	ori	r3,r17,1
    1108:	80c00115 	stw	r3,4(r16)
    110c:	8463883a 	add	r17,r16,r17
    1110:	10800054 	ori	r2,r2,1
    1114:	9c400215 	stw	r17,8(r19)
    1118:	88800115 	stw	r2,4(r17)
    111c:	9009883a 	mov	r4,r18
    1120:	000df380 	call	df38 <__malloc_unlock>
    1124:	80800204 	addi	r2,r16,8
    1128:	003f7106 	br	ef0 <_malloc_r+0x2a4>
    112c:	00c00504 	movi	r3,20
    1130:	18804a2e 	bgeu	r3,r2,125c <_malloc_r+0x610>
    1134:	00c01504 	movi	r3,84
    1138:	18806e36 	bltu	r3,r2,12f4 <_malloc_r+0x6a8>
    113c:	8804d33a 	srli	r2,r17,12
    1140:	12001bc4 	addi	r8,r2,111
    1144:	11c01b84 	addi	r7,r2,110
    1148:	4209883a 	add	r4,r8,r8
    114c:	003edd06 	br	cc4 <_malloc_r+0x78>
    1150:	3804d27a 	srli	r2,r7,9
    1154:	00c00104 	movi	r3,4
    1158:	1880442e 	bgeu	r3,r2,126c <_malloc_r+0x620>
    115c:	00c00504 	movi	r3,20
    1160:	18808136 	bltu	r3,r2,1368 <_malloc_r+0x71c>
    1164:	11401704 	addi	r5,r2,92
    1168:	10c016c4 	addi	r3,r2,91
    116c:	294b883a 	add	r5,r5,r5
    1170:	294b883a 	add	r5,r5,r5
    1174:	294b883a 	add	r5,r5,r5
    1178:	994b883a 	add	r5,r19,r5
    117c:	28800017 	ldw	r2,0(r5)
    1180:	018000b4 	movhi	r6,2
    1184:	297ffe04 	addi	r5,r5,-8
    1188:	31a04404 	addi	r6,r6,-32496
    118c:	28806526 	beq	r5,r2,1324 <_malloc_r+0x6d8>
    1190:	01bfff04 	movi	r6,-4
    1194:	10c00117 	ldw	r3,4(r2)
    1198:	1986703a 	and	r3,r3,r6
    119c:	38c0022e 	bgeu	r7,r3,11a8 <_malloc_r+0x55c>
    11a0:	10800217 	ldw	r2,8(r2)
    11a4:	28bffb1e 	bne	r5,r2,1194 <_malloc_r+0x548>
    11a8:	11400317 	ldw	r5,12(r2)
    11ac:	98c00117 	ldw	r3,4(r19)
    11b0:	81400315 	stw	r5,12(r16)
    11b4:	80800215 	stw	r2,8(r16)
    11b8:	2c000215 	stw	r16,8(r5)
    11bc:	14000315 	stw	r16,12(r2)
    11c0:	003ef806 	br	da4 <_malloc_r+0x158>
    11c4:	88c00054 	ori	r3,r17,1
    11c8:	80c00115 	stw	r3,4(r16)
    11cc:	8463883a 	add	r17,r16,r17
    11d0:	34400515 	stw	r17,20(r6)
    11d4:	34400415 	stw	r17,16(r6)
    11d8:	10c00054 	ori	r3,r2,1
    11dc:	8a000315 	stw	r8,12(r17)
    11e0:	8a000215 	stw	r8,8(r17)
    11e4:	88c00115 	stw	r3,4(r17)
    11e8:	88a3883a 	add	r17,r17,r2
    11ec:	88800015 	stw	r2,0(r17)
    11f0:	9009883a 	mov	r4,r18
    11f4:	000df380 	call	df38 <__malloc_unlock>
    11f8:	80800204 	addi	r2,r16,8
    11fc:	003f3c06 	br	ef0 <_malloc_r+0x2a4>
    1200:	30c00117 	ldw	r3,4(r6)
    1204:	003ee706 	br	da4 <_malloc_r+0x158>
    1208:	5ac00044 	addi	r11,r11,1
    120c:	588000cc 	andi	r2,r11,3
    1210:	31800204 	addi	r6,r6,8
    1214:	103efd1e 	bne	r2,zero,e0c <_malloc_r+0x1c0>
    1218:	00002406 	br	12ac <_malloc_r+0x660>
    121c:	14000317 	ldw	r16,12(r2)
    1220:	143f251e 	bne	r2,r16,eb8 <_malloc_r+0x26c>
    1224:	21000084 	addi	r4,r4,2
    1228:	003ebc06 	br	d1c <_malloc_r+0xd0>
    122c:	8085883a 	add	r2,r16,r2
    1230:	10c00117 	ldw	r3,4(r2)
    1234:	81000317 	ldw	r4,12(r16)
    1238:	81400217 	ldw	r5,8(r16)
    123c:	18c00054 	ori	r3,r3,1
    1240:	10c00115 	stw	r3,4(r2)
    1244:	29000315 	stw	r4,12(r5)
    1248:	21400215 	stw	r5,8(r4)
    124c:	9009883a 	mov	r4,r18
    1250:	000df380 	call	df38 <__malloc_unlock>
    1254:	80800204 	addi	r2,r16,8
    1258:	003f2506 	br	ef0 <_malloc_r+0x2a4>
    125c:	12001704 	addi	r8,r2,92
    1260:	11c016c4 	addi	r7,r2,91
    1264:	4209883a 	add	r4,r8,r8
    1268:	003e9606 	br	cc4 <_malloc_r+0x78>
    126c:	3804d1ba 	srli	r2,r7,6
    1270:	11400e44 	addi	r5,r2,57
    1274:	10c00e04 	addi	r3,r2,56
    1278:	294b883a 	add	r5,r5,r5
    127c:	003fbc06 	br	1170 <_malloc_r+0x524>
    1280:	84ff5926 	beq	r16,r19,fe8 <_malloc_r+0x39c>
    1284:	008000b4 	movhi	r2,2
    1288:	10a04404 	addi	r2,r2,-32496
    128c:	14000217 	ldw	r16,8(r2)
    1290:	00bfff04 	movi	r2,-4
    1294:	80c00117 	ldw	r3,4(r16)
    1298:	1886703a 	and	r3,r3,r2
    129c:	003f9106 	br	10e4 <_malloc_r+0x498>
    12a0:	60800217 	ldw	r2,8(r12)
    12a4:	213fffc4 	addi	r4,r4,-1
    12a8:	1300651e 	bne	r2,r12,1440 <_malloc_r+0x7f4>
    12ac:	208000cc 	andi	r2,r4,3
    12b0:	633ffe04 	addi	r12,r12,-8
    12b4:	103ffa1e 	bne	r2,zero,12a0 <_malloc_r+0x654>
    12b8:	98800117 	ldw	r2,4(r19)
    12bc:	0146303a 	nor	r3,zero,r5
    12c0:	1884703a 	and	r2,r3,r2
    12c4:	98800115 	stw	r2,4(r19)
    12c8:	294b883a 	add	r5,r5,r5
    12cc:	117f2836 	bltu	r2,r5,f70 <_malloc_r+0x324>
    12d0:	283f2726 	beq	r5,zero,f70 <_malloc_r+0x324>
    12d4:	2886703a 	and	r3,r5,r2
    12d8:	5809883a 	mov	r4,r11
    12dc:	183ec31e 	bne	r3,zero,dec <_malloc_r+0x1a0>
    12e0:	294b883a 	add	r5,r5,r5
    12e4:	2886703a 	and	r3,r5,r2
    12e8:	21000104 	addi	r4,r4,4
    12ec:	183ffc26 	beq	r3,zero,12e0 <_malloc_r+0x694>
    12f0:	003ebe06 	br	dec <_malloc_r+0x1a0>
    12f4:	00c05504 	movi	r3,340
    12f8:	18801236 	bltu	r3,r2,1344 <_malloc_r+0x6f8>
    12fc:	8804d3fa 	srli	r2,r17,15
    1300:	12001e04 	addi	r8,r2,120
    1304:	11c01dc4 	addi	r7,r2,119
    1308:	4209883a 	add	r4,r8,r8
    130c:	003e6d06 	br	cc4 <_malloc_r+0x78>
    1310:	00c40004 	movi	r3,4096
    1314:	003f4606 	br	1030 <_malloc_r+0x3e4>
    1318:	00800044 	movi	r2,1
    131c:	a0800115 	stw	r2,4(r20)
    1320:	003f7406 	br	10f4 <_malloc_r+0x4a8>
    1324:	1805d0ba 	srai	r2,r3,2
    1328:	01c00044 	movi	r7,1
    132c:	30c00117 	ldw	r3,4(r6)
    1330:	388e983a 	sll	r7,r7,r2
    1334:	2805883a 	mov	r2,r5
    1338:	38c6b03a 	or	r3,r7,r3
    133c:	30c00115 	stw	r3,4(r6)
    1340:	003f9b06 	br	11b0 <_malloc_r+0x564>
    1344:	00c15504 	movi	r3,1364
    1348:	18801a36 	bltu	r3,r2,13b4 <_malloc_r+0x768>
    134c:	8804d4ba 	srli	r2,r17,18
    1350:	12001f44 	addi	r8,r2,125
    1354:	11c01f04 	addi	r7,r2,124
    1358:	4209883a 	add	r4,r8,r8
    135c:	003e5906 	br	cc4 <_malloc_r+0x78>
    1360:	ad400404 	addi	r21,r21,16
    1364:	003f1706 	br	fc4 <_malloc_r+0x378>
    1368:	00c01504 	movi	r3,84
    136c:	18802336 	bltu	r3,r2,13fc <_malloc_r+0x7b0>
    1370:	3804d33a 	srli	r2,r7,12
    1374:	11401bc4 	addi	r5,r2,111
    1378:	10c01b84 	addi	r3,r2,110
    137c:	294b883a 	add	r5,r5,r5
    1380:	003f7b06 	br	1170 <_malloc_r+0x524>
    1384:	9c000217 	ldw	r16,8(r19)
    1388:	00bfff04 	movi	r2,-4
    138c:	80c00117 	ldw	r3,4(r16)
    1390:	1886703a 	and	r3,r3,r2
    1394:	003f5306 	br	10e4 <_malloc_r+0x498>
    1398:	3083ffcc 	andi	r2,r6,4095
    139c:	103f181e 	bne	r2,zero,1000 <_malloc_r+0x3b4>
    13a0:	99000217 	ldw	r4,8(r19)
    13a4:	b545883a 	add	r2,r22,r21
    13a8:	10800054 	ori	r2,r2,1
    13ac:	20800115 	stw	r2,4(r4)
    13b0:	003f3e06 	br	10ac <_malloc_r+0x460>
    13b4:	01003f84 	movi	r4,254
    13b8:	02001fc4 	movi	r8,127
    13bc:	01c01f84 	movi	r7,126
    13c0:	003e4006 	br	cc4 <_malloc_r+0x78>
    13c4:	008000b4 	movhi	r2,2
    13c8:	10a6f204 	addi	r2,r2,-25656
    13cc:	15000015 	stw	r20,0(r2)
    13d0:	003f1106 	br	1018 <_malloc_r+0x3cc>
    13d4:	00800044 	movi	r2,1
    13d8:	002b883a 	mov	r21,zero
    13dc:	003f1f06 	br	105c <_malloc_r+0x410>
    13e0:	81400204 	addi	r5,r16,8
    13e4:	9009883a 	mov	r4,r18
    13e8:	0005a9c0 	call	5a9c <_free_r>
    13ec:	008000b4 	movhi	r2,2
    13f0:	10ae2604 	addi	r2,r2,-18280
    13f4:	10c00017 	ldw	r3,0(r2)
    13f8:	003f2c06 	br	10ac <_malloc_r+0x460>
    13fc:	00c05504 	movi	r3,340
    1400:	18800536 	bltu	r3,r2,1418 <_malloc_r+0x7cc>
    1404:	3804d3fa 	srli	r2,r7,15
    1408:	11401e04 	addi	r5,r2,120
    140c:	10c01dc4 	addi	r3,r2,119
    1410:	294b883a 	add	r5,r5,r5
    1414:	003f5606 	br	1170 <_malloc_r+0x524>
    1418:	00c15504 	movi	r3,1364
    141c:	18800536 	bltu	r3,r2,1434 <_malloc_r+0x7e8>
    1420:	3804d4ba 	srli	r2,r7,18
    1424:	11401f44 	addi	r5,r2,125
    1428:	10c01f04 	addi	r3,r2,124
    142c:	294b883a 	add	r5,r5,r5
    1430:	003f4f06 	br	1170 <_malloc_r+0x524>
    1434:	01403f84 	movi	r5,254
    1438:	00c01f84 	movi	r3,126
    143c:	003f4c06 	br	1170 <_malloc_r+0x524>
    1440:	98800117 	ldw	r2,4(r19)
    1444:	003fa006 	br	12c8 <_malloc_r+0x67c>
    1448:	8808d0fa 	srli	r4,r17,3
    144c:	20800044 	addi	r2,r4,1
    1450:	1085883a 	add	r2,r2,r2
    1454:	003e9006 	br	e98 <_malloc_r+0x24c>

00001458 <_printf_r>:
    1458:	defffd04 	addi	sp,sp,-12
    145c:	2805883a 	mov	r2,r5
    1460:	dfc00015 	stw	ra,0(sp)
    1464:	d9800115 	stw	r6,4(sp)
    1468:	d9c00215 	stw	r7,8(sp)
    146c:	21400217 	ldw	r5,8(r4)
    1470:	d9c00104 	addi	r7,sp,4
    1474:	100d883a 	mov	r6,r2
    1478:	00016840 	call	1684 <___vfprintf_internal_r>
    147c:	dfc00017 	ldw	ra,0(sp)
    1480:	dec00304 	addi	sp,sp,12
    1484:	f800283a 	ret

00001488 <printf>:
    1488:	defffc04 	addi	sp,sp,-16
    148c:	dfc00015 	stw	ra,0(sp)
    1490:	d9400115 	stw	r5,4(sp)
    1494:	d9800215 	stw	r6,8(sp)
    1498:	d9c00315 	stw	r7,12(sp)
    149c:	008000b4 	movhi	r2,2
    14a0:	10a6f504 	addi	r2,r2,-25644
    14a4:	10800017 	ldw	r2,0(r2)
    14a8:	200b883a 	mov	r5,r4
    14ac:	d9800104 	addi	r6,sp,4
    14b0:	11000217 	ldw	r4,8(r2)
    14b4:	000387c0 	call	387c <__vfprintf_internal>
    14b8:	dfc00017 	ldw	ra,0(sp)
    14bc:	dec00404 	addi	sp,sp,16
    14c0:	f800283a 	ret

000014c4 <_puts_r>:
    14c4:	defff604 	addi	sp,sp,-40
    14c8:	dc000715 	stw	r16,28(sp)
    14cc:	2021883a 	mov	r16,r4
    14d0:	2809883a 	mov	r4,r5
    14d4:	dc400815 	stw	r17,32(sp)
    14d8:	dfc00915 	stw	ra,36(sp)
    14dc:	2823883a 	mov	r17,r5
    14e0:	00015ec0 	call	15ec <strlen>
    14e4:	10c00044 	addi	r3,r2,1
    14e8:	d8800115 	stw	r2,4(sp)
    14ec:	00800074 	movhi	r2,1
    14f0:	109f3b04 	addi	r2,r2,31980
    14f4:	d8800215 	stw	r2,8(sp)
    14f8:	00800044 	movi	r2,1
    14fc:	d8800315 	stw	r2,12(sp)
    1500:	00800084 	movi	r2,2
    1504:	dc400015 	stw	r17,0(sp)
    1508:	d8c00615 	stw	r3,24(sp)
    150c:	dec00415 	stw	sp,16(sp)
    1510:	d8800515 	stw	r2,20(sp)
    1514:	80000226 	beq	r16,zero,1520 <_puts_r+0x5c>
    1518:	80800e17 	ldw	r2,56(r16)
    151c:	10001426 	beq	r2,zero,1570 <_puts_r+0xac>
    1520:	81400217 	ldw	r5,8(r16)
    1524:	2880030b 	ldhu	r2,12(r5)
    1528:	10c8000c 	andi	r3,r2,8192
    152c:	1800061e 	bne	r3,zero,1548 <_puts_r+0x84>
    1530:	29001917 	ldw	r4,100(r5)
    1534:	00f7ffc4 	movi	r3,-8193
    1538:	10880014 	ori	r2,r2,8192
    153c:	20c6703a 	and	r3,r4,r3
    1540:	2880030d 	sth	r2,12(r5)
    1544:	28c01915 	stw	r3,100(r5)
    1548:	d9800404 	addi	r6,sp,16
    154c:	8009883a 	mov	r4,r16
    1550:	0005dac0 	call	5dac <__sfvwrite_r>
    1554:	1000091e 	bne	r2,zero,157c <_puts_r+0xb8>
    1558:	00800284 	movi	r2,10
    155c:	dfc00917 	ldw	ra,36(sp)
    1560:	dc400817 	ldw	r17,32(sp)
    1564:	dc000717 	ldw	r16,28(sp)
    1568:	dec00a04 	addi	sp,sp,40
    156c:	f800283a 	ret
    1570:	8009883a 	mov	r4,r16
    1574:	00059280 	call	5928 <__sinit>
    1578:	003fe906 	br	1520 <_puts_r+0x5c>
    157c:	00bfffc4 	movi	r2,-1
    1580:	003ff606 	br	155c <_puts_r+0x98>

00001584 <puts>:
    1584:	008000b4 	movhi	r2,2
    1588:	10a6f504 	addi	r2,r2,-25644
    158c:	200b883a 	mov	r5,r4
    1590:	11000017 	ldw	r4,0(r2)
    1594:	00014c41 	jmpi	14c4 <_puts_r>

00001598 <_sbrk_r>:
    1598:	defffd04 	addi	sp,sp,-12
    159c:	dc000015 	stw	r16,0(sp)
    15a0:	040000b4 	movhi	r16,2
    15a4:	dc400115 	stw	r17,4(sp)
    15a8:	842e0204 	addi	r16,r16,-18424
    15ac:	2023883a 	mov	r17,r4
    15b0:	2809883a 	mov	r4,r5
    15b4:	dfc00215 	stw	ra,8(sp)
    15b8:	80000015 	stw	zero,0(r16)
    15bc:	000db100 	call	db10 <sbrk>
    15c0:	00ffffc4 	movi	r3,-1
    15c4:	10c00526 	beq	r2,r3,15dc <_sbrk_r+0x44>
    15c8:	dfc00217 	ldw	ra,8(sp)
    15cc:	dc400117 	ldw	r17,4(sp)
    15d0:	dc000017 	ldw	r16,0(sp)
    15d4:	dec00304 	addi	sp,sp,12
    15d8:	f800283a 	ret
    15dc:	80c00017 	ldw	r3,0(r16)
    15e0:	183ff926 	beq	r3,zero,15c8 <_sbrk_r+0x30>
    15e4:	88c00015 	stw	r3,0(r17)
    15e8:	003ff706 	br	15c8 <_sbrk_r+0x30>

000015ec <strlen>:
    15ec:	208000cc 	andi	r2,r4,3
    15f0:	10002026 	beq	r2,zero,1674 <strlen+0x88>
    15f4:	20800007 	ldb	r2,0(r4)
    15f8:	10002026 	beq	r2,zero,167c <strlen+0x90>
    15fc:	2005883a 	mov	r2,r4
    1600:	00000206 	br	160c <strlen+0x20>
    1604:	10c00007 	ldb	r3,0(r2)
    1608:	18001826 	beq	r3,zero,166c <strlen+0x80>
    160c:	10800044 	addi	r2,r2,1
    1610:	10c000cc 	andi	r3,r2,3
    1614:	183ffb1e 	bne	r3,zero,1604 <strlen+0x18>
    1618:	10c00017 	ldw	r3,0(r2)
    161c:	01ffbff4 	movhi	r7,65279
    1620:	39ffbfc4 	addi	r7,r7,-257
    1624:	00ca303a 	nor	r5,zero,r3
    1628:	01a02074 	movhi	r6,32897
    162c:	19c7883a 	add	r3,r3,r7
    1630:	31a02004 	addi	r6,r6,-32640
    1634:	1946703a 	and	r3,r3,r5
    1638:	1986703a 	and	r3,r3,r6
    163c:	1800091e 	bne	r3,zero,1664 <strlen+0x78>
    1640:	10800104 	addi	r2,r2,4
    1644:	10c00017 	ldw	r3,0(r2)
    1648:	19cb883a 	add	r5,r3,r7
    164c:	00c6303a 	nor	r3,zero,r3
    1650:	28c6703a 	and	r3,r5,r3
    1654:	1986703a 	and	r3,r3,r6
    1658:	183ff926 	beq	r3,zero,1640 <strlen+0x54>
    165c:	00000106 	br	1664 <strlen+0x78>
    1660:	10800044 	addi	r2,r2,1
    1664:	10c00007 	ldb	r3,0(r2)
    1668:	183ffd1e 	bne	r3,zero,1660 <strlen+0x74>
    166c:	1105c83a 	sub	r2,r2,r4
    1670:	f800283a 	ret
    1674:	2005883a 	mov	r2,r4
    1678:	003fe706 	br	1618 <strlen+0x2c>
    167c:	0005883a 	mov	r2,zero
    1680:	f800283a 	ret

00001684 <___vfprintf_internal_r>:
    1684:	deffb804 	addi	sp,sp,-288
    1688:	dfc04715 	stw	ra,284(sp)
    168c:	ddc04515 	stw	r23,276(sp)
    1690:	dd404315 	stw	r21,268(sp)
    1694:	d9002c15 	stw	r4,176(sp)
    1698:	282f883a 	mov	r23,r5
    169c:	302b883a 	mov	r21,r6
    16a0:	d9c02d15 	stw	r7,180(sp)
    16a4:	df004615 	stw	fp,280(sp)
    16a8:	dd804415 	stw	r22,272(sp)
    16ac:	dd004215 	stw	r20,264(sp)
    16b0:	dcc04115 	stw	r19,260(sp)
    16b4:	dc804015 	stw	r18,256(sp)
    16b8:	dc403f15 	stw	r17,252(sp)
    16bc:	dc003e15 	stw	r16,248(sp)
    16c0:	000649c0 	call	649c <_localeconv_r>
    16c4:	10800017 	ldw	r2,0(r2)
    16c8:	1009883a 	mov	r4,r2
    16cc:	d8803415 	stw	r2,208(sp)
    16d0:	00015ec0 	call	15ec <strlen>
    16d4:	d8803715 	stw	r2,220(sp)
    16d8:	d8802c17 	ldw	r2,176(sp)
    16dc:	10000226 	beq	r2,zero,16e8 <___vfprintf_internal_r+0x64>
    16e0:	10800e17 	ldw	r2,56(r2)
    16e4:	1000f926 	beq	r2,zero,1acc <___vfprintf_internal_r+0x448>
    16e8:	b880030b 	ldhu	r2,12(r23)
    16ec:	10c8000c 	andi	r3,r2,8192
    16f0:	1800061e 	bne	r3,zero,170c <___vfprintf_internal_r+0x88>
    16f4:	b9001917 	ldw	r4,100(r23)
    16f8:	00f7ffc4 	movi	r3,-8193
    16fc:	10880014 	ori	r2,r2,8192
    1700:	20c6703a 	and	r3,r4,r3
    1704:	b880030d 	sth	r2,12(r23)
    1708:	b8c01915 	stw	r3,100(r23)
    170c:	10c0020c 	andi	r3,r2,8
    1710:	1800c126 	beq	r3,zero,1a18 <___vfprintf_internal_r+0x394>
    1714:	b8c00417 	ldw	r3,16(r23)
    1718:	1800bf26 	beq	r3,zero,1a18 <___vfprintf_internal_r+0x394>
    171c:	1080068c 	andi	r2,r2,26
    1720:	00c00284 	movi	r3,10
    1724:	10c0c426 	beq	r2,r3,1a38 <___vfprintf_internal_r+0x3b4>
    1728:	d8c00404 	addi	r3,sp,16
    172c:	05000074 	movhi	r20,1
    1730:	d9001e04 	addi	r4,sp,120
    1734:	a51f4c84 	addi	r20,r20,32050
    1738:	d8c01e15 	stw	r3,120(sp)
    173c:	d8002015 	stw	zero,128(sp)
    1740:	d8001f15 	stw	zero,124(sp)
    1744:	d8003315 	stw	zero,204(sp)
    1748:	d8003615 	stw	zero,216(sp)
    174c:	d8003815 	stw	zero,224(sp)
    1750:	1811883a 	mov	r8,r3
    1754:	d8003915 	stw	zero,228(sp)
    1758:	d8003a15 	stw	zero,232(sp)
    175c:	d8002f15 	stw	zero,188(sp)
    1760:	d9002815 	stw	r4,160(sp)
    1764:	a8800007 	ldb	r2,0(r21)
    1768:	10027b26 	beq	r2,zero,2158 <___vfprintf_internal_r+0xad4>
    176c:	00c00944 	movi	r3,37
    1770:	a821883a 	mov	r16,r21
    1774:	10c0021e 	bne	r2,r3,1780 <___vfprintf_internal_r+0xfc>
    1778:	00001406 	br	17cc <___vfprintf_internal_r+0x148>
    177c:	10c00326 	beq	r2,r3,178c <___vfprintf_internal_r+0x108>
    1780:	84000044 	addi	r16,r16,1
    1784:	80800007 	ldb	r2,0(r16)
    1788:	103ffc1e 	bne	r2,zero,177c <___vfprintf_internal_r+0xf8>
    178c:	8563c83a 	sub	r17,r16,r21
    1790:	88000e26 	beq	r17,zero,17cc <___vfprintf_internal_r+0x148>
    1794:	d8c02017 	ldw	r3,128(sp)
    1798:	d8801f17 	ldw	r2,124(sp)
    179c:	45400015 	stw	r21,0(r8)
    17a0:	1c47883a 	add	r3,r3,r17
    17a4:	10800044 	addi	r2,r2,1
    17a8:	d8c02015 	stw	r3,128(sp)
    17ac:	44400115 	stw	r17,4(r8)
    17b0:	d8801f15 	stw	r2,124(sp)
    17b4:	00c001c4 	movi	r3,7
    17b8:	1880a716 	blt	r3,r2,1a58 <___vfprintf_internal_r+0x3d4>
    17bc:	42000204 	addi	r8,r8,8
    17c0:	d9402f17 	ldw	r5,188(sp)
    17c4:	2c4b883a 	add	r5,r5,r17
    17c8:	d9402f15 	stw	r5,188(sp)
    17cc:	80800007 	ldb	r2,0(r16)
    17d0:	1000a826 	beq	r2,zero,1a74 <___vfprintf_internal_r+0x3f0>
    17d4:	84400047 	ldb	r17,1(r16)
    17d8:	00bfffc4 	movi	r2,-1
    17dc:	85400044 	addi	r21,r16,1
    17e0:	d8002785 	stb	zero,158(sp)
    17e4:	0007883a 	mov	r3,zero
    17e8:	000f883a 	mov	r7,zero
    17ec:	d8802915 	stw	r2,164(sp)
    17f0:	d8003115 	stw	zero,196(sp)
    17f4:	0025883a 	mov	r18,zero
    17f8:	01401604 	movi	r5,88
    17fc:	01800244 	movi	r6,9
    1800:	02800a84 	movi	r10,42
    1804:	02401b04 	movi	r9,108
    1808:	ad400044 	addi	r21,r21,1
    180c:	88bff804 	addi	r2,r17,-32
    1810:	28830436 	bltu	r5,r2,2424 <___vfprintf_internal_r+0xda0>
    1814:	100490ba 	slli	r2,r2,2
    1818:	01000034 	movhi	r4,0
    181c:	21060b04 	addi	r4,r4,6188
    1820:	1105883a 	add	r2,r2,r4
    1824:	10800017 	ldw	r2,0(r2)
    1828:	1000683a 	jmp	r2
    182c:	00002344 	movi	zero,141
    1830:	00002424 	muli	zero,zero,144
    1834:	00002424 	muli	zero,zero,144
    1838:	00002364 	muli	zero,zero,141
    183c:	00002424 	muli	zero,zero,144
    1840:	00002424 	muli	zero,zero,144
    1844:	00002424 	muli	zero,zero,144
    1848:	00002424 	muli	zero,zero,144
    184c:	00002424 	muli	zero,zero,144
    1850:	00002424 	muli	zero,zero,144
    1854:	00001ad8 	cmpnei	zero,zero,107
    1858:	00002280 	call	228 <alt_instruction_exception_entry+0x58>
    185c:	00002424 	muli	zero,zero,144
    1860:	000019a0 	cmpeqi	zero,zero,102
    1864:	00001b00 	call	1b0 <alt_irq_handler+0xb4>
    1868:	00002424 	muli	zero,zero,144
    186c:	00001b40 	call	1b4 <alt_irq_handler+0xb8>
    1870:	00001b4c 	andi	zero,zero,109
    1874:	00001b4c 	andi	zero,zero,109
    1878:	00001b4c 	andi	zero,zero,109
    187c:	00001b4c 	andi	zero,zero,109
    1880:	00001b4c 	andi	zero,zero,109
    1884:	00001b4c 	andi	zero,zero,109
    1888:	00001b4c 	andi	zero,zero,109
    188c:	00001b4c 	andi	zero,zero,109
    1890:	00001b4c 	andi	zero,zero,109
    1894:	00002424 	muli	zero,zero,144
    1898:	00002424 	muli	zero,zero,144
    189c:	00002424 	muli	zero,zero,144
    18a0:	00002424 	muli	zero,zero,144
    18a4:	00002424 	muli	zero,zero,144
    18a8:	00002424 	muli	zero,zero,144
    18ac:	00002424 	muli	zero,zero,144
    18b0:	00002424 	muli	zero,zero,144
    18b4:	00002424 	muli	zero,zero,144
    18b8:	00002424 	muli	zero,zero,144
    18bc:	00001b80 	call	1b8 <alt_irq_handler+0xbc>
    18c0:	00001c3c 	xorhi	zero,zero,112
    18c4:	00002424 	muli	zero,zero,144
    18c8:	00001c3c 	xorhi	zero,zero,112
    18cc:	00002424 	muli	zero,zero,144
    18d0:	00002424 	muli	zero,zero,144
    18d4:	00002424 	muli	zero,zero,144
    18d8:	00002424 	muli	zero,zero,144
    18dc:	00001cdc 	xori	zero,zero,115
    18e0:	00002424 	muli	zero,zero,144
    18e4:	00002424 	muli	zero,zero,144
    18e8:	00001ce8 	cmpgeui	zero,zero,115
    18ec:	00002424 	muli	zero,zero,144
    18f0:	00002424 	muli	zero,zero,144
    18f4:	00002424 	muli	zero,zero,144
    18f8:	00002424 	muli	zero,zero,144
    18fc:	00002424 	muli	zero,zero,144
    1900:	00002160 	cmpeqi	zero,zero,133
    1904:	00002424 	muli	zero,zero,144
    1908:	00002424 	muli	zero,zero,144
    190c:	000021c0 	call	21c <alt_instruction_exception_entry+0x4c>
    1910:	00002424 	muli	zero,zero,144
    1914:	00002424 	muli	zero,zero,144
    1918:	00002424 	muli	zero,zero,144
    191c:	00002424 	muli	zero,zero,144
    1920:	00002424 	muli	zero,zero,144
    1924:	00002424 	muli	zero,zero,144
    1928:	00002424 	muli	zero,zero,144
    192c:	00002424 	muli	zero,zero,144
    1930:	00002424 	muli	zero,zero,144
    1934:	00002424 	muli	zero,zero,144
    1938:	000023d0 	cmplti	zero,zero,143
    193c:	00002370 	cmpltui	zero,zero,141
    1940:	00001c3c 	xorhi	zero,zero,112
    1944:	00001c3c 	xorhi	zero,zero,112
    1948:	00001c3c 	xorhi	zero,zero,112
    194c:	00002380 	call	238 <alt_instruction_exception_entry+0x68>
    1950:	00002370 	cmpltui	zero,zero,141
    1954:	00002424 	muli	zero,zero,144
    1958:	00002424 	muli	zero,zero,144
    195c:	0000238c 	andi	zero,zero,142
    1960:	00002424 	muli	zero,zero,144
    1964:	0000239c 	xori	zero,zero,142
    1968:	00002270 	cmpltui	zero,zero,137
    196c:	000019ac 	andhi	zero,zero,102
    1970:	00002290 	cmplti	zero,zero,138
    1974:	00002424 	muli	zero,zero,144
    1978:	0000229c 	xori	zero,zero,138
    197c:	00002424 	muli	zero,zero,144
    1980:	000022f8 	rdprs	zero,zero,139
    1984:	00002424 	muli	zero,zero,144
    1988:	00002424 	muli	zero,zero,144
    198c:	00002308 	cmpgei	zero,zero,140
    1990:	d9003117 	ldw	r4,196(sp)
    1994:	d8802d15 	stw	r2,180(sp)
    1998:	0109c83a 	sub	r4,zero,r4
    199c:	d9003115 	stw	r4,196(sp)
    19a0:	94800114 	ori	r18,r18,4
    19a4:	ac400007 	ldb	r17,0(r21)
    19a8:	003f9706 	br	1808 <___vfprintf_internal_r+0x184>
    19ac:	00800c04 	movi	r2,48
    19b0:	d9002d17 	ldw	r4,180(sp)
    19b4:	d9402917 	ldw	r5,164(sp)
    19b8:	d8802705 	stb	r2,156(sp)
    19bc:	00801e04 	movi	r2,120
    19c0:	d8802745 	stb	r2,157(sp)
    19c4:	d8002785 	stb	zero,158(sp)
    19c8:	20c00104 	addi	r3,r4,4
    19cc:	24c00017 	ldw	r19,0(r4)
    19d0:	002d883a 	mov	r22,zero
    19d4:	90800094 	ori	r2,r18,2
    19d8:	28029a16 	blt	r5,zero,2444 <___vfprintf_internal_r+0xdc0>
    19dc:	00bfdfc4 	movi	r2,-129
    19e0:	90a4703a 	and	r18,r18,r2
    19e4:	d8c02d15 	stw	r3,180(sp)
    19e8:	94800094 	ori	r18,r18,2
    19ec:	9802871e 	bne	r19,zero,240c <___vfprintf_internal_r+0xd88>
    19f0:	00800074 	movhi	r2,1
    19f4:	109f4504 	addi	r2,r2,32020
    19f8:	d8803915 	stw	r2,228(sp)
    19fc:	04401e04 	movi	r17,120
    1a00:	d8802917 	ldw	r2,164(sp)
    1a04:	0039883a 	mov	fp,zero
    1a08:	1001e926 	beq	r2,zero,21b0 <___vfprintf_internal_r+0xb2c>
    1a0c:	0027883a 	mov	r19,zero
    1a10:	002d883a 	mov	r22,zero
    1a14:	00020506 	br	222c <___vfprintf_internal_r+0xba8>
    1a18:	d9002c17 	ldw	r4,176(sp)
    1a1c:	b80b883a 	mov	r5,r23
    1a20:	00039540 	call	3954 <__swsetup_r>
    1a24:	1005ac1e 	bne	r2,zero,30d8 <___vfprintf_internal_r+0x1a54>
    1a28:	b880030b 	ldhu	r2,12(r23)
    1a2c:	00c00284 	movi	r3,10
    1a30:	1080068c 	andi	r2,r2,26
    1a34:	10ff3c1e 	bne	r2,r3,1728 <___vfprintf_internal_r+0xa4>
    1a38:	b880038f 	ldh	r2,14(r23)
    1a3c:	103f3a16 	blt	r2,zero,1728 <___vfprintf_internal_r+0xa4>
    1a40:	d9c02d17 	ldw	r7,180(sp)
    1a44:	d9002c17 	ldw	r4,176(sp)
    1a48:	a80d883a 	mov	r6,r21
    1a4c:	b80b883a 	mov	r5,r23
    1a50:	00038980 	call	3898 <__sbprintf>
    1a54:	00001106 	br	1a9c <___vfprintf_internal_r+0x418>
    1a58:	d9002c17 	ldw	r4,176(sp)
    1a5c:	d9801e04 	addi	r6,sp,120
    1a60:	b80b883a 	mov	r5,r23
    1a64:	00084200 	call	8420 <__sprint_r>
    1a68:	1000081e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    1a6c:	da000404 	addi	r8,sp,16
    1a70:	003f5306 	br	17c0 <___vfprintf_internal_r+0x13c>
    1a74:	d8802017 	ldw	r2,128(sp)
    1a78:	10000426 	beq	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    1a7c:	d9002c17 	ldw	r4,176(sp)
    1a80:	d9801e04 	addi	r6,sp,120
    1a84:	b80b883a 	mov	r5,r23
    1a88:	00084200 	call	8420 <__sprint_r>
    1a8c:	b880030b 	ldhu	r2,12(r23)
    1a90:	1080100c 	andi	r2,r2,64
    1a94:	1005901e 	bne	r2,zero,30d8 <___vfprintf_internal_r+0x1a54>
    1a98:	d8802f17 	ldw	r2,188(sp)
    1a9c:	dfc04717 	ldw	ra,284(sp)
    1aa0:	df004617 	ldw	fp,280(sp)
    1aa4:	ddc04517 	ldw	r23,276(sp)
    1aa8:	dd804417 	ldw	r22,272(sp)
    1aac:	dd404317 	ldw	r21,268(sp)
    1ab0:	dd004217 	ldw	r20,264(sp)
    1ab4:	dcc04117 	ldw	r19,260(sp)
    1ab8:	dc804017 	ldw	r18,256(sp)
    1abc:	dc403f17 	ldw	r17,252(sp)
    1ac0:	dc003e17 	ldw	r16,248(sp)
    1ac4:	dec04804 	addi	sp,sp,288
    1ac8:	f800283a 	ret
    1acc:	d9002c17 	ldw	r4,176(sp)
    1ad0:	00059280 	call	5928 <__sinit>
    1ad4:	003f0406 	br	16e8 <___vfprintf_internal_r+0x64>
    1ad8:	d8802d17 	ldw	r2,180(sp)
    1adc:	d9002d17 	ldw	r4,180(sp)
    1ae0:	10800017 	ldw	r2,0(r2)
    1ae4:	d8803115 	stw	r2,196(sp)
    1ae8:	20800104 	addi	r2,r4,4
    1aec:	d9003117 	ldw	r4,196(sp)
    1af0:	203fa716 	blt	r4,zero,1990 <___vfprintf_internal_r+0x30c>
    1af4:	d8802d15 	stw	r2,180(sp)
    1af8:	ac400007 	ldb	r17,0(r21)
    1afc:	003f4206 	br	1808 <___vfprintf_internal_r+0x184>
    1b00:	ac400007 	ldb	r17,0(r21)
    1b04:	aac00044 	addi	r11,r21,1
    1b08:	8a872826 	beq	r17,r10,37ac <___vfprintf_internal_r+0x2128>
    1b0c:	88bff404 	addi	r2,r17,-48
    1b10:	0009883a 	mov	r4,zero
    1b14:	30867d36 	bltu	r6,r2,350c <___vfprintf_internal_r+0x1e88>
    1b18:	5c400007 	ldb	r17,0(r11)
    1b1c:	210002a4 	muli	r4,r4,10
    1b20:	5d400044 	addi	r21,r11,1
    1b24:	a817883a 	mov	r11,r21
    1b28:	2089883a 	add	r4,r4,r2
    1b2c:	88bff404 	addi	r2,r17,-48
    1b30:	30bff92e 	bgeu	r6,r2,1b18 <___vfprintf_internal_r+0x494>
    1b34:	2005c916 	blt	r4,zero,325c <___vfprintf_internal_r+0x1bd8>
    1b38:	d9002915 	stw	r4,164(sp)
    1b3c:	003f3306 	br	180c <___vfprintf_internal_r+0x188>
    1b40:	94802014 	ori	r18,r18,128
    1b44:	ac400007 	ldb	r17,0(r21)
    1b48:	003f2f06 	br	1808 <___vfprintf_internal_r+0x184>
    1b4c:	a809883a 	mov	r4,r21
    1b50:	d8003115 	stw	zero,196(sp)
    1b54:	88bff404 	addi	r2,r17,-48
    1b58:	0017883a 	mov	r11,zero
    1b5c:	24400007 	ldb	r17,0(r4)
    1b60:	5ac002a4 	muli	r11,r11,10
    1b64:	ad400044 	addi	r21,r21,1
    1b68:	a809883a 	mov	r4,r21
    1b6c:	12d7883a 	add	r11,r2,r11
    1b70:	88bff404 	addi	r2,r17,-48
    1b74:	30bff92e 	bgeu	r6,r2,1b5c <___vfprintf_internal_r+0x4d8>
    1b78:	dac03115 	stw	r11,196(sp)
    1b7c:	003f2306 	br	180c <___vfprintf_internal_r+0x188>
    1b80:	18c03fcc 	andi	r3,r3,255
    1b84:	18072b1e 	bne	r3,zero,3834 <___vfprintf_internal_r+0x21b0>
    1b88:	94800414 	ori	r18,r18,16
    1b8c:	9080080c 	andi	r2,r18,32
    1b90:	10037b26 	beq	r2,zero,2980 <___vfprintf_internal_r+0x12fc>
    1b94:	d9402d17 	ldw	r5,180(sp)
    1b98:	28800117 	ldw	r2,4(r5)
    1b9c:	2cc00017 	ldw	r19,0(r5)
    1ba0:	29400204 	addi	r5,r5,8
    1ba4:	d9402d15 	stw	r5,180(sp)
    1ba8:	102d883a 	mov	r22,r2
    1bac:	10044b16 	blt	r2,zero,2cdc <___vfprintf_internal_r+0x1658>
    1bb0:	d9402917 	ldw	r5,164(sp)
    1bb4:	df002783 	ldbu	fp,158(sp)
    1bb8:	2803bc16 	blt	r5,zero,2aac <___vfprintf_internal_r+0x1428>
    1bbc:	00ffdfc4 	movi	r3,-129
    1bc0:	9d84b03a 	or	r2,r19,r22
    1bc4:	90e4703a 	and	r18,r18,r3
    1bc8:	10017726 	beq	r2,zero,21a8 <___vfprintf_internal_r+0xb24>
    1bcc:	b0038326 	beq	r22,zero,29dc <___vfprintf_internal_r+0x1358>
    1bd0:	dc402a15 	stw	r17,168(sp)
    1bd4:	dc001e04 	addi	r16,sp,120
    1bd8:	b023883a 	mov	r17,r22
    1bdc:	402d883a 	mov	r22,r8
    1be0:	9809883a 	mov	r4,r19
    1be4:	880b883a 	mov	r5,r17
    1be8:	01800284 	movi	r6,10
    1bec:	000f883a 	mov	r7,zero
    1bf0:	000a8180 	call	a818 <__umoddi3>
    1bf4:	10800c04 	addi	r2,r2,48
    1bf8:	843fffc4 	addi	r16,r16,-1
    1bfc:	9809883a 	mov	r4,r19
    1c00:	880b883a 	mov	r5,r17
    1c04:	80800005 	stb	r2,0(r16)
    1c08:	01800284 	movi	r6,10
    1c0c:	000f883a 	mov	r7,zero
    1c10:	000a2a00 	call	a2a0 <__udivdi3>
    1c14:	1027883a 	mov	r19,r2
    1c18:	10c4b03a 	or	r2,r2,r3
    1c1c:	1823883a 	mov	r17,r3
    1c20:	103fef1e 	bne	r2,zero,1be0 <___vfprintf_internal_r+0x55c>
    1c24:	d8c02817 	ldw	r3,160(sp)
    1c28:	dc402a17 	ldw	r17,168(sp)
    1c2c:	b011883a 	mov	r8,r22
    1c30:	1c07c83a 	sub	r3,r3,r16
    1c34:	d8c02e15 	stw	r3,184(sp)
    1c38:	00005906 	br	1da0 <___vfprintf_internal_r+0x71c>
    1c3c:	18c03fcc 	andi	r3,r3,255
    1c40:	1806fa1e 	bne	r3,zero,382c <___vfprintf_internal_r+0x21a8>
    1c44:	9080020c 	andi	r2,r18,8
    1c48:	10048a26 	beq	r2,zero,2e74 <___vfprintf_internal_r+0x17f0>
    1c4c:	d8c02d17 	ldw	r3,180(sp)
    1c50:	d9002d17 	ldw	r4,180(sp)
    1c54:	d9402d17 	ldw	r5,180(sp)
    1c58:	18c00017 	ldw	r3,0(r3)
    1c5c:	21000117 	ldw	r4,4(r4)
    1c60:	29400204 	addi	r5,r5,8
    1c64:	d8c03615 	stw	r3,216(sp)
    1c68:	d9003815 	stw	r4,224(sp)
    1c6c:	d9402d15 	stw	r5,180(sp)
    1c70:	d9003617 	ldw	r4,216(sp)
    1c74:	d9403817 	ldw	r5,224(sp)
    1c78:	da003d15 	stw	r8,244(sp)
    1c7c:	04000044 	movi	r16,1
    1c80:	00080980 	call	8098 <__fpclassifyd>
    1c84:	da003d17 	ldw	r8,244(sp)
    1c88:	14041f1e 	bne	r2,r16,2d08 <___vfprintf_internal_r+0x1684>
    1c8c:	d9003617 	ldw	r4,216(sp)
    1c90:	d9403817 	ldw	r5,224(sp)
    1c94:	000d883a 	mov	r6,zero
    1c98:	000f883a 	mov	r7,zero
    1c9c:	000c0480 	call	c048 <__ledf2>
    1ca0:	da003d17 	ldw	r8,244(sp)
    1ca4:	1005be16 	blt	r2,zero,33a0 <___vfprintf_internal_r+0x1d1c>
    1ca8:	df002783 	ldbu	fp,158(sp)
    1cac:	008011c4 	movi	r2,71
    1cb0:	1445330e 	bge	r2,r17,3180 <___vfprintf_internal_r+0x1afc>
    1cb4:	04000074 	movhi	r16,1
    1cb8:	841f3d04 	addi	r16,r16,31988
    1cbc:	00c000c4 	movi	r3,3
    1cc0:	00bfdfc4 	movi	r2,-129
    1cc4:	d8c02a15 	stw	r3,168(sp)
    1cc8:	90a4703a 	and	r18,r18,r2
    1ccc:	d8c02e15 	stw	r3,184(sp)
    1cd0:	d8002915 	stw	zero,164(sp)
    1cd4:	d8003215 	stw	zero,200(sp)
    1cd8:	00003706 	br	1db8 <___vfprintf_internal_r+0x734>
    1cdc:	94800214 	ori	r18,r18,8
    1ce0:	ac400007 	ldb	r17,0(r21)
    1ce4:	003ec806 	br	1808 <___vfprintf_internal_r+0x184>
    1ce8:	18c03fcc 	andi	r3,r3,255
    1cec:	1806db1e 	bne	r3,zero,385c <___vfprintf_internal_r+0x21d8>
    1cf0:	94800414 	ori	r18,r18,16
    1cf4:	9080080c 	andi	r2,r18,32
    1cf8:	1002d826 	beq	r2,zero,285c <___vfprintf_internal_r+0x11d8>
    1cfc:	d9402d17 	ldw	r5,180(sp)
    1d00:	d8c02917 	ldw	r3,164(sp)
    1d04:	d8002785 	stb	zero,158(sp)
    1d08:	28800204 	addi	r2,r5,8
    1d0c:	2cc00017 	ldw	r19,0(r5)
    1d10:	2d800117 	ldw	r22,4(r5)
    1d14:	18048f16 	blt	r3,zero,2f54 <___vfprintf_internal_r+0x18d0>
    1d18:	013fdfc4 	movi	r4,-129
    1d1c:	9d86b03a 	or	r3,r19,r22
    1d20:	d8802d15 	stw	r2,180(sp)
    1d24:	9124703a 	and	r18,r18,r4
    1d28:	1802d91e 	bne	r3,zero,2890 <___vfprintf_internal_r+0x120c>
    1d2c:	d8c02917 	ldw	r3,164(sp)
    1d30:	0039883a 	mov	fp,zero
    1d34:	1805c326 	beq	r3,zero,3444 <___vfprintf_internal_r+0x1dc0>
    1d38:	0027883a 	mov	r19,zero
    1d3c:	002d883a 	mov	r22,zero
    1d40:	dc001e04 	addi	r16,sp,120
    1d44:	9806d0fa 	srli	r3,r19,3
    1d48:	b008977a 	slli	r4,r22,29
    1d4c:	b02cd0fa 	srli	r22,r22,3
    1d50:	9cc001cc 	andi	r19,r19,7
    1d54:	98800c04 	addi	r2,r19,48
    1d58:	843fffc4 	addi	r16,r16,-1
    1d5c:	20e6b03a 	or	r19,r4,r3
    1d60:	80800005 	stb	r2,0(r16)
    1d64:	9d86b03a 	or	r3,r19,r22
    1d68:	183ff61e 	bne	r3,zero,1d44 <___vfprintf_internal_r+0x6c0>
    1d6c:	90c0004c 	andi	r3,r18,1
    1d70:	18013b26 	beq	r3,zero,2260 <___vfprintf_internal_r+0xbdc>
    1d74:	10803fcc 	andi	r2,r2,255
    1d78:	1080201c 	xori	r2,r2,128
    1d7c:	10bfe004 	addi	r2,r2,-128
    1d80:	00c00c04 	movi	r3,48
    1d84:	10c13626 	beq	r2,r3,2260 <___vfprintf_internal_r+0xbdc>
    1d88:	80ffffc5 	stb	r3,-1(r16)
    1d8c:	d8c02817 	ldw	r3,160(sp)
    1d90:	80bfffc4 	addi	r2,r16,-1
    1d94:	1021883a 	mov	r16,r2
    1d98:	1887c83a 	sub	r3,r3,r2
    1d9c:	d8c02e15 	stw	r3,184(sp)
    1da0:	d8802e17 	ldw	r2,184(sp)
    1da4:	d9002917 	ldw	r4,164(sp)
    1da8:	1100010e 	bge	r2,r4,1db0 <___vfprintf_internal_r+0x72c>
    1dac:	2005883a 	mov	r2,r4
    1db0:	d8802a15 	stw	r2,168(sp)
    1db4:	d8003215 	stw	zero,200(sp)
    1db8:	e7003fcc 	andi	fp,fp,255
    1dbc:	e700201c 	xori	fp,fp,128
    1dc0:	e73fe004 	addi	fp,fp,-128
    1dc4:	e0000326 	beq	fp,zero,1dd4 <___vfprintf_internal_r+0x750>
    1dc8:	d8c02a17 	ldw	r3,168(sp)
    1dcc:	18c00044 	addi	r3,r3,1
    1dd0:	d8c02a15 	stw	r3,168(sp)
    1dd4:	90c0008c 	andi	r3,r18,2
    1dd8:	d8c02b15 	stw	r3,172(sp)
    1ddc:	18000326 	beq	r3,zero,1dec <___vfprintf_internal_r+0x768>
    1de0:	d8c02a17 	ldw	r3,168(sp)
    1de4:	18c00084 	addi	r3,r3,2
    1de8:	d8c02a15 	stw	r3,168(sp)
    1dec:	90c0210c 	andi	r3,r18,132
    1df0:	d8c03015 	stw	r3,192(sp)
    1df4:	1801a31e 	bne	r3,zero,2484 <___vfprintf_internal_r+0xe00>
    1df8:	d9003117 	ldw	r4,196(sp)
    1dfc:	d8c02a17 	ldw	r3,168(sp)
    1e00:	20e7c83a 	sub	r19,r4,r3
    1e04:	04c19f0e 	bge	zero,r19,2484 <___vfprintf_internal_r+0xe00>
    1e08:	02400404 	movi	r9,16
    1e0c:	d8c02017 	ldw	r3,128(sp)
    1e10:	d8801f17 	ldw	r2,124(sp)
    1e14:	4cc50d0e 	bge	r9,r19,324c <___vfprintf_internal_r+0x1bc8>
    1e18:	01400074 	movhi	r5,1
    1e1c:	295f5084 	addi	r5,r5,32066
    1e20:	dc403b15 	stw	r17,236(sp)
    1e24:	d9403515 	stw	r5,212(sp)
    1e28:	9823883a 	mov	r17,r19
    1e2c:	482d883a 	mov	r22,r9
    1e30:	9027883a 	mov	r19,r18
    1e34:	070001c4 	movi	fp,7
    1e38:	8025883a 	mov	r18,r16
    1e3c:	dc002c17 	ldw	r16,176(sp)
    1e40:	00000306 	br	1e50 <___vfprintf_internal_r+0x7cc>
    1e44:	8c7ffc04 	addi	r17,r17,-16
    1e48:	42000204 	addi	r8,r8,8
    1e4c:	b440130e 	bge	r22,r17,1e9c <___vfprintf_internal_r+0x818>
    1e50:	01000074 	movhi	r4,1
    1e54:	18c00404 	addi	r3,r3,16
    1e58:	10800044 	addi	r2,r2,1
    1e5c:	211f5084 	addi	r4,r4,32066
    1e60:	41000015 	stw	r4,0(r8)
    1e64:	45800115 	stw	r22,4(r8)
    1e68:	d8c02015 	stw	r3,128(sp)
    1e6c:	d8801f15 	stw	r2,124(sp)
    1e70:	e0bff40e 	bge	fp,r2,1e44 <___vfprintf_internal_r+0x7c0>
    1e74:	d9801e04 	addi	r6,sp,120
    1e78:	b80b883a 	mov	r5,r23
    1e7c:	8009883a 	mov	r4,r16
    1e80:	00084200 	call	8420 <__sprint_r>
    1e84:	103f011e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    1e88:	8c7ffc04 	addi	r17,r17,-16
    1e8c:	d8c02017 	ldw	r3,128(sp)
    1e90:	d8801f17 	ldw	r2,124(sp)
    1e94:	da000404 	addi	r8,sp,16
    1e98:	b47fed16 	blt	r22,r17,1e50 <___vfprintf_internal_r+0x7cc>
    1e9c:	9021883a 	mov	r16,r18
    1ea0:	9825883a 	mov	r18,r19
    1ea4:	8827883a 	mov	r19,r17
    1ea8:	dc403b17 	ldw	r17,236(sp)
    1eac:	d9403517 	ldw	r5,212(sp)
    1eb0:	98c7883a 	add	r3,r19,r3
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	41400015 	stw	r5,0(r8)
    1ebc:	44c00115 	stw	r19,4(r8)
    1ec0:	d8c02015 	stw	r3,128(sp)
    1ec4:	d8801f15 	stw	r2,124(sp)
    1ec8:	010001c4 	movi	r4,7
    1ecc:	2082a316 	blt	r4,r2,295c <___vfprintf_internal_r+0x12d8>
    1ed0:	df002787 	ldb	fp,158(sp)
    1ed4:	42000204 	addi	r8,r8,8
    1ed8:	e0000c26 	beq	fp,zero,1f0c <___vfprintf_internal_r+0x888>
    1edc:	d8801f17 	ldw	r2,124(sp)
    1ee0:	d9002784 	addi	r4,sp,158
    1ee4:	18c00044 	addi	r3,r3,1
    1ee8:	10800044 	addi	r2,r2,1
    1eec:	41000015 	stw	r4,0(r8)
    1ef0:	01000044 	movi	r4,1
    1ef4:	41000115 	stw	r4,4(r8)
    1ef8:	d8c02015 	stw	r3,128(sp)
    1efc:	d8801f15 	stw	r2,124(sp)
    1f00:	010001c4 	movi	r4,7
    1f04:	20823c16 	blt	r4,r2,27f8 <___vfprintf_internal_r+0x1174>
    1f08:	42000204 	addi	r8,r8,8
    1f0c:	d8802b17 	ldw	r2,172(sp)
    1f10:	10000c26 	beq	r2,zero,1f44 <___vfprintf_internal_r+0x8c0>
    1f14:	d8801f17 	ldw	r2,124(sp)
    1f18:	d9002704 	addi	r4,sp,156
    1f1c:	18c00084 	addi	r3,r3,2
    1f20:	10800044 	addi	r2,r2,1
    1f24:	41000015 	stw	r4,0(r8)
    1f28:	01000084 	movi	r4,2
    1f2c:	41000115 	stw	r4,4(r8)
    1f30:	d8c02015 	stw	r3,128(sp)
    1f34:	d8801f15 	stw	r2,124(sp)
    1f38:	010001c4 	movi	r4,7
    1f3c:	20823616 	blt	r4,r2,2818 <___vfprintf_internal_r+0x1194>
    1f40:	42000204 	addi	r8,r8,8
    1f44:	d9003017 	ldw	r4,192(sp)
    1f48:	00802004 	movi	r2,128
    1f4c:	20819926 	beq	r4,r2,25b4 <___vfprintf_internal_r+0xf30>
    1f50:	d9402917 	ldw	r5,164(sp)
    1f54:	d8802e17 	ldw	r2,184(sp)
    1f58:	28adc83a 	sub	r22,r5,r2
    1f5c:	0580310e 	bge	zero,r22,2024 <___vfprintf_internal_r+0x9a0>
    1f60:	07000404 	movi	fp,16
    1f64:	d8801f17 	ldw	r2,124(sp)
    1f68:	e584140e 	bge	fp,r22,2fbc <___vfprintf_internal_r+0x1938>
    1f6c:	01400074 	movhi	r5,1
    1f70:	295f4c84 	addi	r5,r5,32050
    1f74:	dc402915 	stw	r17,164(sp)
    1f78:	d9402b15 	stw	r5,172(sp)
    1f7c:	b023883a 	mov	r17,r22
    1f80:	04c001c4 	movi	r19,7
    1f84:	a82d883a 	mov	r22,r21
    1f88:	902b883a 	mov	r21,r18
    1f8c:	8025883a 	mov	r18,r16
    1f90:	dc002c17 	ldw	r16,176(sp)
    1f94:	00000306 	br	1fa4 <___vfprintf_internal_r+0x920>
    1f98:	8c7ffc04 	addi	r17,r17,-16
    1f9c:	42000204 	addi	r8,r8,8
    1fa0:	e440110e 	bge	fp,r17,1fe8 <___vfprintf_internal_r+0x964>
    1fa4:	18c00404 	addi	r3,r3,16
    1fa8:	10800044 	addi	r2,r2,1
    1fac:	45000015 	stw	r20,0(r8)
    1fb0:	47000115 	stw	fp,4(r8)
    1fb4:	d8c02015 	stw	r3,128(sp)
    1fb8:	d8801f15 	stw	r2,124(sp)
    1fbc:	98bff60e 	bge	r19,r2,1f98 <___vfprintf_internal_r+0x914>
    1fc0:	d9801e04 	addi	r6,sp,120
    1fc4:	b80b883a 	mov	r5,r23
    1fc8:	8009883a 	mov	r4,r16
    1fcc:	00084200 	call	8420 <__sprint_r>
    1fd0:	103eae1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    1fd4:	8c7ffc04 	addi	r17,r17,-16
    1fd8:	d8c02017 	ldw	r3,128(sp)
    1fdc:	d8801f17 	ldw	r2,124(sp)
    1fe0:	da000404 	addi	r8,sp,16
    1fe4:	e47fef16 	blt	fp,r17,1fa4 <___vfprintf_internal_r+0x920>
    1fe8:	9021883a 	mov	r16,r18
    1fec:	a825883a 	mov	r18,r21
    1ff0:	b02b883a 	mov	r21,r22
    1ff4:	882d883a 	mov	r22,r17
    1ff8:	dc402917 	ldw	r17,164(sp)
    1ffc:	d9002b17 	ldw	r4,172(sp)
    2000:	1d87883a 	add	r3,r3,r22
    2004:	10800044 	addi	r2,r2,1
    2008:	41000015 	stw	r4,0(r8)
    200c:	45800115 	stw	r22,4(r8)
    2010:	d8c02015 	stw	r3,128(sp)
    2014:	d8801f15 	stw	r2,124(sp)
    2018:	010001c4 	movi	r4,7
    201c:	2081ee16 	blt	r4,r2,27d8 <___vfprintf_internal_r+0x1154>
    2020:	42000204 	addi	r8,r8,8
    2024:	9080400c 	andi	r2,r18,256
    2028:	1001181e 	bne	r2,zero,248c <___vfprintf_internal_r+0xe08>
    202c:	d9402e17 	ldw	r5,184(sp)
    2030:	d8801f17 	ldw	r2,124(sp)
    2034:	44000015 	stw	r16,0(r8)
    2038:	1947883a 	add	r3,r3,r5
    203c:	10800044 	addi	r2,r2,1
    2040:	41400115 	stw	r5,4(r8)
    2044:	d8c02015 	stw	r3,128(sp)
    2048:	d8801f15 	stw	r2,124(sp)
    204c:	010001c4 	movi	r4,7
    2050:	2081d316 	blt	r4,r2,27a0 <___vfprintf_internal_r+0x111c>
    2054:	42000204 	addi	r8,r8,8
    2058:	9480010c 	andi	r18,r18,4
    205c:	90003226 	beq	r18,zero,2128 <___vfprintf_internal_r+0xaa4>
    2060:	d9403117 	ldw	r5,196(sp)
    2064:	d8802a17 	ldw	r2,168(sp)
    2068:	28a1c83a 	sub	r16,r5,r2
    206c:	04002e0e 	bge	zero,r16,2128 <___vfprintf_internal_r+0xaa4>
    2070:	04400404 	movi	r17,16
    2074:	d8801f17 	ldw	r2,124(sp)
    2078:	8c04a20e 	bge	r17,r16,3304 <___vfprintf_internal_r+0x1c80>
    207c:	01400074 	movhi	r5,1
    2080:	295f5084 	addi	r5,r5,32066
    2084:	d9403515 	stw	r5,212(sp)
    2088:	048001c4 	movi	r18,7
    208c:	dcc02c17 	ldw	r19,176(sp)
    2090:	00000306 	br	20a0 <___vfprintf_internal_r+0xa1c>
    2094:	843ffc04 	addi	r16,r16,-16
    2098:	42000204 	addi	r8,r8,8
    209c:	8c00130e 	bge	r17,r16,20ec <___vfprintf_internal_r+0xa68>
    20a0:	01000074 	movhi	r4,1
    20a4:	18c00404 	addi	r3,r3,16
    20a8:	10800044 	addi	r2,r2,1
    20ac:	211f5084 	addi	r4,r4,32066
    20b0:	41000015 	stw	r4,0(r8)
    20b4:	44400115 	stw	r17,4(r8)
    20b8:	d8c02015 	stw	r3,128(sp)
    20bc:	d8801f15 	stw	r2,124(sp)
    20c0:	90bff40e 	bge	r18,r2,2094 <___vfprintf_internal_r+0xa10>
    20c4:	d9801e04 	addi	r6,sp,120
    20c8:	b80b883a 	mov	r5,r23
    20cc:	9809883a 	mov	r4,r19
    20d0:	00084200 	call	8420 <__sprint_r>
    20d4:	103e6d1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    20d8:	843ffc04 	addi	r16,r16,-16
    20dc:	d8c02017 	ldw	r3,128(sp)
    20e0:	d8801f17 	ldw	r2,124(sp)
    20e4:	da000404 	addi	r8,sp,16
    20e8:	8c3fed16 	blt	r17,r16,20a0 <___vfprintf_internal_r+0xa1c>
    20ec:	d9403517 	ldw	r5,212(sp)
    20f0:	1c07883a 	add	r3,r3,r16
    20f4:	10800044 	addi	r2,r2,1
    20f8:	41400015 	stw	r5,0(r8)
    20fc:	44000115 	stw	r16,4(r8)
    2100:	d8c02015 	stw	r3,128(sp)
    2104:	d8801f15 	stw	r2,124(sp)
    2108:	010001c4 	movi	r4,7
    210c:	2080060e 	bge	r4,r2,2128 <___vfprintf_internal_r+0xaa4>
    2110:	d9002c17 	ldw	r4,176(sp)
    2114:	d9801e04 	addi	r6,sp,120
    2118:	b80b883a 	mov	r5,r23
    211c:	00084200 	call	8420 <__sprint_r>
    2120:	103e5a1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2124:	d8c02017 	ldw	r3,128(sp)
    2128:	d8803117 	ldw	r2,196(sp)
    212c:	d9002a17 	ldw	r4,168(sp)
    2130:	1100010e 	bge	r2,r4,2138 <___vfprintf_internal_r+0xab4>
    2134:	2005883a 	mov	r2,r4
    2138:	d9402f17 	ldw	r5,188(sp)
    213c:	288b883a 	add	r5,r5,r2
    2140:	d9402f15 	stw	r5,188(sp)
    2144:	18019e1e 	bne	r3,zero,27c0 <___vfprintf_internal_r+0x113c>
    2148:	a8800007 	ldb	r2,0(r21)
    214c:	d8001f15 	stw	zero,124(sp)
    2150:	da000404 	addi	r8,sp,16
    2154:	103d851e 	bne	r2,zero,176c <___vfprintf_internal_r+0xe8>
    2158:	a821883a 	mov	r16,r21
    215c:	003d9b06 	br	17cc <___vfprintf_internal_r+0x148>
    2160:	18c03fcc 	andi	r3,r3,255
    2164:	1805c11e 	bne	r3,zero,386c <___vfprintf_internal_r+0x21e8>
    2168:	94800414 	ori	r18,r18,16
    216c:	9080080c 	andi	r2,r18,32
    2170:	10020c26 	beq	r2,zero,29a4 <___vfprintf_internal_r+0x1320>
    2174:	d8802d17 	ldw	r2,180(sp)
    2178:	d9002917 	ldw	r4,164(sp)
    217c:	d8002785 	stb	zero,158(sp)
    2180:	10c00204 	addi	r3,r2,8
    2184:	14c00017 	ldw	r19,0(r2)
    2188:	15800117 	ldw	r22,4(r2)
    218c:	20040f16 	blt	r4,zero,31cc <___vfprintf_internal_r+0x1b48>
    2190:	013fdfc4 	movi	r4,-129
    2194:	9d84b03a 	or	r2,r19,r22
    2198:	d8c02d15 	stw	r3,180(sp)
    219c:	9124703a 	and	r18,r18,r4
    21a0:	0039883a 	mov	fp,zero
    21a4:	103e891e 	bne	r2,zero,1bcc <___vfprintf_internal_r+0x548>
    21a8:	d9002917 	ldw	r4,164(sp)
    21ac:	2002c11e 	bne	r4,zero,2cb4 <___vfprintf_internal_r+0x1630>
    21b0:	d8002915 	stw	zero,164(sp)
    21b4:	d8002e15 	stw	zero,184(sp)
    21b8:	dc001e04 	addi	r16,sp,120
    21bc:	003ef806 	br	1da0 <___vfprintf_internal_r+0x71c>
    21c0:	18c03fcc 	andi	r3,r3,255
    21c4:	18059d1e 	bne	r3,zero,383c <___vfprintf_internal_r+0x21b8>
    21c8:	01400074 	movhi	r5,1
    21cc:	295f4004 	addi	r5,r5,32000
    21d0:	d9403915 	stw	r5,228(sp)
    21d4:	9080080c 	andi	r2,r18,32
    21d8:	10005226 	beq	r2,zero,2324 <___vfprintf_internal_r+0xca0>
    21dc:	d8802d17 	ldw	r2,180(sp)
    21e0:	14c00017 	ldw	r19,0(r2)
    21e4:	15800117 	ldw	r22,4(r2)
    21e8:	10800204 	addi	r2,r2,8
    21ec:	d8802d15 	stw	r2,180(sp)
    21f0:	9080004c 	andi	r2,r18,1
    21f4:	10019026 	beq	r2,zero,2838 <___vfprintf_internal_r+0x11b4>
    21f8:	9d84b03a 	or	r2,r19,r22
    21fc:	10036926 	beq	r2,zero,2fa4 <___vfprintf_internal_r+0x1920>
    2200:	d8c02917 	ldw	r3,164(sp)
    2204:	00800c04 	movi	r2,48
    2208:	d8802705 	stb	r2,156(sp)
    220c:	dc402745 	stb	r17,157(sp)
    2210:	d8002785 	stb	zero,158(sp)
    2214:	90800094 	ori	r2,r18,2
    2218:	18045d16 	blt	r3,zero,3390 <___vfprintf_internal_r+0x1d0c>
    221c:	00bfdfc4 	movi	r2,-129
    2220:	90a4703a 	and	r18,r18,r2
    2224:	94800094 	ori	r18,r18,2
    2228:	0039883a 	mov	fp,zero
    222c:	d9003917 	ldw	r4,228(sp)
    2230:	dc001e04 	addi	r16,sp,120
    2234:	988003cc 	andi	r2,r19,15
    2238:	b006973a 	slli	r3,r22,28
    223c:	2085883a 	add	r2,r4,r2
    2240:	9826d13a 	srli	r19,r19,4
    2244:	10800003 	ldbu	r2,0(r2)
    2248:	b02cd13a 	srli	r22,r22,4
    224c:	843fffc4 	addi	r16,r16,-1
    2250:	1ce6b03a 	or	r19,r3,r19
    2254:	80800005 	stb	r2,0(r16)
    2258:	9d84b03a 	or	r2,r19,r22
    225c:	103ff51e 	bne	r2,zero,2234 <___vfprintf_internal_r+0xbb0>
    2260:	d8c02817 	ldw	r3,160(sp)
    2264:	1c07c83a 	sub	r3,r3,r16
    2268:	d8c02e15 	stw	r3,184(sp)
    226c:	003ecc06 	br	1da0 <___vfprintf_internal_r+0x71c>
    2270:	18c03fcc 	andi	r3,r3,255
    2274:	183e9f26 	beq	r3,zero,1cf4 <___vfprintf_internal_r+0x670>
    2278:	d9c02785 	stb	r7,158(sp)
    227c:	003e9d06 	br	1cf4 <___vfprintf_internal_r+0x670>
    2280:	00c00044 	movi	r3,1
    2284:	01c00ac4 	movi	r7,43
    2288:	ac400007 	ldb	r17,0(r21)
    228c:	003d5e06 	br	1808 <___vfprintf_internal_r+0x184>
    2290:	94800814 	ori	r18,r18,32
    2294:	ac400007 	ldb	r17,0(r21)
    2298:	003d5b06 	br	1808 <___vfprintf_internal_r+0x184>
    229c:	d8c02d17 	ldw	r3,180(sp)
    22a0:	d8002785 	stb	zero,158(sp)
    22a4:	1c000017 	ldw	r16,0(r3)
    22a8:	1cc00104 	addi	r19,r3,4
    22ac:	80041926 	beq	r16,zero,3314 <___vfprintf_internal_r+0x1c90>
    22b0:	d9002917 	ldw	r4,164(sp)
    22b4:	2003d016 	blt	r4,zero,31f8 <___vfprintf_internal_r+0x1b74>
    22b8:	200d883a 	mov	r6,r4
    22bc:	000b883a 	mov	r5,zero
    22c0:	8009883a 	mov	r4,r16
    22c4:	da003d15 	stw	r8,244(sp)
    22c8:	00066880 	call	6688 <memchr>
    22cc:	da003d17 	ldw	r8,244(sp)
    22d0:	10045426 	beq	r2,zero,3424 <___vfprintf_internal_r+0x1da0>
    22d4:	1405c83a 	sub	r2,r2,r16
    22d8:	d8802e15 	stw	r2,184(sp)
    22dc:	1003cc16 	blt	r2,zero,3210 <___vfprintf_internal_r+0x1b8c>
    22e0:	df002783 	ldbu	fp,158(sp)
    22e4:	d8802a15 	stw	r2,168(sp)
    22e8:	dcc02d15 	stw	r19,180(sp)
    22ec:	d8002915 	stw	zero,164(sp)
    22f0:	d8003215 	stw	zero,200(sp)
    22f4:	003eb006 	br	1db8 <___vfprintf_internal_r+0x734>
    22f8:	18c03fcc 	andi	r3,r3,255
    22fc:	183f9b26 	beq	r3,zero,216c <___vfprintf_internal_r+0xae8>
    2300:	d9c02785 	stb	r7,158(sp)
    2304:	003f9906 	br	216c <___vfprintf_internal_r+0xae8>
    2308:	18c03fcc 	andi	r3,r3,255
    230c:	1805551e 	bne	r3,zero,3864 <___vfprintf_internal_r+0x21e0>
    2310:	01400074 	movhi	r5,1
    2314:	295f4504 	addi	r5,r5,32020
    2318:	d9403915 	stw	r5,228(sp)
    231c:	9080080c 	andi	r2,r18,32
    2320:	103fae1e 	bne	r2,zero,21dc <___vfprintf_internal_r+0xb58>
    2324:	9080040c 	andi	r2,r18,16
    2328:	1002de26 	beq	r2,zero,2ea4 <___vfprintf_internal_r+0x1820>
    232c:	d8c02d17 	ldw	r3,180(sp)
    2330:	002d883a 	mov	r22,zero
    2334:	1cc00017 	ldw	r19,0(r3)
    2338:	18c00104 	addi	r3,r3,4
    233c:	d8c02d15 	stw	r3,180(sp)
    2340:	003fab06 	br	21f0 <___vfprintf_internal_r+0xb6c>
    2344:	38803fcc 	andi	r2,r7,255
    2348:	1080201c 	xori	r2,r2,128
    234c:	10bfe004 	addi	r2,r2,-128
    2350:	1002d21e 	bne	r2,zero,2e9c <___vfprintf_internal_r+0x1818>
    2354:	00c00044 	movi	r3,1
    2358:	01c00804 	movi	r7,32
    235c:	ac400007 	ldb	r17,0(r21)
    2360:	003d2906 	br	1808 <___vfprintf_internal_r+0x184>
    2364:	94800054 	ori	r18,r18,1
    2368:	ac400007 	ldb	r17,0(r21)
    236c:	003d2606 	br	1808 <___vfprintf_internal_r+0x184>
    2370:	18c03fcc 	andi	r3,r3,255
    2374:	183e0526 	beq	r3,zero,1b8c <___vfprintf_internal_r+0x508>
    2378:	d9c02785 	stb	r7,158(sp)
    237c:	003e0306 	br	1b8c <___vfprintf_internal_r+0x508>
    2380:	94801014 	ori	r18,r18,64
    2384:	ac400007 	ldb	r17,0(r21)
    2388:	003d1f06 	br	1808 <___vfprintf_internal_r+0x184>
    238c:	ac400007 	ldb	r17,0(r21)
    2390:	8a438726 	beq	r17,r9,31b0 <___vfprintf_internal_r+0x1b2c>
    2394:	94800414 	ori	r18,r18,16
    2398:	003d1b06 	br	1808 <___vfprintf_internal_r+0x184>
    239c:	18c03fcc 	andi	r3,r3,255
    23a0:	1805341e 	bne	r3,zero,3874 <___vfprintf_internal_r+0x21f0>
    23a4:	9080080c 	andi	r2,r18,32
    23a8:	1002cd26 	beq	r2,zero,2ee0 <___vfprintf_internal_r+0x185c>
    23ac:	d9402d17 	ldw	r5,180(sp)
    23b0:	d9002f17 	ldw	r4,188(sp)
    23b4:	28800017 	ldw	r2,0(r5)
    23b8:	2007d7fa 	srai	r3,r4,31
    23bc:	29400104 	addi	r5,r5,4
    23c0:	d9402d15 	stw	r5,180(sp)
    23c4:	11000015 	stw	r4,0(r2)
    23c8:	10c00115 	stw	r3,4(r2)
    23cc:	003ce506 	br	1764 <___vfprintf_internal_r+0xe0>
    23d0:	d8c02d17 	ldw	r3,180(sp)
    23d4:	d9002d17 	ldw	r4,180(sp)
    23d8:	d8002785 	stb	zero,158(sp)
    23dc:	18800017 	ldw	r2,0(r3)
    23e0:	21000104 	addi	r4,r4,4
    23e4:	00c00044 	movi	r3,1
    23e8:	d8c02a15 	stw	r3,168(sp)
    23ec:	d8801405 	stb	r2,80(sp)
    23f0:	d9002d15 	stw	r4,180(sp)
    23f4:	d8c02e15 	stw	r3,184(sp)
    23f8:	d8002915 	stw	zero,164(sp)
    23fc:	d8003215 	stw	zero,200(sp)
    2400:	dc001404 	addi	r16,sp,80
    2404:	0039883a 	mov	fp,zero
    2408:	003e7206 	br	1dd4 <___vfprintf_internal_r+0x750>
    240c:	01000074 	movhi	r4,1
    2410:	211f4504 	addi	r4,r4,32020
    2414:	0039883a 	mov	fp,zero
    2418:	d9003915 	stw	r4,228(sp)
    241c:	04401e04 	movi	r17,120
    2420:	003f8206 	br	222c <___vfprintf_internal_r+0xba8>
    2424:	18c03fcc 	andi	r3,r3,255
    2428:	1805061e 	bne	r3,zero,3844 <___vfprintf_internal_r+0x21c0>
    242c:	883d9126 	beq	r17,zero,1a74 <___vfprintf_internal_r+0x3f0>
    2430:	00c00044 	movi	r3,1
    2434:	d8c02a15 	stw	r3,168(sp)
    2438:	dc401405 	stb	r17,80(sp)
    243c:	d8002785 	stb	zero,158(sp)
    2440:	003fec06 	br	23f4 <___vfprintf_internal_r+0xd70>
    2444:	01400074 	movhi	r5,1
    2448:	295f4504 	addi	r5,r5,32020
    244c:	d9403915 	stw	r5,228(sp)
    2450:	d8c02d15 	stw	r3,180(sp)
    2454:	1025883a 	mov	r18,r2
    2458:	04401e04 	movi	r17,120
    245c:	9d84b03a 	or	r2,r19,r22
    2460:	1000fc1e 	bne	r2,zero,2854 <___vfprintf_internal_r+0x11d0>
    2464:	0039883a 	mov	fp,zero
    2468:	00800084 	movi	r2,2
    246c:	10803fcc 	andi	r2,r2,255
    2470:	00c00044 	movi	r3,1
    2474:	10c20f26 	beq	r2,r3,2cb4 <___vfprintf_internal_r+0x1630>
    2478:	00c00084 	movi	r3,2
    247c:	10fd6326 	beq	r2,r3,1a0c <___vfprintf_internal_r+0x388>
    2480:	003e2d06 	br	1d38 <___vfprintf_internal_r+0x6b4>
    2484:	d8c02017 	ldw	r3,128(sp)
    2488:	003e9306 	br	1ed8 <___vfprintf_internal_r+0x854>
    248c:	00801944 	movi	r2,101
    2490:	14407e0e 	bge	r2,r17,268c <___vfprintf_internal_r+0x1008>
    2494:	d9003617 	ldw	r4,216(sp)
    2498:	d9403817 	ldw	r5,224(sp)
    249c:	000d883a 	mov	r6,zero
    24a0:	000f883a 	mov	r7,zero
    24a4:	d8c03c15 	stw	r3,240(sp)
    24a8:	da003d15 	stw	r8,244(sp)
    24ac:	000bee40 	call	bee4 <__eqdf2>
    24b0:	d8c03c17 	ldw	r3,240(sp)
    24b4:	da003d17 	ldw	r8,244(sp)
    24b8:	1000f71e 	bne	r2,zero,2898 <___vfprintf_internal_r+0x1214>
    24bc:	d8801f17 	ldw	r2,124(sp)
    24c0:	01000074 	movhi	r4,1
    24c4:	211f4c04 	addi	r4,r4,32048
    24c8:	18c00044 	addi	r3,r3,1
    24cc:	10800044 	addi	r2,r2,1
    24d0:	41000015 	stw	r4,0(r8)
    24d4:	01000044 	movi	r4,1
    24d8:	41000115 	stw	r4,4(r8)
    24dc:	d8c02015 	stw	r3,128(sp)
    24e0:	d8801f15 	stw	r2,124(sp)
    24e4:	010001c4 	movi	r4,7
    24e8:	2082b816 	blt	r4,r2,2fcc <___vfprintf_internal_r+0x1948>
    24ec:	42000204 	addi	r8,r8,8
    24f0:	d8802617 	ldw	r2,152(sp)
    24f4:	d9403317 	ldw	r5,204(sp)
    24f8:	11400216 	blt	r2,r5,2504 <___vfprintf_internal_r+0xe80>
    24fc:	9080004c 	andi	r2,r18,1
    2500:	103ed526 	beq	r2,zero,2058 <___vfprintf_internal_r+0x9d4>
    2504:	d8803717 	ldw	r2,220(sp)
    2508:	d9003417 	ldw	r4,208(sp)
    250c:	d9403717 	ldw	r5,220(sp)
    2510:	1887883a 	add	r3,r3,r2
    2514:	d8801f17 	ldw	r2,124(sp)
    2518:	41000015 	stw	r4,0(r8)
    251c:	41400115 	stw	r5,4(r8)
    2520:	10800044 	addi	r2,r2,1
    2524:	d8c02015 	stw	r3,128(sp)
    2528:	d8801f15 	stw	r2,124(sp)
    252c:	010001c4 	movi	r4,7
    2530:	20832916 	blt	r4,r2,31d8 <___vfprintf_internal_r+0x1b54>
    2534:	42000204 	addi	r8,r8,8
    2538:	d8803317 	ldw	r2,204(sp)
    253c:	143fffc4 	addi	r16,r2,-1
    2540:	043ec50e 	bge	zero,r16,2058 <___vfprintf_internal_r+0x9d4>
    2544:	04400404 	movi	r17,16
    2548:	d8801f17 	ldw	r2,124(sp)
    254c:	8c00880e 	bge	r17,r16,2770 <___vfprintf_internal_r+0x10ec>
    2550:	01400074 	movhi	r5,1
    2554:	295f4c84 	addi	r5,r5,32050
    2558:	d9402b15 	stw	r5,172(sp)
    255c:	058001c4 	movi	r22,7
    2560:	dcc02c17 	ldw	r19,176(sp)
    2564:	00000306 	br	2574 <___vfprintf_internal_r+0xef0>
    2568:	42000204 	addi	r8,r8,8
    256c:	843ffc04 	addi	r16,r16,-16
    2570:	8c00820e 	bge	r17,r16,277c <___vfprintf_internal_r+0x10f8>
    2574:	18c00404 	addi	r3,r3,16
    2578:	10800044 	addi	r2,r2,1
    257c:	45000015 	stw	r20,0(r8)
    2580:	44400115 	stw	r17,4(r8)
    2584:	d8c02015 	stw	r3,128(sp)
    2588:	d8801f15 	stw	r2,124(sp)
    258c:	b0bff60e 	bge	r22,r2,2568 <___vfprintf_internal_r+0xee4>
    2590:	d9801e04 	addi	r6,sp,120
    2594:	b80b883a 	mov	r5,r23
    2598:	9809883a 	mov	r4,r19
    259c:	00084200 	call	8420 <__sprint_r>
    25a0:	103d3a1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    25a4:	d8c02017 	ldw	r3,128(sp)
    25a8:	d8801f17 	ldw	r2,124(sp)
    25ac:	da000404 	addi	r8,sp,16
    25b0:	003fee06 	br	256c <___vfprintf_internal_r+0xee8>
    25b4:	d9403117 	ldw	r5,196(sp)
    25b8:	d8802a17 	ldw	r2,168(sp)
    25bc:	28adc83a 	sub	r22,r5,r2
    25c0:	05be630e 	bge	zero,r22,1f50 <___vfprintf_internal_r+0x8cc>
    25c4:	07000404 	movi	fp,16
    25c8:	d8801f17 	ldw	r2,124(sp)
    25cc:	e5838f0e 	bge	fp,r22,340c <___vfprintf_internal_r+0x1d88>
    25d0:	01400074 	movhi	r5,1
    25d4:	295f4c84 	addi	r5,r5,32050
    25d8:	dc403015 	stw	r17,192(sp)
    25dc:	d9402b15 	stw	r5,172(sp)
    25e0:	b023883a 	mov	r17,r22
    25e4:	04c001c4 	movi	r19,7
    25e8:	a82d883a 	mov	r22,r21
    25ec:	902b883a 	mov	r21,r18
    25f0:	8025883a 	mov	r18,r16
    25f4:	dc002c17 	ldw	r16,176(sp)
    25f8:	00000306 	br	2608 <___vfprintf_internal_r+0xf84>
    25fc:	8c7ffc04 	addi	r17,r17,-16
    2600:	42000204 	addi	r8,r8,8
    2604:	e440110e 	bge	fp,r17,264c <___vfprintf_internal_r+0xfc8>
    2608:	18c00404 	addi	r3,r3,16
    260c:	10800044 	addi	r2,r2,1
    2610:	45000015 	stw	r20,0(r8)
    2614:	47000115 	stw	fp,4(r8)
    2618:	d8c02015 	stw	r3,128(sp)
    261c:	d8801f15 	stw	r2,124(sp)
    2620:	98bff60e 	bge	r19,r2,25fc <___vfprintf_internal_r+0xf78>
    2624:	d9801e04 	addi	r6,sp,120
    2628:	b80b883a 	mov	r5,r23
    262c:	8009883a 	mov	r4,r16
    2630:	00084200 	call	8420 <__sprint_r>
    2634:	103d151e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2638:	8c7ffc04 	addi	r17,r17,-16
    263c:	d8c02017 	ldw	r3,128(sp)
    2640:	d8801f17 	ldw	r2,124(sp)
    2644:	da000404 	addi	r8,sp,16
    2648:	e47fef16 	blt	fp,r17,2608 <___vfprintf_internal_r+0xf84>
    264c:	9021883a 	mov	r16,r18
    2650:	a825883a 	mov	r18,r21
    2654:	b02b883a 	mov	r21,r22
    2658:	882d883a 	mov	r22,r17
    265c:	dc403017 	ldw	r17,192(sp)
    2660:	d9002b17 	ldw	r4,172(sp)
    2664:	1d87883a 	add	r3,r3,r22
    2668:	10800044 	addi	r2,r2,1
    266c:	41000015 	stw	r4,0(r8)
    2670:	45800115 	stw	r22,4(r8)
    2674:	d8c02015 	stw	r3,128(sp)
    2678:	d8801f15 	stw	r2,124(sp)
    267c:	010001c4 	movi	r4,7
    2680:	20818e16 	blt	r4,r2,2cbc <___vfprintf_internal_r+0x1638>
    2684:	42000204 	addi	r8,r8,8
    2688:	003e3106 	br	1f50 <___vfprintf_internal_r+0x8cc>
    268c:	d9403317 	ldw	r5,204(sp)
    2690:	00800044 	movi	r2,1
    2694:	18c00044 	addi	r3,r3,1
    2698:	1141530e 	bge	r2,r5,2be8 <___vfprintf_internal_r+0x1564>
    269c:	dc401f17 	ldw	r17,124(sp)
    26a0:	00800044 	movi	r2,1
    26a4:	40800115 	stw	r2,4(r8)
    26a8:	8c400044 	addi	r17,r17,1
    26ac:	44000015 	stw	r16,0(r8)
    26b0:	d8c02015 	stw	r3,128(sp)
    26b4:	dc401f15 	stw	r17,124(sp)
    26b8:	008001c4 	movi	r2,7
    26bc:	14416b16 	blt	r2,r17,2c6c <___vfprintf_internal_r+0x15e8>
    26c0:	42000204 	addi	r8,r8,8
    26c4:	d8803717 	ldw	r2,220(sp)
    26c8:	d9003417 	ldw	r4,208(sp)
    26cc:	8c400044 	addi	r17,r17,1
    26d0:	10c7883a 	add	r3,r2,r3
    26d4:	40800115 	stw	r2,4(r8)
    26d8:	41000015 	stw	r4,0(r8)
    26dc:	d8c02015 	stw	r3,128(sp)
    26e0:	dc401f15 	stw	r17,124(sp)
    26e4:	008001c4 	movi	r2,7
    26e8:	14416916 	blt	r2,r17,2c90 <___vfprintf_internal_r+0x160c>
    26ec:	45800204 	addi	r22,r8,8
    26f0:	d9003617 	ldw	r4,216(sp)
    26f4:	d9403817 	ldw	r5,224(sp)
    26f8:	000d883a 	mov	r6,zero
    26fc:	000f883a 	mov	r7,zero
    2700:	d8c03c15 	stw	r3,240(sp)
    2704:	000bee40 	call	bee4 <__eqdf2>
    2708:	d8c03c17 	ldw	r3,240(sp)
    270c:	1000bc26 	beq	r2,zero,2a00 <___vfprintf_internal_r+0x137c>
    2710:	d9403317 	ldw	r5,204(sp)
    2714:	84000044 	addi	r16,r16,1
    2718:	8c400044 	addi	r17,r17,1
    271c:	28bfffc4 	addi	r2,r5,-1
    2720:	1887883a 	add	r3,r3,r2
    2724:	b0800115 	stw	r2,4(r22)
    2728:	b4000015 	stw	r16,0(r22)
    272c:	d8c02015 	stw	r3,128(sp)
    2730:	dc401f15 	stw	r17,124(sp)
    2734:	008001c4 	movi	r2,7
    2738:	14414316 	blt	r2,r17,2c48 <___vfprintf_internal_r+0x15c4>
    273c:	b5800204 	addi	r22,r22,8
    2740:	d9003a17 	ldw	r4,232(sp)
    2744:	df0022c4 	addi	fp,sp,139
    2748:	8c400044 	addi	r17,r17,1
    274c:	20c7883a 	add	r3,r4,r3
    2750:	b7000015 	stw	fp,0(r22)
    2754:	b1000115 	stw	r4,4(r22)
    2758:	d8c02015 	stw	r3,128(sp)
    275c:	dc401f15 	stw	r17,124(sp)
    2760:	008001c4 	movi	r2,7
    2764:	14400e16 	blt	r2,r17,27a0 <___vfprintf_internal_r+0x111c>
    2768:	b2000204 	addi	r8,r22,8
    276c:	003e3a06 	br	2058 <___vfprintf_internal_r+0x9d4>
    2770:	01000074 	movhi	r4,1
    2774:	211f4c84 	addi	r4,r4,32050
    2778:	d9002b15 	stw	r4,172(sp)
    277c:	d9002b17 	ldw	r4,172(sp)
    2780:	1c07883a 	add	r3,r3,r16
    2784:	44000115 	stw	r16,4(r8)
    2788:	41000015 	stw	r4,0(r8)
    278c:	10800044 	addi	r2,r2,1
    2790:	d8c02015 	stw	r3,128(sp)
    2794:	d8801f15 	stw	r2,124(sp)
    2798:	010001c4 	movi	r4,7
    279c:	20be2d0e 	bge	r4,r2,2054 <___vfprintf_internal_r+0x9d0>
    27a0:	d9002c17 	ldw	r4,176(sp)
    27a4:	d9801e04 	addi	r6,sp,120
    27a8:	b80b883a 	mov	r5,r23
    27ac:	00084200 	call	8420 <__sprint_r>
    27b0:	103cb61e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    27b4:	d8c02017 	ldw	r3,128(sp)
    27b8:	da000404 	addi	r8,sp,16
    27bc:	003e2606 	br	2058 <___vfprintf_internal_r+0x9d4>
    27c0:	d9002c17 	ldw	r4,176(sp)
    27c4:	d9801e04 	addi	r6,sp,120
    27c8:	b80b883a 	mov	r5,r23
    27cc:	00084200 	call	8420 <__sprint_r>
    27d0:	103e5d26 	beq	r2,zero,2148 <___vfprintf_internal_r+0xac4>
    27d4:	003cad06 	br	1a8c <___vfprintf_internal_r+0x408>
    27d8:	d9002c17 	ldw	r4,176(sp)
    27dc:	d9801e04 	addi	r6,sp,120
    27e0:	b80b883a 	mov	r5,r23
    27e4:	00084200 	call	8420 <__sprint_r>
    27e8:	103ca81e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    27ec:	d8c02017 	ldw	r3,128(sp)
    27f0:	da000404 	addi	r8,sp,16
    27f4:	003e0b06 	br	2024 <___vfprintf_internal_r+0x9a0>
    27f8:	d9002c17 	ldw	r4,176(sp)
    27fc:	d9801e04 	addi	r6,sp,120
    2800:	b80b883a 	mov	r5,r23
    2804:	00084200 	call	8420 <__sprint_r>
    2808:	103ca01e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    280c:	d8c02017 	ldw	r3,128(sp)
    2810:	da000404 	addi	r8,sp,16
    2814:	003dbd06 	br	1f0c <___vfprintf_internal_r+0x888>
    2818:	d9002c17 	ldw	r4,176(sp)
    281c:	d9801e04 	addi	r6,sp,120
    2820:	b80b883a 	mov	r5,r23
    2824:	00084200 	call	8420 <__sprint_r>
    2828:	103c981e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    282c:	d8c02017 	ldw	r3,128(sp)
    2830:	da000404 	addi	r8,sp,16
    2834:	003dc306 	br	1f44 <___vfprintf_internal_r+0x8c0>
    2838:	d8802917 	ldw	r2,164(sp)
    283c:	d8002785 	stb	zero,158(sp)
    2840:	103f0616 	blt	r2,zero,245c <___vfprintf_internal_r+0xdd8>
    2844:	00ffdfc4 	movi	r3,-129
    2848:	9d84b03a 	or	r2,r19,r22
    284c:	90e4703a 	and	r18,r18,r3
    2850:	103c6b26 	beq	r2,zero,1a00 <___vfprintf_internal_r+0x37c>
    2854:	0039883a 	mov	fp,zero
    2858:	003e7406 	br	222c <___vfprintf_internal_r+0xba8>
    285c:	9080040c 	andi	r2,r18,16
    2860:	1001b326 	beq	r2,zero,2f30 <___vfprintf_internal_r+0x18ac>
    2864:	d9002d17 	ldw	r4,180(sp)
    2868:	d9402917 	ldw	r5,164(sp)
    286c:	d8002785 	stb	zero,158(sp)
    2870:	20800104 	addi	r2,r4,4
    2874:	24c00017 	ldw	r19,0(r4)
    2878:	002d883a 	mov	r22,zero
    287c:	2801b516 	blt	r5,zero,2f54 <___vfprintf_internal_r+0x18d0>
    2880:	00ffdfc4 	movi	r3,-129
    2884:	d8802d15 	stw	r2,180(sp)
    2888:	90e4703a 	and	r18,r18,r3
    288c:	983d2726 	beq	r19,zero,1d2c <___vfprintf_internal_r+0x6a8>
    2890:	0039883a 	mov	fp,zero
    2894:	003d2a06 	br	1d40 <___vfprintf_internal_r+0x6bc>
    2898:	dc402617 	ldw	r17,152(sp)
    289c:	0441d30e 	bge	zero,r17,2fec <___vfprintf_internal_r+0x1968>
    28a0:	dc403217 	ldw	r17,200(sp)
    28a4:	d8803317 	ldw	r2,204(sp)
    28a8:	1440010e 	bge	r2,r17,28b0 <___vfprintf_internal_r+0x122c>
    28ac:	1023883a 	mov	r17,r2
    28b0:	04400a0e 	bge	zero,r17,28dc <___vfprintf_internal_r+0x1258>
    28b4:	d8801f17 	ldw	r2,124(sp)
    28b8:	1c47883a 	add	r3,r3,r17
    28bc:	44000015 	stw	r16,0(r8)
    28c0:	10800044 	addi	r2,r2,1
    28c4:	44400115 	stw	r17,4(r8)
    28c8:	d8c02015 	stw	r3,128(sp)
    28cc:	d8801f15 	stw	r2,124(sp)
    28d0:	010001c4 	movi	r4,7
    28d4:	20826516 	blt	r4,r2,326c <___vfprintf_internal_r+0x1be8>
    28d8:	42000204 	addi	r8,r8,8
    28dc:	88026116 	blt	r17,zero,3264 <___vfprintf_internal_r+0x1be0>
    28e0:	d9003217 	ldw	r4,200(sp)
    28e4:	2463c83a 	sub	r17,r4,r17
    28e8:	04407b0e 	bge	zero,r17,2ad8 <___vfprintf_internal_r+0x1454>
    28ec:	05800404 	movi	r22,16
    28f0:	d8801f17 	ldw	r2,124(sp)
    28f4:	b4419d0e 	bge	r22,r17,2f6c <___vfprintf_internal_r+0x18e8>
    28f8:	01000074 	movhi	r4,1
    28fc:	211f4c84 	addi	r4,r4,32050
    2900:	d9002b15 	stw	r4,172(sp)
    2904:	070001c4 	movi	fp,7
    2908:	dcc02c17 	ldw	r19,176(sp)
    290c:	00000306 	br	291c <___vfprintf_internal_r+0x1298>
    2910:	42000204 	addi	r8,r8,8
    2914:	8c7ffc04 	addi	r17,r17,-16
    2918:	b441970e 	bge	r22,r17,2f78 <___vfprintf_internal_r+0x18f4>
    291c:	18c00404 	addi	r3,r3,16
    2920:	10800044 	addi	r2,r2,1
    2924:	45000015 	stw	r20,0(r8)
    2928:	45800115 	stw	r22,4(r8)
    292c:	d8c02015 	stw	r3,128(sp)
    2930:	d8801f15 	stw	r2,124(sp)
    2934:	e0bff60e 	bge	fp,r2,2910 <___vfprintf_internal_r+0x128c>
    2938:	d9801e04 	addi	r6,sp,120
    293c:	b80b883a 	mov	r5,r23
    2940:	9809883a 	mov	r4,r19
    2944:	00084200 	call	8420 <__sprint_r>
    2948:	103c501e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    294c:	d8c02017 	ldw	r3,128(sp)
    2950:	d8801f17 	ldw	r2,124(sp)
    2954:	da000404 	addi	r8,sp,16
    2958:	003fee06 	br	2914 <___vfprintf_internal_r+0x1290>
    295c:	d9002c17 	ldw	r4,176(sp)
    2960:	d9801e04 	addi	r6,sp,120
    2964:	b80b883a 	mov	r5,r23
    2968:	00084200 	call	8420 <__sprint_r>
    296c:	103c471e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2970:	d8c02017 	ldw	r3,128(sp)
    2974:	df002787 	ldb	fp,158(sp)
    2978:	da000404 	addi	r8,sp,16
    297c:	003d5606 	br	1ed8 <___vfprintf_internal_r+0x854>
    2980:	9080040c 	andi	r2,r18,16
    2984:	10016126 	beq	r2,zero,2f0c <___vfprintf_internal_r+0x1888>
    2988:	d8802d17 	ldw	r2,180(sp)
    298c:	14c00017 	ldw	r19,0(r2)
    2990:	10800104 	addi	r2,r2,4
    2994:	d8802d15 	stw	r2,180(sp)
    2998:	982dd7fa 	srai	r22,r19,31
    299c:	b005883a 	mov	r2,r22
    29a0:	003c8206 	br	1bac <___vfprintf_internal_r+0x528>
    29a4:	9080040c 	andi	r2,r18,16
    29a8:	10003526 	beq	r2,zero,2a80 <___vfprintf_internal_r+0x13fc>
    29ac:	d9402d17 	ldw	r5,180(sp)
    29b0:	d8c02917 	ldw	r3,164(sp)
    29b4:	d8002785 	stb	zero,158(sp)
    29b8:	28800104 	addi	r2,r5,4
    29bc:	2cc00017 	ldw	r19,0(r5)
    29c0:	002d883a 	mov	r22,zero
    29c4:	18003716 	blt	r3,zero,2aa4 <___vfprintf_internal_r+0x1420>
    29c8:	00ffdfc4 	movi	r3,-129
    29cc:	d8802d15 	stw	r2,180(sp)
    29d0:	90e4703a 	and	r18,r18,r3
    29d4:	0039883a 	mov	fp,zero
    29d8:	983df326 	beq	r19,zero,21a8 <___vfprintf_internal_r+0xb24>
    29dc:	00800244 	movi	r2,9
    29e0:	14fc7b36 	bltu	r2,r19,1bd0 <___vfprintf_internal_r+0x54c>
    29e4:	d8c02817 	ldw	r3,160(sp)
    29e8:	dc001dc4 	addi	r16,sp,119
    29ec:	9cc00c04 	addi	r19,r19,48
    29f0:	1c07c83a 	sub	r3,r3,r16
    29f4:	dcc01dc5 	stb	r19,119(sp)
    29f8:	d8c02e15 	stw	r3,184(sp)
    29fc:	003ce806 	br	1da0 <___vfprintf_internal_r+0x71c>
    2a00:	d8803317 	ldw	r2,204(sp)
    2a04:	143fffc4 	addi	r16,r2,-1
    2a08:	043f4d0e 	bge	zero,r16,2740 <___vfprintf_internal_r+0x10bc>
    2a0c:	07000404 	movi	fp,16
    2a10:	e400810e 	bge	fp,r16,2c18 <___vfprintf_internal_r+0x1594>
    2a14:	01400074 	movhi	r5,1
    2a18:	295f4c84 	addi	r5,r5,32050
    2a1c:	d9402b15 	stw	r5,172(sp)
    2a20:	01c001c4 	movi	r7,7
    2a24:	dcc02c17 	ldw	r19,176(sp)
    2a28:	00000306 	br	2a38 <___vfprintf_internal_r+0x13b4>
    2a2c:	b5800204 	addi	r22,r22,8
    2a30:	843ffc04 	addi	r16,r16,-16
    2a34:	e4007b0e 	bge	fp,r16,2c24 <___vfprintf_internal_r+0x15a0>
    2a38:	18c00404 	addi	r3,r3,16
    2a3c:	8c400044 	addi	r17,r17,1
    2a40:	b5000015 	stw	r20,0(r22)
    2a44:	b7000115 	stw	fp,4(r22)
    2a48:	d8c02015 	stw	r3,128(sp)
    2a4c:	dc401f15 	stw	r17,124(sp)
    2a50:	3c7ff60e 	bge	r7,r17,2a2c <___vfprintf_internal_r+0x13a8>
    2a54:	d9801e04 	addi	r6,sp,120
    2a58:	b80b883a 	mov	r5,r23
    2a5c:	9809883a 	mov	r4,r19
    2a60:	d9c03c15 	stw	r7,240(sp)
    2a64:	00084200 	call	8420 <__sprint_r>
    2a68:	d9c03c17 	ldw	r7,240(sp)
    2a6c:	103c071e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2a70:	d8c02017 	ldw	r3,128(sp)
    2a74:	dc401f17 	ldw	r17,124(sp)
    2a78:	dd800404 	addi	r22,sp,16
    2a7c:	003fec06 	br	2a30 <___vfprintf_internal_r+0x13ac>
    2a80:	9080100c 	andi	r2,r18,64
    2a84:	d8002785 	stb	zero,158(sp)
    2a88:	10010e26 	beq	r2,zero,2ec4 <___vfprintf_internal_r+0x1840>
    2a8c:	d9002d17 	ldw	r4,180(sp)
    2a90:	d9402917 	ldw	r5,164(sp)
    2a94:	002d883a 	mov	r22,zero
    2a98:	20800104 	addi	r2,r4,4
    2a9c:	24c0000b 	ldhu	r19,0(r4)
    2aa0:	283fc90e 	bge	r5,zero,29c8 <___vfprintf_internal_r+0x1344>
    2aa4:	d8802d15 	stw	r2,180(sp)
    2aa8:	0039883a 	mov	fp,zero
    2aac:	9d84b03a 	or	r2,r19,r22
    2ab0:	103c461e 	bne	r2,zero,1bcc <___vfprintf_internal_r+0x548>
    2ab4:	00800044 	movi	r2,1
    2ab8:	003e6c06 	br	246c <___vfprintf_internal_r+0xde8>
    2abc:	d9002c17 	ldw	r4,176(sp)
    2ac0:	d9801e04 	addi	r6,sp,120
    2ac4:	b80b883a 	mov	r5,r23
    2ac8:	00084200 	call	8420 <__sprint_r>
    2acc:	103bef1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2ad0:	d8c02017 	ldw	r3,128(sp)
    2ad4:	da000404 	addi	r8,sp,16
    2ad8:	d9003217 	ldw	r4,200(sp)
    2adc:	d8802617 	ldw	r2,152(sp)
    2ae0:	d9403317 	ldw	r5,204(sp)
    2ae4:	8123883a 	add	r17,r16,r4
    2ae8:	11400216 	blt	r2,r5,2af4 <___vfprintf_internal_r+0x1470>
    2aec:	9100004c 	andi	r4,r18,1
    2af0:	20000d26 	beq	r4,zero,2b28 <___vfprintf_internal_r+0x14a4>
    2af4:	d9003717 	ldw	r4,220(sp)
    2af8:	d9403417 	ldw	r5,208(sp)
    2afc:	1907883a 	add	r3,r3,r4
    2b00:	d9001f17 	ldw	r4,124(sp)
    2b04:	41400015 	stw	r5,0(r8)
    2b08:	d9403717 	ldw	r5,220(sp)
    2b0c:	21000044 	addi	r4,r4,1
    2b10:	d8c02015 	stw	r3,128(sp)
    2b14:	41400115 	stw	r5,4(r8)
    2b18:	d9001f15 	stw	r4,124(sp)
    2b1c:	014001c4 	movi	r5,7
    2b20:	2901e816 	blt	r5,r4,32c4 <___vfprintf_internal_r+0x1c40>
    2b24:	42000204 	addi	r8,r8,8
    2b28:	d9003317 	ldw	r4,204(sp)
    2b2c:	8121883a 	add	r16,r16,r4
    2b30:	2085c83a 	sub	r2,r4,r2
    2b34:	8461c83a 	sub	r16,r16,r17
    2b38:	1400010e 	bge	r2,r16,2b40 <___vfprintf_internal_r+0x14bc>
    2b3c:	1021883a 	mov	r16,r2
    2b40:	04000a0e 	bge	zero,r16,2b6c <___vfprintf_internal_r+0x14e8>
    2b44:	d9001f17 	ldw	r4,124(sp)
    2b48:	1c07883a 	add	r3,r3,r16
    2b4c:	44400015 	stw	r17,0(r8)
    2b50:	21000044 	addi	r4,r4,1
    2b54:	44000115 	stw	r16,4(r8)
    2b58:	d8c02015 	stw	r3,128(sp)
    2b5c:	d9001f15 	stw	r4,124(sp)
    2b60:	014001c4 	movi	r5,7
    2b64:	2901fb16 	blt	r5,r4,3354 <___vfprintf_internal_r+0x1cd0>
    2b68:	42000204 	addi	r8,r8,8
    2b6c:	8001f716 	blt	r16,zero,334c <___vfprintf_internal_r+0x1cc8>
    2b70:	1421c83a 	sub	r16,r2,r16
    2b74:	043d380e 	bge	zero,r16,2058 <___vfprintf_internal_r+0x9d4>
    2b78:	04400404 	movi	r17,16
    2b7c:	d8801f17 	ldw	r2,124(sp)
    2b80:	8c3efb0e 	bge	r17,r16,2770 <___vfprintf_internal_r+0x10ec>
    2b84:	01400074 	movhi	r5,1
    2b88:	295f4c84 	addi	r5,r5,32050
    2b8c:	d9402b15 	stw	r5,172(sp)
    2b90:	058001c4 	movi	r22,7
    2b94:	dcc02c17 	ldw	r19,176(sp)
    2b98:	00000306 	br	2ba8 <___vfprintf_internal_r+0x1524>
    2b9c:	42000204 	addi	r8,r8,8
    2ba0:	843ffc04 	addi	r16,r16,-16
    2ba4:	8c3ef50e 	bge	r17,r16,277c <___vfprintf_internal_r+0x10f8>
    2ba8:	18c00404 	addi	r3,r3,16
    2bac:	10800044 	addi	r2,r2,1
    2bb0:	45000015 	stw	r20,0(r8)
    2bb4:	44400115 	stw	r17,4(r8)
    2bb8:	d8c02015 	stw	r3,128(sp)
    2bbc:	d8801f15 	stw	r2,124(sp)
    2bc0:	b0bff60e 	bge	r22,r2,2b9c <___vfprintf_internal_r+0x1518>
    2bc4:	d9801e04 	addi	r6,sp,120
    2bc8:	b80b883a 	mov	r5,r23
    2bcc:	9809883a 	mov	r4,r19
    2bd0:	00084200 	call	8420 <__sprint_r>
    2bd4:	103bad1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2bd8:	d8c02017 	ldw	r3,128(sp)
    2bdc:	d8801f17 	ldw	r2,124(sp)
    2be0:	da000404 	addi	r8,sp,16
    2be4:	003fee06 	br	2ba0 <___vfprintf_internal_r+0x151c>
    2be8:	9088703a 	and	r4,r18,r2
    2bec:	203eab1e 	bne	r4,zero,269c <___vfprintf_internal_r+0x1018>
    2bf0:	dc401f17 	ldw	r17,124(sp)
    2bf4:	40800115 	stw	r2,4(r8)
    2bf8:	44000015 	stw	r16,0(r8)
    2bfc:	8c400044 	addi	r17,r17,1
    2c00:	d8c02015 	stw	r3,128(sp)
    2c04:	dc401f15 	stw	r17,124(sp)
    2c08:	008001c4 	movi	r2,7
    2c0c:	14400e16 	blt	r2,r17,2c48 <___vfprintf_internal_r+0x15c4>
    2c10:	45800204 	addi	r22,r8,8
    2c14:	003eca06 	br	2740 <___vfprintf_internal_r+0x10bc>
    2c18:	01000074 	movhi	r4,1
    2c1c:	211f4c84 	addi	r4,r4,32050
    2c20:	d9002b15 	stw	r4,172(sp)
    2c24:	d8802b17 	ldw	r2,172(sp)
    2c28:	1c07883a 	add	r3,r3,r16
    2c2c:	8c400044 	addi	r17,r17,1
    2c30:	b0800015 	stw	r2,0(r22)
    2c34:	b4000115 	stw	r16,4(r22)
    2c38:	d8c02015 	stw	r3,128(sp)
    2c3c:	dc401f15 	stw	r17,124(sp)
    2c40:	008001c4 	movi	r2,7
    2c44:	147ebd0e 	bge	r2,r17,273c <___vfprintf_internal_r+0x10b8>
    2c48:	d9002c17 	ldw	r4,176(sp)
    2c4c:	d9801e04 	addi	r6,sp,120
    2c50:	b80b883a 	mov	r5,r23
    2c54:	00084200 	call	8420 <__sprint_r>
    2c58:	103b8c1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2c5c:	d8c02017 	ldw	r3,128(sp)
    2c60:	dc401f17 	ldw	r17,124(sp)
    2c64:	dd800404 	addi	r22,sp,16
    2c68:	003eb506 	br	2740 <___vfprintf_internal_r+0x10bc>
    2c6c:	d9002c17 	ldw	r4,176(sp)
    2c70:	d9801e04 	addi	r6,sp,120
    2c74:	b80b883a 	mov	r5,r23
    2c78:	00084200 	call	8420 <__sprint_r>
    2c7c:	103b831e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2c80:	d8c02017 	ldw	r3,128(sp)
    2c84:	dc401f17 	ldw	r17,124(sp)
    2c88:	da000404 	addi	r8,sp,16
    2c8c:	003e8d06 	br	26c4 <___vfprintf_internal_r+0x1040>
    2c90:	d9002c17 	ldw	r4,176(sp)
    2c94:	d9801e04 	addi	r6,sp,120
    2c98:	b80b883a 	mov	r5,r23
    2c9c:	00084200 	call	8420 <__sprint_r>
    2ca0:	103b7a1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2ca4:	d8c02017 	ldw	r3,128(sp)
    2ca8:	dc401f17 	ldw	r17,124(sp)
    2cac:	dd800404 	addi	r22,sp,16
    2cb0:	003e8f06 	br	26f0 <___vfprintf_internal_r+0x106c>
    2cb4:	0027883a 	mov	r19,zero
    2cb8:	003f4a06 	br	29e4 <___vfprintf_internal_r+0x1360>
    2cbc:	d9002c17 	ldw	r4,176(sp)
    2cc0:	d9801e04 	addi	r6,sp,120
    2cc4:	b80b883a 	mov	r5,r23
    2cc8:	00084200 	call	8420 <__sprint_r>
    2ccc:	103b6f1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2cd0:	d8c02017 	ldw	r3,128(sp)
    2cd4:	da000404 	addi	r8,sp,16
    2cd8:	003c9d06 	br	1f50 <___vfprintf_internal_r+0x8cc>
    2cdc:	04e7c83a 	sub	r19,zero,r19
    2ce0:	9804c03a 	cmpne	r2,r19,zero
    2ce4:	05adc83a 	sub	r22,zero,r22
    2ce8:	b0adc83a 	sub	r22,r22,r2
    2cec:	d8802917 	ldw	r2,164(sp)
    2cf0:	07000b44 	movi	fp,45
    2cf4:	df002785 	stb	fp,158(sp)
    2cf8:	10017b16 	blt	r2,zero,32e8 <___vfprintf_internal_r+0x1c64>
    2cfc:	00bfdfc4 	movi	r2,-129
    2d00:	90a4703a 	and	r18,r18,r2
    2d04:	003bb106 	br	1bcc <___vfprintf_internal_r+0x548>
    2d08:	d9003617 	ldw	r4,216(sp)
    2d0c:	d9403817 	ldw	r5,224(sp)
    2d10:	da003d15 	stw	r8,244(sp)
    2d14:	00080980 	call	8098 <__fpclassifyd>
    2d18:	da003d17 	ldw	r8,244(sp)
    2d1c:	1000f026 	beq	r2,zero,30e0 <___vfprintf_internal_r+0x1a5c>
    2d20:	d9002917 	ldw	r4,164(sp)
    2d24:	05bff7c4 	movi	r22,-33
    2d28:	00bfffc4 	movi	r2,-1
    2d2c:	8dac703a 	and	r22,r17,r22
    2d30:	20820026 	beq	r4,r2,3534 <___vfprintf_internal_r+0x1eb0>
    2d34:	008011c4 	movi	r2,71
    2d38:	b081f726 	beq	r22,r2,3518 <___vfprintf_internal_r+0x1e94>
    2d3c:	d9003817 	ldw	r4,224(sp)
    2d40:	90c04014 	ori	r3,r18,256
    2d44:	d8c02b15 	stw	r3,172(sp)
    2d48:	20021516 	blt	r4,zero,35a0 <___vfprintf_internal_r+0x1f1c>
    2d4c:	dcc03817 	ldw	r19,224(sp)
    2d50:	d8002a05 	stb	zero,168(sp)
    2d54:	00801984 	movi	r2,102
    2d58:	8881f926 	beq	r17,r2,3540 <___vfprintf_internal_r+0x1ebc>
    2d5c:	00801184 	movi	r2,70
    2d60:	88821c26 	beq	r17,r2,35d4 <___vfprintf_internal_r+0x1f50>
    2d64:	00801144 	movi	r2,69
    2d68:	b081ef26 	beq	r22,r2,3528 <___vfprintf_internal_r+0x1ea4>
    2d6c:	d8c02917 	ldw	r3,164(sp)
    2d70:	d8802104 	addi	r2,sp,132
    2d74:	d8800315 	stw	r2,12(sp)
    2d78:	d9403617 	ldw	r5,216(sp)
    2d7c:	d8802504 	addi	r2,sp,148
    2d80:	d9002c17 	ldw	r4,176(sp)
    2d84:	d8800215 	stw	r2,8(sp)
    2d88:	d8802604 	addi	r2,sp,152
    2d8c:	d8c00015 	stw	r3,0(sp)
    2d90:	d8800115 	stw	r2,4(sp)
    2d94:	01c00084 	movi	r7,2
    2d98:	980d883a 	mov	r6,r19
    2d9c:	d8c03c15 	stw	r3,240(sp)
    2da0:	da003d15 	stw	r8,244(sp)
    2da4:	0003ca80 	call	3ca8 <_dtoa_r>
    2da8:	1021883a 	mov	r16,r2
    2dac:	008019c4 	movi	r2,103
    2db0:	d8c03c17 	ldw	r3,240(sp)
    2db4:	da003d17 	ldw	r8,244(sp)
    2db8:	88817126 	beq	r17,r2,3380 <___vfprintf_internal_r+0x1cfc>
    2dbc:	008011c4 	movi	r2,71
    2dc0:	88829226 	beq	r17,r2,380c <___vfprintf_internal_r+0x2188>
    2dc4:	80f9883a 	add	fp,r16,r3
    2dc8:	d9003617 	ldw	r4,216(sp)
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	980b883a 	mov	r5,r19
    2dd8:	da003d15 	stw	r8,244(sp)
    2ddc:	000bee40 	call	bee4 <__eqdf2>
    2de0:	da003d17 	ldw	r8,244(sp)
    2de4:	10018d26 	beq	r2,zero,341c <___vfprintf_internal_r+0x1d98>
    2de8:	d8802117 	ldw	r2,132(sp)
    2dec:	1700062e 	bgeu	r2,fp,2e08 <___vfprintf_internal_r+0x1784>
    2df0:	01000c04 	movi	r4,48
    2df4:	10c00044 	addi	r3,r2,1
    2df8:	d8c02115 	stw	r3,132(sp)
    2dfc:	11000005 	stb	r4,0(r2)
    2e00:	d8802117 	ldw	r2,132(sp)
    2e04:	173ffb36 	bltu	r2,fp,2df4 <___vfprintf_internal_r+0x1770>
    2e08:	1405c83a 	sub	r2,r2,r16
    2e0c:	d8803315 	stw	r2,204(sp)
    2e10:	008011c4 	movi	r2,71
    2e14:	b0817626 	beq	r22,r2,33f0 <___vfprintf_internal_r+0x1d6c>
    2e18:	00801944 	movi	r2,101
    2e1c:	1442810e 	bge	r2,r17,3824 <___vfprintf_internal_r+0x21a0>
    2e20:	d8c02617 	ldw	r3,152(sp)
    2e24:	00801984 	movi	r2,102
    2e28:	d8c03215 	stw	r3,200(sp)
    2e2c:	8881fe26 	beq	r17,r2,3628 <___vfprintf_internal_r+0x1fa4>
    2e30:	d8c03217 	ldw	r3,200(sp)
    2e34:	d9003317 	ldw	r4,204(sp)
    2e38:	1901dd16 	blt	r3,r4,35b0 <___vfprintf_internal_r+0x1f2c>
    2e3c:	9480004c 	andi	r18,r18,1
    2e40:	90022b1e 	bne	r18,zero,36f0 <___vfprintf_internal_r+0x206c>
    2e44:	1805883a 	mov	r2,r3
    2e48:	18028016 	blt	r3,zero,384c <___vfprintf_internal_r+0x21c8>
    2e4c:	d8c03217 	ldw	r3,200(sp)
    2e50:	044019c4 	movi	r17,103
    2e54:	d8c02e15 	stw	r3,184(sp)
    2e58:	df002a07 	ldb	fp,168(sp)
    2e5c:	e001531e 	bne	fp,zero,33ac <___vfprintf_internal_r+0x1d28>
    2e60:	df002783 	ldbu	fp,158(sp)
    2e64:	d8802a15 	stw	r2,168(sp)
    2e68:	dc802b17 	ldw	r18,172(sp)
    2e6c:	d8002915 	stw	zero,164(sp)
    2e70:	003bd106 	br	1db8 <___vfprintf_internal_r+0x734>
    2e74:	d8802d17 	ldw	r2,180(sp)
    2e78:	d8c02d17 	ldw	r3,180(sp)
    2e7c:	d9002d17 	ldw	r4,180(sp)
    2e80:	10800017 	ldw	r2,0(r2)
    2e84:	18c00117 	ldw	r3,4(r3)
    2e88:	21000204 	addi	r4,r4,8
    2e8c:	d8803615 	stw	r2,216(sp)
    2e90:	d8c03815 	stw	r3,224(sp)
    2e94:	d9002d15 	stw	r4,180(sp)
    2e98:	003b7506 	br	1c70 <___vfprintf_internal_r+0x5ec>
    2e9c:	ac400007 	ldb	r17,0(r21)
    2ea0:	003a5906 	br	1808 <___vfprintf_internal_r+0x184>
    2ea4:	9080100c 	andi	r2,r18,64
    2ea8:	1000a826 	beq	r2,zero,314c <___vfprintf_internal_r+0x1ac8>
    2eac:	d9002d17 	ldw	r4,180(sp)
    2eb0:	002d883a 	mov	r22,zero
    2eb4:	24c0000b 	ldhu	r19,0(r4)
    2eb8:	21000104 	addi	r4,r4,4
    2ebc:	d9002d15 	stw	r4,180(sp)
    2ec0:	003ccb06 	br	21f0 <___vfprintf_internal_r+0xb6c>
    2ec4:	d8c02d17 	ldw	r3,180(sp)
    2ec8:	d9002917 	ldw	r4,164(sp)
    2ecc:	002d883a 	mov	r22,zero
    2ed0:	18800104 	addi	r2,r3,4
    2ed4:	1cc00017 	ldw	r19,0(r3)
    2ed8:	203ebb0e 	bge	r4,zero,29c8 <___vfprintf_internal_r+0x1344>
    2edc:	003ef106 	br	2aa4 <___vfprintf_internal_r+0x1420>
    2ee0:	9080040c 	andi	r2,r18,16
    2ee4:	1000921e 	bne	r2,zero,3130 <___vfprintf_internal_r+0x1aac>
    2ee8:	9480100c 	andi	r18,r18,64
    2eec:	90013926 	beq	r18,zero,33d4 <___vfprintf_internal_r+0x1d50>
    2ef0:	d9002d17 	ldw	r4,180(sp)
    2ef4:	d9402f17 	ldw	r5,188(sp)
    2ef8:	20800017 	ldw	r2,0(r4)
    2efc:	21000104 	addi	r4,r4,4
    2f00:	d9002d15 	stw	r4,180(sp)
    2f04:	1140000d 	sth	r5,0(r2)
    2f08:	003a1606 	br	1764 <___vfprintf_internal_r+0xe0>
    2f0c:	9080100c 	andi	r2,r18,64
    2f10:	10008026 	beq	r2,zero,3114 <___vfprintf_internal_r+0x1a90>
    2f14:	d8c02d17 	ldw	r3,180(sp)
    2f18:	1cc0000f 	ldh	r19,0(r3)
    2f1c:	18c00104 	addi	r3,r3,4
    2f20:	d8c02d15 	stw	r3,180(sp)
    2f24:	982dd7fa 	srai	r22,r19,31
    2f28:	b005883a 	mov	r2,r22
    2f2c:	003b1f06 	br	1bac <___vfprintf_internal_r+0x528>
    2f30:	9080100c 	andi	r2,r18,64
    2f34:	d8002785 	stb	zero,158(sp)
    2f38:	10008a1e 	bne	r2,zero,3164 <___vfprintf_internal_r+0x1ae0>
    2f3c:	d9402d17 	ldw	r5,180(sp)
    2f40:	d8c02917 	ldw	r3,164(sp)
    2f44:	002d883a 	mov	r22,zero
    2f48:	28800104 	addi	r2,r5,4
    2f4c:	2cc00017 	ldw	r19,0(r5)
    2f50:	183e4b0e 	bge	r3,zero,2880 <___vfprintf_internal_r+0x11fc>
    2f54:	9d86b03a 	or	r3,r19,r22
    2f58:	d8802d15 	stw	r2,180(sp)
    2f5c:	183e4c1e 	bne	r3,zero,2890 <___vfprintf_internal_r+0x120c>
    2f60:	0039883a 	mov	fp,zero
    2f64:	0005883a 	mov	r2,zero
    2f68:	003d4006 	br	246c <___vfprintf_internal_r+0xde8>
    2f6c:	01400074 	movhi	r5,1
    2f70:	295f4c84 	addi	r5,r5,32050
    2f74:	d9402b15 	stw	r5,172(sp)
    2f78:	d9402b17 	ldw	r5,172(sp)
    2f7c:	1c47883a 	add	r3,r3,r17
    2f80:	10800044 	addi	r2,r2,1
    2f84:	41400015 	stw	r5,0(r8)
    2f88:	44400115 	stw	r17,4(r8)
    2f8c:	d8c02015 	stw	r3,128(sp)
    2f90:	d8801f15 	stw	r2,124(sp)
    2f94:	010001c4 	movi	r4,7
    2f98:	20bec816 	blt	r4,r2,2abc <___vfprintf_internal_r+0x1438>
    2f9c:	42000204 	addi	r8,r8,8
    2fa0:	003ecd06 	br	2ad8 <___vfprintf_internal_r+0x1454>
    2fa4:	d9002917 	ldw	r4,164(sp)
    2fa8:	d8002785 	stb	zero,158(sp)
    2fac:	203d2d16 	blt	r4,zero,2464 <___vfprintf_internal_r+0xde0>
    2fb0:	00bfdfc4 	movi	r2,-129
    2fb4:	90a4703a 	and	r18,r18,r2
    2fb8:	003a9106 	br	1a00 <___vfprintf_internal_r+0x37c>
    2fbc:	01000074 	movhi	r4,1
    2fc0:	211f4c84 	addi	r4,r4,32050
    2fc4:	d9002b15 	stw	r4,172(sp)
    2fc8:	003c0c06 	br	1ffc <___vfprintf_internal_r+0x978>
    2fcc:	d9002c17 	ldw	r4,176(sp)
    2fd0:	d9801e04 	addi	r6,sp,120
    2fd4:	b80b883a 	mov	r5,r23
    2fd8:	00084200 	call	8420 <__sprint_r>
    2fdc:	103aab1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    2fe0:	d8c02017 	ldw	r3,128(sp)
    2fe4:	da000404 	addi	r8,sp,16
    2fe8:	003d4106 	br	24f0 <___vfprintf_internal_r+0xe6c>
    2fec:	d8801f17 	ldw	r2,124(sp)
    2ff0:	01400074 	movhi	r5,1
    2ff4:	01000044 	movi	r4,1
    2ff8:	18c00044 	addi	r3,r3,1
    2ffc:	10800044 	addi	r2,r2,1
    3000:	295f4c04 	addi	r5,r5,32048
    3004:	41000115 	stw	r4,4(r8)
    3008:	41400015 	stw	r5,0(r8)
    300c:	d8c02015 	stw	r3,128(sp)
    3010:	d8801f15 	stw	r2,124(sp)
    3014:	010001c4 	movi	r4,7
    3018:	20805c16 	blt	r4,r2,318c <___vfprintf_internal_r+0x1b08>
    301c:	42000204 	addi	r8,r8,8
    3020:	8800041e 	bne	r17,zero,3034 <___vfprintf_internal_r+0x19b0>
    3024:	d8803317 	ldw	r2,204(sp)
    3028:	1000021e 	bne	r2,zero,3034 <___vfprintf_internal_r+0x19b0>
    302c:	9080004c 	andi	r2,r18,1
    3030:	103c0926 	beq	r2,zero,2058 <___vfprintf_internal_r+0x9d4>
    3034:	d9003717 	ldw	r4,220(sp)
    3038:	d8801f17 	ldw	r2,124(sp)
    303c:	d9403417 	ldw	r5,208(sp)
    3040:	20c7883a 	add	r3,r4,r3
    3044:	10800044 	addi	r2,r2,1
    3048:	41000115 	stw	r4,4(r8)
    304c:	41400015 	stw	r5,0(r8)
    3050:	d8c02015 	stw	r3,128(sp)
    3054:	d8801f15 	stw	r2,124(sp)
    3058:	010001c4 	movi	r4,7
    305c:	20812116 	blt	r4,r2,34e4 <___vfprintf_internal_r+0x1e60>
    3060:	42000204 	addi	r8,r8,8
    3064:	0463c83a 	sub	r17,zero,r17
    3068:	0440730e 	bge	zero,r17,3238 <___vfprintf_internal_r+0x1bb4>
    306c:	05800404 	movi	r22,16
    3070:	b440860e 	bge	r22,r17,328c <___vfprintf_internal_r+0x1c08>
    3074:	01400074 	movhi	r5,1
    3078:	295f4c84 	addi	r5,r5,32050
    307c:	d9402b15 	stw	r5,172(sp)
    3080:	070001c4 	movi	fp,7
    3084:	dcc02c17 	ldw	r19,176(sp)
    3088:	00000306 	br	3098 <___vfprintf_internal_r+0x1a14>
    308c:	42000204 	addi	r8,r8,8
    3090:	8c7ffc04 	addi	r17,r17,-16
    3094:	b440800e 	bge	r22,r17,3298 <___vfprintf_internal_r+0x1c14>
    3098:	18c00404 	addi	r3,r3,16
    309c:	10800044 	addi	r2,r2,1
    30a0:	45000015 	stw	r20,0(r8)
    30a4:	45800115 	stw	r22,4(r8)
    30a8:	d8c02015 	stw	r3,128(sp)
    30ac:	d8801f15 	stw	r2,124(sp)
    30b0:	e0bff60e 	bge	fp,r2,308c <___vfprintf_internal_r+0x1a08>
    30b4:	d9801e04 	addi	r6,sp,120
    30b8:	b80b883a 	mov	r5,r23
    30bc:	9809883a 	mov	r4,r19
    30c0:	00084200 	call	8420 <__sprint_r>
    30c4:	103a711e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    30c8:	d8c02017 	ldw	r3,128(sp)
    30cc:	d8801f17 	ldw	r2,124(sp)
    30d0:	da000404 	addi	r8,sp,16
    30d4:	003fee06 	br	3090 <___vfprintf_internal_r+0x1a0c>
    30d8:	00bfffc4 	movi	r2,-1
    30dc:	003a6f06 	br	1a9c <___vfprintf_internal_r+0x418>
    30e0:	008011c4 	movi	r2,71
    30e4:	1440b816 	blt	r2,r17,33c8 <___vfprintf_internal_r+0x1d44>
    30e8:	04000074 	movhi	r16,1
    30ec:	841f3e04 	addi	r16,r16,31992
    30f0:	00c000c4 	movi	r3,3
    30f4:	00bfdfc4 	movi	r2,-129
    30f8:	d8c02a15 	stw	r3,168(sp)
    30fc:	90a4703a 	and	r18,r18,r2
    3100:	df002783 	ldbu	fp,158(sp)
    3104:	d8c02e15 	stw	r3,184(sp)
    3108:	d8002915 	stw	zero,164(sp)
    310c:	d8003215 	stw	zero,200(sp)
    3110:	003b2906 	br	1db8 <___vfprintf_internal_r+0x734>
    3114:	d9002d17 	ldw	r4,180(sp)
    3118:	24c00017 	ldw	r19,0(r4)
    311c:	21000104 	addi	r4,r4,4
    3120:	d9002d15 	stw	r4,180(sp)
    3124:	982dd7fa 	srai	r22,r19,31
    3128:	b005883a 	mov	r2,r22
    312c:	003a9f06 	br	1bac <___vfprintf_internal_r+0x528>
    3130:	d9402d17 	ldw	r5,180(sp)
    3134:	d8c02f17 	ldw	r3,188(sp)
    3138:	28800017 	ldw	r2,0(r5)
    313c:	29400104 	addi	r5,r5,4
    3140:	d9402d15 	stw	r5,180(sp)
    3144:	10c00015 	stw	r3,0(r2)
    3148:	00398606 	br	1764 <___vfprintf_internal_r+0xe0>
    314c:	d9402d17 	ldw	r5,180(sp)
    3150:	002d883a 	mov	r22,zero
    3154:	2cc00017 	ldw	r19,0(r5)
    3158:	29400104 	addi	r5,r5,4
    315c:	d9402d15 	stw	r5,180(sp)
    3160:	003c2306 	br	21f0 <___vfprintf_internal_r+0xb6c>
    3164:	d8c02d17 	ldw	r3,180(sp)
    3168:	d9002917 	ldw	r4,164(sp)
    316c:	002d883a 	mov	r22,zero
    3170:	18800104 	addi	r2,r3,4
    3174:	1cc0000b 	ldhu	r19,0(r3)
    3178:	203dc10e 	bge	r4,zero,2880 <___vfprintf_internal_r+0x11fc>
    317c:	003f7506 	br	2f54 <___vfprintf_internal_r+0x18d0>
    3180:	04000074 	movhi	r16,1
    3184:	841f3c04 	addi	r16,r16,31984
    3188:	003acc06 	br	1cbc <___vfprintf_internal_r+0x638>
    318c:	d9002c17 	ldw	r4,176(sp)
    3190:	d9801e04 	addi	r6,sp,120
    3194:	b80b883a 	mov	r5,r23
    3198:	00084200 	call	8420 <__sprint_r>
    319c:	103a3b1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    31a0:	dc402617 	ldw	r17,152(sp)
    31a4:	d8c02017 	ldw	r3,128(sp)
    31a8:	da000404 	addi	r8,sp,16
    31ac:	003f9c06 	br	3020 <___vfprintf_internal_r+0x199c>
    31b0:	ac400043 	ldbu	r17,1(r21)
    31b4:	94800814 	ori	r18,r18,32
    31b8:	ad400044 	addi	r21,r21,1
    31bc:	8c403fcc 	andi	r17,r17,255
    31c0:	8c40201c 	xori	r17,r17,128
    31c4:	8c7fe004 	addi	r17,r17,-128
    31c8:	00398f06 	br	1808 <___vfprintf_internal_r+0x184>
    31cc:	d8c02d15 	stw	r3,180(sp)
    31d0:	0039883a 	mov	fp,zero
    31d4:	003e3506 	br	2aac <___vfprintf_internal_r+0x1428>
    31d8:	d9002c17 	ldw	r4,176(sp)
    31dc:	d9801e04 	addi	r6,sp,120
    31e0:	b80b883a 	mov	r5,r23
    31e4:	00084200 	call	8420 <__sprint_r>
    31e8:	103a281e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    31ec:	d8c02017 	ldw	r3,128(sp)
    31f0:	da000404 	addi	r8,sp,16
    31f4:	003cd006 	br	2538 <___vfprintf_internal_r+0xeb4>
    31f8:	8009883a 	mov	r4,r16
    31fc:	da003d15 	stw	r8,244(sp)
    3200:	00015ec0 	call	15ec <strlen>
    3204:	d8802e15 	stw	r2,184(sp)
    3208:	da003d17 	ldw	r8,244(sp)
    320c:	103c340e 	bge	r2,zero,22e0 <___vfprintf_internal_r+0xc5c>
    3210:	0005883a 	mov	r2,zero
    3214:	003c3206 	br	22e0 <___vfprintf_internal_r+0xc5c>
    3218:	d9002c17 	ldw	r4,176(sp)
    321c:	d9801e04 	addi	r6,sp,120
    3220:	b80b883a 	mov	r5,r23
    3224:	00084200 	call	8420 <__sprint_r>
    3228:	103a181e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    322c:	d8c02017 	ldw	r3,128(sp)
    3230:	d8801f17 	ldw	r2,124(sp)
    3234:	da000404 	addi	r8,sp,16
    3238:	d9403317 	ldw	r5,204(sp)
    323c:	10800044 	addi	r2,r2,1
    3240:	44000015 	stw	r16,0(r8)
    3244:	28c7883a 	add	r3,r5,r3
    3248:	003b7d06 	br	2040 <___vfprintf_internal_r+0x9bc>
    324c:	01000074 	movhi	r4,1
    3250:	211f5084 	addi	r4,r4,32066
    3254:	d9003515 	stw	r4,212(sp)
    3258:	003b1406 	br	1eac <___vfprintf_internal_r+0x828>
    325c:	013fffc4 	movi	r4,-1
    3260:	003a3506 	br	1b38 <___vfprintf_internal_r+0x4b4>
    3264:	0023883a 	mov	r17,zero
    3268:	003d9d06 	br	28e0 <___vfprintf_internal_r+0x125c>
    326c:	d9002c17 	ldw	r4,176(sp)
    3270:	d9801e04 	addi	r6,sp,120
    3274:	b80b883a 	mov	r5,r23
    3278:	00084200 	call	8420 <__sprint_r>
    327c:	103a031e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    3280:	d8c02017 	ldw	r3,128(sp)
    3284:	da000404 	addi	r8,sp,16
    3288:	003d9406 	br	28dc <___vfprintf_internal_r+0x1258>
    328c:	01000074 	movhi	r4,1
    3290:	211f4c84 	addi	r4,r4,32050
    3294:	d9002b15 	stw	r4,172(sp)
    3298:	d9002b17 	ldw	r4,172(sp)
    329c:	1c47883a 	add	r3,r3,r17
    32a0:	10800044 	addi	r2,r2,1
    32a4:	41000015 	stw	r4,0(r8)
    32a8:	44400115 	stw	r17,4(r8)
    32ac:	d8c02015 	stw	r3,128(sp)
    32b0:	d8801f15 	stw	r2,124(sp)
    32b4:	010001c4 	movi	r4,7
    32b8:	20bfd716 	blt	r4,r2,3218 <___vfprintf_internal_r+0x1b94>
    32bc:	42000204 	addi	r8,r8,8
    32c0:	003fdd06 	br	3238 <___vfprintf_internal_r+0x1bb4>
    32c4:	d9002c17 	ldw	r4,176(sp)
    32c8:	d9801e04 	addi	r6,sp,120
    32cc:	b80b883a 	mov	r5,r23
    32d0:	00084200 	call	8420 <__sprint_r>
    32d4:	1039ed1e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    32d8:	d8802617 	ldw	r2,152(sp)
    32dc:	d8c02017 	ldw	r3,128(sp)
    32e0:	da000404 	addi	r8,sp,16
    32e4:	003e1006 	br	2b28 <___vfprintf_internal_r+0x14a4>
    32e8:	00800044 	movi	r2,1
    32ec:	10803fcc 	andi	r2,r2,255
    32f0:	00c00044 	movi	r3,1
    32f4:	10fa3526 	beq	r2,r3,1bcc <___vfprintf_internal_r+0x548>
    32f8:	00c00084 	movi	r3,2
    32fc:	10fbcb26 	beq	r2,r3,222c <___vfprintf_internal_r+0xba8>
    3300:	003a8f06 	br	1d40 <___vfprintf_internal_r+0x6bc>
    3304:	01000074 	movhi	r4,1
    3308:	211f5084 	addi	r4,r4,32066
    330c:	d9003515 	stw	r4,212(sp)
    3310:	003b7606 	br	20ec <___vfprintf_internal_r+0xa68>
    3314:	d8802917 	ldw	r2,164(sp)
    3318:	00c00184 	movi	r3,6
    331c:	1880012e 	bgeu	r3,r2,3324 <___vfprintf_internal_r+0x1ca0>
    3320:	1805883a 	mov	r2,r3
    3324:	d8802e15 	stw	r2,184(sp)
    3328:	1000ef16 	blt	r2,zero,36e8 <___vfprintf_internal_r+0x2064>
    332c:	04000074 	movhi	r16,1
    3330:	d8802a15 	stw	r2,168(sp)
    3334:	dcc02d15 	stw	r19,180(sp)
    3338:	d8002915 	stw	zero,164(sp)
    333c:	d8003215 	stw	zero,200(sp)
    3340:	841f4a04 	addi	r16,r16,32040
    3344:	0039883a 	mov	fp,zero
    3348:	003aa206 	br	1dd4 <___vfprintf_internal_r+0x750>
    334c:	0021883a 	mov	r16,zero
    3350:	003e0706 	br	2b70 <___vfprintf_internal_r+0x14ec>
    3354:	d9002c17 	ldw	r4,176(sp)
    3358:	d9801e04 	addi	r6,sp,120
    335c:	b80b883a 	mov	r5,r23
    3360:	00084200 	call	8420 <__sprint_r>
    3364:	1039c91e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    3368:	d8802617 	ldw	r2,152(sp)
    336c:	d9403317 	ldw	r5,204(sp)
    3370:	d8c02017 	ldw	r3,128(sp)
    3374:	da000404 	addi	r8,sp,16
    3378:	2885c83a 	sub	r2,r5,r2
    337c:	003dfb06 	br	2b6c <___vfprintf_internal_r+0x14e8>
    3380:	9080004c 	andi	r2,r18,1
    3384:	103e8f1e 	bne	r2,zero,2dc4 <___vfprintf_internal_r+0x1740>
    3388:	d8802117 	ldw	r2,132(sp)
    338c:	003e9e06 	br	2e08 <___vfprintf_internal_r+0x1784>
    3390:	1025883a 	mov	r18,r2
    3394:	0039883a 	mov	fp,zero
    3398:	00800084 	movi	r2,2
    339c:	003fd306 	br	32ec <___vfprintf_internal_r+0x1c68>
    33a0:	07000b44 	movi	fp,45
    33a4:	df002785 	stb	fp,158(sp)
    33a8:	003a4006 	br	1cac <___vfprintf_internal_r+0x628>
    33ac:	00c00b44 	movi	r3,45
    33b0:	d8c02785 	stb	r3,158(sp)
    33b4:	d8802a15 	stw	r2,168(sp)
    33b8:	dc802b17 	ldw	r18,172(sp)
    33bc:	d8002915 	stw	zero,164(sp)
    33c0:	07000b44 	movi	fp,45
    33c4:	003a8006 	br	1dc8 <___vfprintf_internal_r+0x744>
    33c8:	04000074 	movhi	r16,1
    33cc:	841f3f04 	addi	r16,r16,31996
    33d0:	003f4706 	br	30f0 <___vfprintf_internal_r+0x1a6c>
    33d4:	d8c02d17 	ldw	r3,180(sp)
    33d8:	d9002f17 	ldw	r4,188(sp)
    33dc:	18800017 	ldw	r2,0(r3)
    33e0:	18c00104 	addi	r3,r3,4
    33e4:	d8c02d15 	stw	r3,180(sp)
    33e8:	11000015 	stw	r4,0(r2)
    33ec:	0038dd06 	br	1764 <___vfprintf_internal_r+0xe0>
    33f0:	dd802617 	ldw	r22,152(sp)
    33f4:	00bfff44 	movi	r2,-3
    33f8:	b0801c16 	blt	r22,r2,346c <___vfprintf_internal_r+0x1de8>
    33fc:	d9402917 	ldw	r5,164(sp)
    3400:	2d801a16 	blt	r5,r22,346c <___vfprintf_internal_r+0x1de8>
    3404:	dd803215 	stw	r22,200(sp)
    3408:	003e8906 	br	2e30 <___vfprintf_internal_r+0x17ac>
    340c:	01000074 	movhi	r4,1
    3410:	211f4c84 	addi	r4,r4,32050
    3414:	d9002b15 	stw	r4,172(sp)
    3418:	003c9106 	br	2660 <___vfprintf_internal_r+0xfdc>
    341c:	e005883a 	mov	r2,fp
    3420:	003e7906 	br	2e08 <___vfprintf_internal_r+0x1784>
    3424:	d9402917 	ldw	r5,164(sp)
    3428:	df002783 	ldbu	fp,158(sp)
    342c:	dcc02d15 	stw	r19,180(sp)
    3430:	d9402a15 	stw	r5,168(sp)
    3434:	d9402e15 	stw	r5,184(sp)
    3438:	d8002915 	stw	zero,164(sp)
    343c:	d8003215 	stw	zero,200(sp)
    3440:	003a5d06 	br	1db8 <___vfprintf_internal_r+0x734>
    3444:	9080004c 	andi	r2,r18,1
    3448:	0039883a 	mov	fp,zero
    344c:	10000426 	beq	r2,zero,3460 <___vfprintf_internal_r+0x1ddc>
    3450:	00800c04 	movi	r2,48
    3454:	dc001dc4 	addi	r16,sp,119
    3458:	d8801dc5 	stb	r2,119(sp)
    345c:	003b8006 	br	2260 <___vfprintf_internal_r+0xbdc>
    3460:	d8002e15 	stw	zero,184(sp)
    3464:	dc001e04 	addi	r16,sp,120
    3468:	003a4d06 	br	1da0 <___vfprintf_internal_r+0x71c>
    346c:	8c7fff84 	addi	r17,r17,-2
    3470:	b5bfffc4 	addi	r22,r22,-1
    3474:	dd802615 	stw	r22,152(sp)
    3478:	dc4022c5 	stb	r17,139(sp)
    347c:	b000bf16 	blt	r22,zero,377c <___vfprintf_internal_r+0x20f8>
    3480:	00800ac4 	movi	r2,43
    3484:	d8802305 	stb	r2,140(sp)
    3488:	00800244 	movi	r2,9
    348c:	15807016 	blt	r2,r22,3650 <___vfprintf_internal_r+0x1fcc>
    3490:	00800c04 	movi	r2,48
    3494:	b5800c04 	addi	r22,r22,48
    3498:	d8802345 	stb	r2,141(sp)
    349c:	dd802385 	stb	r22,142(sp)
    34a0:	d88023c4 	addi	r2,sp,143
    34a4:	df0022c4 	addi	fp,sp,139
    34a8:	d8c03317 	ldw	r3,204(sp)
    34ac:	1739c83a 	sub	fp,r2,fp
    34b0:	d9003317 	ldw	r4,204(sp)
    34b4:	e0c7883a 	add	r3,fp,r3
    34b8:	df003a15 	stw	fp,232(sp)
    34bc:	d8c02e15 	stw	r3,184(sp)
    34c0:	00800044 	movi	r2,1
    34c4:	1100b30e 	bge	r2,r4,3794 <___vfprintf_internal_r+0x2110>
    34c8:	d8c02e17 	ldw	r3,184(sp)
    34cc:	18c00044 	addi	r3,r3,1
    34d0:	d8c02e15 	stw	r3,184(sp)
    34d4:	1805883a 	mov	r2,r3
    34d8:	1800ac16 	blt	r3,zero,378c <___vfprintf_internal_r+0x2108>
    34dc:	d8003215 	stw	zero,200(sp)
    34e0:	003e5d06 	br	2e58 <___vfprintf_internal_r+0x17d4>
    34e4:	d9002c17 	ldw	r4,176(sp)
    34e8:	d9801e04 	addi	r6,sp,120
    34ec:	b80b883a 	mov	r5,r23
    34f0:	00084200 	call	8420 <__sprint_r>
    34f4:	1039651e 	bne	r2,zero,1a8c <___vfprintf_internal_r+0x408>
    34f8:	dc402617 	ldw	r17,152(sp)
    34fc:	d8c02017 	ldw	r3,128(sp)
    3500:	d8801f17 	ldw	r2,124(sp)
    3504:	da000404 	addi	r8,sp,16
    3508:	003ed606 	br	3064 <___vfprintf_internal_r+0x19e0>
    350c:	582b883a 	mov	r21,r11
    3510:	d8002915 	stw	zero,164(sp)
    3514:	0038bd06 	br	180c <___vfprintf_internal_r+0x188>
    3518:	d8802917 	ldw	r2,164(sp)
    351c:	103e071e 	bne	r2,zero,2d3c <___vfprintf_internal_r+0x16b8>
    3520:	dc002915 	stw	r16,164(sp)
    3524:	003e0506 	br	2d3c <___vfprintf_internal_r+0x16b8>
    3528:	d9002917 	ldw	r4,164(sp)
    352c:	20c00044 	addi	r3,r4,1
    3530:	003e0f06 	br	2d70 <___vfprintf_internal_r+0x16ec>
    3534:	01400184 	movi	r5,6
    3538:	d9402915 	stw	r5,164(sp)
    353c:	003dff06 	br	2d3c <___vfprintf_internal_r+0x16b8>
    3540:	d8802104 	addi	r2,sp,132
    3544:	d8800315 	stw	r2,12(sp)
    3548:	d8802504 	addi	r2,sp,148
    354c:	d8800215 	stw	r2,8(sp)
    3550:	d8802604 	addi	r2,sp,152
    3554:	d8800115 	stw	r2,4(sp)
    3558:	d8802917 	ldw	r2,164(sp)
    355c:	d9403617 	ldw	r5,216(sp)
    3560:	d9002c17 	ldw	r4,176(sp)
    3564:	d8800015 	stw	r2,0(sp)
    3568:	01c000c4 	movi	r7,3
    356c:	980d883a 	mov	r6,r19
    3570:	da003d15 	stw	r8,244(sp)
    3574:	0003ca80 	call	3ca8 <_dtoa_r>
    3578:	d8c02917 	ldw	r3,164(sp)
    357c:	da003d17 	ldw	r8,244(sp)
    3580:	1021883a 	mov	r16,r2
    3584:	10f9883a 	add	fp,r2,r3
    3588:	81000007 	ldb	r4,0(r16)
    358c:	00800c04 	movi	r2,48
    3590:	20805e26 	beq	r4,r2,370c <___vfprintf_internal_r+0x2088>
    3594:	d8c02617 	ldw	r3,152(sp)
    3598:	e0f9883a 	add	fp,fp,r3
    359c:	003e0a06 	br	2dc8 <___vfprintf_internal_r+0x1744>
    35a0:	00c00b44 	movi	r3,45
    35a4:	24e0003c 	xorhi	r19,r4,32768
    35a8:	d8c02a05 	stb	r3,168(sp)
    35ac:	003de906 	br	2d54 <___vfprintf_internal_r+0x16d0>
    35b0:	d8c03217 	ldw	r3,200(sp)
    35b4:	00c07a0e 	bge	zero,r3,37a0 <___vfprintf_internal_r+0x211c>
    35b8:	00800044 	movi	r2,1
    35bc:	d9003317 	ldw	r4,204(sp)
    35c0:	1105883a 	add	r2,r2,r4
    35c4:	d8802e15 	stw	r2,184(sp)
    35c8:	10004e16 	blt	r2,zero,3704 <___vfprintf_internal_r+0x2080>
    35cc:	044019c4 	movi	r17,103
    35d0:	003e2106 	br	2e58 <___vfprintf_internal_r+0x17d4>
    35d4:	d9002917 	ldw	r4,164(sp)
    35d8:	d8802104 	addi	r2,sp,132
    35dc:	d8800315 	stw	r2,12(sp)
    35e0:	d9000015 	stw	r4,0(sp)
    35e4:	d8802504 	addi	r2,sp,148
    35e8:	d9403617 	ldw	r5,216(sp)
    35ec:	d9002c17 	ldw	r4,176(sp)
    35f0:	d8800215 	stw	r2,8(sp)
    35f4:	d8802604 	addi	r2,sp,152
    35f8:	d8800115 	stw	r2,4(sp)
    35fc:	01c000c4 	movi	r7,3
    3600:	980d883a 	mov	r6,r19
    3604:	da003d15 	stw	r8,244(sp)
    3608:	0003ca80 	call	3ca8 <_dtoa_r>
    360c:	d8c02917 	ldw	r3,164(sp)
    3610:	da003d17 	ldw	r8,244(sp)
    3614:	1021883a 	mov	r16,r2
    3618:	00801184 	movi	r2,70
    361c:	80f9883a 	add	fp,r16,r3
    3620:	88bfd926 	beq	r17,r2,3588 <___vfprintf_internal_r+0x1f04>
    3624:	003de806 	br	2dc8 <___vfprintf_internal_r+0x1744>
    3628:	d9002917 	ldw	r4,164(sp)
    362c:	00c04d0e 	bge	zero,r3,3764 <___vfprintf_internal_r+0x20e0>
    3630:	2000441e 	bne	r4,zero,3744 <___vfprintf_internal_r+0x20c0>
    3634:	9480004c 	andi	r18,r18,1
    3638:	9000421e 	bne	r18,zero,3744 <___vfprintf_internal_r+0x20c0>
    363c:	1805883a 	mov	r2,r3
    3640:	18007016 	blt	r3,zero,3804 <___vfprintf_internal_r+0x2180>
    3644:	d8c03217 	ldw	r3,200(sp)
    3648:	d8c02e15 	stw	r3,184(sp)
    364c:	003e0206 	br	2e58 <___vfprintf_internal_r+0x17d4>
    3650:	df0022c4 	addi	fp,sp,139
    3654:	dc002915 	stw	r16,164(sp)
    3658:	4027883a 	mov	r19,r8
    365c:	e021883a 	mov	r16,fp
    3660:	b009883a 	mov	r4,r22
    3664:	01400284 	movi	r5,10
    3668:	0000af40 	call	af4 <__modsi3>
    366c:	10800c04 	addi	r2,r2,48
    3670:	843fffc4 	addi	r16,r16,-1
    3674:	b009883a 	mov	r4,r22
    3678:	01400284 	movi	r5,10
    367c:	80800005 	stb	r2,0(r16)
    3680:	0000a700 	call	a70 <__divsi3>
    3684:	102d883a 	mov	r22,r2
    3688:	00800244 	movi	r2,9
    368c:	15bff416 	blt	r2,r22,3660 <___vfprintf_internal_r+0x1fdc>
    3690:	9811883a 	mov	r8,r19
    3694:	b0800c04 	addi	r2,r22,48
    3698:	8027883a 	mov	r19,r16
    369c:	997fffc4 	addi	r5,r19,-1
    36a0:	98bfffc5 	stb	r2,-1(r19)
    36a4:	dc002917 	ldw	r16,164(sp)
    36a8:	2f006a2e 	bgeu	r5,fp,3854 <___vfprintf_internal_r+0x21d0>
    36ac:	d9c02384 	addi	r7,sp,142
    36b0:	3ccfc83a 	sub	r7,r7,r19
    36b4:	d9002344 	addi	r4,sp,141
    36b8:	e1cf883a 	add	r7,fp,r7
    36bc:	00000106 	br	36c4 <___vfprintf_internal_r+0x2040>
    36c0:	28800003 	ldbu	r2,0(r5)
    36c4:	20800005 	stb	r2,0(r4)
    36c8:	21000044 	addi	r4,r4,1
    36cc:	29400044 	addi	r5,r5,1
    36d0:	393ffb1e 	bne	r7,r4,36c0 <___vfprintf_internal_r+0x203c>
    36d4:	d8802304 	addi	r2,sp,140
    36d8:	14c5c83a 	sub	r2,r2,r19
    36dc:	d8c02344 	addi	r3,sp,141
    36e0:	1885883a 	add	r2,r3,r2
    36e4:	003f7006 	br	34a8 <___vfprintf_internal_r+0x1e24>
    36e8:	0005883a 	mov	r2,zero
    36ec:	003f0f06 	br	332c <___vfprintf_internal_r+0x1ca8>
    36f0:	d8c03217 	ldw	r3,200(sp)
    36f4:	18c00044 	addi	r3,r3,1
    36f8:	d8c02e15 	stw	r3,184(sp)
    36fc:	1805883a 	mov	r2,r3
    3700:	183fb20e 	bge	r3,zero,35cc <___vfprintf_internal_r+0x1f48>
    3704:	0005883a 	mov	r2,zero
    3708:	003fb006 	br	35cc <___vfprintf_internal_r+0x1f48>
    370c:	d9003617 	ldw	r4,216(sp)
    3710:	000d883a 	mov	r6,zero
    3714:	000f883a 	mov	r7,zero
    3718:	980b883a 	mov	r5,r19
    371c:	d8c03c15 	stw	r3,240(sp)
    3720:	da003d15 	stw	r8,244(sp)
    3724:	000bee40 	call	bee4 <__eqdf2>
    3728:	d8c03c17 	ldw	r3,240(sp)
    372c:	da003d17 	ldw	r8,244(sp)
    3730:	103f9826 	beq	r2,zero,3594 <___vfprintf_internal_r+0x1f10>
    3734:	00800044 	movi	r2,1
    3738:	10c7c83a 	sub	r3,r2,r3
    373c:	d8c02615 	stw	r3,152(sp)
    3740:	003f9506 	br	3598 <___vfprintf_internal_r+0x1f14>
    3744:	d9002917 	ldw	r4,164(sp)
    3748:	d8c03217 	ldw	r3,200(sp)
    374c:	20800044 	addi	r2,r4,1
    3750:	1885883a 	add	r2,r3,r2
    3754:	d8802e15 	stw	r2,184(sp)
    3758:	103dbf0e 	bge	r2,zero,2e58 <___vfprintf_internal_r+0x17d4>
    375c:	0005883a 	mov	r2,zero
    3760:	003dbd06 	br	2e58 <___vfprintf_internal_r+0x17d4>
    3764:	2000211e 	bne	r4,zero,37ec <___vfprintf_internal_r+0x2168>
    3768:	9480004c 	andi	r18,r18,1
    376c:	90001f1e 	bne	r18,zero,37ec <___vfprintf_internal_r+0x2168>
    3770:	00800044 	movi	r2,1
    3774:	d8802e15 	stw	r2,184(sp)
    3778:	003db706 	br	2e58 <___vfprintf_internal_r+0x17d4>
    377c:	00800b44 	movi	r2,45
    3780:	05adc83a 	sub	r22,zero,r22
    3784:	d8802305 	stb	r2,140(sp)
    3788:	003f3f06 	br	3488 <___vfprintf_internal_r+0x1e04>
    378c:	0005883a 	mov	r2,zero
    3790:	003f5206 	br	34dc <___vfprintf_internal_r+0x1e58>
    3794:	90a4703a 	and	r18,r18,r2
    3798:	903f4e26 	beq	r18,zero,34d4 <___vfprintf_internal_r+0x1e50>
    379c:	003f4a06 	br	34c8 <___vfprintf_internal_r+0x1e44>
    37a0:	00800084 	movi	r2,2
    37a4:	10c5c83a 	sub	r2,r2,r3
    37a8:	003f8406 	br	35bc <___vfprintf_internal_r+0x1f38>
    37ac:	d8802d17 	ldw	r2,180(sp)
    37b0:	d9002d17 	ldw	r4,180(sp)
    37b4:	ac400043 	ldbu	r17,1(r21)
    37b8:	10800017 	ldw	r2,0(r2)
    37bc:	582b883a 	mov	r21,r11
    37c0:	d8802915 	stw	r2,164(sp)
    37c4:	20800104 	addi	r2,r4,4
    37c8:	d9002917 	ldw	r4,164(sp)
    37cc:	d8802d15 	stw	r2,180(sp)
    37d0:	203e7a0e 	bge	r4,zero,31bc <___vfprintf_internal_r+0x1b38>
    37d4:	8c403fcc 	andi	r17,r17,255
    37d8:	00bfffc4 	movi	r2,-1
    37dc:	8c40201c 	xori	r17,r17,128
    37e0:	d8802915 	stw	r2,164(sp)
    37e4:	8c7fe004 	addi	r17,r17,-128
    37e8:	00380706 	br	1808 <___vfprintf_internal_r+0x184>
    37ec:	d8c02917 	ldw	r3,164(sp)
    37f0:	18c00084 	addi	r3,r3,2
    37f4:	d8c02e15 	stw	r3,184(sp)
    37f8:	1805883a 	mov	r2,r3
    37fc:	183d960e 	bge	r3,zero,2e58 <___vfprintf_internal_r+0x17d4>
    3800:	003fd606 	br	375c <___vfprintf_internal_r+0x20d8>
    3804:	0005883a 	mov	r2,zero
    3808:	003f8e06 	br	3644 <___vfprintf_internal_r+0x1fc0>
    380c:	9080004c 	andi	r2,r18,1
    3810:	103f811e 	bne	r2,zero,3618 <___vfprintf_internal_r+0x1f94>
    3814:	d8802117 	ldw	r2,132(sp)
    3818:	1405c83a 	sub	r2,r2,r16
    381c:	d8803315 	stw	r2,204(sp)
    3820:	b47ef326 	beq	r22,r17,33f0 <___vfprintf_internal_r+0x1d6c>
    3824:	dd802617 	ldw	r22,152(sp)
    3828:	003f1106 	br	3470 <___vfprintf_internal_r+0x1dec>
    382c:	d9c02785 	stb	r7,158(sp)
    3830:	00390406 	br	1c44 <___vfprintf_internal_r+0x5c0>
    3834:	d9c02785 	stb	r7,158(sp)
    3838:	0038d306 	br	1b88 <___vfprintf_internal_r+0x504>
    383c:	d9c02785 	stb	r7,158(sp)
    3840:	003a6106 	br	21c8 <___vfprintf_internal_r+0xb44>
    3844:	d9c02785 	stb	r7,158(sp)
    3848:	003af806 	br	242c <___vfprintf_internal_r+0xda8>
    384c:	0005883a 	mov	r2,zero
    3850:	003d7e06 	br	2e4c <___vfprintf_internal_r+0x17c8>
    3854:	d8802344 	addi	r2,sp,141
    3858:	003f1306 	br	34a8 <___vfprintf_internal_r+0x1e24>
    385c:	d9c02785 	stb	r7,158(sp)
    3860:	00392306 	br	1cf0 <___vfprintf_internal_r+0x66c>
    3864:	d9c02785 	stb	r7,158(sp)
    3868:	003aa906 	br	2310 <___vfprintf_internal_r+0xc8c>
    386c:	d9c02785 	stb	r7,158(sp)
    3870:	003a3d06 	br	2168 <___vfprintf_internal_r+0xae4>
    3874:	d9c02785 	stb	r7,158(sp)
    3878:	003aca06 	br	23a4 <___vfprintf_internal_r+0xd20>

0000387c <__vfprintf_internal>:
    387c:	008000b4 	movhi	r2,2
    3880:	10a6f504 	addi	r2,r2,-25644
    3884:	300f883a 	mov	r7,r6
    3888:	280d883a 	mov	r6,r5
    388c:	200b883a 	mov	r5,r4
    3890:	11000017 	ldw	r4,0(r2)
    3894:	00016841 	jmpi	1684 <___vfprintf_internal_r>

00003898 <__sbprintf>:
    3898:	2880030b 	ldhu	r2,12(r5)
    389c:	2ac01917 	ldw	r11,100(r5)
    38a0:	2a80038b 	ldhu	r10,14(r5)
    38a4:	2a400717 	ldw	r9,28(r5)
    38a8:	2a000917 	ldw	r8,36(r5)
    38ac:	defee204 	addi	sp,sp,-1144
    38b0:	00c10004 	movi	r3,1024
    38b4:	dc011a15 	stw	r16,1128(sp)
    38b8:	10bfff4c 	andi	r2,r2,65533
    38bc:	2821883a 	mov	r16,r5
    38c0:	d8cb883a 	add	r5,sp,r3
    38c4:	dc811c15 	stw	r18,1136(sp)
    38c8:	dc411b15 	stw	r17,1132(sp)
    38cc:	dfc11d15 	stw	ra,1140(sp)
    38d0:	2025883a 	mov	r18,r4
    38d4:	d881030d 	sth	r2,1036(sp)
    38d8:	dac11915 	stw	r11,1124(sp)
    38dc:	da81038d 	sth	r10,1038(sp)
    38e0:	da410715 	stw	r9,1052(sp)
    38e4:	da010915 	stw	r8,1060(sp)
    38e8:	dec10015 	stw	sp,1024(sp)
    38ec:	dec10415 	stw	sp,1040(sp)
    38f0:	d8c10215 	stw	r3,1032(sp)
    38f4:	d8c10515 	stw	r3,1044(sp)
    38f8:	d8010615 	stw	zero,1048(sp)
    38fc:	00016840 	call	1684 <___vfprintf_internal_r>
    3900:	1023883a 	mov	r17,r2
    3904:	10000416 	blt	r2,zero,3918 <__sbprintf+0x80>
    3908:	d9410004 	addi	r5,sp,1024
    390c:	9009883a 	mov	r4,r18
    3910:	000554c0 	call	554c <_fflush_r>
    3914:	10000d1e 	bne	r2,zero,394c <__sbprintf+0xb4>
    3918:	d881030b 	ldhu	r2,1036(sp)
    391c:	1080100c 	andi	r2,r2,64
    3920:	10000326 	beq	r2,zero,3930 <__sbprintf+0x98>
    3924:	8080030b 	ldhu	r2,12(r16)
    3928:	10801014 	ori	r2,r2,64
    392c:	8080030d 	sth	r2,12(r16)
    3930:	8805883a 	mov	r2,r17
    3934:	dfc11d17 	ldw	ra,1140(sp)
    3938:	dc811c17 	ldw	r18,1136(sp)
    393c:	dc411b17 	ldw	r17,1132(sp)
    3940:	dc011a17 	ldw	r16,1128(sp)
    3944:	dec11e04 	addi	sp,sp,1144
    3948:	f800283a 	ret
    394c:	047fffc4 	movi	r17,-1
    3950:	003ff106 	br	3918 <__sbprintf+0x80>

00003954 <__swsetup_r>:
    3954:	008000b4 	movhi	r2,2
    3958:	defffd04 	addi	sp,sp,-12
    395c:	10a6f504 	addi	r2,r2,-25644
    3960:	dc400115 	stw	r17,4(sp)
    3964:	2023883a 	mov	r17,r4
    3968:	11000017 	ldw	r4,0(r2)
    396c:	dc000015 	stw	r16,0(sp)
    3970:	dfc00215 	stw	ra,8(sp)
    3974:	2821883a 	mov	r16,r5
    3978:	20000226 	beq	r4,zero,3984 <__swsetup_r+0x30>
    397c:	20800e17 	ldw	r2,56(r4)
    3980:	10003126 	beq	r2,zero,3a48 <__swsetup_r+0xf4>
    3984:	8080030b 	ldhu	r2,12(r16)
    3988:	10c0020c 	andi	r3,r2,8
    398c:	1009883a 	mov	r4,r2
    3990:	18000f26 	beq	r3,zero,39d0 <__swsetup_r+0x7c>
    3994:	80c00417 	ldw	r3,16(r16)
    3998:	18001526 	beq	r3,zero,39f0 <__swsetup_r+0x9c>
    399c:	1100004c 	andi	r4,r2,1
    39a0:	20001c1e 	bne	r4,zero,3a14 <__swsetup_r+0xc0>
    39a4:	1080008c 	andi	r2,r2,2
    39a8:	1000291e 	bne	r2,zero,3a50 <__swsetup_r+0xfc>
    39ac:	80800517 	ldw	r2,20(r16)
    39b0:	80800215 	stw	r2,8(r16)
    39b4:	18001c26 	beq	r3,zero,3a28 <__swsetup_r+0xd4>
    39b8:	0005883a 	mov	r2,zero
    39bc:	dfc00217 	ldw	ra,8(sp)
    39c0:	dc400117 	ldw	r17,4(sp)
    39c4:	dc000017 	ldw	r16,0(sp)
    39c8:	dec00304 	addi	sp,sp,12
    39cc:	f800283a 	ret
    39d0:	2080040c 	andi	r2,r4,16
    39d4:	10002e26 	beq	r2,zero,3a90 <__swsetup_r+0x13c>
    39d8:	2080010c 	andi	r2,r4,4
    39dc:	10001e1e 	bne	r2,zero,3a58 <__swsetup_r+0x104>
    39e0:	80c00417 	ldw	r3,16(r16)
    39e4:	20800214 	ori	r2,r4,8
    39e8:	8080030d 	sth	r2,12(r16)
    39ec:	183feb1e 	bne	r3,zero,399c <__swsetup_r+0x48>
    39f0:	1100a00c 	andi	r4,r2,640
    39f4:	01408004 	movi	r5,512
    39f8:	217fe826 	beq	r4,r5,399c <__swsetup_r+0x48>
    39fc:	800b883a 	mov	r5,r16
    3a00:	8809883a 	mov	r4,r17
    3a04:	00064cc0 	call	64cc <__smakebuf_r>
    3a08:	8080030b 	ldhu	r2,12(r16)
    3a0c:	80c00417 	ldw	r3,16(r16)
    3a10:	003fe206 	br	399c <__swsetup_r+0x48>
    3a14:	80800517 	ldw	r2,20(r16)
    3a18:	80000215 	stw	zero,8(r16)
    3a1c:	0085c83a 	sub	r2,zero,r2
    3a20:	80800615 	stw	r2,24(r16)
    3a24:	183fe41e 	bne	r3,zero,39b8 <__swsetup_r+0x64>
    3a28:	80c0030b 	ldhu	r3,12(r16)
    3a2c:	0005883a 	mov	r2,zero
    3a30:	1900200c 	andi	r4,r3,128
    3a34:	203fe126 	beq	r4,zero,39bc <__swsetup_r+0x68>
    3a38:	18c01014 	ori	r3,r3,64
    3a3c:	80c0030d 	sth	r3,12(r16)
    3a40:	00bfffc4 	movi	r2,-1
    3a44:	003fdd06 	br	39bc <__swsetup_r+0x68>
    3a48:	00059280 	call	5928 <__sinit>
    3a4c:	003fcd06 	br	3984 <__swsetup_r+0x30>
    3a50:	0005883a 	mov	r2,zero
    3a54:	003fd606 	br	39b0 <__swsetup_r+0x5c>
    3a58:	81400c17 	ldw	r5,48(r16)
    3a5c:	28000626 	beq	r5,zero,3a78 <__swsetup_r+0x124>
    3a60:	80801004 	addi	r2,r16,64
    3a64:	28800326 	beq	r5,r2,3a74 <__swsetup_r+0x120>
    3a68:	8809883a 	mov	r4,r17
    3a6c:	0005a9c0 	call	5a9c <_free_r>
    3a70:	8100030b 	ldhu	r4,12(r16)
    3a74:	80000c15 	stw	zero,48(r16)
    3a78:	80c00417 	ldw	r3,16(r16)
    3a7c:	00bff6c4 	movi	r2,-37
    3a80:	1108703a 	and	r4,r2,r4
    3a84:	80000115 	stw	zero,4(r16)
    3a88:	80c00015 	stw	r3,0(r16)
    3a8c:	003fd506 	br	39e4 <__swsetup_r+0x90>
    3a90:	00800244 	movi	r2,9
    3a94:	88800015 	stw	r2,0(r17)
    3a98:	20801014 	ori	r2,r4,64
    3a9c:	8080030d 	sth	r2,12(r16)
    3aa0:	00bfffc4 	movi	r2,-1
    3aa4:	003fc506 	br	39bc <__swsetup_r+0x68>

00003aa8 <quorem>:
    3aa8:	defff704 	addi	sp,sp,-36
    3aac:	dc800215 	stw	r18,8(sp)
    3ab0:	20800417 	ldw	r2,16(r4)
    3ab4:	2c800417 	ldw	r18,16(r5)
    3ab8:	dfc00815 	stw	ra,32(sp)
    3abc:	ddc00715 	stw	r23,28(sp)
    3ac0:	dd800615 	stw	r22,24(sp)
    3ac4:	dd400515 	stw	r21,20(sp)
    3ac8:	dd000415 	stw	r20,16(sp)
    3acc:	dcc00315 	stw	r19,12(sp)
    3ad0:	dc400115 	stw	r17,4(sp)
    3ad4:	dc000015 	stw	r16,0(sp)
    3ad8:	14807116 	blt	r2,r18,3ca0 <quorem+0x1f8>
    3adc:	94bfffc4 	addi	r18,r18,-1
    3ae0:	94ad883a 	add	r22,r18,r18
    3ae4:	b5ad883a 	add	r22,r22,r22
    3ae8:	2c400504 	addi	r17,r5,20
    3aec:	8da9883a 	add	r20,r17,r22
    3af0:	25400504 	addi	r21,r4,20
    3af4:	282f883a 	mov	r23,r5
    3af8:	adad883a 	add	r22,r21,r22
    3afc:	a1400017 	ldw	r5,0(r20)
    3b00:	2021883a 	mov	r16,r4
    3b04:	b1000017 	ldw	r4,0(r22)
    3b08:	29400044 	addi	r5,r5,1
    3b0c:	0000b680 	call	b68 <__udivsi3>
    3b10:	1027883a 	mov	r19,r2
    3b14:	10002c26 	beq	r2,zero,3bc8 <quorem+0x120>
    3b18:	a813883a 	mov	r9,r21
    3b1c:	880b883a 	mov	r5,r17
    3b20:	0009883a 	mov	r4,zero
    3b24:	000d883a 	mov	r6,zero
    3b28:	2a000017 	ldw	r8,0(r5)
    3b2c:	49c00017 	ldw	r7,0(r9)
    3b30:	29400104 	addi	r5,r5,4
    3b34:	40bfffcc 	andi	r2,r8,65535
    3b38:	14c5383a 	mul	r2,r2,r19
    3b3c:	4010d43a 	srli	r8,r8,16
    3b40:	38ffffcc 	andi	r3,r7,65535
    3b44:	1105883a 	add	r2,r2,r4
    3b48:	1008d43a 	srli	r4,r2,16
    3b4c:	44d1383a 	mul	r8,r8,r19
    3b50:	198d883a 	add	r6,r3,r6
    3b54:	10ffffcc 	andi	r3,r2,65535
    3b58:	30c7c83a 	sub	r3,r6,r3
    3b5c:	380ed43a 	srli	r7,r7,16
    3b60:	4105883a 	add	r2,r8,r4
    3b64:	180dd43a 	srai	r6,r3,16
    3b68:	113fffcc 	andi	r4,r2,65535
    3b6c:	390fc83a 	sub	r7,r7,r4
    3b70:	398d883a 	add	r6,r7,r6
    3b74:	300e943a 	slli	r7,r6,16
    3b78:	18ffffcc 	andi	r3,r3,65535
    3b7c:	1008d43a 	srli	r4,r2,16
    3b80:	38ceb03a 	or	r7,r7,r3
    3b84:	49c00015 	stw	r7,0(r9)
    3b88:	300dd43a 	srai	r6,r6,16
    3b8c:	4a400104 	addi	r9,r9,4
    3b90:	a17fe52e 	bgeu	r20,r5,3b28 <quorem+0x80>
    3b94:	b0800017 	ldw	r2,0(r22)
    3b98:	10000b1e 	bne	r2,zero,3bc8 <quorem+0x120>
    3b9c:	b0bfff04 	addi	r2,r22,-4
    3ba0:	a880082e 	bgeu	r21,r2,3bc4 <quorem+0x11c>
    3ba4:	b0ffff17 	ldw	r3,-4(r22)
    3ba8:	18000326 	beq	r3,zero,3bb8 <quorem+0x110>
    3bac:	00000506 	br	3bc4 <quorem+0x11c>
    3bb0:	10c00017 	ldw	r3,0(r2)
    3bb4:	1800031e 	bne	r3,zero,3bc4 <quorem+0x11c>
    3bb8:	10bfff04 	addi	r2,r2,-4
    3bbc:	94bfffc4 	addi	r18,r18,-1
    3bc0:	a8bffb36 	bltu	r21,r2,3bb0 <quorem+0x108>
    3bc4:	84800415 	stw	r18,16(r16)
    3bc8:	b80b883a 	mov	r5,r23
    3bcc:	8009883a 	mov	r4,r16
    3bd0:	00074000 	call	7400 <__mcmp>
    3bd4:	10002616 	blt	r2,zero,3c70 <quorem+0x1c8>
    3bd8:	9cc00044 	addi	r19,r19,1
    3bdc:	a805883a 	mov	r2,r21
    3be0:	000b883a 	mov	r5,zero
    3be4:	11000017 	ldw	r4,0(r2)
    3be8:	89800017 	ldw	r6,0(r17)
    3bec:	10800104 	addi	r2,r2,4
    3bf0:	20ffffcc 	andi	r3,r4,65535
    3bf4:	194b883a 	add	r5,r3,r5
    3bf8:	30ffffcc 	andi	r3,r6,65535
    3bfc:	28c7c83a 	sub	r3,r5,r3
    3c00:	300cd43a 	srli	r6,r6,16
    3c04:	2008d43a 	srli	r4,r4,16
    3c08:	180bd43a 	srai	r5,r3,16
    3c0c:	18ffffcc 	andi	r3,r3,65535
    3c10:	2189c83a 	sub	r4,r4,r6
    3c14:	2149883a 	add	r4,r4,r5
    3c18:	200c943a 	slli	r6,r4,16
    3c1c:	8c400104 	addi	r17,r17,4
    3c20:	200bd43a 	srai	r5,r4,16
    3c24:	30c6b03a 	or	r3,r6,r3
    3c28:	10ffff15 	stw	r3,-4(r2)
    3c2c:	a47fed2e 	bgeu	r20,r17,3be4 <quorem+0x13c>
    3c30:	9485883a 	add	r2,r18,r18
    3c34:	1085883a 	add	r2,r2,r2
    3c38:	a887883a 	add	r3,r21,r2
    3c3c:	18800017 	ldw	r2,0(r3)
    3c40:	10000b1e 	bne	r2,zero,3c70 <quorem+0x1c8>
    3c44:	18bfff04 	addi	r2,r3,-4
    3c48:	a880082e 	bgeu	r21,r2,3c6c <quorem+0x1c4>
    3c4c:	18ffff17 	ldw	r3,-4(r3)
    3c50:	18000326 	beq	r3,zero,3c60 <quorem+0x1b8>
    3c54:	00000506 	br	3c6c <quorem+0x1c4>
    3c58:	10c00017 	ldw	r3,0(r2)
    3c5c:	1800031e 	bne	r3,zero,3c6c <quorem+0x1c4>
    3c60:	10bfff04 	addi	r2,r2,-4
    3c64:	94bfffc4 	addi	r18,r18,-1
    3c68:	a8bffb36 	bltu	r21,r2,3c58 <quorem+0x1b0>
    3c6c:	84800415 	stw	r18,16(r16)
    3c70:	9805883a 	mov	r2,r19
    3c74:	dfc00817 	ldw	ra,32(sp)
    3c78:	ddc00717 	ldw	r23,28(sp)
    3c7c:	dd800617 	ldw	r22,24(sp)
    3c80:	dd400517 	ldw	r21,20(sp)
    3c84:	dd000417 	ldw	r20,16(sp)
    3c88:	dcc00317 	ldw	r19,12(sp)
    3c8c:	dc800217 	ldw	r18,8(sp)
    3c90:	dc400117 	ldw	r17,4(sp)
    3c94:	dc000017 	ldw	r16,0(sp)
    3c98:	dec00904 	addi	sp,sp,36
    3c9c:	f800283a 	ret
    3ca0:	0005883a 	mov	r2,zero
    3ca4:	003ff306 	br	3c74 <quorem+0x1cc>

00003ca8 <_dtoa_r>:
    3ca8:	20801017 	ldw	r2,64(r4)
    3cac:	deffde04 	addi	sp,sp,-136
    3cb0:	df002015 	stw	fp,128(sp)
    3cb4:	dcc01b15 	stw	r19,108(sp)
    3cb8:	dc801a15 	stw	r18,104(sp)
    3cbc:	dc401915 	stw	r17,100(sp)
    3cc0:	dc001815 	stw	r16,96(sp)
    3cc4:	dfc02115 	stw	ra,132(sp)
    3cc8:	ddc01f15 	stw	r23,124(sp)
    3ccc:	dd801e15 	stw	r22,120(sp)
    3cd0:	dd401d15 	stw	r21,116(sp)
    3cd4:	dd001c15 	stw	r20,112(sp)
    3cd8:	d9c00315 	stw	r7,12(sp)
    3cdc:	2039883a 	mov	fp,r4
    3ce0:	3023883a 	mov	r17,r6
    3ce4:	2825883a 	mov	r18,r5
    3ce8:	dc002417 	ldw	r16,144(sp)
    3cec:	3027883a 	mov	r19,r6
    3cf0:	10000826 	beq	r2,zero,3d14 <_dtoa_r+0x6c>
    3cf4:	21801117 	ldw	r6,68(r4)
    3cf8:	00c00044 	movi	r3,1
    3cfc:	100b883a 	mov	r5,r2
    3d00:	1986983a 	sll	r3,r3,r6
    3d04:	11800115 	stw	r6,4(r2)
    3d08:	10c00215 	stw	r3,8(r2)
    3d0c:	0006be00 	call	6be0 <_Bfree>
    3d10:	e0001015 	stw	zero,64(fp)
    3d14:	88002e16 	blt	r17,zero,3dd0 <_dtoa_r+0x128>
    3d18:	80000015 	stw	zero,0(r16)
    3d1c:	889ffc2c 	andhi	r2,r17,32752
    3d20:	00dffc34 	movhi	r3,32752
    3d24:	10c01c26 	beq	r2,r3,3d98 <_dtoa_r+0xf0>
    3d28:	000d883a 	mov	r6,zero
    3d2c:	000f883a 	mov	r7,zero
    3d30:	9009883a 	mov	r4,r18
    3d34:	980b883a 	mov	r5,r19
    3d38:	000bee40 	call	bee4 <__eqdf2>
    3d3c:	10002b1e 	bne	r2,zero,3dec <_dtoa_r+0x144>
    3d40:	d9c02317 	ldw	r7,140(sp)
    3d44:	00800044 	movi	r2,1
    3d48:	38800015 	stw	r2,0(r7)
    3d4c:	d8802517 	ldw	r2,148(sp)
    3d50:	10019e26 	beq	r2,zero,43cc <_dtoa_r+0x724>
    3d54:	d8c02517 	ldw	r3,148(sp)
    3d58:	00800074 	movhi	r2,1
    3d5c:	109f4c44 	addi	r2,r2,32049
    3d60:	18800015 	stw	r2,0(r3)
    3d64:	10bfffc4 	addi	r2,r2,-1
    3d68:	dfc02117 	ldw	ra,132(sp)
    3d6c:	df002017 	ldw	fp,128(sp)
    3d70:	ddc01f17 	ldw	r23,124(sp)
    3d74:	dd801e17 	ldw	r22,120(sp)
    3d78:	dd401d17 	ldw	r21,116(sp)
    3d7c:	dd001c17 	ldw	r20,112(sp)
    3d80:	dcc01b17 	ldw	r19,108(sp)
    3d84:	dc801a17 	ldw	r18,104(sp)
    3d88:	dc401917 	ldw	r17,100(sp)
    3d8c:	dc001817 	ldw	r16,96(sp)
    3d90:	dec02204 	addi	sp,sp,136
    3d94:	f800283a 	ret
    3d98:	d8c02317 	ldw	r3,140(sp)
    3d9c:	0089c3c4 	movi	r2,9999
    3da0:	18800015 	stw	r2,0(r3)
    3da4:	90017726 	beq	r18,zero,4384 <_dtoa_r+0x6dc>
    3da8:	00800074 	movhi	r2,1
    3dac:	109f5804 	addi	r2,r2,32096
    3db0:	d9002517 	ldw	r4,148(sp)
    3db4:	203fec26 	beq	r4,zero,3d68 <_dtoa_r+0xc0>
    3db8:	10c000c7 	ldb	r3,3(r2)
    3dbc:	1801781e 	bne	r3,zero,43a0 <_dtoa_r+0x6f8>
    3dc0:	10c000c4 	addi	r3,r2,3
    3dc4:	d9802517 	ldw	r6,148(sp)
    3dc8:	30c00015 	stw	r3,0(r6)
    3dcc:	003fe606 	br	3d68 <_dtoa_r+0xc0>
    3dd0:	04e00034 	movhi	r19,32768
    3dd4:	9cffffc4 	addi	r19,r19,-1
    3dd8:	00800044 	movi	r2,1
    3ddc:	8ce6703a 	and	r19,r17,r19
    3de0:	80800015 	stw	r2,0(r16)
    3de4:	9823883a 	mov	r17,r19
    3de8:	003fcc06 	br	3d1c <_dtoa_r+0x74>
    3dec:	d8800204 	addi	r2,sp,8
    3df0:	d8800015 	stw	r2,0(sp)
    3df4:	d9c00104 	addi	r7,sp,4
    3df8:	900b883a 	mov	r5,r18
    3dfc:	980d883a 	mov	r6,r19
    3e00:	e009883a 	mov	r4,fp
    3e04:	8820d53a 	srli	r16,r17,20
    3e08:	00077cc0 	call	77cc <__d2b>
    3e0c:	d8800915 	stw	r2,36(sp)
    3e10:	8001651e 	bne	r16,zero,43a8 <_dtoa_r+0x700>
    3e14:	dd800217 	ldw	r22,8(sp)
    3e18:	dc000117 	ldw	r16,4(sp)
    3e1c:	00800804 	movi	r2,32
    3e20:	b421883a 	add	r16,r22,r16
    3e24:	80c10c84 	addi	r3,r16,1074
    3e28:	10c2d10e 	bge	r2,r3,4970 <_dtoa_r+0xcc8>
    3e2c:	00801004 	movi	r2,64
    3e30:	81010484 	addi	r4,r16,1042
    3e34:	10c7c83a 	sub	r3,r2,r3
    3e38:	9108d83a 	srl	r4,r18,r4
    3e3c:	88e2983a 	sll	r17,r17,r3
    3e40:	2448b03a 	or	r4,r4,r17
    3e44:	000d2ac0 	call	d2ac <__floatunsidf>
    3e48:	017f8434 	movhi	r5,65040
    3e4c:	01800044 	movi	r6,1
    3e50:	1009883a 	mov	r4,r2
    3e54:	194b883a 	add	r5,r3,r5
    3e58:	843fffc4 	addi	r16,r16,-1
    3e5c:	d9801115 	stw	r6,68(sp)
    3e60:	000d883a 	mov	r6,zero
    3e64:	01cffe34 	movhi	r7,16376
    3e68:	000c8540 	call	c854 <__subdf3>
    3e6c:	0198dbf4 	movhi	r6,25455
    3e70:	01cff4f4 	movhi	r7,16339
    3e74:	3190d844 	addi	r6,r6,17249
    3e78:	39e1e9c4 	addi	r7,r7,-30809
    3e7c:	1009883a 	mov	r4,r2
    3e80:	180b883a 	mov	r5,r3
    3e84:	000c13c0 	call	c13c <__muldf3>
    3e88:	01a2d874 	movhi	r6,35681
    3e8c:	01cff1f4 	movhi	r7,16327
    3e90:	31b22cc4 	addi	r6,r6,-14157
    3e94:	39e28a04 	addi	r7,r7,-30168
    3e98:	180b883a 	mov	r5,r3
    3e9c:	1009883a 	mov	r4,r2
    3ea0:	000ad500 	call	ad50 <__adddf3>
    3ea4:	8009883a 	mov	r4,r16
    3ea8:	1029883a 	mov	r20,r2
    3eac:	1823883a 	mov	r17,r3
    3eb0:	000d1d00 	call	d1d0 <__floatsidf>
    3eb4:	019427f4 	movhi	r6,20639
    3eb8:	01cff4f4 	movhi	r7,16339
    3ebc:	319e7ec4 	addi	r6,r6,31227
    3ec0:	39d104c4 	addi	r7,r7,17427
    3ec4:	1009883a 	mov	r4,r2
    3ec8:	180b883a 	mov	r5,r3
    3ecc:	000c13c0 	call	c13c <__muldf3>
    3ed0:	100d883a 	mov	r6,r2
    3ed4:	180f883a 	mov	r7,r3
    3ed8:	a009883a 	mov	r4,r20
    3edc:	880b883a 	mov	r5,r17
    3ee0:	000ad500 	call	ad50 <__adddf3>
    3ee4:	1009883a 	mov	r4,r2
    3ee8:	180b883a 	mov	r5,r3
    3eec:	1029883a 	mov	r20,r2
    3ef0:	1823883a 	mov	r17,r3
    3ef4:	000d1500 	call	d150 <__fixdfsi>
    3ef8:	000d883a 	mov	r6,zero
    3efc:	000f883a 	mov	r7,zero
    3f00:	a009883a 	mov	r4,r20
    3f04:	880b883a 	mov	r5,r17
    3f08:	d8800515 	stw	r2,20(sp)
    3f0c:	000c0480 	call	c048 <__ledf2>
    3f10:	10028716 	blt	r2,zero,4930 <_dtoa_r+0xc88>
    3f14:	d8c00517 	ldw	r3,20(sp)
    3f18:	00800584 	movi	r2,22
    3f1c:	10c27536 	bltu	r2,r3,48f4 <_dtoa_r+0xc4c>
    3f20:	180490fa 	slli	r2,r3,3
    3f24:	00c00074 	movhi	r3,1
    3f28:	18df7404 	addi	r3,r3,32208
    3f2c:	1885883a 	add	r2,r3,r2
    3f30:	11000017 	ldw	r4,0(r2)
    3f34:	11400117 	ldw	r5,4(r2)
    3f38:	900d883a 	mov	r6,r18
    3f3c:	980f883a 	mov	r7,r19
    3f40:	000bf6c0 	call	bf6c <__gedf2>
    3f44:	00828d0e 	bge	zero,r2,497c <_dtoa_r+0xcd4>
    3f48:	d9000517 	ldw	r4,20(sp)
    3f4c:	d8000e15 	stw	zero,56(sp)
    3f50:	213fffc4 	addi	r4,r4,-1
    3f54:	d9000515 	stw	r4,20(sp)
    3f58:	b42dc83a 	sub	r22,r22,r16
    3f5c:	b5bfffc4 	addi	r22,r22,-1
    3f60:	b0026f16 	blt	r22,zero,4920 <_dtoa_r+0xc78>
    3f64:	d8000815 	stw	zero,32(sp)
    3f68:	d9c00517 	ldw	r7,20(sp)
    3f6c:	38026416 	blt	r7,zero,4900 <_dtoa_r+0xc58>
    3f70:	b1ed883a 	add	r22,r22,r7
    3f74:	d9c00d15 	stw	r7,52(sp)
    3f78:	d8000a15 	stw	zero,40(sp)
    3f7c:	d9800317 	ldw	r6,12(sp)
    3f80:	00800244 	movi	r2,9
    3f84:	11811436 	bltu	r2,r6,43d8 <_dtoa_r+0x730>
    3f88:	00800144 	movi	r2,5
    3f8c:	1184e10e 	bge	r2,r6,5314 <_dtoa_r+0x166c>
    3f90:	31bfff04 	addi	r6,r6,-4
    3f94:	d9800315 	stw	r6,12(sp)
    3f98:	0023883a 	mov	r17,zero
    3f9c:	d9800317 	ldw	r6,12(sp)
    3fa0:	008000c4 	movi	r2,3
    3fa4:	30836726 	beq	r6,r2,4d44 <_dtoa_r+0x109c>
    3fa8:	1183410e 	bge	r2,r6,4cb0 <_dtoa_r+0x1008>
    3fac:	d9c00317 	ldw	r7,12(sp)
    3fb0:	00800104 	movi	r2,4
    3fb4:	38827c26 	beq	r7,r2,49a8 <_dtoa_r+0xd00>
    3fb8:	00800144 	movi	r2,5
    3fbc:	3884c41e 	bne	r7,r2,52d0 <_dtoa_r+0x1628>
    3fc0:	00800044 	movi	r2,1
    3fc4:	d8800b15 	stw	r2,44(sp)
    3fc8:	d8c00517 	ldw	r3,20(sp)
    3fcc:	d9002217 	ldw	r4,136(sp)
    3fd0:	1907883a 	add	r3,r3,r4
    3fd4:	19800044 	addi	r6,r3,1
    3fd8:	d8c00c15 	stw	r3,48(sp)
    3fdc:	d9800615 	stw	r6,24(sp)
    3fe0:	0183a40e 	bge	zero,r6,4e74 <_dtoa_r+0x11cc>
    3fe4:	d9800617 	ldw	r6,24(sp)
    3fe8:	3021883a 	mov	r16,r6
    3fec:	e0001115 	stw	zero,68(fp)
    3ff0:	008005c4 	movi	r2,23
    3ff4:	1184c92e 	bgeu	r2,r6,531c <_dtoa_r+0x1674>
    3ff8:	00c00044 	movi	r3,1
    3ffc:	00800104 	movi	r2,4
    4000:	1085883a 	add	r2,r2,r2
    4004:	11000504 	addi	r4,r2,20
    4008:	180b883a 	mov	r5,r3
    400c:	18c00044 	addi	r3,r3,1
    4010:	313ffb2e 	bgeu	r6,r4,4000 <_dtoa_r+0x358>
    4014:	e1401115 	stw	r5,68(fp)
    4018:	e009883a 	mov	r4,fp
    401c:	0006b380 	call	6b38 <_Balloc>
    4020:	d8800715 	stw	r2,28(sp)
    4024:	e0801015 	stw	r2,64(fp)
    4028:	00800384 	movi	r2,14
    402c:	1400f736 	bltu	r2,r16,440c <_dtoa_r+0x764>
    4030:	8800f626 	beq	r17,zero,440c <_dtoa_r+0x764>
    4034:	d9c00517 	ldw	r7,20(sp)
    4038:	01c39a0e 	bge	zero,r7,4ea4 <_dtoa_r+0x11fc>
    403c:	388003cc 	andi	r2,r7,15
    4040:	100490fa 	slli	r2,r2,3
    4044:	382bd13a 	srai	r21,r7,4
    4048:	00c00074 	movhi	r3,1
    404c:	18df7404 	addi	r3,r3,32208
    4050:	1885883a 	add	r2,r3,r2
    4054:	a8c0040c 	andi	r3,r21,16
    4058:	12400017 	ldw	r9,0(r2)
    405c:	12000117 	ldw	r8,4(r2)
    4060:	18037926 	beq	r3,zero,4e48 <_dtoa_r+0x11a0>
    4064:	00800074 	movhi	r2,1
    4068:	109f6a04 	addi	r2,r2,32168
    406c:	11800817 	ldw	r6,32(r2)
    4070:	11c00917 	ldw	r7,36(r2)
    4074:	9009883a 	mov	r4,r18
    4078:	980b883a 	mov	r5,r19
    407c:	da001715 	stw	r8,92(sp)
    4080:	da401615 	stw	r9,88(sp)
    4084:	000b5fc0 	call	b5fc <__divdf3>
    4088:	da001717 	ldw	r8,92(sp)
    408c:	da401617 	ldw	r9,88(sp)
    4090:	ad4003cc 	andi	r21,r21,15
    4094:	040000c4 	movi	r16,3
    4098:	1023883a 	mov	r17,r2
    409c:	1829883a 	mov	r20,r3
    40a0:	a8001126 	beq	r21,zero,40e8 <_dtoa_r+0x440>
    40a4:	05c00074 	movhi	r23,1
    40a8:	bddf6a04 	addi	r23,r23,32168
    40ac:	4805883a 	mov	r2,r9
    40b0:	4007883a 	mov	r3,r8
    40b4:	a980004c 	andi	r6,r21,1
    40b8:	1009883a 	mov	r4,r2
    40bc:	a82bd07a 	srai	r21,r21,1
    40c0:	180b883a 	mov	r5,r3
    40c4:	30000426 	beq	r6,zero,40d8 <_dtoa_r+0x430>
    40c8:	b9800017 	ldw	r6,0(r23)
    40cc:	b9c00117 	ldw	r7,4(r23)
    40d0:	84000044 	addi	r16,r16,1
    40d4:	000c13c0 	call	c13c <__muldf3>
    40d8:	bdc00204 	addi	r23,r23,8
    40dc:	a83ff51e 	bne	r21,zero,40b4 <_dtoa_r+0x40c>
    40e0:	1013883a 	mov	r9,r2
    40e4:	1811883a 	mov	r8,r3
    40e8:	480d883a 	mov	r6,r9
    40ec:	400f883a 	mov	r7,r8
    40f0:	8809883a 	mov	r4,r17
    40f4:	a00b883a 	mov	r5,r20
    40f8:	000b5fc0 	call	b5fc <__divdf3>
    40fc:	d8800f15 	stw	r2,60(sp)
    4100:	d8c01015 	stw	r3,64(sp)
    4104:	d8c00e17 	ldw	r3,56(sp)
    4108:	18000626 	beq	r3,zero,4124 <_dtoa_r+0x47c>
    410c:	d9000f17 	ldw	r4,60(sp)
    4110:	d9401017 	ldw	r5,64(sp)
    4114:	000d883a 	mov	r6,zero
    4118:	01cffc34 	movhi	r7,16368
    411c:	000c0480 	call	c048 <__ledf2>
    4120:	10040b16 	blt	r2,zero,5150 <_dtoa_r+0x14a8>
    4124:	8009883a 	mov	r4,r16
    4128:	000d1d00 	call	d1d0 <__floatsidf>
    412c:	d9800f17 	ldw	r6,60(sp)
    4130:	d9c01017 	ldw	r7,64(sp)
    4134:	1009883a 	mov	r4,r2
    4138:	180b883a 	mov	r5,r3
    413c:	000c13c0 	call	c13c <__muldf3>
    4140:	000d883a 	mov	r6,zero
    4144:	01d00734 	movhi	r7,16412
    4148:	1009883a 	mov	r4,r2
    414c:	180b883a 	mov	r5,r3
    4150:	000ad500 	call	ad50 <__adddf3>
    4154:	1021883a 	mov	r16,r2
    4158:	d8800617 	ldw	r2,24(sp)
    415c:	047f3034 	movhi	r17,64704
    4160:	1c63883a 	add	r17,r3,r17
    4164:	10031826 	beq	r2,zero,4dc8 <_dtoa_r+0x1120>
    4168:	d8c00517 	ldw	r3,20(sp)
    416c:	db000617 	ldw	r12,24(sp)
    4170:	d8c01315 	stw	r3,76(sp)
    4174:	d9000b17 	ldw	r4,44(sp)
    4178:	20038f26 	beq	r4,zero,4fb8 <_dtoa_r+0x1310>
    417c:	60bfffc4 	addi	r2,r12,-1
    4180:	100490fa 	slli	r2,r2,3
    4184:	00c00074 	movhi	r3,1
    4188:	18df7404 	addi	r3,r3,32208
    418c:	1885883a 	add	r2,r3,r2
    4190:	11800017 	ldw	r6,0(r2)
    4194:	11c00117 	ldw	r7,4(r2)
    4198:	d8800717 	ldw	r2,28(sp)
    419c:	0009883a 	mov	r4,zero
    41a0:	014ff834 	movhi	r5,16352
    41a4:	db001615 	stw	r12,88(sp)
    41a8:	15c00044 	addi	r23,r2,1
    41ac:	000b5fc0 	call	b5fc <__divdf3>
    41b0:	800d883a 	mov	r6,r16
    41b4:	880f883a 	mov	r7,r17
    41b8:	1009883a 	mov	r4,r2
    41bc:	180b883a 	mov	r5,r3
    41c0:	000c8540 	call	c854 <__subdf3>
    41c4:	d9401017 	ldw	r5,64(sp)
    41c8:	d9000f17 	ldw	r4,60(sp)
    41cc:	102b883a 	mov	r21,r2
    41d0:	d8c01215 	stw	r3,72(sp)
    41d4:	000d1500 	call	d150 <__fixdfsi>
    41d8:	1009883a 	mov	r4,r2
    41dc:	1029883a 	mov	r20,r2
    41e0:	000d1d00 	call	d1d0 <__floatsidf>
    41e4:	d9000f17 	ldw	r4,60(sp)
    41e8:	d9401017 	ldw	r5,64(sp)
    41ec:	100d883a 	mov	r6,r2
    41f0:	180f883a 	mov	r7,r3
    41f4:	000c8540 	call	c854 <__subdf3>
    41f8:	1823883a 	mov	r17,r3
    41fc:	d8c00717 	ldw	r3,28(sp)
    4200:	d9401217 	ldw	r5,72(sp)
    4204:	a2000c04 	addi	r8,r20,48
    4208:	1021883a 	mov	r16,r2
    420c:	1a000005 	stb	r8,0(r3)
    4210:	800d883a 	mov	r6,r16
    4214:	880f883a 	mov	r7,r17
    4218:	a809883a 	mov	r4,r21
    421c:	4029883a 	mov	r20,r8
    4220:	000bf6c0 	call	bf6c <__gedf2>
    4224:	00841d16 	blt	zero,r2,529c <_dtoa_r+0x15f4>
    4228:	800d883a 	mov	r6,r16
    422c:	880f883a 	mov	r7,r17
    4230:	0009883a 	mov	r4,zero
    4234:	014ffc34 	movhi	r5,16368
    4238:	000c8540 	call	c854 <__subdf3>
    423c:	d9401217 	ldw	r5,72(sp)
    4240:	100d883a 	mov	r6,r2
    4244:	180f883a 	mov	r7,r3
    4248:	a809883a 	mov	r4,r21
    424c:	000bf6c0 	call	bf6c <__gedf2>
    4250:	db001617 	ldw	r12,88(sp)
    4254:	00840e16 	blt	zero,r2,5290 <_dtoa_r+0x15e8>
    4258:	00800044 	movi	r2,1
    425c:	13006b0e 	bge	r2,r12,440c <_dtoa_r+0x764>
    4260:	d9000717 	ldw	r4,28(sp)
    4264:	dd800f15 	stw	r22,60(sp)
    4268:	dcc01015 	stw	r19,64(sp)
    426c:	2319883a 	add	r12,r4,r12
    4270:	dcc01217 	ldw	r19,72(sp)
    4274:	602d883a 	mov	r22,r12
    4278:	dc801215 	stw	r18,72(sp)
    427c:	b825883a 	mov	r18,r23
    4280:	00000906 	br	42a8 <_dtoa_r+0x600>
    4284:	000c8540 	call	c854 <__subdf3>
    4288:	a80d883a 	mov	r6,r21
    428c:	980f883a 	mov	r7,r19
    4290:	1009883a 	mov	r4,r2
    4294:	180b883a 	mov	r5,r3
    4298:	000c0480 	call	c048 <__ledf2>
    429c:	1003e816 	blt	r2,zero,5240 <_dtoa_r+0x1598>
    42a0:	b825883a 	mov	r18,r23
    42a4:	bd83e926 	beq	r23,r22,524c <_dtoa_r+0x15a4>
    42a8:	a809883a 	mov	r4,r21
    42ac:	980b883a 	mov	r5,r19
    42b0:	000d883a 	mov	r6,zero
    42b4:	01d00934 	movhi	r7,16420
    42b8:	000c13c0 	call	c13c <__muldf3>
    42bc:	000d883a 	mov	r6,zero
    42c0:	01d00934 	movhi	r7,16420
    42c4:	8009883a 	mov	r4,r16
    42c8:	880b883a 	mov	r5,r17
    42cc:	102b883a 	mov	r21,r2
    42d0:	1827883a 	mov	r19,r3
    42d4:	000c13c0 	call	c13c <__muldf3>
    42d8:	180b883a 	mov	r5,r3
    42dc:	1009883a 	mov	r4,r2
    42e0:	1821883a 	mov	r16,r3
    42e4:	1023883a 	mov	r17,r2
    42e8:	000d1500 	call	d150 <__fixdfsi>
    42ec:	1009883a 	mov	r4,r2
    42f0:	1029883a 	mov	r20,r2
    42f4:	000d1d00 	call	d1d0 <__floatsidf>
    42f8:	8809883a 	mov	r4,r17
    42fc:	800b883a 	mov	r5,r16
    4300:	100d883a 	mov	r6,r2
    4304:	180f883a 	mov	r7,r3
    4308:	000c8540 	call	c854 <__subdf3>
    430c:	a5000c04 	addi	r20,r20,48
    4310:	a80d883a 	mov	r6,r21
    4314:	980f883a 	mov	r7,r19
    4318:	1009883a 	mov	r4,r2
    431c:	180b883a 	mov	r5,r3
    4320:	95000005 	stb	r20,0(r18)
    4324:	1021883a 	mov	r16,r2
    4328:	1823883a 	mov	r17,r3
    432c:	000c0480 	call	c048 <__ledf2>
    4330:	bdc00044 	addi	r23,r23,1
    4334:	800d883a 	mov	r6,r16
    4338:	880f883a 	mov	r7,r17
    433c:	0009883a 	mov	r4,zero
    4340:	014ffc34 	movhi	r5,16368
    4344:	103fcf0e 	bge	r2,zero,4284 <_dtoa_r+0x5dc>
    4348:	d8c01317 	ldw	r3,76(sp)
    434c:	d8c00515 	stw	r3,20(sp)
    4350:	d9400917 	ldw	r5,36(sp)
    4354:	e009883a 	mov	r4,fp
    4358:	0006be00 	call	6be0 <_Bfree>
    435c:	d9000517 	ldw	r4,20(sp)
    4360:	d9802317 	ldw	r6,140(sp)
    4364:	d9c02517 	ldw	r7,148(sp)
    4368:	b8000005 	stb	zero,0(r23)
    436c:	20800044 	addi	r2,r4,1
    4370:	30800015 	stw	r2,0(r6)
    4374:	3802aa26 	beq	r7,zero,4e20 <_dtoa_r+0x1178>
    4378:	3dc00015 	stw	r23,0(r7)
    437c:	d8800717 	ldw	r2,28(sp)
    4380:	003e7906 	br	3d68 <_dtoa_r+0xc0>
    4384:	00800434 	movhi	r2,16
    4388:	10bfffc4 	addi	r2,r2,-1
    438c:	88a2703a 	and	r17,r17,r2
    4390:	883e851e 	bne	r17,zero,3da8 <_dtoa_r+0x100>
    4394:	00800074 	movhi	r2,1
    4398:	109f5504 	addi	r2,r2,32084
    439c:	003e8406 	br	3db0 <_dtoa_r+0x108>
    43a0:	10c00204 	addi	r3,r2,8
    43a4:	003e8706 	br	3dc4 <_dtoa_r+0x11c>
    43a8:	01400434 	movhi	r5,16
    43ac:	297fffc4 	addi	r5,r5,-1
    43b0:	994a703a 	and	r5,r19,r5
    43b4:	9009883a 	mov	r4,r18
    43b8:	843f0044 	addi	r16,r16,-1023
    43bc:	294ffc34 	orhi	r5,r5,16368
    43c0:	dd800217 	ldw	r22,8(sp)
    43c4:	d8001115 	stw	zero,68(sp)
    43c8:	003ea506 	br	3e60 <_dtoa_r+0x1b8>
    43cc:	00800074 	movhi	r2,1
    43d0:	109f4c04 	addi	r2,r2,32048
    43d4:	003e6406 	br	3d68 <_dtoa_r+0xc0>
    43d8:	e0001115 	stw	zero,68(fp)
    43dc:	000b883a 	mov	r5,zero
    43e0:	e009883a 	mov	r4,fp
    43e4:	0006b380 	call	6b38 <_Balloc>
    43e8:	01bfffc4 	movi	r6,-1
    43ec:	01c00044 	movi	r7,1
    43f0:	d8800715 	stw	r2,28(sp)
    43f4:	d9800c15 	stw	r6,48(sp)
    43f8:	e0801015 	stw	r2,64(fp)
    43fc:	d8000315 	stw	zero,12(sp)
    4400:	d9c00b15 	stw	r7,44(sp)
    4404:	d9800615 	stw	r6,24(sp)
    4408:	d8002215 	stw	zero,136(sp)
    440c:	d8800117 	ldw	r2,4(sp)
    4410:	10008916 	blt	r2,zero,4638 <_dtoa_r+0x990>
    4414:	d9000517 	ldw	r4,20(sp)
    4418:	00c00384 	movi	r3,14
    441c:	19008616 	blt	r3,r4,4638 <_dtoa_r+0x990>
    4420:	200490fa 	slli	r2,r4,3
    4424:	00c00074 	movhi	r3,1
    4428:	d9802217 	ldw	r6,136(sp)
    442c:	18df7404 	addi	r3,r3,32208
    4430:	1885883a 	add	r2,r3,r2
    4434:	14000017 	ldw	r16,0(r2)
    4438:	14400117 	ldw	r17,4(r2)
    443c:	30016316 	blt	r6,zero,49cc <_dtoa_r+0xd24>
    4440:	800d883a 	mov	r6,r16
    4444:	880f883a 	mov	r7,r17
    4448:	9009883a 	mov	r4,r18
    444c:	980b883a 	mov	r5,r19
    4450:	000b5fc0 	call	b5fc <__divdf3>
    4454:	180b883a 	mov	r5,r3
    4458:	1009883a 	mov	r4,r2
    445c:	000d1500 	call	d150 <__fixdfsi>
    4460:	1009883a 	mov	r4,r2
    4464:	102b883a 	mov	r21,r2
    4468:	000d1d00 	call	d1d0 <__floatsidf>
    446c:	800d883a 	mov	r6,r16
    4470:	880f883a 	mov	r7,r17
    4474:	1009883a 	mov	r4,r2
    4478:	180b883a 	mov	r5,r3
    447c:	000c13c0 	call	c13c <__muldf3>
    4480:	100d883a 	mov	r6,r2
    4484:	180f883a 	mov	r7,r3
    4488:	9009883a 	mov	r4,r18
    448c:	980b883a 	mov	r5,r19
    4490:	000c8540 	call	c854 <__subdf3>
    4494:	d9c00717 	ldw	r7,28(sp)
    4498:	1009883a 	mov	r4,r2
    449c:	a8800c04 	addi	r2,r21,48
    44a0:	38800005 	stb	r2,0(r7)
    44a4:	3dc00044 	addi	r23,r7,1
    44a8:	d9c00617 	ldw	r7,24(sp)
    44ac:	01800044 	movi	r6,1
    44b0:	180b883a 	mov	r5,r3
    44b4:	2005883a 	mov	r2,r4
    44b8:	39803826 	beq	r7,r6,459c <_dtoa_r+0x8f4>
    44bc:	000d883a 	mov	r6,zero
    44c0:	01d00934 	movhi	r7,16420
    44c4:	000c13c0 	call	c13c <__muldf3>
    44c8:	000d883a 	mov	r6,zero
    44cc:	000f883a 	mov	r7,zero
    44d0:	1009883a 	mov	r4,r2
    44d4:	180b883a 	mov	r5,r3
    44d8:	1025883a 	mov	r18,r2
    44dc:	1827883a 	mov	r19,r3
    44e0:	000bee40 	call	bee4 <__eqdf2>
    44e4:	103f9a26 	beq	r2,zero,4350 <_dtoa_r+0x6a8>
    44e8:	d9c00617 	ldw	r7,24(sp)
    44ec:	d8c00717 	ldw	r3,28(sp)
    44f0:	b829883a 	mov	r20,r23
    44f4:	38bfffc4 	addi	r2,r7,-1
    44f8:	18ad883a 	add	r22,r3,r2
    44fc:	00000a06 	br	4528 <_dtoa_r+0x880>
    4500:	000c13c0 	call	c13c <__muldf3>
    4504:	000d883a 	mov	r6,zero
    4508:	000f883a 	mov	r7,zero
    450c:	1009883a 	mov	r4,r2
    4510:	180b883a 	mov	r5,r3
    4514:	1025883a 	mov	r18,r2
    4518:	1827883a 	mov	r19,r3
    451c:	b829883a 	mov	r20,r23
    4520:	000bee40 	call	bee4 <__eqdf2>
    4524:	103f8a26 	beq	r2,zero,4350 <_dtoa_r+0x6a8>
    4528:	800d883a 	mov	r6,r16
    452c:	880f883a 	mov	r7,r17
    4530:	9009883a 	mov	r4,r18
    4534:	980b883a 	mov	r5,r19
    4538:	000b5fc0 	call	b5fc <__divdf3>
    453c:	180b883a 	mov	r5,r3
    4540:	1009883a 	mov	r4,r2
    4544:	000d1500 	call	d150 <__fixdfsi>
    4548:	1009883a 	mov	r4,r2
    454c:	102b883a 	mov	r21,r2
    4550:	000d1d00 	call	d1d0 <__floatsidf>
    4554:	800d883a 	mov	r6,r16
    4558:	880f883a 	mov	r7,r17
    455c:	1009883a 	mov	r4,r2
    4560:	180b883a 	mov	r5,r3
    4564:	000c13c0 	call	c13c <__muldf3>
    4568:	100d883a 	mov	r6,r2
    456c:	180f883a 	mov	r7,r3
    4570:	9009883a 	mov	r4,r18
    4574:	980b883a 	mov	r5,r19
    4578:	000c8540 	call	c854 <__subdf3>
    457c:	aa000c04 	addi	r8,r21,48
    4580:	a2000005 	stb	r8,0(r20)
    4584:	000d883a 	mov	r6,zero
    4588:	01d00934 	movhi	r7,16420
    458c:	1009883a 	mov	r4,r2
    4590:	180b883a 	mov	r5,r3
    4594:	a5c00044 	addi	r23,r20,1
    4598:	b53fd91e 	bne	r22,r20,4500 <_dtoa_r+0x858>
    459c:	100d883a 	mov	r6,r2
    45a0:	180f883a 	mov	r7,r3
    45a4:	1009883a 	mov	r4,r2
    45a8:	180b883a 	mov	r5,r3
    45ac:	000ad500 	call	ad50 <__adddf3>
    45b0:	100d883a 	mov	r6,r2
    45b4:	180f883a 	mov	r7,r3
    45b8:	8009883a 	mov	r4,r16
    45bc:	880b883a 	mov	r5,r17
    45c0:	1027883a 	mov	r19,r2
    45c4:	1825883a 	mov	r18,r3
    45c8:	000c0480 	call	c048 <__ledf2>
    45cc:	10000816 	blt	r2,zero,45f0 <_dtoa_r+0x948>
    45d0:	980d883a 	mov	r6,r19
    45d4:	900f883a 	mov	r7,r18
    45d8:	8009883a 	mov	r4,r16
    45dc:	880b883a 	mov	r5,r17
    45e0:	000bee40 	call	bee4 <__eqdf2>
    45e4:	103f5a1e 	bne	r2,zero,4350 <_dtoa_r+0x6a8>
    45e8:	ad40004c 	andi	r21,r21,1
    45ec:	a83f5826 	beq	r21,zero,4350 <_dtoa_r+0x6a8>
    45f0:	bd3fffc3 	ldbu	r20,-1(r23)
    45f4:	b8bfffc4 	addi	r2,r23,-1
    45f8:	1007883a 	mov	r3,r2
    45fc:	01400e44 	movi	r5,57
    4600:	d9800717 	ldw	r6,28(sp)
    4604:	00000506 	br	461c <_dtoa_r+0x974>
    4608:	18ffffc4 	addi	r3,r3,-1
    460c:	11824726 	beq	r2,r6,4f2c <_dtoa_r+0x1284>
    4610:	1d000003 	ldbu	r20,0(r3)
    4614:	102f883a 	mov	r23,r2
    4618:	10bfffc4 	addi	r2,r2,-1
    461c:	a1003fcc 	andi	r4,r20,255
    4620:	2100201c 	xori	r4,r4,128
    4624:	213fe004 	addi	r4,r4,-128
    4628:	217ff726 	beq	r4,r5,4608 <_dtoa_r+0x960>
    462c:	a2000044 	addi	r8,r20,1
    4630:	12000005 	stb	r8,0(r2)
    4634:	003f4606 	br	4350 <_dtoa_r+0x6a8>
    4638:	d9000b17 	ldw	r4,44(sp)
    463c:	2000c826 	beq	r4,zero,4960 <_dtoa_r+0xcb8>
    4640:	d9800317 	ldw	r6,12(sp)
    4644:	00c00044 	movi	r3,1
    4648:	1980f90e 	bge	r3,r6,4a30 <_dtoa_r+0xd88>
    464c:	d8800617 	ldw	r2,24(sp)
    4650:	d8c00a17 	ldw	r3,40(sp)
    4654:	157fffc4 	addi	r21,r2,-1
    4658:	1d41f316 	blt	r3,r21,4e28 <_dtoa_r+0x1180>
    465c:	1d6bc83a 	sub	r21,r3,r21
    4660:	d9c00617 	ldw	r7,24(sp)
    4664:	3802aa16 	blt	r7,zero,5110 <_dtoa_r+0x1468>
    4668:	dd000817 	ldw	r20,32(sp)
    466c:	d8800617 	ldw	r2,24(sp)
    4670:	d8c00817 	ldw	r3,32(sp)
    4674:	01400044 	movi	r5,1
    4678:	e009883a 	mov	r4,fp
    467c:	1887883a 	add	r3,r3,r2
    4680:	d8c00815 	stw	r3,32(sp)
    4684:	b0ad883a 	add	r22,r22,r2
    4688:	0006f440 	call	6f44 <__i2b>
    468c:	1023883a 	mov	r17,r2
    4690:	a0000826 	beq	r20,zero,46b4 <_dtoa_r+0xa0c>
    4694:	0580070e 	bge	zero,r22,46b4 <_dtoa_r+0xa0c>
    4698:	a005883a 	mov	r2,r20
    469c:	b500b916 	blt	r22,r20,4984 <_dtoa_r+0xcdc>
    46a0:	d9000817 	ldw	r4,32(sp)
    46a4:	a0a9c83a 	sub	r20,r20,r2
    46a8:	b0adc83a 	sub	r22,r22,r2
    46ac:	2089c83a 	sub	r4,r4,r2
    46b0:	d9000815 	stw	r4,32(sp)
    46b4:	d9800a17 	ldw	r6,40(sp)
    46b8:	0181810e 	bge	zero,r6,4cc0 <_dtoa_r+0x1018>
    46bc:	d9c00b17 	ldw	r7,44(sp)
    46c0:	3800b326 	beq	r7,zero,4990 <_dtoa_r+0xce8>
    46c4:	a800b226 	beq	r21,zero,4990 <_dtoa_r+0xce8>
    46c8:	880b883a 	mov	r5,r17
    46cc:	a80d883a 	mov	r6,r21
    46d0:	e009883a 	mov	r4,fp
    46d4:	00071780 	call	7178 <__pow5mult>
    46d8:	d9800917 	ldw	r6,36(sp)
    46dc:	100b883a 	mov	r5,r2
    46e0:	e009883a 	mov	r4,fp
    46e4:	1023883a 	mov	r17,r2
    46e8:	0006f800 	call	6f80 <__multiply>
    46ec:	1021883a 	mov	r16,r2
    46f0:	d8800a17 	ldw	r2,40(sp)
    46f4:	d9400917 	ldw	r5,36(sp)
    46f8:	e009883a 	mov	r4,fp
    46fc:	1545c83a 	sub	r2,r2,r21
    4700:	d8800a15 	stw	r2,40(sp)
    4704:	0006be00 	call	6be0 <_Bfree>
    4708:	d8c00a17 	ldw	r3,40(sp)
    470c:	18009f1e 	bne	r3,zero,498c <_dtoa_r+0xce4>
    4710:	05c00044 	movi	r23,1
    4714:	e009883a 	mov	r4,fp
    4718:	b80b883a 	mov	r5,r23
    471c:	0006f440 	call	6f44 <__i2b>
    4720:	d9000d17 	ldw	r4,52(sp)
    4724:	102b883a 	mov	r21,r2
    4728:	2000ce26 	beq	r4,zero,4a64 <_dtoa_r+0xdbc>
    472c:	200d883a 	mov	r6,r4
    4730:	100b883a 	mov	r5,r2
    4734:	e009883a 	mov	r4,fp
    4738:	00071780 	call	7178 <__pow5mult>
    473c:	d9800317 	ldw	r6,12(sp)
    4740:	102b883a 	mov	r21,r2
    4744:	b981810e 	bge	r23,r6,4d4c <_dtoa_r+0x10a4>
    4748:	0027883a 	mov	r19,zero
    474c:	a8800417 	ldw	r2,16(r21)
    4750:	05c00804 	movi	r23,32
    4754:	10800104 	addi	r2,r2,4
    4758:	1085883a 	add	r2,r2,r2
    475c:	1085883a 	add	r2,r2,r2
    4760:	a885883a 	add	r2,r21,r2
    4764:	11000017 	ldw	r4,0(r2)
    4768:	0006e2c0 	call	6e2c <__hi0bits>
    476c:	b885c83a 	sub	r2,r23,r2
    4770:	1585883a 	add	r2,r2,r22
    4774:	108007cc 	andi	r2,r2,31
    4778:	1000b326 	beq	r2,zero,4a48 <_dtoa_r+0xda0>
    477c:	00c00804 	movi	r3,32
    4780:	1887c83a 	sub	r3,r3,r2
    4784:	01000104 	movi	r4,4
    4788:	20c2cd0e 	bge	r4,r3,52c0 <_dtoa_r+0x1618>
    478c:	00c00704 	movi	r3,28
    4790:	1885c83a 	sub	r2,r3,r2
    4794:	d8c00817 	ldw	r3,32(sp)
    4798:	a0a9883a 	add	r20,r20,r2
    479c:	b0ad883a 	add	r22,r22,r2
    47a0:	1887883a 	add	r3,r3,r2
    47a4:	d8c00815 	stw	r3,32(sp)
    47a8:	d9800817 	ldw	r6,32(sp)
    47ac:	0180040e 	bge	zero,r6,47c0 <_dtoa_r+0xb18>
    47b0:	800b883a 	mov	r5,r16
    47b4:	e009883a 	mov	r4,fp
    47b8:	00072b80 	call	72b8 <__lshift>
    47bc:	1021883a 	mov	r16,r2
    47c0:	0580050e 	bge	zero,r22,47d8 <_dtoa_r+0xb30>
    47c4:	a80b883a 	mov	r5,r21
    47c8:	b00d883a 	mov	r6,r22
    47cc:	e009883a 	mov	r4,fp
    47d0:	00072b80 	call	72b8 <__lshift>
    47d4:	102b883a 	mov	r21,r2
    47d8:	d9c00e17 	ldw	r7,56(sp)
    47dc:	3801211e 	bne	r7,zero,4c64 <_dtoa_r+0xfbc>
    47e0:	d9800617 	ldw	r6,24(sp)
    47e4:	0181380e 	bge	zero,r6,4cc8 <_dtoa_r+0x1020>
    47e8:	d8c00b17 	ldw	r3,44(sp)
    47ec:	1800ab1e 	bne	r3,zero,4a9c <_dtoa_r+0xdf4>
    47f0:	dc800717 	ldw	r18,28(sp)
    47f4:	dcc00617 	ldw	r19,24(sp)
    47f8:	9029883a 	mov	r20,r18
    47fc:	00000206 	br	4808 <_dtoa_r+0xb60>
    4800:	0006c080 	call	6c08 <__multadd>
    4804:	1021883a 	mov	r16,r2
    4808:	a80b883a 	mov	r5,r21
    480c:	8009883a 	mov	r4,r16
    4810:	0003aa80 	call	3aa8 <quorem>
    4814:	10800c04 	addi	r2,r2,48
    4818:	90800005 	stb	r2,0(r18)
    481c:	94800044 	addi	r18,r18,1
    4820:	9507c83a 	sub	r3,r18,r20
    4824:	000f883a 	mov	r7,zero
    4828:	01800284 	movi	r6,10
    482c:	800b883a 	mov	r5,r16
    4830:	e009883a 	mov	r4,fp
    4834:	1cfff216 	blt	r3,r19,4800 <_dtoa_r+0xb58>
    4838:	1011883a 	mov	r8,r2
    483c:	d8800617 	ldw	r2,24(sp)
    4840:	0082370e 	bge	zero,r2,5120 <_dtoa_r+0x1478>
    4844:	d9000717 	ldw	r4,28(sp)
    4848:	0025883a 	mov	r18,zero
    484c:	20af883a 	add	r23,r4,r2
    4850:	01800044 	movi	r6,1
    4854:	800b883a 	mov	r5,r16
    4858:	e009883a 	mov	r4,fp
    485c:	da001715 	stw	r8,92(sp)
    4860:	00072b80 	call	72b8 <__lshift>
    4864:	a80b883a 	mov	r5,r21
    4868:	1009883a 	mov	r4,r2
    486c:	d8800915 	stw	r2,36(sp)
    4870:	00074000 	call	7400 <__mcmp>
    4874:	da001717 	ldw	r8,92(sp)
    4878:	0081800e 	bge	zero,r2,4e7c <_dtoa_r+0x11d4>
    487c:	b93fffc3 	ldbu	r4,-1(r23)
    4880:	b8bfffc4 	addi	r2,r23,-1
    4884:	1007883a 	mov	r3,r2
    4888:	01800e44 	movi	r6,57
    488c:	d9c00717 	ldw	r7,28(sp)
    4890:	00000506 	br	48a8 <_dtoa_r+0xc00>
    4894:	18ffffc4 	addi	r3,r3,-1
    4898:	11c12326 	beq	r2,r7,4d28 <_dtoa_r+0x1080>
    489c:	19000003 	ldbu	r4,0(r3)
    48a0:	102f883a 	mov	r23,r2
    48a4:	10bfffc4 	addi	r2,r2,-1
    48a8:	21403fcc 	andi	r5,r4,255
    48ac:	2940201c 	xori	r5,r5,128
    48b0:	297fe004 	addi	r5,r5,-128
    48b4:	29bff726 	beq	r5,r6,4894 <_dtoa_r+0xbec>
    48b8:	21000044 	addi	r4,r4,1
    48bc:	11000005 	stb	r4,0(r2)
    48c0:	a80b883a 	mov	r5,r21
    48c4:	e009883a 	mov	r4,fp
    48c8:	0006be00 	call	6be0 <_Bfree>
    48cc:	883ea026 	beq	r17,zero,4350 <_dtoa_r+0x6a8>
    48d0:	90000426 	beq	r18,zero,48e4 <_dtoa_r+0xc3c>
    48d4:	94400326 	beq	r18,r17,48e4 <_dtoa_r+0xc3c>
    48d8:	900b883a 	mov	r5,r18
    48dc:	e009883a 	mov	r4,fp
    48e0:	0006be00 	call	6be0 <_Bfree>
    48e4:	880b883a 	mov	r5,r17
    48e8:	e009883a 	mov	r4,fp
    48ec:	0006be00 	call	6be0 <_Bfree>
    48f0:	003e9706 	br	4350 <_dtoa_r+0x6a8>
    48f4:	01800044 	movi	r6,1
    48f8:	d9800e15 	stw	r6,56(sp)
    48fc:	003d9606 	br	3f58 <_dtoa_r+0x2b0>
    4900:	d8800817 	ldw	r2,32(sp)
    4904:	d8c00517 	ldw	r3,20(sp)
    4908:	d8000d15 	stw	zero,52(sp)
    490c:	10c5c83a 	sub	r2,r2,r3
    4910:	00c9c83a 	sub	r4,zero,r3
    4914:	d8800815 	stw	r2,32(sp)
    4918:	d9000a15 	stw	r4,40(sp)
    491c:	003d9706 	br	3f7c <_dtoa_r+0x2d4>
    4920:	05adc83a 	sub	r22,zero,r22
    4924:	dd800815 	stw	r22,32(sp)
    4928:	002d883a 	mov	r22,zero
    492c:	003d8e06 	br	3f68 <_dtoa_r+0x2c0>
    4930:	d9000517 	ldw	r4,20(sp)
    4934:	000d1d00 	call	d1d0 <__floatsidf>
    4938:	100d883a 	mov	r6,r2
    493c:	180f883a 	mov	r7,r3
    4940:	a009883a 	mov	r4,r20
    4944:	880b883a 	mov	r5,r17
    4948:	000bee40 	call	bee4 <__eqdf2>
    494c:	103d7126 	beq	r2,zero,3f14 <_dtoa_r+0x26c>
    4950:	d9c00517 	ldw	r7,20(sp)
    4954:	39ffffc4 	addi	r7,r7,-1
    4958:	d9c00515 	stw	r7,20(sp)
    495c:	003d6d06 	br	3f14 <_dtoa_r+0x26c>
    4960:	dd400a17 	ldw	r21,40(sp)
    4964:	dd000817 	ldw	r20,32(sp)
    4968:	0023883a 	mov	r17,zero
    496c:	003f4806 	br	4690 <_dtoa_r+0x9e8>
    4970:	10e3c83a 	sub	r17,r2,r3
    4974:	9448983a 	sll	r4,r18,r17
    4978:	003d3206 	br	3e44 <_dtoa_r+0x19c>
    497c:	d8000e15 	stw	zero,56(sp)
    4980:	003d7506 	br	3f58 <_dtoa_r+0x2b0>
    4984:	b005883a 	mov	r2,r22
    4988:	003f4506 	br	46a0 <_dtoa_r+0x9f8>
    498c:	dc000915 	stw	r16,36(sp)
    4990:	d9800a17 	ldw	r6,40(sp)
    4994:	d9400917 	ldw	r5,36(sp)
    4998:	e009883a 	mov	r4,fp
    499c:	00071780 	call	7178 <__pow5mult>
    49a0:	1021883a 	mov	r16,r2
    49a4:	003f5a06 	br	4710 <_dtoa_r+0xa68>
    49a8:	01c00044 	movi	r7,1
    49ac:	d9c00b15 	stw	r7,44(sp)
    49b0:	d8802217 	ldw	r2,136(sp)
    49b4:	0081280e 	bge	zero,r2,4e58 <_dtoa_r+0x11b0>
    49b8:	100d883a 	mov	r6,r2
    49bc:	1021883a 	mov	r16,r2
    49c0:	d8800c15 	stw	r2,48(sp)
    49c4:	d8800615 	stw	r2,24(sp)
    49c8:	003d8806 	br	3fec <_dtoa_r+0x344>
    49cc:	d8800617 	ldw	r2,24(sp)
    49d0:	00be9b16 	blt	zero,r2,4440 <_dtoa_r+0x798>
    49d4:	10010f1e 	bne	r2,zero,4e14 <_dtoa_r+0x116c>
    49d8:	880b883a 	mov	r5,r17
    49dc:	000d883a 	mov	r6,zero
    49e0:	01d00534 	movhi	r7,16404
    49e4:	8009883a 	mov	r4,r16
    49e8:	000c13c0 	call	c13c <__muldf3>
    49ec:	900d883a 	mov	r6,r18
    49f0:	980f883a 	mov	r7,r19
    49f4:	1009883a 	mov	r4,r2
    49f8:	180b883a 	mov	r5,r3
    49fc:	000bf6c0 	call	bf6c <__gedf2>
    4a00:	002b883a 	mov	r21,zero
    4a04:	0023883a 	mov	r17,zero
    4a08:	1000bf16 	blt	r2,zero,4d08 <_dtoa_r+0x1060>
    4a0c:	d9802217 	ldw	r6,136(sp)
    4a10:	ddc00717 	ldw	r23,28(sp)
    4a14:	018c303a 	nor	r6,zero,r6
    4a18:	d9800515 	stw	r6,20(sp)
    4a1c:	a80b883a 	mov	r5,r21
    4a20:	e009883a 	mov	r4,fp
    4a24:	0006be00 	call	6be0 <_Bfree>
    4a28:	883e4926 	beq	r17,zero,4350 <_dtoa_r+0x6a8>
    4a2c:	003fad06 	br	48e4 <_dtoa_r+0xc3c>
    4a30:	d9c01117 	ldw	r7,68(sp)
    4a34:	3801bc26 	beq	r7,zero,5128 <_dtoa_r+0x1480>
    4a38:	10810cc4 	addi	r2,r2,1075
    4a3c:	dd400a17 	ldw	r21,40(sp)
    4a40:	dd000817 	ldw	r20,32(sp)
    4a44:	003f0a06 	br	4670 <_dtoa_r+0x9c8>
    4a48:	00800704 	movi	r2,28
    4a4c:	d9000817 	ldw	r4,32(sp)
    4a50:	a0a9883a 	add	r20,r20,r2
    4a54:	b0ad883a 	add	r22,r22,r2
    4a58:	2089883a 	add	r4,r4,r2
    4a5c:	d9000815 	stw	r4,32(sp)
    4a60:	003f5106 	br	47a8 <_dtoa_r+0xb00>
    4a64:	d8c00317 	ldw	r3,12(sp)
    4a68:	b8c1fc0e 	bge	r23,r3,525c <_dtoa_r+0x15b4>
    4a6c:	0027883a 	mov	r19,zero
    4a70:	b805883a 	mov	r2,r23
    4a74:	003f3e06 	br	4770 <_dtoa_r+0xac8>
    4a78:	880b883a 	mov	r5,r17
    4a7c:	e009883a 	mov	r4,fp
    4a80:	000f883a 	mov	r7,zero
    4a84:	01800284 	movi	r6,10
    4a88:	0006c080 	call	6c08 <__multadd>
    4a8c:	d9000c17 	ldw	r4,48(sp)
    4a90:	1023883a 	mov	r17,r2
    4a94:	0102040e 	bge	zero,r4,52a8 <_dtoa_r+0x1600>
    4a98:	d9000615 	stw	r4,24(sp)
    4a9c:	0500050e 	bge	zero,r20,4ab4 <_dtoa_r+0xe0c>
    4aa0:	880b883a 	mov	r5,r17
    4aa4:	a00d883a 	mov	r6,r20
    4aa8:	e009883a 	mov	r4,fp
    4aac:	00072b80 	call	72b8 <__lshift>
    4ab0:	1023883a 	mov	r17,r2
    4ab4:	9801241e 	bne	r19,zero,4f48 <_dtoa_r+0x12a0>
    4ab8:	8829883a 	mov	r20,r17
    4abc:	d9000617 	ldw	r4,24(sp)
    4ac0:	dcc00717 	ldw	r19,28(sp)
    4ac4:	9480004c 	andi	r18,r18,1
    4ac8:	20bfffc4 	addi	r2,r4,-1
    4acc:	9885883a 	add	r2,r19,r2
    4ad0:	d8800415 	stw	r2,16(sp)
    4ad4:	dc800615 	stw	r18,24(sp)
    4ad8:	a80b883a 	mov	r5,r21
    4adc:	8009883a 	mov	r4,r16
    4ae0:	0003aa80 	call	3aa8 <quorem>
    4ae4:	880b883a 	mov	r5,r17
    4ae8:	8009883a 	mov	r4,r16
    4aec:	102f883a 	mov	r23,r2
    4af0:	00074000 	call	7400 <__mcmp>
    4af4:	a80b883a 	mov	r5,r21
    4af8:	a00d883a 	mov	r6,r20
    4afc:	e009883a 	mov	r4,fp
    4b00:	102d883a 	mov	r22,r2
    4b04:	00074600 	call	7460 <__mdiff>
    4b08:	1007883a 	mov	r3,r2
    4b0c:	10800317 	ldw	r2,12(r2)
    4b10:	bc800c04 	addi	r18,r23,48
    4b14:	180b883a 	mov	r5,r3
    4b18:	10004e1e 	bne	r2,zero,4c54 <_dtoa_r+0xfac>
    4b1c:	8009883a 	mov	r4,r16
    4b20:	d8c01615 	stw	r3,88(sp)
    4b24:	00074000 	call	7400 <__mcmp>
    4b28:	d8c01617 	ldw	r3,88(sp)
    4b2c:	e009883a 	mov	r4,fp
    4b30:	d8801615 	stw	r2,88(sp)
    4b34:	180b883a 	mov	r5,r3
    4b38:	0006be00 	call	6be0 <_Bfree>
    4b3c:	d8801617 	ldw	r2,88(sp)
    4b40:	1000041e 	bne	r2,zero,4b54 <_dtoa_r+0xeac>
    4b44:	d9800317 	ldw	r6,12(sp)
    4b48:	3000021e 	bne	r6,zero,4b54 <_dtoa_r+0xeac>
    4b4c:	d8c00617 	ldw	r3,24(sp)
    4b50:	18003726 	beq	r3,zero,4c30 <_dtoa_r+0xf88>
    4b54:	b0002016 	blt	r22,zero,4bd8 <_dtoa_r+0xf30>
    4b58:	b000041e 	bne	r22,zero,4b6c <_dtoa_r+0xec4>
    4b5c:	d9000317 	ldw	r4,12(sp)
    4b60:	2000021e 	bne	r4,zero,4b6c <_dtoa_r+0xec4>
    4b64:	d8c00617 	ldw	r3,24(sp)
    4b68:	18001b26 	beq	r3,zero,4bd8 <_dtoa_r+0xf30>
    4b6c:	00810716 	blt	zero,r2,4f8c <_dtoa_r+0x12e4>
    4b70:	d8c00417 	ldw	r3,16(sp)
    4b74:	9d800044 	addi	r22,r19,1
    4b78:	9c800005 	stb	r18,0(r19)
    4b7c:	b02f883a 	mov	r23,r22
    4b80:	98c10626 	beq	r19,r3,4f9c <_dtoa_r+0x12f4>
    4b84:	800b883a 	mov	r5,r16
    4b88:	000f883a 	mov	r7,zero
    4b8c:	01800284 	movi	r6,10
    4b90:	e009883a 	mov	r4,fp
    4b94:	0006c080 	call	6c08 <__multadd>
    4b98:	1021883a 	mov	r16,r2
    4b9c:	000f883a 	mov	r7,zero
    4ba0:	01800284 	movi	r6,10
    4ba4:	880b883a 	mov	r5,r17
    4ba8:	e009883a 	mov	r4,fp
    4bac:	8d002526 	beq	r17,r20,4c44 <_dtoa_r+0xf9c>
    4bb0:	0006c080 	call	6c08 <__multadd>
    4bb4:	a00b883a 	mov	r5,r20
    4bb8:	000f883a 	mov	r7,zero
    4bbc:	01800284 	movi	r6,10
    4bc0:	e009883a 	mov	r4,fp
    4bc4:	1023883a 	mov	r17,r2
    4bc8:	0006c080 	call	6c08 <__multadd>
    4bcc:	1029883a 	mov	r20,r2
    4bd0:	b027883a 	mov	r19,r22
    4bd4:	003fc006 	br	4ad8 <_dtoa_r+0xe30>
    4bd8:	9011883a 	mov	r8,r18
    4bdc:	00800e0e 	bge	zero,r2,4c18 <_dtoa_r+0xf70>
    4be0:	800b883a 	mov	r5,r16
    4be4:	01800044 	movi	r6,1
    4be8:	e009883a 	mov	r4,fp
    4bec:	da001715 	stw	r8,92(sp)
    4bf0:	00072b80 	call	72b8 <__lshift>
    4bf4:	a80b883a 	mov	r5,r21
    4bf8:	1009883a 	mov	r4,r2
    4bfc:	1021883a 	mov	r16,r2
    4c00:	00074000 	call	7400 <__mcmp>
    4c04:	da001717 	ldw	r8,92(sp)
    4c08:	0081960e 	bge	zero,r2,5264 <_dtoa_r+0x15bc>
    4c0c:	00800e44 	movi	r2,57
    4c10:	40817026 	beq	r8,r2,51d4 <_dtoa_r+0x152c>
    4c14:	ba000c44 	addi	r8,r23,49
    4c18:	8825883a 	mov	r18,r17
    4c1c:	9dc00044 	addi	r23,r19,1
    4c20:	9a000005 	stb	r8,0(r19)
    4c24:	a023883a 	mov	r17,r20
    4c28:	dc000915 	stw	r16,36(sp)
    4c2c:	003f2406 	br	48c0 <_dtoa_r+0xc18>
    4c30:	00800e44 	movi	r2,57
    4c34:	9011883a 	mov	r8,r18
    4c38:	90816626 	beq	r18,r2,51d4 <_dtoa_r+0x152c>
    4c3c:	05bff516 	blt	zero,r22,4c14 <_dtoa_r+0xf6c>
    4c40:	003ff506 	br	4c18 <_dtoa_r+0xf70>
    4c44:	0006c080 	call	6c08 <__multadd>
    4c48:	1023883a 	mov	r17,r2
    4c4c:	1029883a 	mov	r20,r2
    4c50:	003fdf06 	br	4bd0 <_dtoa_r+0xf28>
    4c54:	e009883a 	mov	r4,fp
    4c58:	0006be00 	call	6be0 <_Bfree>
    4c5c:	00800044 	movi	r2,1
    4c60:	003fbc06 	br	4b54 <_dtoa_r+0xeac>
    4c64:	a80b883a 	mov	r5,r21
    4c68:	8009883a 	mov	r4,r16
    4c6c:	00074000 	call	7400 <__mcmp>
    4c70:	103edb0e 	bge	r2,zero,47e0 <_dtoa_r+0xb38>
    4c74:	800b883a 	mov	r5,r16
    4c78:	000f883a 	mov	r7,zero
    4c7c:	01800284 	movi	r6,10
    4c80:	e009883a 	mov	r4,fp
    4c84:	0006c080 	call	6c08 <__multadd>
    4c88:	1021883a 	mov	r16,r2
    4c8c:	d8800517 	ldw	r2,20(sp)
    4c90:	d8c00b17 	ldw	r3,44(sp)
    4c94:	10bfffc4 	addi	r2,r2,-1
    4c98:	d8800515 	stw	r2,20(sp)
    4c9c:	183f761e 	bne	r3,zero,4a78 <_dtoa_r+0xdd0>
    4ca0:	d9000c17 	ldw	r4,48(sp)
    4ca4:	0101730e 	bge	zero,r4,5274 <_dtoa_r+0x15cc>
    4ca8:	d9000615 	stw	r4,24(sp)
    4cac:	003ed006 	br	47f0 <_dtoa_r+0xb48>
    4cb0:	00800084 	movi	r2,2
    4cb4:	3081861e 	bne	r6,r2,52d0 <_dtoa_r+0x1628>
    4cb8:	d8000b15 	stw	zero,44(sp)
    4cbc:	003f3c06 	br	49b0 <_dtoa_r+0xd08>
    4cc0:	dc000917 	ldw	r16,36(sp)
    4cc4:	003e9206 	br	4710 <_dtoa_r+0xa68>
    4cc8:	d9c00317 	ldw	r7,12(sp)
    4ccc:	00800084 	movi	r2,2
    4cd0:	11fec50e 	bge	r2,r7,47e8 <_dtoa_r+0xb40>
    4cd4:	d9000617 	ldw	r4,24(sp)
    4cd8:	20013c1e 	bne	r4,zero,51cc <_dtoa_r+0x1524>
    4cdc:	a80b883a 	mov	r5,r21
    4ce0:	000f883a 	mov	r7,zero
    4ce4:	01800144 	movi	r6,5
    4ce8:	e009883a 	mov	r4,fp
    4cec:	0006c080 	call	6c08 <__multadd>
    4cf0:	100b883a 	mov	r5,r2
    4cf4:	8009883a 	mov	r4,r16
    4cf8:	102b883a 	mov	r21,r2
    4cfc:	00074000 	call	7400 <__mcmp>
    4d00:	dc000915 	stw	r16,36(sp)
    4d04:	00bf410e 	bge	zero,r2,4a0c <_dtoa_r+0xd64>
    4d08:	d9c00717 	ldw	r7,28(sp)
    4d0c:	00800c44 	movi	r2,49
    4d10:	38800005 	stb	r2,0(r7)
    4d14:	d8800517 	ldw	r2,20(sp)
    4d18:	3dc00044 	addi	r23,r7,1
    4d1c:	10800044 	addi	r2,r2,1
    4d20:	d8800515 	stw	r2,20(sp)
    4d24:	003f3d06 	br	4a1c <_dtoa_r+0xd74>
    4d28:	d9800517 	ldw	r6,20(sp)
    4d2c:	d9c00717 	ldw	r7,28(sp)
    4d30:	00800c44 	movi	r2,49
    4d34:	31800044 	addi	r6,r6,1
    4d38:	d9800515 	stw	r6,20(sp)
    4d3c:	38800005 	stb	r2,0(r7)
    4d40:	003edf06 	br	48c0 <_dtoa_r+0xc18>
    4d44:	d8000b15 	stw	zero,44(sp)
    4d48:	003c9f06 	br	3fc8 <_dtoa_r+0x320>
    4d4c:	903e7e1e 	bne	r18,zero,4748 <_dtoa_r+0xaa0>
    4d50:	00800434 	movhi	r2,16
    4d54:	10bfffc4 	addi	r2,r2,-1
    4d58:	9884703a 	and	r2,r19,r2
    4d5c:	1000ea1e 	bne	r2,zero,5108 <_dtoa_r+0x1460>
    4d60:	9cdffc2c 	andhi	r19,r19,32752
    4d64:	9800e826 	beq	r19,zero,5108 <_dtoa_r+0x1460>
    4d68:	d9c00817 	ldw	r7,32(sp)
    4d6c:	b5800044 	addi	r22,r22,1
    4d70:	04c00044 	movi	r19,1
    4d74:	39c00044 	addi	r7,r7,1
    4d78:	d9c00815 	stw	r7,32(sp)
    4d7c:	d8800d17 	ldw	r2,52(sp)
    4d80:	103e721e 	bne	r2,zero,474c <_dtoa_r+0xaa4>
    4d84:	00800044 	movi	r2,1
    4d88:	003e7906 	br	4770 <_dtoa_r+0xac8>
    4d8c:	8009883a 	mov	r4,r16
    4d90:	000d1d00 	call	d1d0 <__floatsidf>
    4d94:	d9800f17 	ldw	r6,60(sp)
    4d98:	d9c01017 	ldw	r7,64(sp)
    4d9c:	1009883a 	mov	r4,r2
    4da0:	180b883a 	mov	r5,r3
    4da4:	000c13c0 	call	c13c <__muldf3>
    4da8:	000d883a 	mov	r6,zero
    4dac:	01d00734 	movhi	r7,16412
    4db0:	1009883a 	mov	r4,r2
    4db4:	180b883a 	mov	r5,r3
    4db8:	000ad500 	call	ad50 <__adddf3>
    4dbc:	047f3034 	movhi	r17,64704
    4dc0:	1021883a 	mov	r16,r2
    4dc4:	1c63883a 	add	r17,r3,r17
    4dc8:	d9000f17 	ldw	r4,60(sp)
    4dcc:	d9401017 	ldw	r5,64(sp)
    4dd0:	000d883a 	mov	r6,zero
    4dd4:	01d00534 	movhi	r7,16404
    4dd8:	000c8540 	call	c854 <__subdf3>
    4ddc:	800d883a 	mov	r6,r16
    4de0:	880f883a 	mov	r7,r17
    4de4:	1009883a 	mov	r4,r2
    4de8:	180b883a 	mov	r5,r3
    4dec:	102b883a 	mov	r21,r2
    4df0:	1829883a 	mov	r20,r3
    4df4:	000bf6c0 	call	bf6c <__gedf2>
    4df8:	00806c16 	blt	zero,r2,4fac <_dtoa_r+0x1304>
    4dfc:	89e0003c 	xorhi	r7,r17,32768
    4e00:	800d883a 	mov	r6,r16
    4e04:	a809883a 	mov	r4,r21
    4e08:	a00b883a 	mov	r5,r20
    4e0c:	000c0480 	call	c048 <__ledf2>
    4e10:	103d7e0e 	bge	r2,zero,440c <_dtoa_r+0x764>
    4e14:	002b883a 	mov	r21,zero
    4e18:	0023883a 	mov	r17,zero
    4e1c:	003efb06 	br	4a0c <_dtoa_r+0xd64>
    4e20:	d8800717 	ldw	r2,28(sp)
    4e24:	003bd006 	br	3d68 <_dtoa_r+0xc0>
    4e28:	d9000a17 	ldw	r4,40(sp)
    4e2c:	d9800d17 	ldw	r6,52(sp)
    4e30:	dd400a15 	stw	r21,40(sp)
    4e34:	a905c83a 	sub	r2,r21,r4
    4e38:	308d883a 	add	r6,r6,r2
    4e3c:	d9800d15 	stw	r6,52(sp)
    4e40:	002b883a 	mov	r21,zero
    4e44:	003e0606 	br	4660 <_dtoa_r+0x9b8>
    4e48:	9023883a 	mov	r17,r18
    4e4c:	9829883a 	mov	r20,r19
    4e50:	04000084 	movi	r16,2
    4e54:	003c9206 	br	40a0 <_dtoa_r+0x3f8>
    4e58:	04000044 	movi	r16,1
    4e5c:	dc000c15 	stw	r16,48(sp)
    4e60:	dc000615 	stw	r16,24(sp)
    4e64:	dc002215 	stw	r16,136(sp)
    4e68:	e0001115 	stw	zero,68(fp)
    4e6c:	000b883a 	mov	r5,zero
    4e70:	003c6906 	br	4018 <_dtoa_r+0x370>
    4e74:	3021883a 	mov	r16,r6
    4e78:	003ffb06 	br	4e68 <_dtoa_r+0x11c0>
    4e7c:	1000021e 	bne	r2,zero,4e88 <_dtoa_r+0x11e0>
    4e80:	4200004c 	andi	r8,r8,1
    4e84:	403e7d1e 	bne	r8,zero,487c <_dtoa_r+0xbd4>
    4e88:	01000c04 	movi	r4,48
    4e8c:	00000106 	br	4e94 <_dtoa_r+0x11ec>
    4e90:	102f883a 	mov	r23,r2
    4e94:	b8bfffc4 	addi	r2,r23,-1
    4e98:	10c00007 	ldb	r3,0(r2)
    4e9c:	193ffc26 	beq	r3,r4,4e90 <_dtoa_r+0x11e8>
    4ea0:	003e8706 	br	48c0 <_dtoa_r+0xc18>
    4ea4:	d8800517 	ldw	r2,20(sp)
    4ea8:	00a3c83a 	sub	r17,zero,r2
    4eac:	8800a426 	beq	r17,zero,5140 <_dtoa_r+0x1498>
    4eb0:	888003cc 	andi	r2,r17,15
    4eb4:	100490fa 	slli	r2,r2,3
    4eb8:	00c00074 	movhi	r3,1
    4ebc:	18df7404 	addi	r3,r3,32208
    4ec0:	1885883a 	add	r2,r3,r2
    4ec4:	11800017 	ldw	r6,0(r2)
    4ec8:	11c00117 	ldw	r7,4(r2)
    4ecc:	9009883a 	mov	r4,r18
    4ed0:	980b883a 	mov	r5,r19
    4ed4:	8823d13a 	srai	r17,r17,4
    4ed8:	000c13c0 	call	c13c <__muldf3>
    4edc:	d8800f15 	stw	r2,60(sp)
    4ee0:	d8c01015 	stw	r3,64(sp)
    4ee4:	8800e826 	beq	r17,zero,5288 <_dtoa_r+0x15e0>
    4ee8:	05000074 	movhi	r20,1
    4eec:	a51f6a04 	addi	r20,r20,32168
    4ef0:	04000084 	movi	r16,2
    4ef4:	8980004c 	andi	r6,r17,1
    4ef8:	1009883a 	mov	r4,r2
    4efc:	8823d07a 	srai	r17,r17,1
    4f00:	180b883a 	mov	r5,r3
    4f04:	30000426 	beq	r6,zero,4f18 <_dtoa_r+0x1270>
    4f08:	a1800017 	ldw	r6,0(r20)
    4f0c:	a1c00117 	ldw	r7,4(r20)
    4f10:	84000044 	addi	r16,r16,1
    4f14:	000c13c0 	call	c13c <__muldf3>
    4f18:	a5000204 	addi	r20,r20,8
    4f1c:	883ff51e 	bne	r17,zero,4ef4 <_dtoa_r+0x124c>
    4f20:	d8800f15 	stw	r2,60(sp)
    4f24:	d8c01015 	stw	r3,64(sp)
    4f28:	003c7606 	br	4104 <_dtoa_r+0x45c>
    4f2c:	00c00c04 	movi	r3,48
    4f30:	10c00005 	stb	r3,0(r2)
    4f34:	d8c00517 	ldw	r3,20(sp)
    4f38:	bd3fffc3 	ldbu	r20,-1(r23)
    4f3c:	18c00044 	addi	r3,r3,1
    4f40:	d8c00515 	stw	r3,20(sp)
    4f44:	003db906 	br	462c <_dtoa_r+0x984>
    4f48:	89400117 	ldw	r5,4(r17)
    4f4c:	e009883a 	mov	r4,fp
    4f50:	0006b380 	call	6b38 <_Balloc>
    4f54:	89800417 	ldw	r6,16(r17)
    4f58:	89400304 	addi	r5,r17,12
    4f5c:	11000304 	addi	r4,r2,12
    4f60:	31800084 	addi	r6,r6,2
    4f64:	318d883a 	add	r6,r6,r6
    4f68:	318d883a 	add	r6,r6,r6
    4f6c:	1027883a 	mov	r19,r2
    4f70:	000676c0 	call	676c <memcpy>
    4f74:	01800044 	movi	r6,1
    4f78:	980b883a 	mov	r5,r19
    4f7c:	e009883a 	mov	r4,fp
    4f80:	00072b80 	call	72b8 <__lshift>
    4f84:	1029883a 	mov	r20,r2
    4f88:	003ecc06 	br	4abc <_dtoa_r+0xe14>
    4f8c:	00800e44 	movi	r2,57
    4f90:	90809026 	beq	r18,r2,51d4 <_dtoa_r+0x152c>
    4f94:	92000044 	addi	r8,r18,1
    4f98:	003f1f06 	br	4c18 <_dtoa_r+0xf70>
    4f9c:	9011883a 	mov	r8,r18
    4fa0:	8825883a 	mov	r18,r17
    4fa4:	a023883a 	mov	r17,r20
    4fa8:	003e2906 	br	4850 <_dtoa_r+0xba8>
    4fac:	002b883a 	mov	r21,zero
    4fb0:	0023883a 	mov	r17,zero
    4fb4:	003f5406 	br	4d08 <_dtoa_r+0x1060>
    4fb8:	61bfffc4 	addi	r6,r12,-1
    4fbc:	300490fa 	slli	r2,r6,3
    4fc0:	00c00074 	movhi	r3,1
    4fc4:	18df7404 	addi	r3,r3,32208
    4fc8:	1885883a 	add	r2,r3,r2
    4fcc:	11000017 	ldw	r4,0(r2)
    4fd0:	11400117 	ldw	r5,4(r2)
    4fd4:	d8800717 	ldw	r2,28(sp)
    4fd8:	880f883a 	mov	r7,r17
    4fdc:	d9801215 	stw	r6,72(sp)
    4fe0:	800d883a 	mov	r6,r16
    4fe4:	db001615 	stw	r12,88(sp)
    4fe8:	15c00044 	addi	r23,r2,1
    4fec:	000c13c0 	call	c13c <__muldf3>
    4ff0:	d9401017 	ldw	r5,64(sp)
    4ff4:	d9000f17 	ldw	r4,60(sp)
    4ff8:	d8c01515 	stw	r3,84(sp)
    4ffc:	d8801415 	stw	r2,80(sp)
    5000:	000d1500 	call	d150 <__fixdfsi>
    5004:	1009883a 	mov	r4,r2
    5008:	1021883a 	mov	r16,r2
    500c:	000d1d00 	call	d1d0 <__floatsidf>
    5010:	d9000f17 	ldw	r4,60(sp)
    5014:	d9401017 	ldw	r5,64(sp)
    5018:	100d883a 	mov	r6,r2
    501c:	180f883a 	mov	r7,r3
    5020:	000c8540 	call	c854 <__subdf3>
    5024:	1829883a 	mov	r20,r3
    5028:	d8c00717 	ldw	r3,28(sp)
    502c:	84000c04 	addi	r16,r16,48
    5030:	1023883a 	mov	r17,r2
    5034:	1c000005 	stb	r16,0(r3)
    5038:	db001617 	ldw	r12,88(sp)
    503c:	00800044 	movi	r2,1
    5040:	60802226 	beq	r12,r2,50cc <_dtoa_r+0x1424>
    5044:	d9c00717 	ldw	r7,28(sp)
    5048:	8805883a 	mov	r2,r17
    504c:	b82b883a 	mov	r21,r23
    5050:	3b19883a 	add	r12,r7,r12
    5054:	6023883a 	mov	r17,r12
    5058:	a007883a 	mov	r3,r20
    505c:	dc800f15 	stw	r18,60(sp)
    5060:	000d883a 	mov	r6,zero
    5064:	01d00934 	movhi	r7,16420
    5068:	1009883a 	mov	r4,r2
    506c:	180b883a 	mov	r5,r3
    5070:	000c13c0 	call	c13c <__muldf3>
    5074:	180b883a 	mov	r5,r3
    5078:	1009883a 	mov	r4,r2
    507c:	1829883a 	mov	r20,r3
    5080:	1025883a 	mov	r18,r2
    5084:	000d1500 	call	d150 <__fixdfsi>
    5088:	1009883a 	mov	r4,r2
    508c:	1021883a 	mov	r16,r2
    5090:	000d1d00 	call	d1d0 <__floatsidf>
    5094:	100d883a 	mov	r6,r2
    5098:	180f883a 	mov	r7,r3
    509c:	9009883a 	mov	r4,r18
    50a0:	a00b883a 	mov	r5,r20
    50a4:	84000c04 	addi	r16,r16,48
    50a8:	000c8540 	call	c854 <__subdf3>
    50ac:	ad400044 	addi	r21,r21,1
    50b0:	ac3fffc5 	stb	r16,-1(r21)
    50b4:	ac7fea1e 	bne	r21,r17,5060 <_dtoa_r+0x13b8>
    50b8:	1023883a 	mov	r17,r2
    50bc:	d8801217 	ldw	r2,72(sp)
    50c0:	dc800f17 	ldw	r18,60(sp)
    50c4:	1829883a 	mov	r20,r3
    50c8:	b8af883a 	add	r23,r23,r2
    50cc:	d9001417 	ldw	r4,80(sp)
    50d0:	d9401517 	ldw	r5,84(sp)
    50d4:	000d883a 	mov	r6,zero
    50d8:	01cff834 	movhi	r7,16352
    50dc:	000ad500 	call	ad50 <__adddf3>
    50e0:	880d883a 	mov	r6,r17
    50e4:	a00f883a 	mov	r7,r20
    50e8:	1009883a 	mov	r4,r2
    50ec:	180b883a 	mov	r5,r3
    50f0:	000c0480 	call	c048 <__ledf2>
    50f4:	10003e0e 	bge	r2,zero,51f0 <_dtoa_r+0x1548>
    50f8:	d9001317 	ldw	r4,76(sp)
    50fc:	bd3fffc3 	ldbu	r20,-1(r23)
    5100:	d9000515 	stw	r4,20(sp)
    5104:	003d3b06 	br	45f4 <_dtoa_r+0x94c>
    5108:	0027883a 	mov	r19,zero
    510c:	003f1b06 	br	4d7c <_dtoa_r+0x10d4>
    5110:	d8800817 	ldw	r2,32(sp)
    5114:	11e9c83a 	sub	r20,r2,r7
    5118:	0005883a 	mov	r2,zero
    511c:	003d5406 	br	4670 <_dtoa_r+0x9c8>
    5120:	00800044 	movi	r2,1
    5124:	003dc706 	br	4844 <_dtoa_r+0xb9c>
    5128:	d8c00217 	ldw	r3,8(sp)
    512c:	00800d84 	movi	r2,54
    5130:	dd400a17 	ldw	r21,40(sp)
    5134:	10c5c83a 	sub	r2,r2,r3
    5138:	dd000817 	ldw	r20,32(sp)
    513c:	003d4c06 	br	4670 <_dtoa_r+0x9c8>
    5140:	dc800f15 	stw	r18,60(sp)
    5144:	dcc01015 	stw	r19,64(sp)
    5148:	04000084 	movi	r16,2
    514c:	003bed06 	br	4104 <_dtoa_r+0x45c>
    5150:	d9000617 	ldw	r4,24(sp)
    5154:	203f0d26 	beq	r4,zero,4d8c <_dtoa_r+0x10e4>
    5158:	d9800c17 	ldw	r6,48(sp)
    515c:	01bcab0e 	bge	zero,r6,440c <_dtoa_r+0x764>
    5160:	d9401017 	ldw	r5,64(sp)
    5164:	d9000f17 	ldw	r4,60(sp)
    5168:	000d883a 	mov	r6,zero
    516c:	01d00934 	movhi	r7,16420
    5170:	000c13c0 	call	c13c <__muldf3>
    5174:	81000044 	addi	r4,r16,1
    5178:	d8800f15 	stw	r2,60(sp)
    517c:	d8c01015 	stw	r3,64(sp)
    5180:	000d1d00 	call	d1d0 <__floatsidf>
    5184:	d9800f17 	ldw	r6,60(sp)
    5188:	d9c01017 	ldw	r7,64(sp)
    518c:	1009883a 	mov	r4,r2
    5190:	180b883a 	mov	r5,r3
    5194:	000c13c0 	call	c13c <__muldf3>
    5198:	01d00734 	movhi	r7,16412
    519c:	000d883a 	mov	r6,zero
    51a0:	1009883a 	mov	r4,r2
    51a4:	180b883a 	mov	r5,r3
    51a8:	000ad500 	call	ad50 <__adddf3>
    51ac:	d9c00517 	ldw	r7,20(sp)
    51b0:	047f3034 	movhi	r17,64704
    51b4:	1021883a 	mov	r16,r2
    51b8:	39ffffc4 	addi	r7,r7,-1
    51bc:	d9c01315 	stw	r7,76(sp)
    51c0:	1c63883a 	add	r17,r3,r17
    51c4:	db000c17 	ldw	r12,48(sp)
    51c8:	003bea06 	br	4174 <_dtoa_r+0x4cc>
    51cc:	dc000915 	stw	r16,36(sp)
    51d0:	003e0e06 	br	4a0c <_dtoa_r+0xd64>
    51d4:	01000e44 	movi	r4,57
    51d8:	8825883a 	mov	r18,r17
    51dc:	9dc00044 	addi	r23,r19,1
    51e0:	99000005 	stb	r4,0(r19)
    51e4:	a023883a 	mov	r17,r20
    51e8:	dc000915 	stw	r16,36(sp)
    51ec:	003da406 	br	4880 <_dtoa_r+0xbd8>
    51f0:	d9801417 	ldw	r6,80(sp)
    51f4:	d9c01517 	ldw	r7,84(sp)
    51f8:	0009883a 	mov	r4,zero
    51fc:	014ff834 	movhi	r5,16352
    5200:	000c8540 	call	c854 <__subdf3>
    5204:	880d883a 	mov	r6,r17
    5208:	a00f883a 	mov	r7,r20
    520c:	1009883a 	mov	r4,r2
    5210:	180b883a 	mov	r5,r3
    5214:	000bf6c0 	call	bf6c <__gedf2>
    5218:	00bc7c0e 	bge	zero,r2,440c <_dtoa_r+0x764>
    521c:	01000c04 	movi	r4,48
    5220:	00000106 	br	5228 <_dtoa_r+0x1580>
    5224:	102f883a 	mov	r23,r2
    5228:	b8bfffc4 	addi	r2,r23,-1
    522c:	10c00007 	ldb	r3,0(r2)
    5230:	193ffc26 	beq	r3,r4,5224 <_dtoa_r+0x157c>
    5234:	d9801317 	ldw	r6,76(sp)
    5238:	d9800515 	stw	r6,20(sp)
    523c:	003c4406 	br	4350 <_dtoa_r+0x6a8>
    5240:	d9801317 	ldw	r6,76(sp)
    5244:	d9800515 	stw	r6,20(sp)
    5248:	003cea06 	br	45f4 <_dtoa_r+0x94c>
    524c:	dd800f17 	ldw	r22,60(sp)
    5250:	dcc01017 	ldw	r19,64(sp)
    5254:	dc801217 	ldw	r18,72(sp)
    5258:	003c6c06 	br	440c <_dtoa_r+0x764>
    525c:	903e031e 	bne	r18,zero,4a6c <_dtoa_r+0xdc4>
    5260:	003ebb06 	br	4d50 <_dtoa_r+0x10a8>
    5264:	103e6c1e 	bne	r2,zero,4c18 <_dtoa_r+0xf70>
    5268:	4080004c 	andi	r2,r8,1
    526c:	103e6a26 	beq	r2,zero,4c18 <_dtoa_r+0xf70>
    5270:	003e6606 	br	4c0c <_dtoa_r+0xf64>
    5274:	d8c00317 	ldw	r3,12(sp)
    5278:	00800084 	movi	r2,2
    527c:	10c02916 	blt	r2,r3,5324 <_dtoa_r+0x167c>
    5280:	d9000c17 	ldw	r4,48(sp)
    5284:	003e8806 	br	4ca8 <_dtoa_r+0x1000>
    5288:	04000084 	movi	r16,2
    528c:	003b9d06 	br	4104 <_dtoa_r+0x45c>
    5290:	d9001317 	ldw	r4,76(sp)
    5294:	d9000515 	stw	r4,20(sp)
    5298:	003cd606 	br	45f4 <_dtoa_r+0x94c>
    529c:	d8801317 	ldw	r2,76(sp)
    52a0:	d8800515 	stw	r2,20(sp)
    52a4:	003c2a06 	br	4350 <_dtoa_r+0x6a8>
    52a8:	d9800317 	ldw	r6,12(sp)
    52ac:	00800084 	movi	r2,2
    52b0:	11801516 	blt	r2,r6,5308 <_dtoa_r+0x1660>
    52b4:	d9c00c17 	ldw	r7,48(sp)
    52b8:	d9c00615 	stw	r7,24(sp)
    52bc:	003df706 	br	4a9c <_dtoa_r+0xdf4>
    52c0:	193d3926 	beq	r3,r4,47a8 <_dtoa_r+0xb00>
    52c4:	00c00f04 	movi	r3,60
    52c8:	1885c83a 	sub	r2,r3,r2
    52cc:	003ddf06 	br	4a4c <_dtoa_r+0xda4>
    52d0:	e009883a 	mov	r4,fp
    52d4:	e0001115 	stw	zero,68(fp)
    52d8:	000b883a 	mov	r5,zero
    52dc:	0006b380 	call	6b38 <_Balloc>
    52e0:	d8800715 	stw	r2,28(sp)
    52e4:	d8c00717 	ldw	r3,28(sp)
    52e8:	00bfffc4 	movi	r2,-1
    52ec:	01000044 	movi	r4,1
    52f0:	d8800c15 	stw	r2,48(sp)
    52f4:	e0c01015 	stw	r3,64(fp)
    52f8:	d9000b15 	stw	r4,44(sp)
    52fc:	d8800615 	stw	r2,24(sp)
    5300:	d8002215 	stw	zero,136(sp)
    5304:	003c4106 	br	440c <_dtoa_r+0x764>
    5308:	d8c00c17 	ldw	r3,48(sp)
    530c:	d8c00615 	stw	r3,24(sp)
    5310:	003e7006 	br	4cd4 <_dtoa_r+0x102c>
    5314:	04400044 	movi	r17,1
    5318:	003b2006 	br	3f9c <_dtoa_r+0x2f4>
    531c:	000b883a 	mov	r5,zero
    5320:	003b3d06 	br	4018 <_dtoa_r+0x370>
    5324:	d8800c17 	ldw	r2,48(sp)
    5328:	d8800615 	stw	r2,24(sp)
    532c:	003e6906 	br	4cd4 <_dtoa_r+0x102c>

00005330 <__sflush_r>:
    5330:	2880030b 	ldhu	r2,12(r5)
    5334:	defffb04 	addi	sp,sp,-20
    5338:	dcc00315 	stw	r19,12(sp)
    533c:	dc400115 	stw	r17,4(sp)
    5340:	dfc00415 	stw	ra,16(sp)
    5344:	dc800215 	stw	r18,8(sp)
    5348:	dc000015 	stw	r16,0(sp)
    534c:	10c0020c 	andi	r3,r2,8
    5350:	2823883a 	mov	r17,r5
    5354:	2027883a 	mov	r19,r4
    5358:	1800311e 	bne	r3,zero,5420 <__sflush_r+0xf0>
    535c:	28c00117 	ldw	r3,4(r5)
    5360:	10820014 	ori	r2,r2,2048
    5364:	2880030d 	sth	r2,12(r5)
    5368:	00c04b0e 	bge	zero,r3,5498 <__sflush_r+0x168>
    536c:	8a000a17 	ldw	r8,40(r17)
    5370:	40002326 	beq	r8,zero,5400 <__sflush_r+0xd0>
    5374:	9c000017 	ldw	r16,0(r19)
    5378:	10c4000c 	andi	r3,r2,4096
    537c:	98000015 	stw	zero,0(r19)
    5380:	18004826 	beq	r3,zero,54a4 <__sflush_r+0x174>
    5384:	89801417 	ldw	r6,80(r17)
    5388:	10c0010c 	andi	r3,r2,4
    538c:	18000626 	beq	r3,zero,53a8 <__sflush_r+0x78>
    5390:	88c00117 	ldw	r3,4(r17)
    5394:	88800c17 	ldw	r2,48(r17)
    5398:	30cdc83a 	sub	r6,r6,r3
    539c:	10000226 	beq	r2,zero,53a8 <__sflush_r+0x78>
    53a0:	88800f17 	ldw	r2,60(r17)
    53a4:	308dc83a 	sub	r6,r6,r2
    53a8:	89400717 	ldw	r5,28(r17)
    53ac:	000f883a 	mov	r7,zero
    53b0:	9809883a 	mov	r4,r19
    53b4:	403ee83a 	callr	r8
    53b8:	00ffffc4 	movi	r3,-1
    53bc:	10c04426 	beq	r2,r3,54d0 <__sflush_r+0x1a0>
    53c0:	88c0030b 	ldhu	r3,12(r17)
    53c4:	89000417 	ldw	r4,16(r17)
    53c8:	88000115 	stw	zero,4(r17)
    53cc:	197dffcc 	andi	r5,r3,63487
    53d0:	8940030d 	sth	r5,12(r17)
    53d4:	89000015 	stw	r4,0(r17)
    53d8:	18c4000c 	andi	r3,r3,4096
    53dc:	18002c1e 	bne	r3,zero,5490 <__sflush_r+0x160>
    53e0:	89400c17 	ldw	r5,48(r17)
    53e4:	9c000015 	stw	r16,0(r19)
    53e8:	28000526 	beq	r5,zero,5400 <__sflush_r+0xd0>
    53ec:	88801004 	addi	r2,r17,64
    53f0:	28800226 	beq	r5,r2,53fc <__sflush_r+0xcc>
    53f4:	9809883a 	mov	r4,r19
    53f8:	0005a9c0 	call	5a9c <_free_r>
    53fc:	88000c15 	stw	zero,48(r17)
    5400:	0005883a 	mov	r2,zero
    5404:	dfc00417 	ldw	ra,16(sp)
    5408:	dcc00317 	ldw	r19,12(sp)
    540c:	dc800217 	ldw	r18,8(sp)
    5410:	dc400117 	ldw	r17,4(sp)
    5414:	dc000017 	ldw	r16,0(sp)
    5418:	dec00504 	addi	sp,sp,20
    541c:	f800283a 	ret
    5420:	2c800417 	ldw	r18,16(r5)
    5424:	903ff626 	beq	r18,zero,5400 <__sflush_r+0xd0>
    5428:	2c000017 	ldw	r16,0(r5)
    542c:	108000cc 	andi	r2,r2,3
    5430:	2c800015 	stw	r18,0(r5)
    5434:	84a1c83a 	sub	r16,r16,r18
    5438:	1000131e 	bne	r2,zero,5488 <__sflush_r+0x158>
    543c:	28800517 	ldw	r2,20(r5)
    5440:	88800215 	stw	r2,8(r17)
    5444:	04000316 	blt	zero,r16,5454 <__sflush_r+0x124>
    5448:	003fed06 	br	5400 <__sflush_r+0xd0>
    544c:	90a5883a 	add	r18,r18,r2
    5450:	043feb0e 	bge	zero,r16,5400 <__sflush_r+0xd0>
    5454:	88800917 	ldw	r2,36(r17)
    5458:	89400717 	ldw	r5,28(r17)
    545c:	800f883a 	mov	r7,r16
    5460:	900d883a 	mov	r6,r18
    5464:	9809883a 	mov	r4,r19
    5468:	103ee83a 	callr	r2
    546c:	80a1c83a 	sub	r16,r16,r2
    5470:	00bff616 	blt	zero,r2,544c <__sflush_r+0x11c>
    5474:	88c0030b 	ldhu	r3,12(r17)
    5478:	00bfffc4 	movi	r2,-1
    547c:	18c01014 	ori	r3,r3,64
    5480:	88c0030d 	sth	r3,12(r17)
    5484:	003fdf06 	br	5404 <__sflush_r+0xd4>
    5488:	0005883a 	mov	r2,zero
    548c:	003fec06 	br	5440 <__sflush_r+0x110>
    5490:	88801415 	stw	r2,80(r17)
    5494:	003fd206 	br	53e0 <__sflush_r+0xb0>
    5498:	28c00f17 	ldw	r3,60(r5)
    549c:	00ffb316 	blt	zero,r3,536c <__sflush_r+0x3c>
    54a0:	003fd706 	br	5400 <__sflush_r+0xd0>
    54a4:	89400717 	ldw	r5,28(r17)
    54a8:	000d883a 	mov	r6,zero
    54ac:	01c00044 	movi	r7,1
    54b0:	9809883a 	mov	r4,r19
    54b4:	403ee83a 	callr	r8
    54b8:	100d883a 	mov	r6,r2
    54bc:	00bfffc4 	movi	r2,-1
    54c0:	30801426 	beq	r6,r2,5514 <__sflush_r+0x1e4>
    54c4:	8880030b 	ldhu	r2,12(r17)
    54c8:	8a000a17 	ldw	r8,40(r17)
    54cc:	003fae06 	br	5388 <__sflush_r+0x58>
    54d0:	98c00017 	ldw	r3,0(r19)
    54d4:	183fba26 	beq	r3,zero,53c0 <__sflush_r+0x90>
    54d8:	01000744 	movi	r4,29
    54dc:	19000626 	beq	r3,r4,54f8 <__sflush_r+0x1c8>
    54e0:	01000584 	movi	r4,22
    54e4:	19000426 	beq	r3,r4,54f8 <__sflush_r+0x1c8>
    54e8:	88c0030b 	ldhu	r3,12(r17)
    54ec:	18c01014 	ori	r3,r3,64
    54f0:	88c0030d 	sth	r3,12(r17)
    54f4:	003fc306 	br	5404 <__sflush_r+0xd4>
    54f8:	8880030b 	ldhu	r2,12(r17)
    54fc:	88c00417 	ldw	r3,16(r17)
    5500:	88000115 	stw	zero,4(r17)
    5504:	10bdffcc 	andi	r2,r2,63487
    5508:	8880030d 	sth	r2,12(r17)
    550c:	88c00015 	stw	r3,0(r17)
    5510:	003fb306 	br	53e0 <__sflush_r+0xb0>
    5514:	98800017 	ldw	r2,0(r19)
    5518:	103fea26 	beq	r2,zero,54c4 <__sflush_r+0x194>
    551c:	00c00744 	movi	r3,29
    5520:	10c00226 	beq	r2,r3,552c <__sflush_r+0x1fc>
    5524:	00c00584 	movi	r3,22
    5528:	10c0031e 	bne	r2,r3,5538 <__sflush_r+0x208>
    552c:	9c000015 	stw	r16,0(r19)
    5530:	0005883a 	mov	r2,zero
    5534:	003fb306 	br	5404 <__sflush_r+0xd4>
    5538:	88c0030b 	ldhu	r3,12(r17)
    553c:	3005883a 	mov	r2,r6
    5540:	18c01014 	ori	r3,r3,64
    5544:	88c0030d 	sth	r3,12(r17)
    5548:	003fae06 	br	5404 <__sflush_r+0xd4>

0000554c <_fflush_r>:
    554c:	defffd04 	addi	sp,sp,-12
    5550:	dc000115 	stw	r16,4(sp)
    5554:	dfc00215 	stw	ra,8(sp)
    5558:	2021883a 	mov	r16,r4
    555c:	20000226 	beq	r4,zero,5568 <_fflush_r+0x1c>
    5560:	20800e17 	ldw	r2,56(r4)
    5564:	10000c26 	beq	r2,zero,5598 <_fflush_r+0x4c>
    5568:	2880030f 	ldh	r2,12(r5)
    556c:	1000051e 	bne	r2,zero,5584 <_fflush_r+0x38>
    5570:	0005883a 	mov	r2,zero
    5574:	dfc00217 	ldw	ra,8(sp)
    5578:	dc000117 	ldw	r16,4(sp)
    557c:	dec00304 	addi	sp,sp,12
    5580:	f800283a 	ret
    5584:	8009883a 	mov	r4,r16
    5588:	dfc00217 	ldw	ra,8(sp)
    558c:	dc000117 	ldw	r16,4(sp)
    5590:	dec00304 	addi	sp,sp,12
    5594:	00053301 	jmpi	5330 <__sflush_r>
    5598:	d9400015 	stw	r5,0(sp)
    559c:	00059280 	call	5928 <__sinit>
    55a0:	d9400017 	ldw	r5,0(sp)
    55a4:	003ff006 	br	5568 <_fflush_r+0x1c>

000055a8 <fflush>:
    55a8:	20000526 	beq	r4,zero,55c0 <fflush+0x18>
    55ac:	008000b4 	movhi	r2,2
    55b0:	10a6f504 	addi	r2,r2,-25644
    55b4:	200b883a 	mov	r5,r4
    55b8:	11000017 	ldw	r4,0(r2)
    55bc:	000554c1 	jmpi	554c <_fflush_r>
    55c0:	008000b4 	movhi	r2,2
    55c4:	10a6f404 	addi	r2,r2,-25648
    55c8:	11000017 	ldw	r4,0(r2)
    55cc:	01400034 	movhi	r5,0
    55d0:	29555304 	addi	r5,r5,21836
    55d4:	000632c1 	jmpi	632c <_fwalk_reent>

000055d8 <__fp_unlock>:
    55d8:	0005883a 	mov	r2,zero
    55dc:	f800283a 	ret

000055e0 <_cleanup_r>:
    55e0:	01400074 	movhi	r5,1
    55e4:	2966b904 	addi	r5,r5,-25884
    55e8:	000632c1 	jmpi	632c <_fwalk_reent>

000055ec <__sinit.part.1>:
    55ec:	defff704 	addi	sp,sp,-36
    55f0:	00c00034 	movhi	r3,0
    55f4:	dfc00815 	stw	ra,32(sp)
    55f8:	ddc00715 	stw	r23,28(sp)
    55fc:	dd800615 	stw	r22,24(sp)
    5600:	dd400515 	stw	r21,20(sp)
    5604:	dd000415 	stw	r20,16(sp)
    5608:	dcc00315 	stw	r19,12(sp)
    560c:	dc800215 	stw	r18,8(sp)
    5610:	dc400115 	stw	r17,4(sp)
    5614:	dc000015 	stw	r16,0(sp)
    5618:	18d57804 	addi	r3,r3,21984
    561c:	24000117 	ldw	r16,4(r4)
    5620:	20c00f15 	stw	r3,60(r4)
    5624:	2080bb04 	addi	r2,r4,748
    5628:	00c000c4 	movi	r3,3
    562c:	20c0b915 	stw	r3,740(r4)
    5630:	2080ba15 	stw	r2,744(r4)
    5634:	2000b815 	stw	zero,736(r4)
    5638:	05c00204 	movi	r23,8
    563c:	00800104 	movi	r2,4
    5640:	2025883a 	mov	r18,r4
    5644:	b80d883a 	mov	r6,r23
    5648:	81001704 	addi	r4,r16,92
    564c:	000b883a 	mov	r5,zero
    5650:	80000015 	stw	zero,0(r16)
    5654:	80000115 	stw	zero,4(r16)
    5658:	80000215 	stw	zero,8(r16)
    565c:	8080030d 	sth	r2,12(r16)
    5660:	80001915 	stw	zero,100(r16)
    5664:	8000038d 	sth	zero,14(r16)
    5668:	80000415 	stw	zero,16(r16)
    566c:	80000515 	stw	zero,20(r16)
    5670:	80000615 	stw	zero,24(r16)
    5674:	0006a100 	call	6a10 <memset>
    5678:	05800074 	movhi	r22,1
    567c:	94400217 	ldw	r17,8(r18)
    5680:	05400074 	movhi	r21,1
    5684:	05000074 	movhi	r20,1
    5688:	04c00074 	movhi	r19,1
    568c:	b5a04304 	addi	r22,r22,-32500
    5690:	ad605a04 	addi	r21,r21,-32408
    5694:	a5207904 	addi	r20,r20,-32284
    5698:	9ce09004 	addi	r19,r19,-32192
    569c:	85800815 	stw	r22,32(r16)
    56a0:	85400915 	stw	r21,36(r16)
    56a4:	85000a15 	stw	r20,40(r16)
    56a8:	84c00b15 	stw	r19,44(r16)
    56ac:	84000715 	stw	r16,28(r16)
    56b0:	00800284 	movi	r2,10
    56b4:	8880030d 	sth	r2,12(r17)
    56b8:	00800044 	movi	r2,1
    56bc:	b80d883a 	mov	r6,r23
    56c0:	89001704 	addi	r4,r17,92
    56c4:	000b883a 	mov	r5,zero
    56c8:	88000015 	stw	zero,0(r17)
    56cc:	88000115 	stw	zero,4(r17)
    56d0:	88000215 	stw	zero,8(r17)
    56d4:	88001915 	stw	zero,100(r17)
    56d8:	8880038d 	sth	r2,14(r17)
    56dc:	88000415 	stw	zero,16(r17)
    56e0:	88000515 	stw	zero,20(r17)
    56e4:	88000615 	stw	zero,24(r17)
    56e8:	0006a100 	call	6a10 <memset>
    56ec:	94000317 	ldw	r16,12(r18)
    56f0:	00800484 	movi	r2,18
    56f4:	8c400715 	stw	r17,28(r17)
    56f8:	8d800815 	stw	r22,32(r17)
    56fc:	8d400915 	stw	r21,36(r17)
    5700:	8d000a15 	stw	r20,40(r17)
    5704:	8cc00b15 	stw	r19,44(r17)
    5708:	8080030d 	sth	r2,12(r16)
    570c:	00800084 	movi	r2,2
    5710:	80000015 	stw	zero,0(r16)
    5714:	80000115 	stw	zero,4(r16)
    5718:	80000215 	stw	zero,8(r16)
    571c:	80001915 	stw	zero,100(r16)
    5720:	8080038d 	sth	r2,14(r16)
    5724:	80000415 	stw	zero,16(r16)
    5728:	80000515 	stw	zero,20(r16)
    572c:	80000615 	stw	zero,24(r16)
    5730:	b80d883a 	mov	r6,r23
    5734:	000b883a 	mov	r5,zero
    5738:	81001704 	addi	r4,r16,92
    573c:	0006a100 	call	6a10 <memset>
    5740:	00800044 	movi	r2,1
    5744:	84000715 	stw	r16,28(r16)
    5748:	85800815 	stw	r22,32(r16)
    574c:	85400915 	stw	r21,36(r16)
    5750:	85000a15 	stw	r20,40(r16)
    5754:	84c00b15 	stw	r19,44(r16)
    5758:	90800e15 	stw	r2,56(r18)
    575c:	dfc00817 	ldw	ra,32(sp)
    5760:	ddc00717 	ldw	r23,28(sp)
    5764:	dd800617 	ldw	r22,24(sp)
    5768:	dd400517 	ldw	r21,20(sp)
    576c:	dd000417 	ldw	r20,16(sp)
    5770:	dcc00317 	ldw	r19,12(sp)
    5774:	dc800217 	ldw	r18,8(sp)
    5778:	dc400117 	ldw	r17,4(sp)
    577c:	dc000017 	ldw	r16,0(sp)
    5780:	dec00904 	addi	sp,sp,36
    5784:	f800283a 	ret

00005788 <__fp_lock>:
    5788:	0005883a 	mov	r2,zero
    578c:	f800283a 	ret

00005790 <__sfmoreglue>:
    5790:	defffc04 	addi	sp,sp,-16
    5794:	dc400115 	stw	r17,4(sp)
    5798:	2c7fffc4 	addi	r17,r5,-1
    579c:	8c401a24 	muli	r17,r17,104
    57a0:	dc800215 	stw	r18,8(sp)
    57a4:	2825883a 	mov	r18,r5
    57a8:	89401d04 	addi	r5,r17,116
    57ac:	dc000015 	stw	r16,0(sp)
    57b0:	dfc00315 	stw	ra,12(sp)
    57b4:	0000c4c0 	call	c4c <_malloc_r>
    57b8:	1021883a 	mov	r16,r2
    57bc:	10000726 	beq	r2,zero,57dc <__sfmoreglue+0x4c>
    57c0:	11000304 	addi	r4,r2,12
    57c4:	10000015 	stw	zero,0(r2)
    57c8:	14800115 	stw	r18,4(r2)
    57cc:	11000215 	stw	r4,8(r2)
    57d0:	89801a04 	addi	r6,r17,104
    57d4:	000b883a 	mov	r5,zero
    57d8:	0006a100 	call	6a10 <memset>
    57dc:	8005883a 	mov	r2,r16
    57e0:	dfc00317 	ldw	ra,12(sp)
    57e4:	dc800217 	ldw	r18,8(sp)
    57e8:	dc400117 	ldw	r17,4(sp)
    57ec:	dc000017 	ldw	r16,0(sp)
    57f0:	dec00404 	addi	sp,sp,16
    57f4:	f800283a 	ret

000057f8 <__sfp>:
    57f8:	defffb04 	addi	sp,sp,-20
    57fc:	dc000015 	stw	r16,0(sp)
    5800:	040000b4 	movhi	r16,2
    5804:	8426f404 	addi	r16,r16,-25648
    5808:	dcc00315 	stw	r19,12(sp)
    580c:	2027883a 	mov	r19,r4
    5810:	81000017 	ldw	r4,0(r16)
    5814:	dfc00415 	stw	ra,16(sp)
    5818:	dc800215 	stw	r18,8(sp)
    581c:	20800e17 	ldw	r2,56(r4)
    5820:	dc400115 	stw	r17,4(sp)
    5824:	1000021e 	bne	r2,zero,5830 <__sfp+0x38>
    5828:	00055ec0 	call	55ec <__sinit.part.1>
    582c:	81000017 	ldw	r4,0(r16)
    5830:	2480b804 	addi	r18,r4,736
    5834:	047fffc4 	movi	r17,-1
    5838:	91000117 	ldw	r4,4(r18)
    583c:	94000217 	ldw	r16,8(r18)
    5840:	213fffc4 	addi	r4,r4,-1
    5844:	20000a16 	blt	r4,zero,5870 <__sfp+0x78>
    5848:	8080030f 	ldh	r2,12(r16)
    584c:	10000c26 	beq	r2,zero,5880 <__sfp+0x88>
    5850:	80c01d04 	addi	r3,r16,116
    5854:	00000206 	br	5860 <__sfp+0x68>
    5858:	18bfe60f 	ldh	r2,-104(r3)
    585c:	10000826 	beq	r2,zero,5880 <__sfp+0x88>
    5860:	213fffc4 	addi	r4,r4,-1
    5864:	1c3ffd04 	addi	r16,r3,-12
    5868:	18c01a04 	addi	r3,r3,104
    586c:	247ffa1e 	bne	r4,r17,5858 <__sfp+0x60>
    5870:	90800017 	ldw	r2,0(r18)
    5874:	10001d26 	beq	r2,zero,58ec <__sfp+0xf4>
    5878:	1025883a 	mov	r18,r2
    587c:	003fee06 	br	5838 <__sfp+0x40>
    5880:	00bfffc4 	movi	r2,-1
    5884:	8080038d 	sth	r2,14(r16)
    5888:	00800044 	movi	r2,1
    588c:	8080030d 	sth	r2,12(r16)
    5890:	80001915 	stw	zero,100(r16)
    5894:	80000015 	stw	zero,0(r16)
    5898:	80000215 	stw	zero,8(r16)
    589c:	80000115 	stw	zero,4(r16)
    58a0:	80000415 	stw	zero,16(r16)
    58a4:	80000515 	stw	zero,20(r16)
    58a8:	80000615 	stw	zero,24(r16)
    58ac:	01800204 	movi	r6,8
    58b0:	000b883a 	mov	r5,zero
    58b4:	81001704 	addi	r4,r16,92
    58b8:	0006a100 	call	6a10 <memset>
    58bc:	8005883a 	mov	r2,r16
    58c0:	80000c15 	stw	zero,48(r16)
    58c4:	80000d15 	stw	zero,52(r16)
    58c8:	80001115 	stw	zero,68(r16)
    58cc:	80001215 	stw	zero,72(r16)
    58d0:	dfc00417 	ldw	ra,16(sp)
    58d4:	dcc00317 	ldw	r19,12(sp)
    58d8:	dc800217 	ldw	r18,8(sp)
    58dc:	dc400117 	ldw	r17,4(sp)
    58e0:	dc000017 	ldw	r16,0(sp)
    58e4:	dec00504 	addi	sp,sp,20
    58e8:	f800283a 	ret
    58ec:	01400104 	movi	r5,4
    58f0:	9809883a 	mov	r4,r19
    58f4:	00057900 	call	5790 <__sfmoreglue>
    58f8:	90800015 	stw	r2,0(r18)
    58fc:	103fde1e 	bne	r2,zero,5878 <__sfp+0x80>
    5900:	00800304 	movi	r2,12
    5904:	98800015 	stw	r2,0(r19)
    5908:	0005883a 	mov	r2,zero
    590c:	003ff006 	br	58d0 <__sfp+0xd8>

00005910 <_cleanup>:
    5910:	008000b4 	movhi	r2,2
    5914:	10a6f404 	addi	r2,r2,-25648
    5918:	11000017 	ldw	r4,0(r2)
    591c:	01400074 	movhi	r5,1
    5920:	2966b904 	addi	r5,r5,-25884
    5924:	000632c1 	jmpi	632c <_fwalk_reent>

00005928 <__sinit>:
    5928:	20800e17 	ldw	r2,56(r4)
    592c:	10000126 	beq	r2,zero,5934 <__sinit+0xc>
    5930:	f800283a 	ret
    5934:	00055ec1 	jmpi	55ec <__sinit.part.1>

00005938 <__sfp_lock_acquire>:
    5938:	f800283a 	ret

0000593c <__sfp_lock_release>:
    593c:	f800283a 	ret

00005940 <__sinit_lock_acquire>:
    5940:	f800283a 	ret

00005944 <__sinit_lock_release>:
    5944:	f800283a 	ret

00005948 <__fp_lock_all>:
    5948:	008000b4 	movhi	r2,2
    594c:	10a6f504 	addi	r2,r2,-25644
    5950:	11000017 	ldw	r4,0(r2)
    5954:	01400034 	movhi	r5,0
    5958:	2955e204 	addi	r5,r5,22408
    595c:	00062681 	jmpi	6268 <_fwalk>

00005960 <__fp_unlock_all>:
    5960:	008000b4 	movhi	r2,2
    5964:	10a6f504 	addi	r2,r2,-25644
    5968:	11000017 	ldw	r4,0(r2)
    596c:	01400034 	movhi	r5,0
    5970:	29557604 	addi	r5,r5,21976
    5974:	00062681 	jmpi	6268 <_fwalk>

00005978 <_malloc_trim_r>:
    5978:	defffb04 	addi	sp,sp,-20
    597c:	dcc00315 	stw	r19,12(sp)
    5980:	04c000b4 	movhi	r19,2
    5984:	dc800215 	stw	r18,8(sp)
    5988:	dc400115 	stw	r17,4(sp)
    598c:	dc000015 	stw	r16,0(sp)
    5990:	dfc00415 	stw	ra,16(sp)
    5994:	2821883a 	mov	r16,r5
    5998:	9ce04404 	addi	r19,r19,-32496
    599c:	2025883a 	mov	r18,r4
    59a0:	000de180 	call	de18 <__malloc_lock>
    59a4:	98800217 	ldw	r2,8(r19)
    59a8:	14400117 	ldw	r17,4(r2)
    59ac:	00bfff04 	movi	r2,-4
    59b0:	88a2703a 	and	r17,r17,r2
    59b4:	8c21c83a 	sub	r16,r17,r16
    59b8:	8403fbc4 	addi	r16,r16,4079
    59bc:	8020d33a 	srli	r16,r16,12
    59c0:	0083ffc4 	movi	r2,4095
    59c4:	843fffc4 	addi	r16,r16,-1
    59c8:	8020933a 	slli	r16,r16,12
    59cc:	1400060e 	bge	r2,r16,59e8 <_malloc_trim_r+0x70>
    59d0:	000b883a 	mov	r5,zero
    59d4:	9009883a 	mov	r4,r18
    59d8:	00015980 	call	1598 <_sbrk_r>
    59dc:	98c00217 	ldw	r3,8(r19)
    59e0:	1c47883a 	add	r3,r3,r17
    59e4:	10c00a26 	beq	r2,r3,5a10 <_malloc_trim_r+0x98>
    59e8:	9009883a 	mov	r4,r18
    59ec:	000df380 	call	df38 <__malloc_unlock>
    59f0:	0005883a 	mov	r2,zero
    59f4:	dfc00417 	ldw	ra,16(sp)
    59f8:	dcc00317 	ldw	r19,12(sp)
    59fc:	dc800217 	ldw	r18,8(sp)
    5a00:	dc400117 	ldw	r17,4(sp)
    5a04:	dc000017 	ldw	r16,0(sp)
    5a08:	dec00504 	addi	sp,sp,20
    5a0c:	f800283a 	ret
    5a10:	040bc83a 	sub	r5,zero,r16
    5a14:	9009883a 	mov	r4,r18
    5a18:	00015980 	call	1598 <_sbrk_r>
    5a1c:	00ffffc4 	movi	r3,-1
    5a20:	10c00d26 	beq	r2,r3,5a58 <_malloc_trim_r+0xe0>
    5a24:	00c000b4 	movhi	r3,2
    5a28:	18ee2604 	addi	r3,r3,-18280
    5a2c:	18800017 	ldw	r2,0(r3)
    5a30:	99000217 	ldw	r4,8(r19)
    5a34:	8c23c83a 	sub	r17,r17,r16
    5a38:	8c400054 	ori	r17,r17,1
    5a3c:	1421c83a 	sub	r16,r2,r16
    5a40:	24400115 	stw	r17,4(r4)
    5a44:	9009883a 	mov	r4,r18
    5a48:	1c000015 	stw	r16,0(r3)
    5a4c:	000df380 	call	df38 <__malloc_unlock>
    5a50:	00800044 	movi	r2,1
    5a54:	003fe706 	br	59f4 <_malloc_trim_r+0x7c>
    5a58:	000b883a 	mov	r5,zero
    5a5c:	9009883a 	mov	r4,r18
    5a60:	00015980 	call	1598 <_sbrk_r>
    5a64:	99000217 	ldw	r4,8(r19)
    5a68:	014003c4 	movi	r5,15
    5a6c:	1107c83a 	sub	r3,r2,r4
    5a70:	28ffdd0e 	bge	r5,r3,59e8 <_malloc_trim_r+0x70>
    5a74:	014000b4 	movhi	r5,2
    5a78:	2966f204 	addi	r5,r5,-25656
    5a7c:	29400017 	ldw	r5,0(r5)
    5a80:	18c00054 	ori	r3,r3,1
    5a84:	20c00115 	stw	r3,4(r4)
    5a88:	00c000b4 	movhi	r3,2
    5a8c:	1145c83a 	sub	r2,r2,r5
    5a90:	18ee2604 	addi	r3,r3,-18280
    5a94:	18800015 	stw	r2,0(r3)
    5a98:	003fd306 	br	59e8 <_malloc_trim_r+0x70>

00005a9c <_free_r>:
    5a9c:	28004126 	beq	r5,zero,5ba4 <_free_r+0x108>
    5aa0:	defffd04 	addi	sp,sp,-12
    5aa4:	dc400115 	stw	r17,4(sp)
    5aa8:	dc000015 	stw	r16,0(sp)
    5aac:	2023883a 	mov	r17,r4
    5ab0:	2821883a 	mov	r16,r5
    5ab4:	dfc00215 	stw	ra,8(sp)
    5ab8:	000de180 	call	de18 <__malloc_lock>
    5abc:	81ffff17 	ldw	r7,-4(r16)
    5ac0:	00bfff84 	movi	r2,-2
    5ac4:	010000b4 	movhi	r4,2
    5ac8:	81bffe04 	addi	r6,r16,-8
    5acc:	3884703a 	and	r2,r7,r2
    5ad0:	21204404 	addi	r4,r4,-32496
    5ad4:	308b883a 	add	r5,r6,r2
    5ad8:	2a400117 	ldw	r9,4(r5)
    5adc:	22000217 	ldw	r8,8(r4)
    5ae0:	00ffff04 	movi	r3,-4
    5ae4:	48c6703a 	and	r3,r9,r3
    5ae8:	2a005726 	beq	r5,r8,5c48 <_free_r+0x1ac>
    5aec:	28c00115 	stw	r3,4(r5)
    5af0:	39c0004c 	andi	r7,r7,1
    5af4:	3800091e 	bne	r7,zero,5b1c <_free_r+0x80>
    5af8:	823ffe17 	ldw	r8,-8(r16)
    5afc:	22400204 	addi	r9,r4,8
    5b00:	320dc83a 	sub	r6,r6,r8
    5b04:	31c00217 	ldw	r7,8(r6)
    5b08:	1205883a 	add	r2,r2,r8
    5b0c:	3a406526 	beq	r7,r9,5ca4 <_free_r+0x208>
    5b10:	32000317 	ldw	r8,12(r6)
    5b14:	3a000315 	stw	r8,12(r7)
    5b18:	41c00215 	stw	r7,8(r8)
    5b1c:	28cf883a 	add	r7,r5,r3
    5b20:	39c00117 	ldw	r7,4(r7)
    5b24:	39c0004c 	andi	r7,r7,1
    5b28:	38003a26 	beq	r7,zero,5c14 <_free_r+0x178>
    5b2c:	10c00054 	ori	r3,r2,1
    5b30:	30c00115 	stw	r3,4(r6)
    5b34:	3087883a 	add	r3,r6,r2
    5b38:	18800015 	stw	r2,0(r3)
    5b3c:	00c07fc4 	movi	r3,511
    5b40:	18801936 	bltu	r3,r2,5ba8 <_free_r+0x10c>
    5b44:	1004d0fa 	srli	r2,r2,3
    5b48:	01c00044 	movi	r7,1
    5b4c:	21400117 	ldw	r5,4(r4)
    5b50:	10c00044 	addi	r3,r2,1
    5b54:	18c7883a 	add	r3,r3,r3
    5b58:	1005d0ba 	srai	r2,r2,2
    5b5c:	18c7883a 	add	r3,r3,r3
    5b60:	18c7883a 	add	r3,r3,r3
    5b64:	1907883a 	add	r3,r3,r4
    5b68:	3884983a 	sll	r2,r7,r2
    5b6c:	19c00017 	ldw	r7,0(r3)
    5b70:	1a3ffe04 	addi	r8,r3,-8
    5b74:	1144b03a 	or	r2,r2,r5
    5b78:	32000315 	stw	r8,12(r6)
    5b7c:	31c00215 	stw	r7,8(r6)
    5b80:	20800115 	stw	r2,4(r4)
    5b84:	19800015 	stw	r6,0(r3)
    5b88:	39800315 	stw	r6,12(r7)
    5b8c:	8809883a 	mov	r4,r17
    5b90:	dfc00217 	ldw	ra,8(sp)
    5b94:	dc400117 	ldw	r17,4(sp)
    5b98:	dc000017 	ldw	r16,0(sp)
    5b9c:	dec00304 	addi	sp,sp,12
    5ba0:	000df381 	jmpi	df38 <__malloc_unlock>
    5ba4:	f800283a 	ret
    5ba8:	100ad27a 	srli	r5,r2,9
    5bac:	00c00104 	movi	r3,4
    5bb0:	19404a36 	bltu	r3,r5,5cdc <_free_r+0x240>
    5bb4:	100ad1ba 	srli	r5,r2,6
    5bb8:	28c00e44 	addi	r3,r5,57
    5bbc:	18c7883a 	add	r3,r3,r3
    5bc0:	29400e04 	addi	r5,r5,56
    5bc4:	18c7883a 	add	r3,r3,r3
    5bc8:	18c7883a 	add	r3,r3,r3
    5bcc:	1909883a 	add	r4,r3,r4
    5bd0:	20c00017 	ldw	r3,0(r4)
    5bd4:	01c000b4 	movhi	r7,2
    5bd8:	213ffe04 	addi	r4,r4,-8
    5bdc:	39e04404 	addi	r7,r7,-32496
    5be0:	20c04426 	beq	r4,r3,5cf4 <_free_r+0x258>
    5be4:	01ffff04 	movi	r7,-4
    5be8:	19400117 	ldw	r5,4(r3)
    5bec:	29ca703a 	and	r5,r5,r7
    5bf0:	1140022e 	bgeu	r2,r5,5bfc <_free_r+0x160>
    5bf4:	18c00217 	ldw	r3,8(r3)
    5bf8:	20fffb1e 	bne	r4,r3,5be8 <_free_r+0x14c>
    5bfc:	19000317 	ldw	r4,12(r3)
    5c00:	31000315 	stw	r4,12(r6)
    5c04:	30c00215 	stw	r3,8(r6)
    5c08:	21800215 	stw	r6,8(r4)
    5c0c:	19800315 	stw	r6,12(r3)
    5c10:	003fde06 	br	5b8c <_free_r+0xf0>
    5c14:	29c00217 	ldw	r7,8(r5)
    5c18:	10c5883a 	add	r2,r2,r3
    5c1c:	00c000b4 	movhi	r3,2
    5c20:	18e04604 	addi	r3,r3,-32488
    5c24:	38c03b26 	beq	r7,r3,5d14 <_free_r+0x278>
    5c28:	2a000317 	ldw	r8,12(r5)
    5c2c:	11400054 	ori	r5,r2,1
    5c30:	3087883a 	add	r3,r6,r2
    5c34:	3a000315 	stw	r8,12(r7)
    5c38:	41c00215 	stw	r7,8(r8)
    5c3c:	31400115 	stw	r5,4(r6)
    5c40:	18800015 	stw	r2,0(r3)
    5c44:	003fbd06 	br	5b3c <_free_r+0xa0>
    5c48:	39c0004c 	andi	r7,r7,1
    5c4c:	10c5883a 	add	r2,r2,r3
    5c50:	3800071e 	bne	r7,zero,5c70 <_free_r+0x1d4>
    5c54:	81fffe17 	ldw	r7,-8(r16)
    5c58:	31cdc83a 	sub	r6,r6,r7
    5c5c:	30c00317 	ldw	r3,12(r6)
    5c60:	31400217 	ldw	r5,8(r6)
    5c64:	11c5883a 	add	r2,r2,r7
    5c68:	28c00315 	stw	r3,12(r5)
    5c6c:	19400215 	stw	r5,8(r3)
    5c70:	10c00054 	ori	r3,r2,1
    5c74:	30c00115 	stw	r3,4(r6)
    5c78:	00c000b4 	movhi	r3,2
    5c7c:	18e6f304 	addi	r3,r3,-25652
    5c80:	18c00017 	ldw	r3,0(r3)
    5c84:	21800215 	stw	r6,8(r4)
    5c88:	10ffc036 	bltu	r2,r3,5b8c <_free_r+0xf0>
    5c8c:	008000b4 	movhi	r2,2
    5c90:	10ae0104 	addi	r2,r2,-18428
    5c94:	11400017 	ldw	r5,0(r2)
    5c98:	8809883a 	mov	r4,r17
    5c9c:	00059780 	call	5978 <_malloc_trim_r>
    5ca0:	003fba06 	br	5b8c <_free_r+0xf0>
    5ca4:	28c9883a 	add	r4,r5,r3
    5ca8:	21000117 	ldw	r4,4(r4)
    5cac:	2100004c 	andi	r4,r4,1
    5cb0:	2000391e 	bne	r4,zero,5d98 <_free_r+0x2fc>
    5cb4:	29c00217 	ldw	r7,8(r5)
    5cb8:	29000317 	ldw	r4,12(r5)
    5cbc:	1885883a 	add	r2,r3,r2
    5cc0:	10c00054 	ori	r3,r2,1
    5cc4:	39000315 	stw	r4,12(r7)
    5cc8:	21c00215 	stw	r7,8(r4)
    5ccc:	30c00115 	stw	r3,4(r6)
    5cd0:	308d883a 	add	r6,r6,r2
    5cd4:	30800015 	stw	r2,0(r6)
    5cd8:	003fac06 	br	5b8c <_free_r+0xf0>
    5cdc:	00c00504 	movi	r3,20
    5ce0:	19401536 	bltu	r3,r5,5d38 <_free_r+0x29c>
    5ce4:	28c01704 	addi	r3,r5,92
    5ce8:	18c7883a 	add	r3,r3,r3
    5cec:	294016c4 	addi	r5,r5,91
    5cf0:	003fb406 	br	5bc4 <_free_r+0x128>
    5cf4:	280bd0ba 	srai	r5,r5,2
    5cf8:	00c00044 	movi	r3,1
    5cfc:	38800117 	ldw	r2,4(r7)
    5d00:	194a983a 	sll	r5,r3,r5
    5d04:	2007883a 	mov	r3,r4
    5d08:	2884b03a 	or	r2,r5,r2
    5d0c:	38800115 	stw	r2,4(r7)
    5d10:	003fbb06 	br	5c00 <_free_r+0x164>
    5d14:	21800515 	stw	r6,20(r4)
    5d18:	21800415 	stw	r6,16(r4)
    5d1c:	10c00054 	ori	r3,r2,1
    5d20:	31c00315 	stw	r7,12(r6)
    5d24:	31c00215 	stw	r7,8(r6)
    5d28:	30c00115 	stw	r3,4(r6)
    5d2c:	308d883a 	add	r6,r6,r2
    5d30:	30800015 	stw	r2,0(r6)
    5d34:	003f9506 	br	5b8c <_free_r+0xf0>
    5d38:	00c01504 	movi	r3,84
    5d3c:	19400536 	bltu	r3,r5,5d54 <_free_r+0x2b8>
    5d40:	100ad33a 	srli	r5,r2,12
    5d44:	28c01bc4 	addi	r3,r5,111
    5d48:	18c7883a 	add	r3,r3,r3
    5d4c:	29401b84 	addi	r5,r5,110
    5d50:	003f9c06 	br	5bc4 <_free_r+0x128>
    5d54:	00c05504 	movi	r3,340
    5d58:	19400536 	bltu	r3,r5,5d70 <_free_r+0x2d4>
    5d5c:	100ad3fa 	srli	r5,r2,15
    5d60:	28c01e04 	addi	r3,r5,120
    5d64:	18c7883a 	add	r3,r3,r3
    5d68:	29401dc4 	addi	r5,r5,119
    5d6c:	003f9506 	br	5bc4 <_free_r+0x128>
    5d70:	00c15504 	movi	r3,1364
    5d74:	19400536 	bltu	r3,r5,5d8c <_free_r+0x2f0>
    5d78:	100ad4ba 	srli	r5,r2,18
    5d7c:	28c01f44 	addi	r3,r5,125
    5d80:	18c7883a 	add	r3,r3,r3
    5d84:	29401f04 	addi	r5,r5,124
    5d88:	003f8e06 	br	5bc4 <_free_r+0x128>
    5d8c:	00c03f84 	movi	r3,254
    5d90:	01401f84 	movi	r5,126
    5d94:	003f8b06 	br	5bc4 <_free_r+0x128>
    5d98:	10c00054 	ori	r3,r2,1
    5d9c:	30c00115 	stw	r3,4(r6)
    5da0:	308d883a 	add	r6,r6,r2
    5da4:	30800015 	stw	r2,0(r6)
    5da8:	003f7806 	br	5b8c <_free_r+0xf0>

00005dac <__sfvwrite_r>:
    5dac:	30800217 	ldw	r2,8(r6)
    5db0:	10006726 	beq	r2,zero,5f50 <__sfvwrite_r+0x1a4>
    5db4:	28c0030b 	ldhu	r3,12(r5)
    5db8:	defff404 	addi	sp,sp,-48
    5dbc:	dd400715 	stw	r21,28(sp)
    5dc0:	dd000615 	stw	r20,24(sp)
    5dc4:	dc000215 	stw	r16,8(sp)
    5dc8:	dfc00b15 	stw	ra,44(sp)
    5dcc:	df000a15 	stw	fp,40(sp)
    5dd0:	ddc00915 	stw	r23,36(sp)
    5dd4:	dd800815 	stw	r22,32(sp)
    5dd8:	dcc00515 	stw	r19,20(sp)
    5ddc:	dc800415 	stw	r18,16(sp)
    5de0:	dc400315 	stw	r17,12(sp)
    5de4:	1880020c 	andi	r2,r3,8
    5de8:	2821883a 	mov	r16,r5
    5dec:	202b883a 	mov	r21,r4
    5df0:	3029883a 	mov	r20,r6
    5df4:	10002726 	beq	r2,zero,5e94 <__sfvwrite_r+0xe8>
    5df8:	28800417 	ldw	r2,16(r5)
    5dfc:	10002526 	beq	r2,zero,5e94 <__sfvwrite_r+0xe8>
    5e00:	1880008c 	andi	r2,r3,2
    5e04:	a4400017 	ldw	r17,0(r20)
    5e08:	10002a26 	beq	r2,zero,5eb4 <__sfvwrite_r+0x108>
    5e0c:	05a00034 	movhi	r22,32768
    5e10:	0027883a 	mov	r19,zero
    5e14:	0025883a 	mov	r18,zero
    5e18:	b5bf0004 	addi	r22,r22,-1024
    5e1c:	980d883a 	mov	r6,r19
    5e20:	a809883a 	mov	r4,r21
    5e24:	90004626 	beq	r18,zero,5f40 <__sfvwrite_r+0x194>
    5e28:	900f883a 	mov	r7,r18
    5e2c:	b480022e 	bgeu	r22,r18,5e38 <__sfvwrite_r+0x8c>
    5e30:	01e00034 	movhi	r7,32768
    5e34:	39ff0004 	addi	r7,r7,-1024
    5e38:	80800917 	ldw	r2,36(r16)
    5e3c:	81400717 	ldw	r5,28(r16)
    5e40:	103ee83a 	callr	r2
    5e44:	0080570e 	bge	zero,r2,5fa4 <__sfvwrite_r+0x1f8>
    5e48:	a0c00217 	ldw	r3,8(r20)
    5e4c:	98a7883a 	add	r19,r19,r2
    5e50:	90a5c83a 	sub	r18,r18,r2
    5e54:	1885c83a 	sub	r2,r3,r2
    5e58:	a0800215 	stw	r2,8(r20)
    5e5c:	103fef1e 	bne	r2,zero,5e1c <__sfvwrite_r+0x70>
    5e60:	0005883a 	mov	r2,zero
    5e64:	dfc00b17 	ldw	ra,44(sp)
    5e68:	df000a17 	ldw	fp,40(sp)
    5e6c:	ddc00917 	ldw	r23,36(sp)
    5e70:	dd800817 	ldw	r22,32(sp)
    5e74:	dd400717 	ldw	r21,28(sp)
    5e78:	dd000617 	ldw	r20,24(sp)
    5e7c:	dcc00517 	ldw	r19,20(sp)
    5e80:	dc800417 	ldw	r18,16(sp)
    5e84:	dc400317 	ldw	r17,12(sp)
    5e88:	dc000217 	ldw	r16,8(sp)
    5e8c:	dec00c04 	addi	sp,sp,48
    5e90:	f800283a 	ret
    5e94:	800b883a 	mov	r5,r16
    5e98:	a809883a 	mov	r4,r21
    5e9c:	00039540 	call	3954 <__swsetup_r>
    5ea0:	1000eb1e 	bne	r2,zero,6250 <__sfvwrite_r+0x4a4>
    5ea4:	80c0030b 	ldhu	r3,12(r16)
    5ea8:	a4400017 	ldw	r17,0(r20)
    5eac:	1880008c 	andi	r2,r3,2
    5eb0:	103fd61e 	bne	r2,zero,5e0c <__sfvwrite_r+0x60>
    5eb4:	1880004c 	andi	r2,r3,1
    5eb8:	10003f1e 	bne	r2,zero,5fb8 <__sfvwrite_r+0x20c>
    5ebc:	0039883a 	mov	fp,zero
    5ec0:	0025883a 	mov	r18,zero
    5ec4:	90001a26 	beq	r18,zero,5f30 <__sfvwrite_r+0x184>
    5ec8:	1880800c 	andi	r2,r3,512
    5ecc:	84c00217 	ldw	r19,8(r16)
    5ed0:	10002126 	beq	r2,zero,5f58 <__sfvwrite_r+0x1ac>
    5ed4:	982f883a 	mov	r23,r19
    5ed8:	94c09336 	bltu	r18,r19,6128 <__sfvwrite_r+0x37c>
    5edc:	1881200c 	andi	r2,r3,1152
    5ee0:	10009e1e 	bne	r2,zero,615c <__sfvwrite_r+0x3b0>
    5ee4:	81000017 	ldw	r4,0(r16)
    5ee8:	b80d883a 	mov	r6,r23
    5eec:	e00b883a 	mov	r5,fp
    5ef0:	00068b40 	call	68b4 <memmove>
    5ef4:	80c00217 	ldw	r3,8(r16)
    5ef8:	81000017 	ldw	r4,0(r16)
    5efc:	9005883a 	mov	r2,r18
    5f00:	1ce7c83a 	sub	r19,r3,r19
    5f04:	25cf883a 	add	r7,r4,r23
    5f08:	84c00215 	stw	r19,8(r16)
    5f0c:	81c00015 	stw	r7,0(r16)
    5f10:	a0c00217 	ldw	r3,8(r20)
    5f14:	e0b9883a 	add	fp,fp,r2
    5f18:	90a5c83a 	sub	r18,r18,r2
    5f1c:	18a7c83a 	sub	r19,r3,r2
    5f20:	a4c00215 	stw	r19,8(r20)
    5f24:	983fce26 	beq	r19,zero,5e60 <__sfvwrite_r+0xb4>
    5f28:	80c0030b 	ldhu	r3,12(r16)
    5f2c:	903fe61e 	bne	r18,zero,5ec8 <__sfvwrite_r+0x11c>
    5f30:	8f000017 	ldw	fp,0(r17)
    5f34:	8c800117 	ldw	r18,4(r17)
    5f38:	8c400204 	addi	r17,r17,8
    5f3c:	003fe106 	br	5ec4 <__sfvwrite_r+0x118>
    5f40:	8cc00017 	ldw	r19,0(r17)
    5f44:	8c800117 	ldw	r18,4(r17)
    5f48:	8c400204 	addi	r17,r17,8
    5f4c:	003fb306 	br	5e1c <__sfvwrite_r+0x70>
    5f50:	0005883a 	mov	r2,zero
    5f54:	f800283a 	ret
    5f58:	81000017 	ldw	r4,0(r16)
    5f5c:	80800417 	ldw	r2,16(r16)
    5f60:	11005736 	bltu	r2,r4,60c0 <__sfvwrite_r+0x314>
    5f64:	85c00517 	ldw	r23,20(r16)
    5f68:	95c05536 	bltu	r18,r23,60c0 <__sfvwrite_r+0x314>
    5f6c:	00a00034 	movhi	r2,32768
    5f70:	10bfffc4 	addi	r2,r2,-1
    5f74:	9009883a 	mov	r4,r18
    5f78:	1480012e 	bgeu	r2,r18,5f80 <__sfvwrite_r+0x1d4>
    5f7c:	1009883a 	mov	r4,r2
    5f80:	b80b883a 	mov	r5,r23
    5f84:	0000a700 	call	a70 <__divsi3>
    5f88:	15cf383a 	mul	r7,r2,r23
    5f8c:	81400717 	ldw	r5,28(r16)
    5f90:	80800917 	ldw	r2,36(r16)
    5f94:	e00d883a 	mov	r6,fp
    5f98:	a809883a 	mov	r4,r21
    5f9c:	103ee83a 	callr	r2
    5fa0:	00bfdb16 	blt	zero,r2,5f10 <__sfvwrite_r+0x164>
    5fa4:	8080030b 	ldhu	r2,12(r16)
    5fa8:	10801014 	ori	r2,r2,64
    5fac:	8080030d 	sth	r2,12(r16)
    5fb0:	00bfffc4 	movi	r2,-1
    5fb4:	003fab06 	br	5e64 <__sfvwrite_r+0xb8>
    5fb8:	0027883a 	mov	r19,zero
    5fbc:	0011883a 	mov	r8,zero
    5fc0:	0039883a 	mov	fp,zero
    5fc4:	0025883a 	mov	r18,zero
    5fc8:	90001f26 	beq	r18,zero,6048 <__sfvwrite_r+0x29c>
    5fcc:	40005a26 	beq	r8,zero,6138 <__sfvwrite_r+0x38c>
    5fd0:	982d883a 	mov	r22,r19
    5fd4:	94c0012e 	bgeu	r18,r19,5fdc <__sfvwrite_r+0x230>
    5fd8:	902d883a 	mov	r22,r18
    5fdc:	81000017 	ldw	r4,0(r16)
    5fe0:	80800417 	ldw	r2,16(r16)
    5fe4:	b02f883a 	mov	r23,r22
    5fe8:	81c00517 	ldw	r7,20(r16)
    5fec:	1100032e 	bgeu	r2,r4,5ffc <__sfvwrite_r+0x250>
    5ff0:	80c00217 	ldw	r3,8(r16)
    5ff4:	38c7883a 	add	r3,r7,r3
    5ff8:	1d801816 	blt	r3,r22,605c <__sfvwrite_r+0x2b0>
    5ffc:	b1c03e16 	blt	r22,r7,60f8 <__sfvwrite_r+0x34c>
    6000:	80800917 	ldw	r2,36(r16)
    6004:	81400717 	ldw	r5,28(r16)
    6008:	e00d883a 	mov	r6,fp
    600c:	da000115 	stw	r8,4(sp)
    6010:	a809883a 	mov	r4,r21
    6014:	103ee83a 	callr	r2
    6018:	102f883a 	mov	r23,r2
    601c:	da000117 	ldw	r8,4(sp)
    6020:	00bfe00e 	bge	zero,r2,5fa4 <__sfvwrite_r+0x1f8>
    6024:	9de7c83a 	sub	r19,r19,r23
    6028:	98001f26 	beq	r19,zero,60a8 <__sfvwrite_r+0x2fc>
    602c:	a0800217 	ldw	r2,8(r20)
    6030:	e5f9883a 	add	fp,fp,r23
    6034:	95e5c83a 	sub	r18,r18,r23
    6038:	15efc83a 	sub	r23,r2,r23
    603c:	a5c00215 	stw	r23,8(r20)
    6040:	b83f8726 	beq	r23,zero,5e60 <__sfvwrite_r+0xb4>
    6044:	903fe11e 	bne	r18,zero,5fcc <__sfvwrite_r+0x220>
    6048:	8f000017 	ldw	fp,0(r17)
    604c:	8c800117 	ldw	r18,4(r17)
    6050:	0011883a 	mov	r8,zero
    6054:	8c400204 	addi	r17,r17,8
    6058:	003fdb06 	br	5fc8 <__sfvwrite_r+0x21c>
    605c:	180d883a 	mov	r6,r3
    6060:	e00b883a 	mov	r5,fp
    6064:	da000115 	stw	r8,4(sp)
    6068:	d8c00015 	stw	r3,0(sp)
    606c:	00068b40 	call	68b4 <memmove>
    6070:	d8c00017 	ldw	r3,0(sp)
    6074:	80800017 	ldw	r2,0(r16)
    6078:	800b883a 	mov	r5,r16
    607c:	a809883a 	mov	r4,r21
    6080:	10c5883a 	add	r2,r2,r3
    6084:	80800015 	stw	r2,0(r16)
    6088:	d8c00015 	stw	r3,0(sp)
    608c:	000554c0 	call	554c <_fflush_r>
    6090:	d8c00017 	ldw	r3,0(sp)
    6094:	da000117 	ldw	r8,4(sp)
    6098:	103fc21e 	bne	r2,zero,5fa4 <__sfvwrite_r+0x1f8>
    609c:	182f883a 	mov	r23,r3
    60a0:	9de7c83a 	sub	r19,r19,r23
    60a4:	983fe11e 	bne	r19,zero,602c <__sfvwrite_r+0x280>
    60a8:	800b883a 	mov	r5,r16
    60ac:	a809883a 	mov	r4,r21
    60b0:	000554c0 	call	554c <_fflush_r>
    60b4:	103fbb1e 	bne	r2,zero,5fa4 <__sfvwrite_r+0x1f8>
    60b8:	0011883a 	mov	r8,zero
    60bc:	003fdb06 	br	602c <__sfvwrite_r+0x280>
    60c0:	94c0012e 	bgeu	r18,r19,60c8 <__sfvwrite_r+0x31c>
    60c4:	9027883a 	mov	r19,r18
    60c8:	980d883a 	mov	r6,r19
    60cc:	e00b883a 	mov	r5,fp
    60d0:	00068b40 	call	68b4 <memmove>
    60d4:	80800217 	ldw	r2,8(r16)
    60d8:	80c00017 	ldw	r3,0(r16)
    60dc:	14c5c83a 	sub	r2,r2,r19
    60e0:	1cc7883a 	add	r3,r3,r19
    60e4:	80800215 	stw	r2,8(r16)
    60e8:	80c00015 	stw	r3,0(r16)
    60ec:	10004326 	beq	r2,zero,61fc <__sfvwrite_r+0x450>
    60f0:	9805883a 	mov	r2,r19
    60f4:	003f8606 	br	5f10 <__sfvwrite_r+0x164>
    60f8:	b00d883a 	mov	r6,r22
    60fc:	e00b883a 	mov	r5,fp
    6100:	da000115 	stw	r8,4(sp)
    6104:	00068b40 	call	68b4 <memmove>
    6108:	80800217 	ldw	r2,8(r16)
    610c:	80c00017 	ldw	r3,0(r16)
    6110:	da000117 	ldw	r8,4(sp)
    6114:	1585c83a 	sub	r2,r2,r22
    6118:	1dad883a 	add	r22,r3,r22
    611c:	80800215 	stw	r2,8(r16)
    6120:	85800015 	stw	r22,0(r16)
    6124:	003fbf06 	br	6024 <__sfvwrite_r+0x278>
    6128:	81000017 	ldw	r4,0(r16)
    612c:	9027883a 	mov	r19,r18
    6130:	902f883a 	mov	r23,r18
    6134:	003f6c06 	br	5ee8 <__sfvwrite_r+0x13c>
    6138:	900d883a 	mov	r6,r18
    613c:	01400284 	movi	r5,10
    6140:	e009883a 	mov	r4,fp
    6144:	00066880 	call	6688 <memchr>
    6148:	10003e26 	beq	r2,zero,6244 <__sfvwrite_r+0x498>
    614c:	10800044 	addi	r2,r2,1
    6150:	1727c83a 	sub	r19,r2,fp
    6154:	02000044 	movi	r8,1
    6158:	003f9d06 	br	5fd0 <__sfvwrite_r+0x224>
    615c:	80800517 	ldw	r2,20(r16)
    6160:	81400417 	ldw	r5,16(r16)
    6164:	81c00017 	ldw	r7,0(r16)
    6168:	10a7883a 	add	r19,r2,r2
    616c:	9885883a 	add	r2,r19,r2
    6170:	1026d7fa 	srli	r19,r2,31
    6174:	396dc83a 	sub	r22,r7,r5
    6178:	b1000044 	addi	r4,r22,1
    617c:	9885883a 	add	r2,r19,r2
    6180:	1027d07a 	srai	r19,r2,1
    6184:	2485883a 	add	r2,r4,r18
    6188:	980d883a 	mov	r6,r19
    618c:	9880022e 	bgeu	r19,r2,6198 <__sfvwrite_r+0x3ec>
    6190:	1027883a 	mov	r19,r2
    6194:	100d883a 	mov	r6,r2
    6198:	18c1000c 	andi	r3,r3,1024
    619c:	18001c26 	beq	r3,zero,6210 <__sfvwrite_r+0x464>
    61a0:	300b883a 	mov	r5,r6
    61a4:	a809883a 	mov	r4,r21
    61a8:	0000c4c0 	call	c4c <_malloc_r>
    61ac:	102f883a 	mov	r23,r2
    61b0:	10002926 	beq	r2,zero,6258 <__sfvwrite_r+0x4ac>
    61b4:	81400417 	ldw	r5,16(r16)
    61b8:	b00d883a 	mov	r6,r22
    61bc:	1009883a 	mov	r4,r2
    61c0:	000676c0 	call	676c <memcpy>
    61c4:	8080030b 	ldhu	r2,12(r16)
    61c8:	00fedfc4 	movi	r3,-1153
    61cc:	10c4703a 	and	r2,r2,r3
    61d0:	10802014 	ori	r2,r2,128
    61d4:	8080030d 	sth	r2,12(r16)
    61d8:	bd89883a 	add	r4,r23,r22
    61dc:	9d8fc83a 	sub	r7,r19,r22
    61e0:	85c00415 	stw	r23,16(r16)
    61e4:	84c00515 	stw	r19,20(r16)
    61e8:	81000015 	stw	r4,0(r16)
    61ec:	9027883a 	mov	r19,r18
    61f0:	81c00215 	stw	r7,8(r16)
    61f4:	902f883a 	mov	r23,r18
    61f8:	003f3b06 	br	5ee8 <__sfvwrite_r+0x13c>
    61fc:	800b883a 	mov	r5,r16
    6200:	a809883a 	mov	r4,r21
    6204:	000554c0 	call	554c <_fflush_r>
    6208:	103fb926 	beq	r2,zero,60f0 <__sfvwrite_r+0x344>
    620c:	003f6506 	br	5fa4 <__sfvwrite_r+0x1f8>
    6210:	a809883a 	mov	r4,r21
    6214:	0007b340 	call	7b34 <_realloc_r>
    6218:	102f883a 	mov	r23,r2
    621c:	103fee1e 	bne	r2,zero,61d8 <__sfvwrite_r+0x42c>
    6220:	81400417 	ldw	r5,16(r16)
    6224:	a809883a 	mov	r4,r21
    6228:	0005a9c0 	call	5a9c <_free_r>
    622c:	8080030b 	ldhu	r2,12(r16)
    6230:	00ffdfc4 	movi	r3,-129
    6234:	1884703a 	and	r2,r3,r2
    6238:	00c00304 	movi	r3,12
    623c:	a8c00015 	stw	r3,0(r21)
    6240:	003f5906 	br	5fa8 <__sfvwrite_r+0x1fc>
    6244:	94c00044 	addi	r19,r18,1
    6248:	02000044 	movi	r8,1
    624c:	003f6006 	br	5fd0 <__sfvwrite_r+0x224>
    6250:	00bfffc4 	movi	r2,-1
    6254:	003f0306 	br	5e64 <__sfvwrite_r+0xb8>
    6258:	00800304 	movi	r2,12
    625c:	a8800015 	stw	r2,0(r21)
    6260:	8080030b 	ldhu	r2,12(r16)
    6264:	003f5006 	br	5fa8 <__sfvwrite_r+0x1fc>

00006268 <_fwalk>:
    6268:	defff704 	addi	sp,sp,-36
    626c:	dd000415 	stw	r20,16(sp)
    6270:	dfc00815 	stw	ra,32(sp)
    6274:	ddc00715 	stw	r23,28(sp)
    6278:	dd800615 	stw	r22,24(sp)
    627c:	dd400515 	stw	r21,20(sp)
    6280:	dcc00315 	stw	r19,12(sp)
    6284:	dc800215 	stw	r18,8(sp)
    6288:	dc400115 	stw	r17,4(sp)
    628c:	dc000015 	stw	r16,0(sp)
    6290:	2500b804 	addi	r20,r4,736
    6294:	a0002326 	beq	r20,zero,6324 <_fwalk+0xbc>
    6298:	282b883a 	mov	r21,r5
    629c:	002f883a 	mov	r23,zero
    62a0:	05800044 	movi	r22,1
    62a4:	04ffffc4 	movi	r19,-1
    62a8:	a4400117 	ldw	r17,4(r20)
    62ac:	a4800217 	ldw	r18,8(r20)
    62b0:	8c7fffc4 	addi	r17,r17,-1
    62b4:	88000d16 	blt	r17,zero,62ec <_fwalk+0x84>
    62b8:	94000304 	addi	r16,r18,12
    62bc:	94800384 	addi	r18,r18,14
    62c0:	8080000b 	ldhu	r2,0(r16)
    62c4:	8c7fffc4 	addi	r17,r17,-1
    62c8:	813ffd04 	addi	r4,r16,-12
    62cc:	b080042e 	bgeu	r22,r2,62e0 <_fwalk+0x78>
    62d0:	9080000f 	ldh	r2,0(r18)
    62d4:	14c00226 	beq	r2,r19,62e0 <_fwalk+0x78>
    62d8:	a83ee83a 	callr	r21
    62dc:	b8aeb03a 	or	r23,r23,r2
    62e0:	84001a04 	addi	r16,r16,104
    62e4:	94801a04 	addi	r18,r18,104
    62e8:	8cfff51e 	bne	r17,r19,62c0 <_fwalk+0x58>
    62ec:	a5000017 	ldw	r20,0(r20)
    62f0:	a03fed1e 	bne	r20,zero,62a8 <_fwalk+0x40>
    62f4:	b805883a 	mov	r2,r23
    62f8:	dfc00817 	ldw	ra,32(sp)
    62fc:	ddc00717 	ldw	r23,28(sp)
    6300:	dd800617 	ldw	r22,24(sp)
    6304:	dd400517 	ldw	r21,20(sp)
    6308:	dd000417 	ldw	r20,16(sp)
    630c:	dcc00317 	ldw	r19,12(sp)
    6310:	dc800217 	ldw	r18,8(sp)
    6314:	dc400117 	ldw	r17,4(sp)
    6318:	dc000017 	ldw	r16,0(sp)
    631c:	dec00904 	addi	sp,sp,36
    6320:	f800283a 	ret
    6324:	002f883a 	mov	r23,zero
    6328:	003ff206 	br	62f4 <_fwalk+0x8c>

0000632c <_fwalk_reent>:
    632c:	defff704 	addi	sp,sp,-36
    6330:	dd000415 	stw	r20,16(sp)
    6334:	dfc00815 	stw	ra,32(sp)
    6338:	ddc00715 	stw	r23,28(sp)
    633c:	dd800615 	stw	r22,24(sp)
    6340:	dd400515 	stw	r21,20(sp)
    6344:	dcc00315 	stw	r19,12(sp)
    6348:	dc800215 	stw	r18,8(sp)
    634c:	dc400115 	stw	r17,4(sp)
    6350:	dc000015 	stw	r16,0(sp)
    6354:	2500b804 	addi	r20,r4,736
    6358:	a0002326 	beq	r20,zero,63e8 <_fwalk_reent+0xbc>
    635c:	282b883a 	mov	r21,r5
    6360:	2027883a 	mov	r19,r4
    6364:	002f883a 	mov	r23,zero
    6368:	05800044 	movi	r22,1
    636c:	04bfffc4 	movi	r18,-1
    6370:	a4400117 	ldw	r17,4(r20)
    6374:	a4000217 	ldw	r16,8(r20)
    6378:	8c7fffc4 	addi	r17,r17,-1
    637c:	88000c16 	blt	r17,zero,63b0 <_fwalk_reent+0x84>
    6380:	84000304 	addi	r16,r16,12
    6384:	8080000b 	ldhu	r2,0(r16)
    6388:	8c7fffc4 	addi	r17,r17,-1
    638c:	817ffd04 	addi	r5,r16,-12
    6390:	b080052e 	bgeu	r22,r2,63a8 <_fwalk_reent+0x7c>
    6394:	8080008f 	ldh	r2,2(r16)
    6398:	9809883a 	mov	r4,r19
    639c:	14800226 	beq	r2,r18,63a8 <_fwalk_reent+0x7c>
    63a0:	a83ee83a 	callr	r21
    63a4:	b8aeb03a 	or	r23,r23,r2
    63a8:	84001a04 	addi	r16,r16,104
    63ac:	8cbff51e 	bne	r17,r18,6384 <_fwalk_reent+0x58>
    63b0:	a5000017 	ldw	r20,0(r20)
    63b4:	a03fee1e 	bne	r20,zero,6370 <_fwalk_reent+0x44>
    63b8:	b805883a 	mov	r2,r23
    63bc:	dfc00817 	ldw	ra,32(sp)
    63c0:	ddc00717 	ldw	r23,28(sp)
    63c4:	dd800617 	ldw	r22,24(sp)
    63c8:	dd400517 	ldw	r21,20(sp)
    63cc:	dd000417 	ldw	r20,16(sp)
    63d0:	dcc00317 	ldw	r19,12(sp)
    63d4:	dc800217 	ldw	r18,8(sp)
    63d8:	dc400117 	ldw	r17,4(sp)
    63dc:	dc000017 	ldw	r16,0(sp)
    63e0:	dec00904 	addi	sp,sp,36
    63e4:	f800283a 	ret
    63e8:	002f883a 	mov	r23,zero
    63ec:	003ff206 	br	63b8 <_fwalk_reent+0x8c>

000063f0 <_setlocale_r>:
    63f0:	30001b26 	beq	r6,zero,6460 <_setlocale_r+0x70>
    63f4:	01400074 	movhi	r5,1
    63f8:	defffe04 	addi	sp,sp,-8
    63fc:	295f5a04 	addi	r5,r5,32104
    6400:	3009883a 	mov	r4,r6
    6404:	dc000015 	stw	r16,0(sp)
    6408:	dfc00115 	stw	ra,4(sp)
    640c:	3021883a 	mov	r16,r6
    6410:	00082480 	call	8248 <strcmp>
    6414:	1000061e 	bne	r2,zero,6430 <_setlocale_r+0x40>
    6418:	00800074 	movhi	r2,1
    641c:	109f5904 	addi	r2,r2,32100
    6420:	dfc00117 	ldw	ra,4(sp)
    6424:	dc000017 	ldw	r16,0(sp)
    6428:	dec00204 	addi	sp,sp,8
    642c:	f800283a 	ret
    6430:	01400074 	movhi	r5,1
    6434:	295f5904 	addi	r5,r5,32100
    6438:	8009883a 	mov	r4,r16
    643c:	00082480 	call	8248 <strcmp>
    6440:	103ff526 	beq	r2,zero,6418 <_setlocale_r+0x28>
    6444:	01400074 	movhi	r5,1
    6448:	295f4404 	addi	r5,r5,32016
    644c:	8009883a 	mov	r4,r16
    6450:	00082480 	call	8248 <strcmp>
    6454:	103ff026 	beq	r2,zero,6418 <_setlocale_r+0x28>
    6458:	0005883a 	mov	r2,zero
    645c:	003ff006 	br	6420 <_setlocale_r+0x30>
    6460:	00800074 	movhi	r2,1
    6464:	109f5904 	addi	r2,r2,32100
    6468:	f800283a 	ret

0000646c <__locale_charset>:
    646c:	008000b4 	movhi	r2,2
    6470:	10a25704 	addi	r2,r2,-30372
    6474:	f800283a 	ret

00006478 <__locale_mb_cur_max>:
    6478:	008000b4 	movhi	r2,2
    647c:	10a6f604 	addi	r2,r2,-25640
    6480:	10800017 	ldw	r2,0(r2)
    6484:	f800283a 	ret

00006488 <__locale_msgcharset>:
    6488:	008000b4 	movhi	r2,2
    648c:	10a24f04 	addi	r2,r2,-30404
    6490:	f800283a 	ret

00006494 <__locale_cjk_lang>:
    6494:	0005883a 	mov	r2,zero
    6498:	f800283a 	ret

0000649c <_localeconv_r>:
    649c:	008000b4 	movhi	r2,2
    64a0:	10a25f04 	addi	r2,r2,-30340
    64a4:	f800283a 	ret

000064a8 <setlocale>:
    64a8:	008000b4 	movhi	r2,2
    64ac:	10a6f504 	addi	r2,r2,-25644
    64b0:	280d883a 	mov	r6,r5
    64b4:	200b883a 	mov	r5,r4
    64b8:	11000017 	ldw	r4,0(r2)
    64bc:	00063f01 	jmpi	63f0 <_setlocale_r>

000064c0 <localeconv>:
    64c0:	008000b4 	movhi	r2,2
    64c4:	10a25f04 	addi	r2,r2,-30340
    64c8:	f800283a 	ret

000064cc <__smakebuf_r>:
    64cc:	2880030b 	ldhu	r2,12(r5)
    64d0:	10c0008c 	andi	r3,r2,2
    64d4:	1800411e 	bne	r3,zero,65dc <__smakebuf_r+0x110>
    64d8:	deffec04 	addi	sp,sp,-80
    64dc:	dc000f15 	stw	r16,60(sp)
    64e0:	2821883a 	mov	r16,r5
    64e4:	2940038f 	ldh	r5,14(r5)
    64e8:	dc401015 	stw	r17,64(sp)
    64ec:	dfc01315 	stw	ra,76(sp)
    64f0:	dcc01215 	stw	r19,72(sp)
    64f4:	dc801115 	stw	r18,68(sp)
    64f8:	2023883a 	mov	r17,r4
    64fc:	28001c16 	blt	r5,zero,6570 <__smakebuf_r+0xa4>
    6500:	d80d883a 	mov	r6,sp
    6504:	0009df00 	call	9df0 <_fstat_r>
    6508:	10001816 	blt	r2,zero,656c <__smakebuf_r+0xa0>
    650c:	d8800117 	ldw	r2,4(sp)
    6510:	00e00014 	movui	r3,32768
    6514:	10bc000c 	andi	r2,r2,61440
    6518:	14c80020 	cmpeqi	r19,r2,8192
    651c:	10c03726 	beq	r2,r3,65fc <__smakebuf_r+0x130>
    6520:	80c0030b 	ldhu	r3,12(r16)
    6524:	18c20014 	ori	r3,r3,2048
    6528:	80c0030d 	sth	r3,12(r16)
    652c:	00c80004 	movi	r3,8192
    6530:	10c0521e 	bne	r2,r3,667c <__smakebuf_r+0x1b0>
    6534:	8140038f 	ldh	r5,14(r16)
    6538:	8809883a 	mov	r4,r17
    653c:	0009e4c0 	call	9e4c <_isatty_r>
    6540:	10004c26 	beq	r2,zero,6674 <__smakebuf_r+0x1a8>
    6544:	8080030b 	ldhu	r2,12(r16)
    6548:	80c010c4 	addi	r3,r16,67
    654c:	80c00015 	stw	r3,0(r16)
    6550:	10800054 	ori	r2,r2,1
    6554:	8080030d 	sth	r2,12(r16)
    6558:	00800044 	movi	r2,1
    655c:	80c00415 	stw	r3,16(r16)
    6560:	80800515 	stw	r2,20(r16)
    6564:	04810004 	movi	r18,1024
    6568:	00000706 	br	6588 <__smakebuf_r+0xbc>
    656c:	8080030b 	ldhu	r2,12(r16)
    6570:	10c0200c 	andi	r3,r2,128
    6574:	18001f1e 	bne	r3,zero,65f4 <__smakebuf_r+0x128>
    6578:	04810004 	movi	r18,1024
    657c:	10820014 	ori	r2,r2,2048
    6580:	8080030d 	sth	r2,12(r16)
    6584:	0027883a 	mov	r19,zero
    6588:	900b883a 	mov	r5,r18
    658c:	8809883a 	mov	r4,r17
    6590:	0000c4c0 	call	c4c <_malloc_r>
    6594:	10002c26 	beq	r2,zero,6648 <__smakebuf_r+0x17c>
    6598:	80c0030b 	ldhu	r3,12(r16)
    659c:	01000034 	movhi	r4,0
    65a0:	21157804 	addi	r4,r4,21984
    65a4:	89000f15 	stw	r4,60(r17)
    65a8:	18c02014 	ori	r3,r3,128
    65ac:	80c0030d 	sth	r3,12(r16)
    65b0:	80800015 	stw	r2,0(r16)
    65b4:	80800415 	stw	r2,16(r16)
    65b8:	84800515 	stw	r18,20(r16)
    65bc:	98001a1e 	bne	r19,zero,6628 <__smakebuf_r+0x15c>
    65c0:	dfc01317 	ldw	ra,76(sp)
    65c4:	dcc01217 	ldw	r19,72(sp)
    65c8:	dc801117 	ldw	r18,68(sp)
    65cc:	dc401017 	ldw	r17,64(sp)
    65d0:	dc000f17 	ldw	r16,60(sp)
    65d4:	dec01404 	addi	sp,sp,80
    65d8:	f800283a 	ret
    65dc:	288010c4 	addi	r2,r5,67
    65e0:	28800015 	stw	r2,0(r5)
    65e4:	28800415 	stw	r2,16(r5)
    65e8:	00800044 	movi	r2,1
    65ec:	28800515 	stw	r2,20(r5)
    65f0:	f800283a 	ret
    65f4:	04801004 	movi	r18,64
    65f8:	003fe006 	br	657c <__smakebuf_r+0xb0>
    65fc:	81000a17 	ldw	r4,40(r16)
    6600:	00c00074 	movhi	r3,1
    6604:	18e07904 	addi	r3,r3,-32284
    6608:	20ffc51e 	bne	r4,r3,6520 <__smakebuf_r+0x54>
    660c:	8080030b 	ldhu	r2,12(r16)
    6610:	04810004 	movi	r18,1024
    6614:	84801315 	stw	r18,76(r16)
    6618:	1484b03a 	or	r2,r2,r18
    661c:	8080030d 	sth	r2,12(r16)
    6620:	0027883a 	mov	r19,zero
    6624:	003fd806 	br	6588 <__smakebuf_r+0xbc>
    6628:	8140038f 	ldh	r5,14(r16)
    662c:	8809883a 	mov	r4,r17
    6630:	0009e4c0 	call	9e4c <_isatty_r>
    6634:	103fe226 	beq	r2,zero,65c0 <__smakebuf_r+0xf4>
    6638:	8080030b 	ldhu	r2,12(r16)
    663c:	10800054 	ori	r2,r2,1
    6640:	8080030d 	sth	r2,12(r16)
    6644:	003fde06 	br	65c0 <__smakebuf_r+0xf4>
    6648:	8080030b 	ldhu	r2,12(r16)
    664c:	10c0800c 	andi	r3,r2,512
    6650:	183fdb1e 	bne	r3,zero,65c0 <__smakebuf_r+0xf4>
    6654:	10800094 	ori	r2,r2,2
    6658:	80c010c4 	addi	r3,r16,67
    665c:	8080030d 	sth	r2,12(r16)
    6660:	00800044 	movi	r2,1
    6664:	80c00015 	stw	r3,0(r16)
    6668:	80c00415 	stw	r3,16(r16)
    666c:	80800515 	stw	r2,20(r16)
    6670:	003fd306 	br	65c0 <__smakebuf_r+0xf4>
    6674:	04810004 	movi	r18,1024
    6678:	003fc306 	br	6588 <__smakebuf_r+0xbc>
    667c:	0027883a 	mov	r19,zero
    6680:	04810004 	movi	r18,1024
    6684:	003fc006 	br	6588 <__smakebuf_r+0xbc>

00006688 <memchr>:
    6688:	208000cc 	andi	r2,r4,3
    668c:	280f883a 	mov	r7,r5
    6690:	10003426 	beq	r2,zero,6764 <memchr+0xdc>
    6694:	30bfffc4 	addi	r2,r6,-1
    6698:	30001a26 	beq	r6,zero,6704 <memchr+0x7c>
    669c:	20c00003 	ldbu	r3,0(r4)
    66a0:	29803fcc 	andi	r6,r5,255
    66a4:	30c0051e 	bne	r6,r3,66bc <memchr+0x34>
    66a8:	00001806 	br	670c <memchr+0x84>
    66ac:	10001526 	beq	r2,zero,6704 <memchr+0x7c>
    66b0:	20c00003 	ldbu	r3,0(r4)
    66b4:	10bfffc4 	addi	r2,r2,-1
    66b8:	30c01426 	beq	r6,r3,670c <memchr+0x84>
    66bc:	21000044 	addi	r4,r4,1
    66c0:	20c000cc 	andi	r3,r4,3
    66c4:	183ff91e 	bne	r3,zero,66ac <memchr+0x24>
    66c8:	020000c4 	movi	r8,3
    66cc:	40801136 	bltu	r8,r2,6714 <memchr+0x8c>
    66d0:	10000c26 	beq	r2,zero,6704 <memchr+0x7c>
    66d4:	20c00003 	ldbu	r3,0(r4)
    66d8:	29403fcc 	andi	r5,r5,255
    66dc:	28c00b26 	beq	r5,r3,670c <memchr+0x84>
    66e0:	20c00044 	addi	r3,r4,1
    66e4:	39803fcc 	andi	r6,r7,255
    66e8:	2089883a 	add	r4,r4,r2
    66ec:	00000306 	br	66fc <memchr+0x74>
    66f0:	18c00044 	addi	r3,r3,1
    66f4:	197fffc3 	ldbu	r5,-1(r3)
    66f8:	31400526 	beq	r6,r5,6710 <memchr+0x88>
    66fc:	1805883a 	mov	r2,r3
    6700:	20fffb1e 	bne	r4,r3,66f0 <memchr+0x68>
    6704:	0005883a 	mov	r2,zero
    6708:	f800283a 	ret
    670c:	2005883a 	mov	r2,r4
    6710:	f800283a 	ret
    6714:	28c03fcc 	andi	r3,r5,255
    6718:	1812923a 	slli	r9,r3,8
    671c:	02ffbff4 	movhi	r11,65279
    6720:	02a02074 	movhi	r10,32897
    6724:	48d2b03a 	or	r9,r9,r3
    6728:	4806943a 	slli	r3,r9,16
    672c:	5affbfc4 	addi	r11,r11,-257
    6730:	52a02004 	addi	r10,r10,-32640
    6734:	48d2b03a 	or	r9,r9,r3
    6738:	20c00017 	ldw	r3,0(r4)
    673c:	48c6f03a 	xor	r3,r9,r3
    6740:	1acd883a 	add	r6,r3,r11
    6744:	00c6303a 	nor	r3,zero,r3
    6748:	30c6703a 	and	r3,r6,r3
    674c:	1a86703a 	and	r3,r3,r10
    6750:	183fe01e 	bne	r3,zero,66d4 <memchr+0x4c>
    6754:	10bfff04 	addi	r2,r2,-4
    6758:	21000104 	addi	r4,r4,4
    675c:	40bff636 	bltu	r8,r2,6738 <memchr+0xb0>
    6760:	003fdb06 	br	66d0 <memchr+0x48>
    6764:	3005883a 	mov	r2,r6
    6768:	003fd706 	br	66c8 <memchr+0x40>

0000676c <memcpy>:
    676c:	defffd04 	addi	sp,sp,-12
    6770:	dfc00215 	stw	ra,8(sp)
    6774:	dc400115 	stw	r17,4(sp)
    6778:	dc000015 	stw	r16,0(sp)
    677c:	00c003c4 	movi	r3,15
    6780:	2005883a 	mov	r2,r4
    6784:	1980452e 	bgeu	r3,r6,689c <memcpy+0x130>
    6788:	2906b03a 	or	r3,r5,r4
    678c:	18c000cc 	andi	r3,r3,3
    6790:	1800441e 	bne	r3,zero,68a4 <memcpy+0x138>
    6794:	347ffc04 	addi	r17,r6,-16
    6798:	8822d13a 	srli	r17,r17,4
    679c:	28c00104 	addi	r3,r5,4
    67a0:	23400104 	addi	r13,r4,4
    67a4:	8820913a 	slli	r16,r17,4
    67a8:	2b000204 	addi	r12,r5,8
    67ac:	22c00204 	addi	r11,r4,8
    67b0:	84000504 	addi	r16,r16,20
    67b4:	2a800304 	addi	r10,r5,12
    67b8:	22400304 	addi	r9,r4,12
    67bc:	2c21883a 	add	r16,r5,r16
    67c0:	2811883a 	mov	r8,r5
    67c4:	200f883a 	mov	r7,r4
    67c8:	41000017 	ldw	r4,0(r8)
    67cc:	1fc00017 	ldw	ra,0(r3)
    67d0:	63c00017 	ldw	r15,0(r12)
    67d4:	39000015 	stw	r4,0(r7)
    67d8:	53800017 	ldw	r14,0(r10)
    67dc:	6fc00015 	stw	ra,0(r13)
    67e0:	5bc00015 	stw	r15,0(r11)
    67e4:	4b800015 	stw	r14,0(r9)
    67e8:	18c00404 	addi	r3,r3,16
    67ec:	39c00404 	addi	r7,r7,16
    67f0:	42000404 	addi	r8,r8,16
    67f4:	6b400404 	addi	r13,r13,16
    67f8:	63000404 	addi	r12,r12,16
    67fc:	5ac00404 	addi	r11,r11,16
    6800:	52800404 	addi	r10,r10,16
    6804:	4a400404 	addi	r9,r9,16
    6808:	1c3fef1e 	bne	r3,r16,67c8 <memcpy+0x5c>
    680c:	89c00044 	addi	r7,r17,1
    6810:	380e913a 	slli	r7,r7,4
    6814:	310003cc 	andi	r4,r6,15
    6818:	02c000c4 	movi	r11,3
    681c:	11c7883a 	add	r3,r2,r7
    6820:	29cb883a 	add	r5,r5,r7
    6824:	5900212e 	bgeu	r11,r4,68ac <memcpy+0x140>
    6828:	1813883a 	mov	r9,r3
    682c:	2811883a 	mov	r8,r5
    6830:	200f883a 	mov	r7,r4
    6834:	42800017 	ldw	r10,0(r8)
    6838:	4a400104 	addi	r9,r9,4
    683c:	39ffff04 	addi	r7,r7,-4
    6840:	4abfff15 	stw	r10,-4(r9)
    6844:	42000104 	addi	r8,r8,4
    6848:	59fffa36 	bltu	r11,r7,6834 <memcpy+0xc8>
    684c:	213fff04 	addi	r4,r4,-4
    6850:	2008d0ba 	srli	r4,r4,2
    6854:	318000cc 	andi	r6,r6,3
    6858:	21000044 	addi	r4,r4,1
    685c:	2109883a 	add	r4,r4,r4
    6860:	2109883a 	add	r4,r4,r4
    6864:	1907883a 	add	r3,r3,r4
    6868:	290b883a 	add	r5,r5,r4
    686c:	30000626 	beq	r6,zero,6888 <memcpy+0x11c>
    6870:	198d883a 	add	r6,r3,r6
    6874:	29c00003 	ldbu	r7,0(r5)
    6878:	18c00044 	addi	r3,r3,1
    687c:	29400044 	addi	r5,r5,1
    6880:	19ffffc5 	stb	r7,-1(r3)
    6884:	19bffb1e 	bne	r3,r6,6874 <memcpy+0x108>
    6888:	dfc00217 	ldw	ra,8(sp)
    688c:	dc400117 	ldw	r17,4(sp)
    6890:	dc000017 	ldw	r16,0(sp)
    6894:	dec00304 	addi	sp,sp,12
    6898:	f800283a 	ret
    689c:	2007883a 	mov	r3,r4
    68a0:	003ff206 	br	686c <memcpy+0x100>
    68a4:	2007883a 	mov	r3,r4
    68a8:	003ff106 	br	6870 <memcpy+0x104>
    68ac:	200d883a 	mov	r6,r4
    68b0:	003fee06 	br	686c <memcpy+0x100>

000068b4 <memmove>:
    68b4:	2005883a 	mov	r2,r4
    68b8:	29000b2e 	bgeu	r5,r4,68e8 <memmove+0x34>
    68bc:	298f883a 	add	r7,r5,r6
    68c0:	21c0092e 	bgeu	r4,r7,68e8 <memmove+0x34>
    68c4:	2187883a 	add	r3,r4,r6
    68c8:	198bc83a 	sub	r5,r3,r6
    68cc:	30004826 	beq	r6,zero,69f0 <memmove+0x13c>
    68d0:	39ffffc4 	addi	r7,r7,-1
    68d4:	39000003 	ldbu	r4,0(r7)
    68d8:	18ffffc4 	addi	r3,r3,-1
    68dc:	19000005 	stb	r4,0(r3)
    68e0:	28fffb1e 	bne	r5,r3,68d0 <memmove+0x1c>
    68e4:	f800283a 	ret
    68e8:	00c003c4 	movi	r3,15
    68ec:	1980412e 	bgeu	r3,r6,69f4 <memmove+0x140>
    68f0:	2886b03a 	or	r3,r5,r2
    68f4:	18c000cc 	andi	r3,r3,3
    68f8:	1800401e 	bne	r3,zero,69fc <memmove+0x148>
    68fc:	33fffc04 	addi	r15,r6,-16
    6900:	781ed13a 	srli	r15,r15,4
    6904:	28c00104 	addi	r3,r5,4
    6908:	13400104 	addi	r13,r2,4
    690c:	781c913a 	slli	r14,r15,4
    6910:	2b000204 	addi	r12,r5,8
    6914:	12c00204 	addi	r11,r2,8
    6918:	73800504 	addi	r14,r14,20
    691c:	2a800304 	addi	r10,r5,12
    6920:	12400304 	addi	r9,r2,12
    6924:	2b9d883a 	add	r14,r5,r14
    6928:	2811883a 	mov	r8,r5
    692c:	100f883a 	mov	r7,r2
    6930:	41000017 	ldw	r4,0(r8)
    6934:	39c00404 	addi	r7,r7,16
    6938:	18c00404 	addi	r3,r3,16
    693c:	393ffc15 	stw	r4,-16(r7)
    6940:	193ffc17 	ldw	r4,-16(r3)
    6944:	6b400404 	addi	r13,r13,16
    6948:	5ac00404 	addi	r11,r11,16
    694c:	693ffc15 	stw	r4,-16(r13)
    6950:	61000017 	ldw	r4,0(r12)
    6954:	4a400404 	addi	r9,r9,16
    6958:	42000404 	addi	r8,r8,16
    695c:	593ffc15 	stw	r4,-16(r11)
    6960:	51000017 	ldw	r4,0(r10)
    6964:	63000404 	addi	r12,r12,16
    6968:	52800404 	addi	r10,r10,16
    696c:	493ffc15 	stw	r4,-16(r9)
    6970:	1bbfef1e 	bne	r3,r14,6930 <memmove+0x7c>
    6974:	79000044 	addi	r4,r15,1
    6978:	2008913a 	slli	r4,r4,4
    697c:	328003cc 	andi	r10,r6,15
    6980:	02c000c4 	movi	r11,3
    6984:	1107883a 	add	r3,r2,r4
    6988:	290b883a 	add	r5,r5,r4
    698c:	5a801e2e 	bgeu	r11,r10,6a08 <memmove+0x154>
    6990:	1813883a 	mov	r9,r3
    6994:	2811883a 	mov	r8,r5
    6998:	500f883a 	mov	r7,r10
    699c:	41000017 	ldw	r4,0(r8)
    69a0:	4a400104 	addi	r9,r9,4
    69a4:	39ffff04 	addi	r7,r7,-4
    69a8:	493fff15 	stw	r4,-4(r9)
    69ac:	42000104 	addi	r8,r8,4
    69b0:	59fffa36 	bltu	r11,r7,699c <memmove+0xe8>
    69b4:	513fff04 	addi	r4,r10,-4
    69b8:	2008d0ba 	srli	r4,r4,2
    69bc:	318000cc 	andi	r6,r6,3
    69c0:	21000044 	addi	r4,r4,1
    69c4:	2109883a 	add	r4,r4,r4
    69c8:	2109883a 	add	r4,r4,r4
    69cc:	1907883a 	add	r3,r3,r4
    69d0:	290b883a 	add	r5,r5,r4
    69d4:	30000b26 	beq	r6,zero,6a04 <memmove+0x150>
    69d8:	198d883a 	add	r6,r3,r6
    69dc:	29c00003 	ldbu	r7,0(r5)
    69e0:	18c00044 	addi	r3,r3,1
    69e4:	29400044 	addi	r5,r5,1
    69e8:	19ffffc5 	stb	r7,-1(r3)
    69ec:	19bffb1e 	bne	r3,r6,69dc <memmove+0x128>
    69f0:	f800283a 	ret
    69f4:	1007883a 	mov	r3,r2
    69f8:	003ff606 	br	69d4 <memmove+0x120>
    69fc:	1007883a 	mov	r3,r2
    6a00:	003ff506 	br	69d8 <memmove+0x124>
    6a04:	f800283a 	ret
    6a08:	500d883a 	mov	r6,r10
    6a0c:	003ff106 	br	69d4 <memmove+0x120>

00006a10 <memset>:
    6a10:	20c000cc 	andi	r3,r4,3
    6a14:	2005883a 	mov	r2,r4
    6a18:	18004426 	beq	r3,zero,6b2c <memset+0x11c>
    6a1c:	31ffffc4 	addi	r7,r6,-1
    6a20:	30004026 	beq	r6,zero,6b24 <memset+0x114>
    6a24:	2813883a 	mov	r9,r5
    6a28:	200d883a 	mov	r6,r4
    6a2c:	2007883a 	mov	r3,r4
    6a30:	00000406 	br	6a44 <memset+0x34>
    6a34:	3a3fffc4 	addi	r8,r7,-1
    6a38:	31800044 	addi	r6,r6,1
    6a3c:	38003926 	beq	r7,zero,6b24 <memset+0x114>
    6a40:	400f883a 	mov	r7,r8
    6a44:	18c00044 	addi	r3,r3,1
    6a48:	32400005 	stb	r9,0(r6)
    6a4c:	1a0000cc 	andi	r8,r3,3
    6a50:	403ff81e 	bne	r8,zero,6a34 <memset+0x24>
    6a54:	010000c4 	movi	r4,3
    6a58:	21c02d2e 	bgeu	r4,r7,6b10 <memset+0x100>
    6a5c:	29003fcc 	andi	r4,r5,255
    6a60:	200c923a 	slli	r6,r4,8
    6a64:	3108b03a 	or	r4,r6,r4
    6a68:	200c943a 	slli	r6,r4,16
    6a6c:	218cb03a 	or	r6,r4,r6
    6a70:	010003c4 	movi	r4,15
    6a74:	21c0182e 	bgeu	r4,r7,6ad8 <memset+0xc8>
    6a78:	3b3ffc04 	addi	r12,r7,-16
    6a7c:	6018d13a 	srli	r12,r12,4
    6a80:	1a000104 	addi	r8,r3,4
    6a84:	1ac00204 	addi	r11,r3,8
    6a88:	6008913a 	slli	r4,r12,4
    6a8c:	1a800304 	addi	r10,r3,12
    6a90:	1813883a 	mov	r9,r3
    6a94:	21000504 	addi	r4,r4,20
    6a98:	1909883a 	add	r4,r3,r4
    6a9c:	49800015 	stw	r6,0(r9)
    6aa0:	41800015 	stw	r6,0(r8)
    6aa4:	59800015 	stw	r6,0(r11)
    6aa8:	51800015 	stw	r6,0(r10)
    6aac:	42000404 	addi	r8,r8,16
    6ab0:	4a400404 	addi	r9,r9,16
    6ab4:	5ac00404 	addi	r11,r11,16
    6ab8:	52800404 	addi	r10,r10,16
    6abc:	413ff71e 	bne	r8,r4,6a9c <memset+0x8c>
    6ac0:	63000044 	addi	r12,r12,1
    6ac4:	6018913a 	slli	r12,r12,4
    6ac8:	39c003cc 	andi	r7,r7,15
    6acc:	010000c4 	movi	r4,3
    6ad0:	1b07883a 	add	r3,r3,r12
    6ad4:	21c00e2e 	bgeu	r4,r7,6b10 <memset+0x100>
    6ad8:	1813883a 	mov	r9,r3
    6adc:	3811883a 	mov	r8,r7
    6ae0:	010000c4 	movi	r4,3
    6ae4:	49800015 	stw	r6,0(r9)
    6ae8:	423fff04 	addi	r8,r8,-4
    6aec:	4a400104 	addi	r9,r9,4
    6af0:	223ffc36 	bltu	r4,r8,6ae4 <memset+0xd4>
    6af4:	393fff04 	addi	r4,r7,-4
    6af8:	2008d0ba 	srli	r4,r4,2
    6afc:	39c000cc 	andi	r7,r7,3
    6b00:	21000044 	addi	r4,r4,1
    6b04:	2109883a 	add	r4,r4,r4
    6b08:	2109883a 	add	r4,r4,r4
    6b0c:	1907883a 	add	r3,r3,r4
    6b10:	38000526 	beq	r7,zero,6b28 <memset+0x118>
    6b14:	19cf883a 	add	r7,r3,r7
    6b18:	19400005 	stb	r5,0(r3)
    6b1c:	18c00044 	addi	r3,r3,1
    6b20:	38fffd1e 	bne	r7,r3,6b18 <memset+0x108>
    6b24:	f800283a 	ret
    6b28:	f800283a 	ret
    6b2c:	2007883a 	mov	r3,r4
    6b30:	300f883a 	mov	r7,r6
    6b34:	003fc706 	br	6a54 <memset+0x44>

00006b38 <_Balloc>:
    6b38:	20801317 	ldw	r2,76(r4)
    6b3c:	defffc04 	addi	sp,sp,-16
    6b40:	dc400115 	stw	r17,4(sp)
    6b44:	dc000015 	stw	r16,0(sp)
    6b48:	dfc00315 	stw	ra,12(sp)
    6b4c:	dc800215 	stw	r18,8(sp)
    6b50:	2023883a 	mov	r17,r4
    6b54:	2821883a 	mov	r16,r5
    6b58:	10000f26 	beq	r2,zero,6b98 <_Balloc+0x60>
    6b5c:	8407883a 	add	r3,r16,r16
    6b60:	18c7883a 	add	r3,r3,r3
    6b64:	10c7883a 	add	r3,r2,r3
    6b68:	18800017 	ldw	r2,0(r3)
    6b6c:	10001126 	beq	r2,zero,6bb4 <_Balloc+0x7c>
    6b70:	11000017 	ldw	r4,0(r2)
    6b74:	19000015 	stw	r4,0(r3)
    6b78:	10000415 	stw	zero,16(r2)
    6b7c:	10000315 	stw	zero,12(r2)
    6b80:	dfc00317 	ldw	ra,12(sp)
    6b84:	dc800217 	ldw	r18,8(sp)
    6b88:	dc400117 	ldw	r17,4(sp)
    6b8c:	dc000017 	ldw	r16,0(sp)
    6b90:	dec00404 	addi	sp,sp,16
    6b94:	f800283a 	ret
    6b98:	01800844 	movi	r6,33
    6b9c:	01400104 	movi	r5,4
    6ba0:	0009a200 	call	9a20 <_calloc_r>
    6ba4:	88801315 	stw	r2,76(r17)
    6ba8:	103fec1e 	bne	r2,zero,6b5c <_Balloc+0x24>
    6bac:	0005883a 	mov	r2,zero
    6bb0:	003ff306 	br	6b80 <_Balloc+0x48>
    6bb4:	01400044 	movi	r5,1
    6bb8:	2c24983a 	sll	r18,r5,r16
    6bbc:	8809883a 	mov	r4,r17
    6bc0:	91800144 	addi	r6,r18,5
    6bc4:	318d883a 	add	r6,r6,r6
    6bc8:	318d883a 	add	r6,r6,r6
    6bcc:	0009a200 	call	9a20 <_calloc_r>
    6bd0:	103ff626 	beq	r2,zero,6bac <_Balloc+0x74>
    6bd4:	14000115 	stw	r16,4(r2)
    6bd8:	14800215 	stw	r18,8(r2)
    6bdc:	003fe606 	br	6b78 <_Balloc+0x40>

00006be0 <_Bfree>:
    6be0:	28000826 	beq	r5,zero,6c04 <_Bfree+0x24>
    6be4:	28c00117 	ldw	r3,4(r5)
    6be8:	20801317 	ldw	r2,76(r4)
    6bec:	18c7883a 	add	r3,r3,r3
    6bf0:	18c7883a 	add	r3,r3,r3
    6bf4:	10c5883a 	add	r2,r2,r3
    6bf8:	10c00017 	ldw	r3,0(r2)
    6bfc:	28c00015 	stw	r3,0(r5)
    6c00:	11400015 	stw	r5,0(r2)
    6c04:	f800283a 	ret

00006c08 <__multadd>:
    6c08:	defffa04 	addi	sp,sp,-24
    6c0c:	dc800315 	stw	r18,12(sp)
    6c10:	dc400215 	stw	r17,8(sp)
    6c14:	dc000115 	stw	r16,4(sp)
    6c18:	2823883a 	mov	r17,r5
    6c1c:	2c000417 	ldw	r16,16(r5)
    6c20:	dfc00515 	stw	ra,20(sp)
    6c24:	dcc00415 	stw	r19,16(sp)
    6c28:	2025883a 	mov	r18,r4
    6c2c:	29400504 	addi	r5,r5,20
    6c30:	0011883a 	mov	r8,zero
    6c34:	28c00017 	ldw	r3,0(r5)
    6c38:	29400104 	addi	r5,r5,4
    6c3c:	42000044 	addi	r8,r8,1
    6c40:	18bfffcc 	andi	r2,r3,65535
    6c44:	1185383a 	mul	r2,r2,r6
    6c48:	1806d43a 	srli	r3,r3,16
    6c4c:	11cf883a 	add	r7,r2,r7
    6c50:	3808d43a 	srli	r4,r7,16
    6c54:	1987383a 	mul	r3,r3,r6
    6c58:	38bfffcc 	andi	r2,r7,65535
    6c5c:	1907883a 	add	r3,r3,r4
    6c60:	1808943a 	slli	r4,r3,16
    6c64:	180ed43a 	srli	r7,r3,16
    6c68:	2085883a 	add	r2,r4,r2
    6c6c:	28bfff15 	stw	r2,-4(r5)
    6c70:	443ff016 	blt	r8,r16,6c34 <__multadd+0x2c>
    6c74:	38000926 	beq	r7,zero,6c9c <__multadd+0x94>
    6c78:	88800217 	ldw	r2,8(r17)
    6c7c:	80800f0e 	bge	r16,r2,6cbc <__multadd+0xb4>
    6c80:	80800144 	addi	r2,r16,5
    6c84:	1085883a 	add	r2,r2,r2
    6c88:	1085883a 	add	r2,r2,r2
    6c8c:	8885883a 	add	r2,r17,r2
    6c90:	11c00015 	stw	r7,0(r2)
    6c94:	84000044 	addi	r16,r16,1
    6c98:	8c000415 	stw	r16,16(r17)
    6c9c:	8805883a 	mov	r2,r17
    6ca0:	dfc00517 	ldw	ra,20(sp)
    6ca4:	dcc00417 	ldw	r19,16(sp)
    6ca8:	dc800317 	ldw	r18,12(sp)
    6cac:	dc400217 	ldw	r17,8(sp)
    6cb0:	dc000117 	ldw	r16,4(sp)
    6cb4:	dec00604 	addi	sp,sp,24
    6cb8:	f800283a 	ret
    6cbc:	89400117 	ldw	r5,4(r17)
    6cc0:	9009883a 	mov	r4,r18
    6cc4:	d9c00015 	stw	r7,0(sp)
    6cc8:	29400044 	addi	r5,r5,1
    6ccc:	0006b380 	call	6b38 <_Balloc>
    6cd0:	89800417 	ldw	r6,16(r17)
    6cd4:	89400304 	addi	r5,r17,12
    6cd8:	11000304 	addi	r4,r2,12
    6cdc:	31800084 	addi	r6,r6,2
    6ce0:	318d883a 	add	r6,r6,r6
    6ce4:	318d883a 	add	r6,r6,r6
    6ce8:	1027883a 	mov	r19,r2
    6cec:	000676c0 	call	676c <memcpy>
    6cf0:	d9c00017 	ldw	r7,0(sp)
    6cf4:	88000a26 	beq	r17,zero,6d20 <__multadd+0x118>
    6cf8:	88c00117 	ldw	r3,4(r17)
    6cfc:	90801317 	ldw	r2,76(r18)
    6d00:	18c7883a 	add	r3,r3,r3
    6d04:	18c7883a 	add	r3,r3,r3
    6d08:	10c5883a 	add	r2,r2,r3
    6d0c:	10c00017 	ldw	r3,0(r2)
    6d10:	88c00015 	stw	r3,0(r17)
    6d14:	14400015 	stw	r17,0(r2)
    6d18:	9823883a 	mov	r17,r19
    6d1c:	003fd806 	br	6c80 <__multadd+0x78>
    6d20:	9823883a 	mov	r17,r19
    6d24:	003fd606 	br	6c80 <__multadd+0x78>

00006d28 <__s2b>:
    6d28:	defff904 	addi	sp,sp,-28
    6d2c:	dc400115 	stw	r17,4(sp)
    6d30:	dc000015 	stw	r16,0(sp)
    6d34:	2023883a 	mov	r17,r4
    6d38:	2821883a 	mov	r16,r5
    6d3c:	39000204 	addi	r4,r7,8
    6d40:	01400244 	movi	r5,9
    6d44:	dcc00315 	stw	r19,12(sp)
    6d48:	dc800215 	stw	r18,8(sp)
    6d4c:	dfc00615 	stw	ra,24(sp)
    6d50:	dd400515 	stw	r21,20(sp)
    6d54:	dd000415 	stw	r20,16(sp)
    6d58:	3825883a 	mov	r18,r7
    6d5c:	3027883a 	mov	r19,r6
    6d60:	0000a700 	call	a70 <__divsi3>
    6d64:	00c00044 	movi	r3,1
    6d68:	000b883a 	mov	r5,zero
    6d6c:	1880030e 	bge	r3,r2,6d7c <__s2b+0x54>
    6d70:	18c7883a 	add	r3,r3,r3
    6d74:	29400044 	addi	r5,r5,1
    6d78:	18bffd16 	blt	r3,r2,6d70 <__s2b+0x48>
    6d7c:	8809883a 	mov	r4,r17
    6d80:	0006b380 	call	6b38 <_Balloc>
    6d84:	d8c00717 	ldw	r3,28(sp)
    6d88:	10c00515 	stw	r3,20(r2)
    6d8c:	00c00044 	movi	r3,1
    6d90:	10c00415 	stw	r3,16(r2)
    6d94:	00c00244 	movi	r3,9
    6d98:	1cc0210e 	bge	r3,r19,6e20 <__s2b+0xf8>
    6d9c:	80eb883a 	add	r21,r16,r3
    6da0:	a829883a 	mov	r20,r21
    6da4:	84e1883a 	add	r16,r16,r19
    6da8:	a1c00007 	ldb	r7,0(r20)
    6dac:	01800284 	movi	r6,10
    6db0:	a5000044 	addi	r20,r20,1
    6db4:	100b883a 	mov	r5,r2
    6db8:	39fff404 	addi	r7,r7,-48
    6dbc:	8809883a 	mov	r4,r17
    6dc0:	0006c080 	call	6c08 <__multadd>
    6dc4:	a43ff81e 	bne	r20,r16,6da8 <__s2b+0x80>
    6dc8:	ace1883a 	add	r16,r21,r19
    6dcc:	843ffe04 	addi	r16,r16,-8
    6dd0:	9c800a0e 	bge	r19,r18,6dfc <__s2b+0xd4>
    6dd4:	94e5c83a 	sub	r18,r18,r19
    6dd8:	84a5883a 	add	r18,r16,r18
    6ddc:	81c00007 	ldb	r7,0(r16)
    6de0:	01800284 	movi	r6,10
    6de4:	84000044 	addi	r16,r16,1
    6de8:	100b883a 	mov	r5,r2
    6dec:	39fff404 	addi	r7,r7,-48
    6df0:	8809883a 	mov	r4,r17
    6df4:	0006c080 	call	6c08 <__multadd>
    6df8:	84bff81e 	bne	r16,r18,6ddc <__s2b+0xb4>
    6dfc:	dfc00617 	ldw	ra,24(sp)
    6e00:	dd400517 	ldw	r21,20(sp)
    6e04:	dd000417 	ldw	r20,16(sp)
    6e08:	dcc00317 	ldw	r19,12(sp)
    6e0c:	dc800217 	ldw	r18,8(sp)
    6e10:	dc400117 	ldw	r17,4(sp)
    6e14:	dc000017 	ldw	r16,0(sp)
    6e18:	dec00704 	addi	sp,sp,28
    6e1c:	f800283a 	ret
    6e20:	84000284 	addi	r16,r16,10
    6e24:	1827883a 	mov	r19,r3
    6e28:	003fe906 	br	6dd0 <__s2b+0xa8>

00006e2c <__hi0bits>:
    6e2c:	20bfffec 	andhi	r2,r4,65535
    6e30:	1000141e 	bne	r2,zero,6e84 <__hi0bits+0x58>
    6e34:	2008943a 	slli	r4,r4,16
    6e38:	00800404 	movi	r2,16
    6e3c:	20ffc02c 	andhi	r3,r4,65280
    6e40:	1800021e 	bne	r3,zero,6e4c <__hi0bits+0x20>
    6e44:	2008923a 	slli	r4,r4,8
    6e48:	10800204 	addi	r2,r2,8
    6e4c:	20fc002c 	andhi	r3,r4,61440
    6e50:	1800021e 	bne	r3,zero,6e5c <__hi0bits+0x30>
    6e54:	2008913a 	slli	r4,r4,4
    6e58:	10800104 	addi	r2,r2,4
    6e5c:	20f0002c 	andhi	r3,r4,49152
    6e60:	1800031e 	bne	r3,zero,6e70 <__hi0bits+0x44>
    6e64:	2109883a 	add	r4,r4,r4
    6e68:	10800084 	addi	r2,r2,2
    6e6c:	2109883a 	add	r4,r4,r4
    6e70:	20000316 	blt	r4,zero,6e80 <__hi0bits+0x54>
    6e74:	2110002c 	andhi	r4,r4,16384
    6e78:	2000041e 	bne	r4,zero,6e8c <__hi0bits+0x60>
    6e7c:	00800804 	movi	r2,32
    6e80:	f800283a 	ret
    6e84:	0005883a 	mov	r2,zero
    6e88:	003fec06 	br	6e3c <__hi0bits+0x10>
    6e8c:	10800044 	addi	r2,r2,1
    6e90:	f800283a 	ret

00006e94 <__lo0bits>:
    6e94:	20c00017 	ldw	r3,0(r4)
    6e98:	188001cc 	andi	r2,r3,7
    6e9c:	10000826 	beq	r2,zero,6ec0 <__lo0bits+0x2c>
    6ea0:	1880004c 	andi	r2,r3,1
    6ea4:	1000211e 	bne	r2,zero,6f2c <__lo0bits+0x98>
    6ea8:	1880008c 	andi	r2,r3,2
    6eac:	1000211e 	bne	r2,zero,6f34 <__lo0bits+0xa0>
    6eb0:	1806d0ba 	srli	r3,r3,2
    6eb4:	00800084 	movi	r2,2
    6eb8:	20c00015 	stw	r3,0(r4)
    6ebc:	f800283a 	ret
    6ec0:	18bfffcc 	andi	r2,r3,65535
    6ec4:	10001326 	beq	r2,zero,6f14 <__lo0bits+0x80>
    6ec8:	0005883a 	mov	r2,zero
    6ecc:	19403fcc 	andi	r5,r3,255
    6ed0:	2800021e 	bne	r5,zero,6edc <__lo0bits+0x48>
    6ed4:	1806d23a 	srli	r3,r3,8
    6ed8:	10800204 	addi	r2,r2,8
    6edc:	194003cc 	andi	r5,r3,15
    6ee0:	2800021e 	bne	r5,zero,6eec <__lo0bits+0x58>
    6ee4:	1806d13a 	srli	r3,r3,4
    6ee8:	10800104 	addi	r2,r2,4
    6eec:	194000cc 	andi	r5,r3,3
    6ef0:	2800021e 	bne	r5,zero,6efc <__lo0bits+0x68>
    6ef4:	1806d0ba 	srli	r3,r3,2
    6ef8:	10800084 	addi	r2,r2,2
    6efc:	1940004c 	andi	r5,r3,1
    6f00:	2800081e 	bne	r5,zero,6f24 <__lo0bits+0x90>
    6f04:	1806d07a 	srli	r3,r3,1
    6f08:	1800051e 	bne	r3,zero,6f20 <__lo0bits+0x8c>
    6f0c:	00800804 	movi	r2,32
    6f10:	f800283a 	ret
    6f14:	1806d43a 	srli	r3,r3,16
    6f18:	00800404 	movi	r2,16
    6f1c:	003feb06 	br	6ecc <__lo0bits+0x38>
    6f20:	10800044 	addi	r2,r2,1
    6f24:	20c00015 	stw	r3,0(r4)
    6f28:	f800283a 	ret
    6f2c:	0005883a 	mov	r2,zero
    6f30:	f800283a 	ret
    6f34:	1806d07a 	srli	r3,r3,1
    6f38:	00800044 	movi	r2,1
    6f3c:	20c00015 	stw	r3,0(r4)
    6f40:	f800283a 	ret

00006f44 <__i2b>:
    6f44:	defffd04 	addi	sp,sp,-12
    6f48:	dc000015 	stw	r16,0(sp)
    6f4c:	04000044 	movi	r16,1
    6f50:	dc400115 	stw	r17,4(sp)
    6f54:	2823883a 	mov	r17,r5
    6f58:	800b883a 	mov	r5,r16
    6f5c:	dfc00215 	stw	ra,8(sp)
    6f60:	0006b380 	call	6b38 <_Balloc>
    6f64:	14400515 	stw	r17,20(r2)
    6f68:	14000415 	stw	r16,16(r2)
    6f6c:	dfc00217 	ldw	ra,8(sp)
    6f70:	dc400117 	ldw	r17,4(sp)
    6f74:	dc000017 	ldw	r16,0(sp)
    6f78:	dec00304 	addi	sp,sp,12
    6f7c:	f800283a 	ret

00006f80 <__multiply>:
    6f80:	defffa04 	addi	sp,sp,-24
    6f84:	dcc00315 	stw	r19,12(sp)
    6f88:	dc800215 	stw	r18,8(sp)
    6f8c:	34c00417 	ldw	r19,16(r6)
    6f90:	2c800417 	ldw	r18,16(r5)
    6f94:	dd000415 	stw	r20,16(sp)
    6f98:	dc400115 	stw	r17,4(sp)
    6f9c:	dfc00515 	stw	ra,20(sp)
    6fa0:	dc000015 	stw	r16,0(sp)
    6fa4:	2829883a 	mov	r20,r5
    6fa8:	3023883a 	mov	r17,r6
    6fac:	94c0050e 	bge	r18,r19,6fc4 <__multiply+0x44>
    6fb0:	9007883a 	mov	r3,r18
    6fb4:	3029883a 	mov	r20,r6
    6fb8:	9825883a 	mov	r18,r19
    6fbc:	2823883a 	mov	r17,r5
    6fc0:	1827883a 	mov	r19,r3
    6fc4:	a0800217 	ldw	r2,8(r20)
    6fc8:	94e1883a 	add	r16,r18,r19
    6fcc:	a1400117 	ldw	r5,4(r20)
    6fd0:	1400010e 	bge	r2,r16,6fd8 <__multiply+0x58>
    6fd4:	29400044 	addi	r5,r5,1
    6fd8:	0006b380 	call	6b38 <_Balloc>
    6fdc:	8415883a 	add	r10,r16,r16
    6fe0:	12c00504 	addi	r11,r2,20
    6fe4:	5295883a 	add	r10,r10,r10
    6fe8:	5a95883a 	add	r10,r11,r10
    6fec:	5807883a 	mov	r3,r11
    6ff0:	5a80032e 	bgeu	r11,r10,7000 <__multiply+0x80>
    6ff4:	18000015 	stw	zero,0(r3)
    6ff8:	18c00104 	addi	r3,r3,4
    6ffc:	1abffd36 	bltu	r3,r10,6ff4 <__multiply+0x74>
    7000:	9ce7883a 	add	r19,r19,r19
    7004:	94a5883a 	add	r18,r18,r18
    7008:	89800504 	addi	r6,r17,20
    700c:	9ce7883a 	add	r19,r19,r19
    7010:	a3400504 	addi	r13,r20,20
    7014:	94a5883a 	add	r18,r18,r18
    7018:	34d9883a 	add	r12,r6,r19
    701c:	6c93883a 	add	r9,r13,r18
    7020:	3300422e 	bgeu	r6,r12,712c <__multiply+0x1ac>
    7024:	37c00017 	ldw	ra,0(r6)
    7028:	fbffffcc 	andi	r15,ra,65535
    702c:	78001b26 	beq	r15,zero,709c <__multiply+0x11c>
    7030:	5811883a 	mov	r8,r11
    7034:	681d883a 	mov	r14,r13
    7038:	000f883a 	mov	r7,zero
    703c:	71000017 	ldw	r4,0(r14)
    7040:	40c00017 	ldw	r3,0(r8)
    7044:	73800104 	addi	r14,r14,4
    7048:	217fffcc 	andi	r5,r4,65535
    704c:	2bcb383a 	mul	r5,r5,r15
    7050:	2008d43a 	srli	r4,r4,16
    7054:	1c7fffcc 	andi	r17,r3,65535
    7058:	2c4b883a 	add	r5,r5,r17
    705c:	29cb883a 	add	r5,r5,r7
    7060:	23c9383a 	mul	r4,r4,r15
    7064:	1806d43a 	srli	r3,r3,16
    7068:	280ed43a 	srli	r7,r5,16
    706c:	297fffcc 	andi	r5,r5,65535
    7070:	20c7883a 	add	r3,r4,r3
    7074:	19c7883a 	add	r3,r3,r7
    7078:	1808943a 	slli	r4,r3,16
    707c:	4023883a 	mov	r17,r8
    7080:	180ed43a 	srli	r7,r3,16
    7084:	214ab03a 	or	r5,r4,r5
    7088:	41400015 	stw	r5,0(r8)
    708c:	42000104 	addi	r8,r8,4
    7090:	727fea36 	bltu	r14,r9,703c <__multiply+0xbc>
    7094:	89c00115 	stw	r7,4(r17)
    7098:	37c00017 	ldw	ra,0(r6)
    709c:	f83ed43a 	srli	ra,ra,16
    70a0:	f8001f26 	beq	ra,zero,7120 <__multiply+0x1a0>
    70a4:	58c00017 	ldw	r3,0(r11)
    70a8:	681d883a 	mov	r14,r13
    70ac:	581f883a 	mov	r15,r11
    70b0:	1811883a 	mov	r8,r3
    70b4:	5825883a 	mov	r18,r11
    70b8:	000f883a 	mov	r7,zero
    70bc:	00000106 	br	70c4 <__multiply+0x144>
    70c0:	8825883a 	mov	r18,r17
    70c4:	7140000b 	ldhu	r5,0(r14)
    70c8:	4010d43a 	srli	r8,r8,16
    70cc:	193fffcc 	andi	r4,r3,65535
    70d0:	2fcb383a 	mul	r5,r5,ra
    70d4:	7bc00104 	addi	r15,r15,4
    70d8:	73800104 	addi	r14,r14,4
    70dc:	2a0b883a 	add	r5,r5,r8
    70e0:	29cb883a 	add	r5,r5,r7
    70e4:	2806943a 	slli	r3,r5,16
    70e8:	94400104 	addi	r17,r18,4
    70ec:	280ad43a 	srli	r5,r5,16
    70f0:	1908b03a 	or	r4,r3,r4
    70f4:	793fff15 	stw	r4,-4(r15)
    70f8:	70ffff17 	ldw	r3,-4(r14)
    70fc:	8a000017 	ldw	r8,0(r17)
    7100:	1806d43a 	srli	r3,r3,16
    7104:	413fffcc 	andi	r4,r8,65535
    7108:	1fc7383a 	mul	r3,r3,ra
    710c:	1907883a 	add	r3,r3,r4
    7110:	1947883a 	add	r3,r3,r5
    7114:	180ed43a 	srli	r7,r3,16
    7118:	727fe936 	bltu	r14,r9,70c0 <__multiply+0x140>
    711c:	90c00115 	stw	r3,4(r18)
    7120:	31800104 	addi	r6,r6,4
    7124:	5ac00104 	addi	r11,r11,4
    7128:	333fbe36 	bltu	r6,r12,7024 <__multiply+0xa4>
    712c:	0400090e 	bge	zero,r16,7154 <__multiply+0x1d4>
    7130:	50ffff17 	ldw	r3,-4(r10)
    7134:	52bfff04 	addi	r10,r10,-4
    7138:	18000326 	beq	r3,zero,7148 <__multiply+0x1c8>
    713c:	00000506 	br	7154 <__multiply+0x1d4>
    7140:	50c00017 	ldw	r3,0(r10)
    7144:	1800031e 	bne	r3,zero,7154 <__multiply+0x1d4>
    7148:	843fffc4 	addi	r16,r16,-1
    714c:	52bfff04 	addi	r10,r10,-4
    7150:	803ffb1e 	bne	r16,zero,7140 <__multiply+0x1c0>
    7154:	14000415 	stw	r16,16(r2)
    7158:	dfc00517 	ldw	ra,20(sp)
    715c:	dd000417 	ldw	r20,16(sp)
    7160:	dcc00317 	ldw	r19,12(sp)
    7164:	dc800217 	ldw	r18,8(sp)
    7168:	dc400117 	ldw	r17,4(sp)
    716c:	dc000017 	ldw	r16,0(sp)
    7170:	dec00604 	addi	sp,sp,24
    7174:	f800283a 	ret

00007178 <__pow5mult>:
    7178:	defffa04 	addi	sp,sp,-24
    717c:	dcc00315 	stw	r19,12(sp)
    7180:	dc000015 	stw	r16,0(sp)
    7184:	dfc00515 	stw	ra,20(sp)
    7188:	dd000415 	stw	r20,16(sp)
    718c:	dc800215 	stw	r18,8(sp)
    7190:	dc400115 	stw	r17,4(sp)
    7194:	308000cc 	andi	r2,r6,3
    7198:	3021883a 	mov	r16,r6
    719c:	2027883a 	mov	r19,r4
    71a0:	10002f1e 	bne	r2,zero,7260 <__pow5mult+0xe8>
    71a4:	2825883a 	mov	r18,r5
    71a8:	8021d0ba 	srai	r16,r16,2
    71ac:	80001a26 	beq	r16,zero,7218 <__pow5mult+0xa0>
    71b0:	9c401217 	ldw	r17,72(r19)
    71b4:	8800061e 	bne	r17,zero,71d0 <__pow5mult+0x58>
    71b8:	00003406 	br	728c <__pow5mult+0x114>
    71bc:	8021d07a 	srai	r16,r16,1
    71c0:	80001526 	beq	r16,zero,7218 <__pow5mult+0xa0>
    71c4:	88800017 	ldw	r2,0(r17)
    71c8:	10001c26 	beq	r2,zero,723c <__pow5mult+0xc4>
    71cc:	1023883a 	mov	r17,r2
    71d0:	8080004c 	andi	r2,r16,1
    71d4:	103ff926 	beq	r2,zero,71bc <__pow5mult+0x44>
    71d8:	880d883a 	mov	r6,r17
    71dc:	900b883a 	mov	r5,r18
    71e0:	9809883a 	mov	r4,r19
    71e4:	0006f800 	call	6f80 <__multiply>
    71e8:	90001b26 	beq	r18,zero,7258 <__pow5mult+0xe0>
    71ec:	91000117 	ldw	r4,4(r18)
    71f0:	98c01317 	ldw	r3,76(r19)
    71f4:	8021d07a 	srai	r16,r16,1
    71f8:	2109883a 	add	r4,r4,r4
    71fc:	2109883a 	add	r4,r4,r4
    7200:	1907883a 	add	r3,r3,r4
    7204:	19000017 	ldw	r4,0(r3)
    7208:	91000015 	stw	r4,0(r18)
    720c:	1c800015 	stw	r18,0(r3)
    7210:	1025883a 	mov	r18,r2
    7214:	803feb1e 	bne	r16,zero,71c4 <__pow5mult+0x4c>
    7218:	9005883a 	mov	r2,r18
    721c:	dfc00517 	ldw	ra,20(sp)
    7220:	dd000417 	ldw	r20,16(sp)
    7224:	dcc00317 	ldw	r19,12(sp)
    7228:	dc800217 	ldw	r18,8(sp)
    722c:	dc400117 	ldw	r17,4(sp)
    7230:	dc000017 	ldw	r16,0(sp)
    7234:	dec00604 	addi	sp,sp,24
    7238:	f800283a 	ret
    723c:	880d883a 	mov	r6,r17
    7240:	880b883a 	mov	r5,r17
    7244:	9809883a 	mov	r4,r19
    7248:	0006f800 	call	6f80 <__multiply>
    724c:	88800015 	stw	r2,0(r17)
    7250:	10000015 	stw	zero,0(r2)
    7254:	003fdd06 	br	71cc <__pow5mult+0x54>
    7258:	1025883a 	mov	r18,r2
    725c:	003fd706 	br	71bc <__pow5mult+0x44>
    7260:	10bfffc4 	addi	r2,r2,-1
    7264:	1085883a 	add	r2,r2,r2
    7268:	00c00074 	movhi	r3,1
    726c:	18df5d04 	addi	r3,r3,32116
    7270:	1085883a 	add	r2,r2,r2
    7274:	1885883a 	add	r2,r3,r2
    7278:	11800017 	ldw	r6,0(r2)
    727c:	000f883a 	mov	r7,zero
    7280:	0006c080 	call	6c08 <__multadd>
    7284:	1025883a 	mov	r18,r2
    7288:	003fc706 	br	71a8 <__pow5mult+0x30>
    728c:	05000044 	movi	r20,1
    7290:	a00b883a 	mov	r5,r20
    7294:	9809883a 	mov	r4,r19
    7298:	0006b380 	call	6b38 <_Balloc>
    729c:	1023883a 	mov	r17,r2
    72a0:	00809c44 	movi	r2,625
    72a4:	88800515 	stw	r2,20(r17)
    72a8:	8d000415 	stw	r20,16(r17)
    72ac:	9c401215 	stw	r17,72(r19)
    72b0:	88000015 	stw	zero,0(r17)
    72b4:	003fc606 	br	71d0 <__pow5mult+0x58>

000072b8 <__lshift>:
    72b8:	defff904 	addi	sp,sp,-28
    72bc:	dd400515 	stw	r21,20(sp)
    72c0:	dcc00315 	stw	r19,12(sp)
    72c4:	302bd17a 	srai	r21,r6,5
    72c8:	2cc00417 	ldw	r19,16(r5)
    72cc:	28800217 	ldw	r2,8(r5)
    72d0:	dd000415 	stw	r20,16(sp)
    72d4:	ace7883a 	add	r19,r21,r19
    72d8:	dc800215 	stw	r18,8(sp)
    72dc:	dc400115 	stw	r17,4(sp)
    72e0:	dc000015 	stw	r16,0(sp)
    72e4:	dfc00615 	stw	ra,24(sp)
    72e8:	9c000044 	addi	r16,r19,1
    72ec:	2823883a 	mov	r17,r5
    72f0:	3029883a 	mov	r20,r6
    72f4:	2025883a 	mov	r18,r4
    72f8:	29400117 	ldw	r5,4(r5)
    72fc:	1400030e 	bge	r2,r16,730c <__lshift+0x54>
    7300:	1085883a 	add	r2,r2,r2
    7304:	29400044 	addi	r5,r5,1
    7308:	143ffd16 	blt	r2,r16,7300 <__lshift+0x48>
    730c:	9009883a 	mov	r4,r18
    7310:	0006b380 	call	6b38 <_Balloc>
    7314:	10c00504 	addi	r3,r2,20
    7318:	0540070e 	bge	zero,r21,7338 <__lshift+0x80>
    731c:	ad6b883a 	add	r21,r21,r21
    7320:	ad6b883a 	add	r21,r21,r21
    7324:	1809883a 	mov	r4,r3
    7328:	1d47883a 	add	r3,r3,r21
    732c:	20000015 	stw	zero,0(r4)
    7330:	21000104 	addi	r4,r4,4
    7334:	193ffd1e 	bne	r3,r4,732c <__lshift+0x74>
    7338:	8a000417 	ldw	r8,16(r17)
    733c:	89000504 	addi	r4,r17,20
    7340:	a18007cc 	andi	r6,r20,31
    7344:	4211883a 	add	r8,r8,r8
    7348:	4211883a 	add	r8,r8,r8
    734c:	2211883a 	add	r8,r4,r8
    7350:	30002326 	beq	r6,zero,73e0 <__lshift+0x128>
    7354:	02400804 	movi	r9,32
    7358:	4993c83a 	sub	r9,r9,r6
    735c:	000b883a 	mov	r5,zero
    7360:	21c00017 	ldw	r7,0(r4)
    7364:	1815883a 	mov	r10,r3
    7368:	18c00104 	addi	r3,r3,4
    736c:	398e983a 	sll	r7,r7,r6
    7370:	21000104 	addi	r4,r4,4
    7374:	394ab03a 	or	r5,r7,r5
    7378:	197fff15 	stw	r5,-4(r3)
    737c:	217fff17 	ldw	r5,-4(r4)
    7380:	2a4ad83a 	srl	r5,r5,r9
    7384:	223ff636 	bltu	r4,r8,7360 <__lshift+0xa8>
    7388:	51400115 	stw	r5,4(r10)
    738c:	28001a1e 	bne	r5,zero,73f8 <__lshift+0x140>
    7390:	843fffc4 	addi	r16,r16,-1
    7394:	14000415 	stw	r16,16(r2)
    7398:	88000826 	beq	r17,zero,73bc <__lshift+0x104>
    739c:	89000117 	ldw	r4,4(r17)
    73a0:	90c01317 	ldw	r3,76(r18)
    73a4:	2109883a 	add	r4,r4,r4
    73a8:	2109883a 	add	r4,r4,r4
    73ac:	1907883a 	add	r3,r3,r4
    73b0:	19000017 	ldw	r4,0(r3)
    73b4:	89000015 	stw	r4,0(r17)
    73b8:	1c400015 	stw	r17,0(r3)
    73bc:	dfc00617 	ldw	ra,24(sp)
    73c0:	dd400517 	ldw	r21,20(sp)
    73c4:	dd000417 	ldw	r20,16(sp)
    73c8:	dcc00317 	ldw	r19,12(sp)
    73cc:	dc800217 	ldw	r18,8(sp)
    73d0:	dc400117 	ldw	r17,4(sp)
    73d4:	dc000017 	ldw	r16,0(sp)
    73d8:	dec00704 	addi	sp,sp,28
    73dc:	f800283a 	ret
    73e0:	21400017 	ldw	r5,0(r4)
    73e4:	18c00104 	addi	r3,r3,4
    73e8:	21000104 	addi	r4,r4,4
    73ec:	197fff15 	stw	r5,-4(r3)
    73f0:	223ffb36 	bltu	r4,r8,73e0 <__lshift+0x128>
    73f4:	003fe606 	br	7390 <__lshift+0xd8>
    73f8:	9c000084 	addi	r16,r19,2
    73fc:	003fe406 	br	7390 <__lshift+0xd8>

00007400 <__mcmp>:
    7400:	20800417 	ldw	r2,16(r4)
    7404:	28c00417 	ldw	r3,16(r5)
    7408:	10c5c83a 	sub	r2,r2,r3
    740c:	1000111e 	bne	r2,zero,7454 <__mcmp+0x54>
    7410:	18c7883a 	add	r3,r3,r3
    7414:	18c7883a 	add	r3,r3,r3
    7418:	21000504 	addi	r4,r4,20
    741c:	29400504 	addi	r5,r5,20
    7420:	20c5883a 	add	r2,r4,r3
    7424:	28cb883a 	add	r5,r5,r3
    7428:	00000106 	br	7430 <__mcmp+0x30>
    742c:	20800a2e 	bgeu	r4,r2,7458 <__mcmp+0x58>
    7430:	10bfff04 	addi	r2,r2,-4
    7434:	297fff04 	addi	r5,r5,-4
    7438:	11800017 	ldw	r6,0(r2)
    743c:	28c00017 	ldw	r3,0(r5)
    7440:	30fffa26 	beq	r6,r3,742c <__mcmp+0x2c>
    7444:	30c00236 	bltu	r6,r3,7450 <__mcmp+0x50>
    7448:	00800044 	movi	r2,1
    744c:	f800283a 	ret
    7450:	00bfffc4 	movi	r2,-1
    7454:	f800283a 	ret
    7458:	0005883a 	mov	r2,zero
    745c:	f800283a 	ret

00007460 <__mdiff>:
    7460:	28c00417 	ldw	r3,16(r5)
    7464:	30800417 	ldw	r2,16(r6)
    7468:	defffa04 	addi	sp,sp,-24
    746c:	dcc00315 	stw	r19,12(sp)
    7470:	dc800215 	stw	r18,8(sp)
    7474:	dfc00515 	stw	ra,20(sp)
    7478:	dd000415 	stw	r20,16(sp)
    747c:	dc400115 	stw	r17,4(sp)
    7480:	dc000015 	stw	r16,0(sp)
    7484:	1887c83a 	sub	r3,r3,r2
    7488:	2825883a 	mov	r18,r5
    748c:	3027883a 	mov	r19,r6
    7490:	1800141e 	bne	r3,zero,74e4 <__mdiff+0x84>
    7494:	1085883a 	add	r2,r2,r2
    7498:	1085883a 	add	r2,r2,r2
    749c:	2a000504 	addi	r8,r5,20
    74a0:	34000504 	addi	r16,r6,20
    74a4:	4087883a 	add	r3,r8,r2
    74a8:	8085883a 	add	r2,r16,r2
    74ac:	00000106 	br	74b4 <__mdiff+0x54>
    74b0:	40c0592e 	bgeu	r8,r3,7618 <__mdiff+0x1b8>
    74b4:	18ffff04 	addi	r3,r3,-4
    74b8:	10bfff04 	addi	r2,r2,-4
    74bc:	19c00017 	ldw	r7,0(r3)
    74c0:	11400017 	ldw	r5,0(r2)
    74c4:	397ffa26 	beq	r7,r5,74b0 <__mdiff+0x50>
    74c8:	3940592e 	bgeu	r7,r5,7630 <__mdiff+0x1d0>
    74cc:	9005883a 	mov	r2,r18
    74d0:	4023883a 	mov	r17,r8
    74d4:	9825883a 	mov	r18,r19
    74d8:	05000044 	movi	r20,1
    74dc:	1027883a 	mov	r19,r2
    74e0:	00000406 	br	74f4 <__mdiff+0x94>
    74e4:	18005616 	blt	r3,zero,7640 <__mdiff+0x1e0>
    74e8:	34400504 	addi	r17,r6,20
    74ec:	2c000504 	addi	r16,r5,20
    74f0:	0029883a 	mov	r20,zero
    74f4:	91400117 	ldw	r5,4(r18)
    74f8:	0006b380 	call	6b38 <_Balloc>
    74fc:	92400417 	ldw	r9,16(r18)
    7500:	9b000417 	ldw	r12,16(r19)
    7504:	12c00504 	addi	r11,r2,20
    7508:	4a51883a 	add	r8,r9,r9
    750c:	6319883a 	add	r12,r12,r12
    7510:	4211883a 	add	r8,r8,r8
    7514:	6319883a 	add	r12,r12,r12
    7518:	15000315 	stw	r20,12(r2)
    751c:	8211883a 	add	r8,r16,r8
    7520:	8b19883a 	add	r12,r17,r12
    7524:	0007883a 	mov	r3,zero
    7528:	81400017 	ldw	r5,0(r16)
    752c:	89c00017 	ldw	r7,0(r17)
    7530:	59800104 	addi	r6,r11,4
    7534:	293fffcc 	andi	r4,r5,65535
    7538:	20c7883a 	add	r3,r4,r3
    753c:	393fffcc 	andi	r4,r7,65535
    7540:	1909c83a 	sub	r4,r3,r4
    7544:	280ad43a 	srli	r5,r5,16
    7548:	380ed43a 	srli	r7,r7,16
    754c:	2007d43a 	srai	r3,r4,16
    7550:	213fffcc 	andi	r4,r4,65535
    7554:	29cbc83a 	sub	r5,r5,r7
    7558:	28c7883a 	add	r3,r5,r3
    755c:	180a943a 	slli	r5,r3,16
    7560:	8c400104 	addi	r17,r17,4
    7564:	84000104 	addi	r16,r16,4
    7568:	2908b03a 	or	r4,r5,r4
    756c:	59000015 	stw	r4,0(r11)
    7570:	1807d43a 	srai	r3,r3,16
    7574:	3015883a 	mov	r10,r6
    7578:	3017883a 	mov	r11,r6
    757c:	8b3fea36 	bltu	r17,r12,7528 <__mdiff+0xc8>
    7580:	8200162e 	bgeu	r16,r8,75dc <__mdiff+0x17c>
    7584:	8017883a 	mov	r11,r16
    7588:	59400017 	ldw	r5,0(r11)
    758c:	31800104 	addi	r6,r6,4
    7590:	5ac00104 	addi	r11,r11,4
    7594:	293fffcc 	andi	r4,r5,65535
    7598:	20c7883a 	add	r3,r4,r3
    759c:	280ed43a 	srli	r7,r5,16
    75a0:	180bd43a 	srai	r5,r3,16
    75a4:	193fffcc 	andi	r4,r3,65535
    75a8:	3947883a 	add	r3,r7,r5
    75ac:	180a943a 	slli	r5,r3,16
    75b0:	1807d43a 	srai	r3,r3,16
    75b4:	2908b03a 	or	r4,r5,r4
    75b8:	313fff15 	stw	r4,-4(r6)
    75bc:	5a3ff236 	bltu	r11,r8,7588 <__mdiff+0x128>
    75c0:	0406303a 	nor	r3,zero,r16
    75c4:	1a07883a 	add	r3,r3,r8
    75c8:	1806d0ba 	srli	r3,r3,2
    75cc:	18c00044 	addi	r3,r3,1
    75d0:	18c7883a 	add	r3,r3,r3
    75d4:	18c7883a 	add	r3,r3,r3
    75d8:	50d5883a 	add	r10,r10,r3
    75dc:	50ffff04 	addi	r3,r10,-4
    75e0:	2000041e 	bne	r4,zero,75f4 <__mdiff+0x194>
    75e4:	18ffff04 	addi	r3,r3,-4
    75e8:	19000017 	ldw	r4,0(r3)
    75ec:	4a7fffc4 	addi	r9,r9,-1
    75f0:	203ffc26 	beq	r4,zero,75e4 <__mdiff+0x184>
    75f4:	12400415 	stw	r9,16(r2)
    75f8:	dfc00517 	ldw	ra,20(sp)
    75fc:	dd000417 	ldw	r20,16(sp)
    7600:	dcc00317 	ldw	r19,12(sp)
    7604:	dc800217 	ldw	r18,8(sp)
    7608:	dc400117 	ldw	r17,4(sp)
    760c:	dc000017 	ldw	r16,0(sp)
    7610:	dec00604 	addi	sp,sp,24
    7614:	f800283a 	ret
    7618:	000b883a 	mov	r5,zero
    761c:	0006b380 	call	6b38 <_Balloc>
    7620:	00c00044 	movi	r3,1
    7624:	10c00415 	stw	r3,16(r2)
    7628:	10000515 	stw	zero,20(r2)
    762c:	003ff206 	br	75f8 <__mdiff+0x198>
    7630:	8023883a 	mov	r17,r16
    7634:	0029883a 	mov	r20,zero
    7638:	4021883a 	mov	r16,r8
    763c:	003fad06 	br	74f4 <__mdiff+0x94>
    7640:	9005883a 	mov	r2,r18
    7644:	94400504 	addi	r17,r18,20
    7648:	9c000504 	addi	r16,r19,20
    764c:	9825883a 	mov	r18,r19
    7650:	05000044 	movi	r20,1
    7654:	1027883a 	mov	r19,r2
    7658:	003fa606 	br	74f4 <__mdiff+0x94>

0000765c <__ulp>:
    765c:	295ffc2c 	andhi	r5,r5,32752
    7660:	00bf3034 	movhi	r2,64704
    7664:	2887883a 	add	r3,r5,r2
    7668:	00c0020e 	bge	zero,r3,7674 <__ulp+0x18>
    766c:	0005883a 	mov	r2,zero
    7670:	f800283a 	ret
    7674:	00c7c83a 	sub	r3,zero,r3
    7678:	1807d53a 	srai	r3,r3,20
    767c:	008004c4 	movi	r2,19
    7680:	10c00b0e 	bge	r2,r3,76b0 <__ulp+0x54>
    7684:	18bffb04 	addi	r2,r3,-20
    7688:	01000784 	movi	r4,30
    768c:	0007883a 	mov	r3,zero
    7690:	20800516 	blt	r4,r2,76a8 <__ulp+0x4c>
    7694:	010007c4 	movi	r4,31
    7698:	2089c83a 	sub	r4,r4,r2
    769c:	00800044 	movi	r2,1
    76a0:	1104983a 	sll	r2,r2,r4
    76a4:	f800283a 	ret
    76a8:	00800044 	movi	r2,1
    76ac:	f800283a 	ret
    76b0:	01400234 	movhi	r5,8
    76b4:	28c7d83a 	sra	r3,r5,r3
    76b8:	0005883a 	mov	r2,zero
    76bc:	f800283a 	ret

000076c0 <__b2d>:
    76c0:	defffa04 	addi	sp,sp,-24
    76c4:	dc000015 	stw	r16,0(sp)
    76c8:	24000417 	ldw	r16,16(r4)
    76cc:	dc400115 	stw	r17,4(sp)
    76d0:	24400504 	addi	r17,r4,20
    76d4:	8421883a 	add	r16,r16,r16
    76d8:	8421883a 	add	r16,r16,r16
    76dc:	8c21883a 	add	r16,r17,r16
    76e0:	dc800215 	stw	r18,8(sp)
    76e4:	84bfff17 	ldw	r18,-4(r16)
    76e8:	dd000415 	stw	r20,16(sp)
    76ec:	dcc00315 	stw	r19,12(sp)
    76f0:	9009883a 	mov	r4,r18
    76f4:	2829883a 	mov	r20,r5
    76f8:	dfc00515 	stw	ra,20(sp)
    76fc:	0006e2c0 	call	6e2c <__hi0bits>
    7700:	00c00804 	movi	r3,32
    7704:	1889c83a 	sub	r4,r3,r2
    7708:	a1000015 	stw	r4,0(r20)
    770c:	01000284 	movi	r4,10
    7710:	84ffff04 	addi	r19,r16,-4
    7714:	20801216 	blt	r4,r2,7760 <__b2d+0xa0>
    7718:	018002c4 	movi	r6,11
    771c:	308dc83a 	sub	r6,r6,r2
    7720:	9186d83a 	srl	r3,r18,r6
    7724:	18cffc34 	orhi	r3,r3,16368
    7728:	8cc0212e 	bgeu	r17,r19,77b0 <__b2d+0xf0>
    772c:	813ffe17 	ldw	r4,-8(r16)
    7730:	218cd83a 	srl	r6,r4,r6
    7734:	10800544 	addi	r2,r2,21
    7738:	9084983a 	sll	r2,r18,r2
    773c:	1184b03a 	or	r2,r2,r6
    7740:	dfc00517 	ldw	ra,20(sp)
    7744:	dd000417 	ldw	r20,16(sp)
    7748:	dcc00317 	ldw	r19,12(sp)
    774c:	dc800217 	ldw	r18,8(sp)
    7750:	dc400117 	ldw	r17,4(sp)
    7754:	dc000017 	ldw	r16,0(sp)
    7758:	dec00604 	addi	sp,sp,24
    775c:	f800283a 	ret
    7760:	8cc00f2e 	bgeu	r17,r19,77a0 <__b2d+0xe0>
    7764:	117ffd44 	addi	r5,r2,-11
    7768:	80bffe17 	ldw	r2,-8(r16)
    776c:	28000e26 	beq	r5,zero,77a8 <__b2d+0xe8>
    7770:	1949c83a 	sub	r4,r3,r5
    7774:	9164983a 	sll	r18,r18,r5
    7778:	1106d83a 	srl	r3,r2,r4
    777c:	81bffe04 	addi	r6,r16,-8
    7780:	948ffc34 	orhi	r18,r18,16368
    7784:	90c6b03a 	or	r3,r18,r3
    7788:	89800e2e 	bgeu	r17,r6,77c4 <__b2d+0x104>
    778c:	81bffd17 	ldw	r6,-12(r16)
    7790:	1144983a 	sll	r2,r2,r5
    7794:	310ad83a 	srl	r5,r6,r4
    7798:	2884b03a 	or	r2,r5,r2
    779c:	003fe806 	br	7740 <__b2d+0x80>
    77a0:	10bffd44 	addi	r2,r2,-11
    77a4:	1000041e 	bne	r2,zero,77b8 <__b2d+0xf8>
    77a8:	90cffc34 	orhi	r3,r18,16368
    77ac:	003fe406 	br	7740 <__b2d+0x80>
    77b0:	000d883a 	mov	r6,zero
    77b4:	003fdf06 	br	7734 <__b2d+0x74>
    77b8:	90a4983a 	sll	r18,r18,r2
    77bc:	0005883a 	mov	r2,zero
    77c0:	003ff906 	br	77a8 <__b2d+0xe8>
    77c4:	1144983a 	sll	r2,r2,r5
    77c8:	003fdd06 	br	7740 <__b2d+0x80>

000077cc <__d2b>:
    77cc:	defff804 	addi	sp,sp,-32
    77d0:	dc000215 	stw	r16,8(sp)
    77d4:	3021883a 	mov	r16,r6
    77d8:	dc400315 	stw	r17,12(sp)
    77dc:	8022907a 	slli	r17,r16,1
    77e0:	dd000615 	stw	r20,24(sp)
    77e4:	2829883a 	mov	r20,r5
    77e8:	01400044 	movi	r5,1
    77ec:	dcc00515 	stw	r19,20(sp)
    77f0:	dc800415 	stw	r18,16(sp)
    77f4:	dfc00715 	stw	ra,28(sp)
    77f8:	3825883a 	mov	r18,r7
    77fc:	8822d57a 	srli	r17,r17,21
    7800:	0006b380 	call	6b38 <_Balloc>
    7804:	1027883a 	mov	r19,r2
    7808:	00800434 	movhi	r2,16
    780c:	10bfffc4 	addi	r2,r2,-1
    7810:	808c703a 	and	r6,r16,r2
    7814:	88000126 	beq	r17,zero,781c <__d2b+0x50>
    7818:	31800434 	orhi	r6,r6,16
    781c:	d9800015 	stw	r6,0(sp)
    7820:	a0002426 	beq	r20,zero,78b4 <__d2b+0xe8>
    7824:	d9000104 	addi	r4,sp,4
    7828:	dd000115 	stw	r20,4(sp)
    782c:	0006e940 	call	6e94 <__lo0bits>
    7830:	d8c00017 	ldw	r3,0(sp)
    7834:	10002f1e 	bne	r2,zero,78f4 <__d2b+0x128>
    7838:	d9000117 	ldw	r4,4(sp)
    783c:	99000515 	stw	r4,20(r19)
    7840:	1821003a 	cmpeq	r16,r3,zero
    7844:	01000084 	movi	r4,2
    7848:	2421c83a 	sub	r16,r4,r16
    784c:	98c00615 	stw	r3,24(r19)
    7850:	9c000415 	stw	r16,16(r19)
    7854:	88001f1e 	bne	r17,zero,78d4 <__d2b+0x108>
    7858:	10bef384 	addi	r2,r2,-1074
    785c:	90800015 	stw	r2,0(r18)
    7860:	00900034 	movhi	r2,16384
    7864:	10bfffc4 	addi	r2,r2,-1
    7868:	8085883a 	add	r2,r16,r2
    786c:	1085883a 	add	r2,r2,r2
    7870:	1085883a 	add	r2,r2,r2
    7874:	9885883a 	add	r2,r19,r2
    7878:	11000517 	ldw	r4,20(r2)
    787c:	8020917a 	slli	r16,r16,5
    7880:	0006e2c0 	call	6e2c <__hi0bits>
    7884:	d8c00817 	ldw	r3,32(sp)
    7888:	8085c83a 	sub	r2,r16,r2
    788c:	18800015 	stw	r2,0(r3)
    7890:	9805883a 	mov	r2,r19
    7894:	dfc00717 	ldw	ra,28(sp)
    7898:	dd000617 	ldw	r20,24(sp)
    789c:	dcc00517 	ldw	r19,20(sp)
    78a0:	dc800417 	ldw	r18,16(sp)
    78a4:	dc400317 	ldw	r17,12(sp)
    78a8:	dc000217 	ldw	r16,8(sp)
    78ac:	dec00804 	addi	sp,sp,32
    78b0:	f800283a 	ret
    78b4:	d809883a 	mov	r4,sp
    78b8:	0006e940 	call	6e94 <__lo0bits>
    78bc:	d8c00017 	ldw	r3,0(sp)
    78c0:	04000044 	movi	r16,1
    78c4:	9c000415 	stw	r16,16(r19)
    78c8:	98c00515 	stw	r3,20(r19)
    78cc:	10800804 	addi	r2,r2,32
    78d0:	883fe126 	beq	r17,zero,7858 <__d2b+0x8c>
    78d4:	00c00d44 	movi	r3,53
    78d8:	8c7ef344 	addi	r17,r17,-1075
    78dc:	88a3883a 	add	r17,r17,r2
    78e0:	1885c83a 	sub	r2,r3,r2
    78e4:	d8c00817 	ldw	r3,32(sp)
    78e8:	94400015 	stw	r17,0(r18)
    78ec:	18800015 	stw	r2,0(r3)
    78f0:	003fe706 	br	7890 <__d2b+0xc4>
    78f4:	01000804 	movi	r4,32
    78f8:	2089c83a 	sub	r4,r4,r2
    78fc:	1908983a 	sll	r4,r3,r4
    7900:	d9400117 	ldw	r5,4(sp)
    7904:	1886d83a 	srl	r3,r3,r2
    7908:	2148b03a 	or	r4,r4,r5
    790c:	99000515 	stw	r4,20(r19)
    7910:	d8c00015 	stw	r3,0(sp)
    7914:	003fca06 	br	7840 <__d2b+0x74>

00007918 <__ratio>:
    7918:	defff904 	addi	sp,sp,-28
    791c:	dc400315 	stw	r17,12(sp)
    7920:	2823883a 	mov	r17,r5
    7924:	d9400104 	addi	r5,sp,4
    7928:	dfc00615 	stw	ra,24(sp)
    792c:	dcc00515 	stw	r19,20(sp)
    7930:	dc800415 	stw	r18,16(sp)
    7934:	2027883a 	mov	r19,r4
    7938:	dc000215 	stw	r16,8(sp)
    793c:	00076c00 	call	76c0 <__b2d>
    7940:	d80b883a 	mov	r5,sp
    7944:	8809883a 	mov	r4,r17
    7948:	1025883a 	mov	r18,r2
    794c:	1821883a 	mov	r16,r3
    7950:	00076c00 	call	76c0 <__b2d>
    7954:	8a000417 	ldw	r8,16(r17)
    7958:	99000417 	ldw	r4,16(r19)
    795c:	d9400117 	ldw	r5,4(sp)
    7960:	2209c83a 	sub	r4,r4,r8
    7964:	2010917a 	slli	r8,r4,5
    7968:	d9000017 	ldw	r4,0(sp)
    796c:	2909c83a 	sub	r4,r5,r4
    7970:	4109883a 	add	r4,r8,r4
    7974:	01000e0e 	bge	zero,r4,79b0 <__ratio+0x98>
    7978:	2008953a 	slli	r4,r4,20
    797c:	2421883a 	add	r16,r4,r16
    7980:	100d883a 	mov	r6,r2
    7984:	180f883a 	mov	r7,r3
    7988:	9009883a 	mov	r4,r18
    798c:	800b883a 	mov	r5,r16
    7990:	000b5fc0 	call	b5fc <__divdf3>
    7994:	dfc00617 	ldw	ra,24(sp)
    7998:	dcc00517 	ldw	r19,20(sp)
    799c:	dc800417 	ldw	r18,16(sp)
    79a0:	dc400317 	ldw	r17,12(sp)
    79a4:	dc000217 	ldw	r16,8(sp)
    79a8:	dec00704 	addi	sp,sp,28
    79ac:	f800283a 	ret
    79b0:	2008953a 	slli	r4,r4,20
    79b4:	1907c83a 	sub	r3,r3,r4
    79b8:	003ff106 	br	7980 <__ratio+0x68>

000079bc <_mprec_log10>:
    79bc:	defffe04 	addi	sp,sp,-8
    79c0:	dc000015 	stw	r16,0(sp)
    79c4:	dfc00115 	stw	ra,4(sp)
    79c8:	008005c4 	movi	r2,23
    79cc:	2021883a 	mov	r16,r4
    79d0:	11000d0e 	bge	r2,r4,7a08 <_mprec_log10+0x4c>
    79d4:	0005883a 	mov	r2,zero
    79d8:	00cffc34 	movhi	r3,16368
    79dc:	843fffc4 	addi	r16,r16,-1
    79e0:	000d883a 	mov	r6,zero
    79e4:	01d00934 	movhi	r7,16420
    79e8:	1009883a 	mov	r4,r2
    79ec:	180b883a 	mov	r5,r3
    79f0:	000c13c0 	call	c13c <__muldf3>
    79f4:	803ff91e 	bne	r16,zero,79dc <_mprec_log10+0x20>
    79f8:	dfc00117 	ldw	ra,4(sp)
    79fc:	dc000017 	ldw	r16,0(sp)
    7a00:	dec00204 	addi	sp,sp,8
    7a04:	f800283a 	ret
    7a08:	202090fa 	slli	r16,r4,3
    7a0c:	00800074 	movhi	r2,1
    7a10:	109f7404 	addi	r2,r2,32208
    7a14:	1421883a 	add	r16,r2,r16
    7a18:	80800017 	ldw	r2,0(r16)
    7a1c:	80c00117 	ldw	r3,4(r16)
    7a20:	dfc00117 	ldw	ra,4(sp)
    7a24:	dc000017 	ldw	r16,0(sp)
    7a28:	dec00204 	addi	sp,sp,8
    7a2c:	f800283a 	ret

00007a30 <__copybits>:
    7a30:	297fffc4 	addi	r5,r5,-1
    7a34:	280fd17a 	srai	r7,r5,5
    7a38:	30c00417 	ldw	r3,16(r6)
    7a3c:	30800504 	addi	r2,r6,20
    7a40:	39c00044 	addi	r7,r7,1
    7a44:	18c7883a 	add	r3,r3,r3
    7a48:	39cf883a 	add	r7,r7,r7
    7a4c:	18c7883a 	add	r3,r3,r3
    7a50:	39cf883a 	add	r7,r7,r7
    7a54:	10c7883a 	add	r3,r2,r3
    7a58:	21cf883a 	add	r7,r4,r7
    7a5c:	10c00d2e 	bgeu	r2,r3,7a94 <__copybits+0x64>
    7a60:	200b883a 	mov	r5,r4
    7a64:	12000017 	ldw	r8,0(r2)
    7a68:	29400104 	addi	r5,r5,4
    7a6c:	10800104 	addi	r2,r2,4
    7a70:	2a3fff15 	stw	r8,-4(r5)
    7a74:	10fffb36 	bltu	r2,r3,7a64 <__copybits+0x34>
    7a78:	1985c83a 	sub	r2,r3,r6
    7a7c:	10bffac4 	addi	r2,r2,-21
    7a80:	1004d0ba 	srli	r2,r2,2
    7a84:	10800044 	addi	r2,r2,1
    7a88:	1085883a 	add	r2,r2,r2
    7a8c:	1085883a 	add	r2,r2,r2
    7a90:	2089883a 	add	r4,r4,r2
    7a94:	21c0032e 	bgeu	r4,r7,7aa4 <__copybits+0x74>
    7a98:	20000015 	stw	zero,0(r4)
    7a9c:	21000104 	addi	r4,r4,4
    7aa0:	21fffd36 	bltu	r4,r7,7a98 <__copybits+0x68>
    7aa4:	f800283a 	ret

00007aa8 <__any_on>:
    7aa8:	20c00417 	ldw	r3,16(r4)
    7aac:	2805d17a 	srai	r2,r5,5
    7ab0:	21000504 	addi	r4,r4,20
    7ab4:	18800d0e 	bge	r3,r2,7aec <__any_on+0x44>
    7ab8:	18c7883a 	add	r3,r3,r3
    7abc:	18c7883a 	add	r3,r3,r3
    7ac0:	20c7883a 	add	r3,r4,r3
    7ac4:	20c0192e 	bgeu	r4,r3,7b2c <__any_on+0x84>
    7ac8:	18bfff17 	ldw	r2,-4(r3)
    7acc:	18ffff04 	addi	r3,r3,-4
    7ad0:	1000041e 	bne	r2,zero,7ae4 <__any_on+0x3c>
    7ad4:	20c0142e 	bgeu	r4,r3,7b28 <__any_on+0x80>
    7ad8:	18ffff04 	addi	r3,r3,-4
    7adc:	19400017 	ldw	r5,0(r3)
    7ae0:	283ffc26 	beq	r5,zero,7ad4 <__any_on+0x2c>
    7ae4:	00800044 	movi	r2,1
    7ae8:	f800283a 	ret
    7aec:	10c00a0e 	bge	r2,r3,7b18 <__any_on+0x70>
    7af0:	1085883a 	add	r2,r2,r2
    7af4:	1085883a 	add	r2,r2,r2
    7af8:	294007cc 	andi	r5,r5,31
    7afc:	2087883a 	add	r3,r4,r2
    7b00:	283ff026 	beq	r5,zero,7ac4 <__any_on+0x1c>
    7b04:	19800017 	ldw	r6,0(r3)
    7b08:	3144d83a 	srl	r2,r6,r5
    7b0c:	114a983a 	sll	r5,r2,r5
    7b10:	317ff41e 	bne	r6,r5,7ae4 <__any_on+0x3c>
    7b14:	003feb06 	br	7ac4 <__any_on+0x1c>
    7b18:	1085883a 	add	r2,r2,r2
    7b1c:	1085883a 	add	r2,r2,r2
    7b20:	2087883a 	add	r3,r4,r2
    7b24:	003fe706 	br	7ac4 <__any_on+0x1c>
    7b28:	f800283a 	ret
    7b2c:	0005883a 	mov	r2,zero
    7b30:	f800283a 	ret

00007b34 <_realloc_r>:
    7b34:	defff604 	addi	sp,sp,-40
    7b38:	dc800215 	stw	r18,8(sp)
    7b3c:	dfc00915 	stw	ra,36(sp)
    7b40:	df000815 	stw	fp,32(sp)
    7b44:	ddc00715 	stw	r23,28(sp)
    7b48:	dd800615 	stw	r22,24(sp)
    7b4c:	dd400515 	stw	r21,20(sp)
    7b50:	dd000415 	stw	r20,16(sp)
    7b54:	dcc00315 	stw	r19,12(sp)
    7b58:	dc400115 	stw	r17,4(sp)
    7b5c:	dc000015 	stw	r16,0(sp)
    7b60:	3025883a 	mov	r18,r6
    7b64:	2800b726 	beq	r5,zero,7e44 <_realloc_r+0x310>
    7b68:	282b883a 	mov	r21,r5
    7b6c:	2029883a 	mov	r20,r4
    7b70:	000de180 	call	de18 <__malloc_lock>
    7b74:	a8bfff17 	ldw	r2,-4(r21)
    7b78:	043fff04 	movi	r16,-4
    7b7c:	90c002c4 	addi	r3,r18,11
    7b80:	01000584 	movi	r4,22
    7b84:	acfffe04 	addi	r19,r21,-8
    7b88:	1420703a 	and	r16,r2,r16
    7b8c:	20c0332e 	bgeu	r4,r3,7c5c <_realloc_r+0x128>
    7b90:	047ffe04 	movi	r17,-8
    7b94:	1c62703a 	and	r17,r3,r17
    7b98:	8807883a 	mov	r3,r17
    7b9c:	88005816 	blt	r17,zero,7d00 <_realloc_r+0x1cc>
    7ba0:	8c805736 	bltu	r17,r18,7d00 <_realloc_r+0x1cc>
    7ba4:	80c0300e 	bge	r16,r3,7c68 <_realloc_r+0x134>
    7ba8:	070000b4 	movhi	fp,2
    7bac:	e7204404 	addi	fp,fp,-32496
    7bb0:	e1c00217 	ldw	r7,8(fp)
    7bb4:	9c09883a 	add	r4,r19,r16
    7bb8:	22000117 	ldw	r8,4(r4)
    7bbc:	21c06326 	beq	r4,r7,7d4c <_realloc_r+0x218>
    7bc0:	017fff84 	movi	r5,-2
    7bc4:	414a703a 	and	r5,r8,r5
    7bc8:	214b883a 	add	r5,r4,r5
    7bcc:	29800117 	ldw	r6,4(r5)
    7bd0:	3180004c 	andi	r6,r6,1
    7bd4:	30003f26 	beq	r6,zero,7cd4 <_realloc_r+0x1a0>
    7bd8:	1080004c 	andi	r2,r2,1
    7bdc:	10008326 	beq	r2,zero,7dec <_realloc_r+0x2b8>
    7be0:	900b883a 	mov	r5,r18
    7be4:	a009883a 	mov	r4,r20
    7be8:	0000c4c0 	call	c4c <_malloc_r>
    7bec:	1025883a 	mov	r18,r2
    7bf0:	10011e26 	beq	r2,zero,806c <_realloc_r+0x538>
    7bf4:	a93fff17 	ldw	r4,-4(r21)
    7bf8:	10fffe04 	addi	r3,r2,-8
    7bfc:	00bfff84 	movi	r2,-2
    7c00:	2084703a 	and	r2,r4,r2
    7c04:	9885883a 	add	r2,r19,r2
    7c08:	1880ee26 	beq	r3,r2,7fc4 <_realloc_r+0x490>
    7c0c:	81bfff04 	addi	r6,r16,-4
    7c10:	00800904 	movi	r2,36
    7c14:	1180b836 	bltu	r2,r6,7ef8 <_realloc_r+0x3c4>
    7c18:	00c004c4 	movi	r3,19
    7c1c:	19809636 	bltu	r3,r6,7e78 <_realloc_r+0x344>
    7c20:	9005883a 	mov	r2,r18
    7c24:	a807883a 	mov	r3,r21
    7c28:	19000017 	ldw	r4,0(r3)
    7c2c:	11000015 	stw	r4,0(r2)
    7c30:	19000117 	ldw	r4,4(r3)
    7c34:	11000115 	stw	r4,4(r2)
    7c38:	18c00217 	ldw	r3,8(r3)
    7c3c:	10c00215 	stw	r3,8(r2)
    7c40:	a80b883a 	mov	r5,r21
    7c44:	a009883a 	mov	r4,r20
    7c48:	0005a9c0 	call	5a9c <_free_r>
    7c4c:	a009883a 	mov	r4,r20
    7c50:	000df380 	call	df38 <__malloc_unlock>
    7c54:	9005883a 	mov	r2,r18
    7c58:	00001206 	br	7ca4 <_realloc_r+0x170>
    7c5c:	00c00404 	movi	r3,16
    7c60:	1823883a 	mov	r17,r3
    7c64:	003fce06 	br	7ba0 <_realloc_r+0x6c>
    7c68:	a825883a 	mov	r18,r21
    7c6c:	8445c83a 	sub	r2,r16,r17
    7c70:	00c003c4 	movi	r3,15
    7c74:	18802636 	bltu	r3,r2,7d10 <_realloc_r+0x1dc>
    7c78:	99800117 	ldw	r6,4(r19)
    7c7c:	9c07883a 	add	r3,r19,r16
    7c80:	3180004c 	andi	r6,r6,1
    7c84:	3420b03a 	or	r16,r6,r16
    7c88:	9c000115 	stw	r16,4(r19)
    7c8c:	18800117 	ldw	r2,4(r3)
    7c90:	10800054 	ori	r2,r2,1
    7c94:	18800115 	stw	r2,4(r3)
    7c98:	a009883a 	mov	r4,r20
    7c9c:	000df380 	call	df38 <__malloc_unlock>
    7ca0:	9005883a 	mov	r2,r18
    7ca4:	dfc00917 	ldw	ra,36(sp)
    7ca8:	df000817 	ldw	fp,32(sp)
    7cac:	ddc00717 	ldw	r23,28(sp)
    7cb0:	dd800617 	ldw	r22,24(sp)
    7cb4:	dd400517 	ldw	r21,20(sp)
    7cb8:	dd000417 	ldw	r20,16(sp)
    7cbc:	dcc00317 	ldw	r19,12(sp)
    7cc0:	dc800217 	ldw	r18,8(sp)
    7cc4:	dc400117 	ldw	r17,4(sp)
    7cc8:	dc000017 	ldw	r16,0(sp)
    7ccc:	dec00a04 	addi	sp,sp,40
    7cd0:	f800283a 	ret
    7cd4:	017fff04 	movi	r5,-4
    7cd8:	414a703a 	and	r5,r8,r5
    7cdc:	814d883a 	add	r6,r16,r5
    7ce0:	30c01f16 	blt	r6,r3,7d60 <_realloc_r+0x22c>
    7ce4:	20800317 	ldw	r2,12(r4)
    7ce8:	20c00217 	ldw	r3,8(r4)
    7cec:	a825883a 	mov	r18,r21
    7cf0:	3021883a 	mov	r16,r6
    7cf4:	18800315 	stw	r2,12(r3)
    7cf8:	10c00215 	stw	r3,8(r2)
    7cfc:	003fdb06 	br	7c6c <_realloc_r+0x138>
    7d00:	00800304 	movi	r2,12
    7d04:	a0800015 	stw	r2,0(r20)
    7d08:	0005883a 	mov	r2,zero
    7d0c:	003fe506 	br	7ca4 <_realloc_r+0x170>
    7d10:	98c00117 	ldw	r3,4(r19)
    7d14:	9c4b883a 	add	r5,r19,r17
    7d18:	11000054 	ori	r4,r2,1
    7d1c:	18c0004c 	andi	r3,r3,1
    7d20:	1c62b03a 	or	r17,r3,r17
    7d24:	9c400115 	stw	r17,4(r19)
    7d28:	29000115 	stw	r4,4(r5)
    7d2c:	2885883a 	add	r2,r5,r2
    7d30:	10c00117 	ldw	r3,4(r2)
    7d34:	29400204 	addi	r5,r5,8
    7d38:	a009883a 	mov	r4,r20
    7d3c:	18c00054 	ori	r3,r3,1
    7d40:	10c00115 	stw	r3,4(r2)
    7d44:	0005a9c0 	call	5a9c <_free_r>
    7d48:	003fd306 	br	7c98 <_realloc_r+0x164>
    7d4c:	017fff04 	movi	r5,-4
    7d50:	414a703a 	and	r5,r8,r5
    7d54:	89800404 	addi	r6,r17,16
    7d58:	8151883a 	add	r8,r16,r5
    7d5c:	4180590e 	bge	r8,r6,7ec4 <_realloc_r+0x390>
    7d60:	1080004c 	andi	r2,r2,1
    7d64:	103f9e1e 	bne	r2,zero,7be0 <_realloc_r+0xac>
    7d68:	adbffe17 	ldw	r22,-8(r21)
    7d6c:	00bfff04 	movi	r2,-4
    7d70:	9dadc83a 	sub	r22,r19,r22
    7d74:	b1800117 	ldw	r6,4(r22)
    7d78:	3084703a 	and	r2,r6,r2
    7d7c:	20002026 	beq	r4,zero,7e00 <_realloc_r+0x2cc>
    7d80:	80af883a 	add	r23,r16,r2
    7d84:	b96f883a 	add	r23,r23,r5
    7d88:	21c05f26 	beq	r4,r7,7f08 <_realloc_r+0x3d4>
    7d8c:	b8c01c16 	blt	r23,r3,7e00 <_realloc_r+0x2cc>
    7d90:	20800317 	ldw	r2,12(r4)
    7d94:	20c00217 	ldw	r3,8(r4)
    7d98:	81bfff04 	addi	r6,r16,-4
    7d9c:	01000904 	movi	r4,36
    7da0:	18800315 	stw	r2,12(r3)
    7da4:	10c00215 	stw	r3,8(r2)
    7da8:	b0c00217 	ldw	r3,8(r22)
    7dac:	b0800317 	ldw	r2,12(r22)
    7db0:	b4800204 	addi	r18,r22,8
    7db4:	18800315 	stw	r2,12(r3)
    7db8:	10c00215 	stw	r3,8(r2)
    7dbc:	21801b36 	bltu	r4,r6,7e2c <_realloc_r+0x2f8>
    7dc0:	008004c4 	movi	r2,19
    7dc4:	1180352e 	bgeu	r2,r6,7e9c <_realloc_r+0x368>
    7dc8:	a8800017 	ldw	r2,0(r21)
    7dcc:	b0800215 	stw	r2,8(r22)
    7dd0:	a8800117 	ldw	r2,4(r21)
    7dd4:	b0800315 	stw	r2,12(r22)
    7dd8:	008006c4 	movi	r2,27
    7ddc:	11807f36 	bltu	r2,r6,7fdc <_realloc_r+0x4a8>
    7de0:	b0800404 	addi	r2,r22,16
    7de4:	ad400204 	addi	r21,r21,8
    7de8:	00002d06 	br	7ea0 <_realloc_r+0x36c>
    7dec:	adbffe17 	ldw	r22,-8(r21)
    7df0:	00bfff04 	movi	r2,-4
    7df4:	9dadc83a 	sub	r22,r19,r22
    7df8:	b1000117 	ldw	r4,4(r22)
    7dfc:	2084703a 	and	r2,r4,r2
    7e00:	b03f7726 	beq	r22,zero,7be0 <_realloc_r+0xac>
    7e04:	80af883a 	add	r23,r16,r2
    7e08:	b8ff7516 	blt	r23,r3,7be0 <_realloc_r+0xac>
    7e0c:	b0800317 	ldw	r2,12(r22)
    7e10:	b0c00217 	ldw	r3,8(r22)
    7e14:	81bfff04 	addi	r6,r16,-4
    7e18:	01000904 	movi	r4,36
    7e1c:	18800315 	stw	r2,12(r3)
    7e20:	10c00215 	stw	r3,8(r2)
    7e24:	b4800204 	addi	r18,r22,8
    7e28:	21bfe52e 	bgeu	r4,r6,7dc0 <_realloc_r+0x28c>
    7e2c:	a80b883a 	mov	r5,r21
    7e30:	9009883a 	mov	r4,r18
    7e34:	00068b40 	call	68b4 <memmove>
    7e38:	b821883a 	mov	r16,r23
    7e3c:	b027883a 	mov	r19,r22
    7e40:	003f8a06 	br	7c6c <_realloc_r+0x138>
    7e44:	300b883a 	mov	r5,r6
    7e48:	dfc00917 	ldw	ra,36(sp)
    7e4c:	df000817 	ldw	fp,32(sp)
    7e50:	ddc00717 	ldw	r23,28(sp)
    7e54:	dd800617 	ldw	r22,24(sp)
    7e58:	dd400517 	ldw	r21,20(sp)
    7e5c:	dd000417 	ldw	r20,16(sp)
    7e60:	dcc00317 	ldw	r19,12(sp)
    7e64:	dc800217 	ldw	r18,8(sp)
    7e68:	dc400117 	ldw	r17,4(sp)
    7e6c:	dc000017 	ldw	r16,0(sp)
    7e70:	dec00a04 	addi	sp,sp,40
    7e74:	0000c4c1 	jmpi	c4c <_malloc_r>
    7e78:	a8c00017 	ldw	r3,0(r21)
    7e7c:	90c00015 	stw	r3,0(r18)
    7e80:	a8c00117 	ldw	r3,4(r21)
    7e84:	90c00115 	stw	r3,4(r18)
    7e88:	00c006c4 	movi	r3,27
    7e8c:	19804536 	bltu	r3,r6,7fa4 <_realloc_r+0x470>
    7e90:	90800204 	addi	r2,r18,8
    7e94:	a8c00204 	addi	r3,r21,8
    7e98:	003f6306 	br	7c28 <_realloc_r+0xf4>
    7e9c:	9005883a 	mov	r2,r18
    7ea0:	a8c00017 	ldw	r3,0(r21)
    7ea4:	b821883a 	mov	r16,r23
    7ea8:	b027883a 	mov	r19,r22
    7eac:	10c00015 	stw	r3,0(r2)
    7eb0:	a8c00117 	ldw	r3,4(r21)
    7eb4:	10c00115 	stw	r3,4(r2)
    7eb8:	a8c00217 	ldw	r3,8(r21)
    7ebc:	10c00215 	stw	r3,8(r2)
    7ec0:	003f6a06 	br	7c6c <_realloc_r+0x138>
    7ec4:	9c67883a 	add	r19,r19,r17
    7ec8:	4445c83a 	sub	r2,r8,r17
    7ecc:	e4c00215 	stw	r19,8(fp)
    7ed0:	10800054 	ori	r2,r2,1
    7ed4:	98800115 	stw	r2,4(r19)
    7ed8:	a8bfff17 	ldw	r2,-4(r21)
    7edc:	a009883a 	mov	r4,r20
    7ee0:	1080004c 	andi	r2,r2,1
    7ee4:	1462b03a 	or	r17,r2,r17
    7ee8:	ac7fff15 	stw	r17,-4(r21)
    7eec:	000df380 	call	df38 <__malloc_unlock>
    7ef0:	a805883a 	mov	r2,r21
    7ef4:	003f6b06 	br	7ca4 <_realloc_r+0x170>
    7ef8:	a80b883a 	mov	r5,r21
    7efc:	9009883a 	mov	r4,r18
    7f00:	00068b40 	call	68b4 <memmove>
    7f04:	003f4e06 	br	7c40 <_realloc_r+0x10c>
    7f08:	89000404 	addi	r4,r17,16
    7f0c:	b93fbc16 	blt	r23,r4,7e00 <_realloc_r+0x2cc>
    7f10:	b0800317 	ldw	r2,12(r22)
    7f14:	b0c00217 	ldw	r3,8(r22)
    7f18:	81bfff04 	addi	r6,r16,-4
    7f1c:	01000904 	movi	r4,36
    7f20:	18800315 	stw	r2,12(r3)
    7f24:	10c00215 	stw	r3,8(r2)
    7f28:	b4800204 	addi	r18,r22,8
    7f2c:	21804336 	bltu	r4,r6,803c <_realloc_r+0x508>
    7f30:	008004c4 	movi	r2,19
    7f34:	11803f2e 	bgeu	r2,r6,8034 <_realloc_r+0x500>
    7f38:	a8800017 	ldw	r2,0(r21)
    7f3c:	b0800215 	stw	r2,8(r22)
    7f40:	a8800117 	ldw	r2,4(r21)
    7f44:	b0800315 	stw	r2,12(r22)
    7f48:	008006c4 	movi	r2,27
    7f4c:	11803f36 	bltu	r2,r6,804c <_realloc_r+0x518>
    7f50:	b0800404 	addi	r2,r22,16
    7f54:	ad400204 	addi	r21,r21,8
    7f58:	a8c00017 	ldw	r3,0(r21)
    7f5c:	10c00015 	stw	r3,0(r2)
    7f60:	a8c00117 	ldw	r3,4(r21)
    7f64:	10c00115 	stw	r3,4(r2)
    7f68:	a8c00217 	ldw	r3,8(r21)
    7f6c:	10c00215 	stw	r3,8(r2)
    7f70:	b447883a 	add	r3,r22,r17
    7f74:	bc45c83a 	sub	r2,r23,r17
    7f78:	e0c00215 	stw	r3,8(fp)
    7f7c:	10800054 	ori	r2,r2,1
    7f80:	18800115 	stw	r2,4(r3)
    7f84:	b0800117 	ldw	r2,4(r22)
    7f88:	a009883a 	mov	r4,r20
    7f8c:	1080004c 	andi	r2,r2,1
    7f90:	1462b03a 	or	r17,r2,r17
    7f94:	b4400115 	stw	r17,4(r22)
    7f98:	000df380 	call	df38 <__malloc_unlock>
    7f9c:	9005883a 	mov	r2,r18
    7fa0:	003f4006 	br	7ca4 <_realloc_r+0x170>
    7fa4:	a8c00217 	ldw	r3,8(r21)
    7fa8:	90c00215 	stw	r3,8(r18)
    7fac:	a8c00317 	ldw	r3,12(r21)
    7fb0:	90c00315 	stw	r3,12(r18)
    7fb4:	30801126 	beq	r6,r2,7ffc <_realloc_r+0x4c8>
    7fb8:	90800404 	addi	r2,r18,16
    7fbc:	a8c00404 	addi	r3,r21,16
    7fc0:	003f1906 	br	7c28 <_realloc_r+0xf4>
    7fc4:	90ffff17 	ldw	r3,-4(r18)
    7fc8:	00bfff04 	movi	r2,-4
    7fcc:	a825883a 	mov	r18,r21
    7fd0:	1884703a 	and	r2,r3,r2
    7fd4:	80a1883a 	add	r16,r16,r2
    7fd8:	003f2406 	br	7c6c <_realloc_r+0x138>
    7fdc:	a8800217 	ldw	r2,8(r21)
    7fe0:	b0800415 	stw	r2,16(r22)
    7fe4:	a8800317 	ldw	r2,12(r21)
    7fe8:	b0800515 	stw	r2,20(r22)
    7fec:	31000a26 	beq	r6,r4,8018 <_realloc_r+0x4e4>
    7ff0:	b0800604 	addi	r2,r22,24
    7ff4:	ad400404 	addi	r21,r21,16
    7ff8:	003fa906 	br	7ea0 <_realloc_r+0x36c>
    7ffc:	a9000417 	ldw	r4,16(r21)
    8000:	90800604 	addi	r2,r18,24
    8004:	a8c00604 	addi	r3,r21,24
    8008:	91000415 	stw	r4,16(r18)
    800c:	a9000517 	ldw	r4,20(r21)
    8010:	91000515 	stw	r4,20(r18)
    8014:	003f0406 	br	7c28 <_realloc_r+0xf4>
    8018:	a8c00417 	ldw	r3,16(r21)
    801c:	ad400604 	addi	r21,r21,24
    8020:	b0800804 	addi	r2,r22,32
    8024:	b0c00615 	stw	r3,24(r22)
    8028:	a8ffff17 	ldw	r3,-4(r21)
    802c:	b0c00715 	stw	r3,28(r22)
    8030:	003f9b06 	br	7ea0 <_realloc_r+0x36c>
    8034:	9005883a 	mov	r2,r18
    8038:	003fc706 	br	7f58 <_realloc_r+0x424>
    803c:	a80b883a 	mov	r5,r21
    8040:	9009883a 	mov	r4,r18
    8044:	00068b40 	call	68b4 <memmove>
    8048:	003fc906 	br	7f70 <_realloc_r+0x43c>
    804c:	a8800217 	ldw	r2,8(r21)
    8050:	b0800415 	stw	r2,16(r22)
    8054:	a8800317 	ldw	r2,12(r21)
    8058:	b0800515 	stw	r2,20(r22)
    805c:	31000726 	beq	r6,r4,807c <_realloc_r+0x548>
    8060:	b0800604 	addi	r2,r22,24
    8064:	ad400404 	addi	r21,r21,16
    8068:	003fbb06 	br	7f58 <_realloc_r+0x424>
    806c:	a009883a 	mov	r4,r20
    8070:	000df380 	call	df38 <__malloc_unlock>
    8074:	0005883a 	mov	r2,zero
    8078:	003f0a06 	br	7ca4 <_realloc_r+0x170>
    807c:	a8c00417 	ldw	r3,16(r21)
    8080:	ad400604 	addi	r21,r21,24
    8084:	b0800804 	addi	r2,r22,32
    8088:	b0c00615 	stw	r3,24(r22)
    808c:	a8ffff17 	ldw	r3,-4(r21)
    8090:	b0c00715 	stw	r3,28(r22)
    8094:	003fb006 	br	7f58 <_realloc_r+0x424>

00008098 <__fpclassifyd>:
    8098:	00a00034 	movhi	r2,32768
    809c:	10bfffc4 	addi	r2,r2,-1
    80a0:	2884703a 	and	r2,r5,r2
    80a4:	10000726 	beq	r2,zero,80c4 <__fpclassifyd+0x2c>
    80a8:	00fffc34 	movhi	r3,65520
    80ac:	019ff834 	movhi	r6,32736
    80b0:	28c7883a 	add	r3,r5,r3
    80b4:	31bfffc4 	addi	r6,r6,-1
    80b8:	30c00536 	bltu	r6,r3,80d0 <__fpclassifyd+0x38>
    80bc:	00800104 	movi	r2,4
    80c0:	f800283a 	ret
    80c4:	2000021e 	bne	r4,zero,80d0 <__fpclassifyd+0x38>
    80c8:	00800084 	movi	r2,2
    80cc:	f800283a 	ret
    80d0:	00dffc34 	movhi	r3,32752
    80d4:	019ff834 	movhi	r6,32736
    80d8:	28cb883a 	add	r5,r5,r3
    80dc:	31bfffc4 	addi	r6,r6,-1
    80e0:	317ff62e 	bgeu	r6,r5,80bc <__fpclassifyd+0x24>
    80e4:	01400434 	movhi	r5,16
    80e8:	297fffc4 	addi	r5,r5,-1
    80ec:	28800236 	bltu	r5,r2,80f8 <__fpclassifyd+0x60>
    80f0:	008000c4 	movi	r2,3
    80f4:	f800283a 	ret
    80f8:	10c00226 	beq	r2,r3,8104 <__fpclassifyd+0x6c>
    80fc:	0005883a 	mov	r2,zero
    8100:	f800283a 	ret
    8104:	2005003a 	cmpeq	r2,r4,zero
    8108:	f800283a 	ret

0000810c <__sread>:
    810c:	defffe04 	addi	sp,sp,-8
    8110:	dc000015 	stw	r16,0(sp)
    8114:	2821883a 	mov	r16,r5
    8118:	2940038f 	ldh	r5,14(r5)
    811c:	dfc00115 	stw	ra,4(sp)
    8120:	0009f000 	call	9f00 <_read_r>
    8124:	10000716 	blt	r2,zero,8144 <__sread+0x38>
    8128:	80c01417 	ldw	r3,80(r16)
    812c:	1887883a 	add	r3,r3,r2
    8130:	80c01415 	stw	r3,80(r16)
    8134:	dfc00117 	ldw	ra,4(sp)
    8138:	dc000017 	ldw	r16,0(sp)
    813c:	dec00204 	addi	sp,sp,8
    8140:	f800283a 	ret
    8144:	80c0030b 	ldhu	r3,12(r16)
    8148:	18fbffcc 	andi	r3,r3,61439
    814c:	80c0030d 	sth	r3,12(r16)
    8150:	dfc00117 	ldw	ra,4(sp)
    8154:	dc000017 	ldw	r16,0(sp)
    8158:	dec00204 	addi	sp,sp,8
    815c:	f800283a 	ret

00008160 <__seofread>:
    8160:	0005883a 	mov	r2,zero
    8164:	f800283a 	ret

00008168 <__swrite>:
    8168:	2880030b 	ldhu	r2,12(r5)
    816c:	defffb04 	addi	sp,sp,-20
    8170:	dcc00315 	stw	r19,12(sp)
    8174:	dc800215 	stw	r18,8(sp)
    8178:	dc400115 	stw	r17,4(sp)
    817c:	dc000015 	stw	r16,0(sp)
    8180:	dfc00415 	stw	ra,16(sp)
    8184:	10c0400c 	andi	r3,r2,256
    8188:	2821883a 	mov	r16,r5
    818c:	2023883a 	mov	r17,r4
    8190:	3025883a 	mov	r18,r6
    8194:	3827883a 	mov	r19,r7
    8198:	18000526 	beq	r3,zero,81b0 <__swrite+0x48>
    819c:	2940038f 	ldh	r5,14(r5)
    81a0:	01c00084 	movi	r7,2
    81a4:	000d883a 	mov	r6,zero
    81a8:	0009ea00 	call	9ea0 <_lseek_r>
    81ac:	8080030b 	ldhu	r2,12(r16)
    81b0:	8140038f 	ldh	r5,14(r16)
    81b4:	10bbffcc 	andi	r2,r2,61439
    81b8:	980f883a 	mov	r7,r19
    81bc:	900d883a 	mov	r6,r18
    81c0:	8809883a 	mov	r4,r17
    81c4:	8080030d 	sth	r2,12(r16)
    81c8:	dfc00417 	ldw	ra,16(sp)
    81cc:	dcc00317 	ldw	r19,12(sp)
    81d0:	dc800217 	ldw	r18,8(sp)
    81d4:	dc400117 	ldw	r17,4(sp)
    81d8:	dc000017 	ldw	r16,0(sp)
    81dc:	dec00504 	addi	sp,sp,20
    81e0:	000996c1 	jmpi	996c <_write_r>

000081e4 <__sseek>:
    81e4:	defffe04 	addi	sp,sp,-8
    81e8:	dc000015 	stw	r16,0(sp)
    81ec:	2821883a 	mov	r16,r5
    81f0:	2940038f 	ldh	r5,14(r5)
    81f4:	dfc00115 	stw	ra,4(sp)
    81f8:	0009ea00 	call	9ea0 <_lseek_r>
    81fc:	00ffffc4 	movi	r3,-1
    8200:	10c00826 	beq	r2,r3,8224 <__sseek+0x40>
    8204:	80c0030b 	ldhu	r3,12(r16)
    8208:	80801415 	stw	r2,80(r16)
    820c:	18c40014 	ori	r3,r3,4096
    8210:	80c0030d 	sth	r3,12(r16)
    8214:	dfc00117 	ldw	ra,4(sp)
    8218:	dc000017 	ldw	r16,0(sp)
    821c:	dec00204 	addi	sp,sp,8
    8220:	f800283a 	ret
    8224:	80c0030b 	ldhu	r3,12(r16)
    8228:	18fbffcc 	andi	r3,r3,61439
    822c:	80c0030d 	sth	r3,12(r16)
    8230:	dfc00117 	ldw	ra,4(sp)
    8234:	dc000017 	ldw	r16,0(sp)
    8238:	dec00204 	addi	sp,sp,8
    823c:	f800283a 	ret

00008240 <__sclose>:
    8240:	2940038f 	ldh	r5,14(r5)
    8244:	00099cc1 	jmpi	99cc <_close_r>

00008248 <strcmp>:
    8248:	2144b03a 	or	r2,r4,r5
    824c:	108000cc 	andi	r2,r2,3
    8250:	1000171e 	bne	r2,zero,82b0 <strcmp+0x68>
    8254:	20800017 	ldw	r2,0(r4)
    8258:	28c00017 	ldw	r3,0(r5)
    825c:	10c0141e 	bne	r2,r3,82b0 <strcmp+0x68>
    8260:	027fbff4 	movhi	r9,65279
    8264:	4a7fbfc4 	addi	r9,r9,-257
    8268:	0086303a 	nor	r3,zero,r2
    826c:	02202074 	movhi	r8,32897
    8270:	1245883a 	add	r2,r2,r9
    8274:	42202004 	addi	r8,r8,-32640
    8278:	10c4703a 	and	r2,r2,r3
    827c:	1204703a 	and	r2,r2,r8
    8280:	10000226 	beq	r2,zero,828c <strcmp+0x44>
    8284:	00002306 	br	8314 <strcmp+0xcc>
    8288:	1000221e 	bne	r2,zero,8314 <strcmp+0xcc>
    828c:	21000104 	addi	r4,r4,4
    8290:	20c00017 	ldw	r3,0(r4)
    8294:	29400104 	addi	r5,r5,4
    8298:	29800017 	ldw	r6,0(r5)
    829c:	1a4f883a 	add	r7,r3,r9
    82a0:	00c4303a 	nor	r2,zero,r3
    82a4:	3884703a 	and	r2,r7,r2
    82a8:	1204703a 	and	r2,r2,r8
    82ac:	19bff626 	beq	r3,r6,8288 <strcmp+0x40>
    82b0:	20800003 	ldbu	r2,0(r4)
    82b4:	10c03fcc 	andi	r3,r2,255
    82b8:	18c0201c 	xori	r3,r3,128
    82bc:	18ffe004 	addi	r3,r3,-128
    82c0:	18000c26 	beq	r3,zero,82f4 <strcmp+0xac>
    82c4:	29800007 	ldb	r6,0(r5)
    82c8:	19800326 	beq	r3,r6,82d8 <strcmp+0x90>
    82cc:	00001306 	br	831c <strcmp+0xd4>
    82d0:	29800007 	ldb	r6,0(r5)
    82d4:	11800b1e 	bne	r2,r6,8304 <strcmp+0xbc>
    82d8:	21000044 	addi	r4,r4,1
    82dc:	20c00003 	ldbu	r3,0(r4)
    82e0:	29400044 	addi	r5,r5,1
    82e4:	18803fcc 	andi	r2,r3,255
    82e8:	1080201c 	xori	r2,r2,128
    82ec:	10bfe004 	addi	r2,r2,-128
    82f0:	103ff71e 	bne	r2,zero,82d0 <strcmp+0x88>
    82f4:	0007883a 	mov	r3,zero
    82f8:	28800003 	ldbu	r2,0(r5)
    82fc:	1885c83a 	sub	r2,r3,r2
    8300:	f800283a 	ret
    8304:	28800003 	ldbu	r2,0(r5)
    8308:	18c03fcc 	andi	r3,r3,255
    830c:	1885c83a 	sub	r2,r3,r2
    8310:	f800283a 	ret
    8314:	0005883a 	mov	r2,zero
    8318:	f800283a 	ret
    831c:	10c03fcc 	andi	r3,r2,255
    8320:	003ff506 	br	82f8 <strcmp+0xb0>

00008324 <__sprint_r.part.0>:
    8324:	28801917 	ldw	r2,100(r5)
    8328:	defff604 	addi	sp,sp,-40
    832c:	dd400515 	stw	r21,20(sp)
    8330:	dfc00915 	stw	ra,36(sp)
    8334:	df000815 	stw	fp,32(sp)
    8338:	ddc00715 	stw	r23,28(sp)
    833c:	dd800615 	stw	r22,24(sp)
    8340:	dd000415 	stw	r20,16(sp)
    8344:	dcc00315 	stw	r19,12(sp)
    8348:	dc800215 	stw	r18,8(sp)
    834c:	dc400115 	stw	r17,4(sp)
    8350:	dc000015 	stw	r16,0(sp)
    8354:	1088000c 	andi	r2,r2,8192
    8358:	302b883a 	mov	r21,r6
    835c:	10002e26 	beq	r2,zero,8418 <__sprint_r.part.0+0xf4>
    8360:	30800217 	ldw	r2,8(r6)
    8364:	35800017 	ldw	r22,0(r6)
    8368:	10002926 	beq	r2,zero,8410 <__sprint_r.part.0+0xec>
    836c:	2827883a 	mov	r19,r5
    8370:	2029883a 	mov	r20,r4
    8374:	b5c00104 	addi	r23,r22,4
    8378:	04bfffc4 	movi	r18,-1
    837c:	bc400017 	ldw	r17,0(r23)
    8380:	b4000017 	ldw	r16,0(r22)
    8384:	0039883a 	mov	fp,zero
    8388:	8822d0ba 	srli	r17,r17,2
    838c:	8800031e 	bne	r17,zero,839c <__sprint_r.part.0+0x78>
    8390:	00001806 	br	83f4 <__sprint_r.part.0+0xd0>
    8394:	84000104 	addi	r16,r16,4
    8398:	8f001526 	beq	r17,fp,83f0 <__sprint_r.part.0+0xcc>
    839c:	81400017 	ldw	r5,0(r16)
    83a0:	980d883a 	mov	r6,r19
    83a4:	a009883a 	mov	r4,r20
    83a8:	0009d4c0 	call	9d4c <_fputwc_r>
    83ac:	e7000044 	addi	fp,fp,1
    83b0:	14bff81e 	bne	r2,r18,8394 <__sprint_r.part.0+0x70>
    83b4:	9005883a 	mov	r2,r18
    83b8:	a8000215 	stw	zero,8(r21)
    83bc:	a8000115 	stw	zero,4(r21)
    83c0:	dfc00917 	ldw	ra,36(sp)
    83c4:	df000817 	ldw	fp,32(sp)
    83c8:	ddc00717 	ldw	r23,28(sp)
    83cc:	dd800617 	ldw	r22,24(sp)
    83d0:	dd400517 	ldw	r21,20(sp)
    83d4:	dd000417 	ldw	r20,16(sp)
    83d8:	dcc00317 	ldw	r19,12(sp)
    83dc:	dc800217 	ldw	r18,8(sp)
    83e0:	dc400117 	ldw	r17,4(sp)
    83e4:	dc000017 	ldw	r16,0(sp)
    83e8:	dec00a04 	addi	sp,sp,40
    83ec:	f800283a 	ret
    83f0:	a8800217 	ldw	r2,8(r21)
    83f4:	8c63883a 	add	r17,r17,r17
    83f8:	8c63883a 	add	r17,r17,r17
    83fc:	1445c83a 	sub	r2,r2,r17
    8400:	a8800215 	stw	r2,8(r21)
    8404:	b5800204 	addi	r22,r22,8
    8408:	bdc00204 	addi	r23,r23,8
    840c:	103fdb1e 	bne	r2,zero,837c <__sprint_r.part.0+0x58>
    8410:	0005883a 	mov	r2,zero
    8414:	003fe806 	br	83b8 <__sprint_r.part.0+0x94>
    8418:	0005dac0 	call	5dac <__sfvwrite_r>
    841c:	003fe606 	br	83b8 <__sprint_r.part.0+0x94>

00008420 <__sprint_r>:
    8420:	30c00217 	ldw	r3,8(r6)
    8424:	18000126 	beq	r3,zero,842c <__sprint_r+0xc>
    8428:	00083241 	jmpi	8324 <__sprint_r.part.0>
    842c:	30000115 	stw	zero,4(r6)
    8430:	0005883a 	mov	r2,zero
    8434:	f800283a 	ret

00008438 <___vfiprintf_internal_r>:
    8438:	deffc904 	addi	sp,sp,-220
    843c:	df003515 	stw	fp,212(sp)
    8440:	dd003115 	stw	r20,196(sp)
    8444:	dfc03615 	stw	ra,216(sp)
    8448:	ddc03415 	stw	r23,208(sp)
    844c:	dd803315 	stw	r22,204(sp)
    8450:	dd403215 	stw	r21,200(sp)
    8454:	dcc03015 	stw	r19,192(sp)
    8458:	dc802f15 	stw	r18,188(sp)
    845c:	dc402e15 	stw	r17,184(sp)
    8460:	dc002d15 	stw	r16,180(sp)
    8464:	d9002015 	stw	r4,128(sp)
    8468:	d9c02215 	stw	r7,136(sp)
    846c:	2829883a 	mov	r20,r5
    8470:	3039883a 	mov	fp,r6
    8474:	20000226 	beq	r4,zero,8480 <___vfiprintf_internal_r+0x48>
    8478:	20800e17 	ldw	r2,56(r4)
    847c:	1000cf26 	beq	r2,zero,87bc <___vfiprintf_internal_r+0x384>
    8480:	a080030b 	ldhu	r2,12(r20)
    8484:	10c8000c 	andi	r3,r2,8192
    8488:	1800061e 	bne	r3,zero,84a4 <___vfiprintf_internal_r+0x6c>
    848c:	a1001917 	ldw	r4,100(r20)
    8490:	00f7ffc4 	movi	r3,-8193
    8494:	10880014 	ori	r2,r2,8192
    8498:	20c6703a 	and	r3,r4,r3
    849c:	a080030d 	sth	r2,12(r20)
    84a0:	a0c01915 	stw	r3,100(r20)
    84a4:	10c0020c 	andi	r3,r2,8
    84a8:	1800a926 	beq	r3,zero,8750 <___vfiprintf_internal_r+0x318>
    84ac:	a0c00417 	ldw	r3,16(r20)
    84b0:	1800a726 	beq	r3,zero,8750 <___vfiprintf_internal_r+0x318>
    84b4:	1080068c 	andi	r2,r2,26
    84b8:	00c00284 	movi	r3,10
    84bc:	10c0ac26 	beq	r2,r3,8770 <___vfiprintf_internal_r+0x338>
    84c0:	da801a04 	addi	r10,sp,104
    84c4:	da801e15 	stw	r10,120(sp)
    84c8:	d8801e17 	ldw	r2,120(sp)
    84cc:	da8019c4 	addi	r10,sp,103
    84d0:	05800074 	movhi	r22,1
    84d4:	05c00074 	movhi	r23,1
    84d8:	da801f15 	stw	r10,124(sp)
    84dc:	1295c83a 	sub	r10,r2,r10
    84e0:	b59faa04 	addi	r22,r22,32424
    84e4:	bddfa604 	addi	r23,r23,32408
    84e8:	dec01a15 	stw	sp,104(sp)
    84ec:	d8001c15 	stw	zero,112(sp)
    84f0:	d8001b15 	stw	zero,108(sp)
    84f4:	d8002615 	stw	zero,152(sp)
    84f8:	d8002315 	stw	zero,140(sp)
    84fc:	da802715 	stw	r10,156(sp)
    8500:	d811883a 	mov	r8,sp
    8504:	dd002115 	stw	r20,132(sp)
    8508:	e021883a 	mov	r16,fp
    850c:	80800007 	ldb	r2,0(r16)
    8510:	1003ea26 	beq	r2,zero,94bc <___vfiprintf_internal_r+0x1084>
    8514:	00c00944 	movi	r3,37
    8518:	8025883a 	mov	r18,r16
    851c:	10c0021e 	bne	r2,r3,8528 <___vfiprintf_internal_r+0xf0>
    8520:	00001606 	br	857c <___vfiprintf_internal_r+0x144>
    8524:	10c00326 	beq	r2,r3,8534 <___vfiprintf_internal_r+0xfc>
    8528:	94800044 	addi	r18,r18,1
    852c:	90800007 	ldb	r2,0(r18)
    8530:	103ffc1e 	bne	r2,zero,8524 <___vfiprintf_internal_r+0xec>
    8534:	9423c83a 	sub	r17,r18,r16
    8538:	88001026 	beq	r17,zero,857c <___vfiprintf_internal_r+0x144>
    853c:	d8c01c17 	ldw	r3,112(sp)
    8540:	d8801b17 	ldw	r2,108(sp)
    8544:	44000015 	stw	r16,0(r8)
    8548:	88c7883a 	add	r3,r17,r3
    854c:	10800044 	addi	r2,r2,1
    8550:	44400115 	stw	r17,4(r8)
    8554:	d8c01c15 	stw	r3,112(sp)
    8558:	d8801b15 	stw	r2,108(sp)
    855c:	010001c4 	movi	r4,7
    8560:	2080760e 	bge	r4,r2,873c <___vfiprintf_internal_r+0x304>
    8564:	1803821e 	bne	r3,zero,9370 <___vfiprintf_internal_r+0xf38>
    8568:	da802317 	ldw	r10,140(sp)
    856c:	d8001b15 	stw	zero,108(sp)
    8570:	d811883a 	mov	r8,sp
    8574:	5455883a 	add	r10,r10,r17
    8578:	da802315 	stw	r10,140(sp)
    857c:	90800007 	ldb	r2,0(r18)
    8580:	10044626 	beq	r2,zero,969c <___vfiprintf_internal_r+0x1264>
    8584:	90c00047 	ldb	r3,1(r18)
    8588:	94000044 	addi	r16,r18,1
    858c:	d8001d85 	stb	zero,118(sp)
    8590:	0009883a 	mov	r4,zero
    8594:	000f883a 	mov	r7,zero
    8598:	027fffc4 	movi	r9,-1
    859c:	0023883a 	mov	r17,zero
    85a0:	0029883a 	mov	r20,zero
    85a4:	01401604 	movi	r5,88
    85a8:	01800244 	movi	r6,9
    85ac:	03400a84 	movi	r13,42
    85b0:	03001b04 	movi	r12,108
    85b4:	84000044 	addi	r16,r16,1
    85b8:	18bff804 	addi	r2,r3,-32
    85bc:	28827336 	bltu	r5,r2,8f8c <___vfiprintf_internal_r+0xb54>
    85c0:	100490ba 	slli	r2,r2,2
    85c4:	02800074 	movhi	r10,1
    85c8:	52a17604 	addi	r10,r10,-31272
    85cc:	1285883a 	add	r2,r2,r10
    85d0:	10800017 	ldw	r2,0(r2)
    85d4:	1000683a 	jmp	r2
    85d8:	00008cc0 	call	8cc <task_fake_camera+0xf8>
    85dc:	00008f8c 	andi	zero,zero,574
    85e0:	00008f8c 	andi	zero,zero,574
    85e4:	00008ce0 	cmpeqi	zero,zero,563
    85e8:	00008f8c 	andi	zero,zero,574
    85ec:	00008f8c 	andi	zero,zero,574
    85f0:	00008f8c 	andi	zero,zero,574
    85f4:	00008f8c 	andi	zero,zero,574
    85f8:	00008f8c 	andi	zero,zero,574
    85fc:	00008f8c 	andi	zero,zero,574
    8600:	00008ec8 	cmpgei	zero,zero,571
    8604:	00008ee4 	muli	zero,zero,571
    8608:	00008f8c 	andi	zero,zero,574
    860c:	000087cc 	andi	zero,zero,543
    8610:	00008ef4 	movhi	zero,571
    8614:	00008f8c 	andi	zero,zero,574
    8618:	00008cec 	andhi	zero,zero,563
    861c:	00008cf8 	rdprs	zero,zero,563
    8620:	00008cf8 	rdprs	zero,zero,563
    8624:	00008cf8 	rdprs	zero,zero,563
    8628:	00008cf8 	rdprs	zero,zero,563
    862c:	00008cf8 	rdprs	zero,zero,563
    8630:	00008cf8 	rdprs	zero,zero,563
    8634:	00008cf8 	rdprs	zero,zero,563
    8638:	00008cf8 	rdprs	zero,zero,563
    863c:	00008cf8 	rdprs	zero,zero,563
    8640:	00008f8c 	andi	zero,zero,574
    8644:	00008f8c 	andi	zero,zero,574
    8648:	00008f8c 	andi	zero,zero,574
    864c:	00008f8c 	andi	zero,zero,574
    8650:	00008f8c 	andi	zero,zero,574
    8654:	00008f8c 	andi	zero,zero,574
    8658:	00008f8c 	andi	zero,zero,574
    865c:	00008f8c 	andi	zero,zero,574
    8660:	00008f8c 	andi	zero,zero,574
    8664:	00008f8c 	andi	zero,zero,574
    8668:	00008d24 	muli	zero,zero,564
    866c:	00008f8c 	andi	zero,zero,574
    8670:	00008f8c 	andi	zero,zero,574
    8674:	00008f8c 	andi	zero,zero,574
    8678:	00008f8c 	andi	zero,zero,574
    867c:	00008f8c 	andi	zero,zero,574
    8680:	00008f8c 	andi	zero,zero,574
    8684:	00008f8c 	andi	zero,zero,574
    8688:	00008f8c 	andi	zero,zero,574
    868c:	00008f8c 	andi	zero,zero,574
    8690:	00008f8c 	andi	zero,zero,574
    8694:	00008d5c 	xori	zero,zero,565
    8698:	00008f8c 	andi	zero,zero,574
    869c:	00008f8c 	andi	zero,zero,574
    86a0:	00008f8c 	andi	zero,zero,574
    86a4:	00008f8c 	andi	zero,zero,574
    86a8:	00008f8c 	andi	zero,zero,574
    86ac:	00008db4 	movhi	zero,566
    86b0:	00008f8c 	andi	zero,zero,574
    86b4:	00008f8c 	andi	zero,zero,574
    86b8:	00008e24 	muli	zero,zero,568
    86bc:	00008f8c 	andi	zero,zero,574
    86c0:	00008f8c 	andi	zero,zero,574
    86c4:	00008f8c 	andi	zero,zero,574
    86c8:	00008f8c 	andi	zero,zero,574
    86cc:	00008f8c 	andi	zero,zero,574
    86d0:	00008f8c 	andi	zero,zero,574
    86d4:	00008f8c 	andi	zero,zero,574
    86d8:	00008f8c 	andi	zero,zero,574
    86dc:	00008f8c 	andi	zero,zero,574
    86e0:	00008f8c 	andi	zero,zero,574
    86e4:	00008bd0 	cmplti	zero,zero,559
    86e8:	00008bfc 	xorhi	zero,zero,559
    86ec:	00008f8c 	andi	zero,zero,574
    86f0:	00008f8c 	andi	zero,zero,574
    86f4:	00008f8c 	andi	zero,zero,574
    86f8:	00008f34 	movhi	zero,572
    86fc:	00008bfc 	xorhi	zero,zero,559
    8700:	00008f8c 	andi	zero,zero,574
    8704:	00008f8c 	andi	zero,zero,574
    8708:	00008a90 	cmplti	zero,zero,554
    870c:	00008f8c 	andi	zero,zero,574
    8710:	00008aa0 	cmpeqi	zero,zero,554
    8714:	00008adc 	xori	zero,zero,555
    8718:	000087d8 	cmpnei	zero,zero,543
    871c:	00008a84 	movi	zero,554
    8720:	00008f8c 	andi	zero,zero,574
    8724:	00008e60 	cmpeqi	zero,zero,569
    8728:	00008f8c 	andi	zero,zero,574
    872c:	00008eb8 	rdprs	zero,zero,570
    8730:	00008f8c 	andi	zero,zero,574
    8734:	00008f8c 	andi	zero,zero,574
    8738:	00008b7c 	xorhi	zero,zero,557
    873c:	42000204 	addi	r8,r8,8
    8740:	da802317 	ldw	r10,140(sp)
    8744:	5455883a 	add	r10,r10,r17
    8748:	da802315 	stw	r10,140(sp)
    874c:	003f8b06 	br	857c <___vfiprintf_internal_r+0x144>
    8750:	d9002017 	ldw	r4,128(sp)
    8754:	a00b883a 	mov	r5,r20
    8758:	00039540 	call	3954 <__swsetup_r>
    875c:	1003b11e 	bne	r2,zero,9624 <___vfiprintf_internal_r+0x11ec>
    8760:	a080030b 	ldhu	r2,12(r20)
    8764:	00c00284 	movi	r3,10
    8768:	1080068c 	andi	r2,r2,26
    876c:	10ff541e 	bne	r2,r3,84c0 <___vfiprintf_internal_r+0x88>
    8770:	a080038f 	ldh	r2,14(r20)
    8774:	103f5216 	blt	r2,zero,84c0 <___vfiprintf_internal_r+0x88>
    8778:	d9c02217 	ldw	r7,136(sp)
    877c:	d9002017 	ldw	r4,128(sp)
    8780:	e00d883a 	mov	r6,fp
    8784:	a00b883a 	mov	r5,r20
    8788:	00098b00 	call	98b0 <__sbprintf>
    878c:	dfc03617 	ldw	ra,216(sp)
    8790:	df003517 	ldw	fp,212(sp)
    8794:	ddc03417 	ldw	r23,208(sp)
    8798:	dd803317 	ldw	r22,204(sp)
    879c:	dd403217 	ldw	r21,200(sp)
    87a0:	dd003117 	ldw	r20,196(sp)
    87a4:	dcc03017 	ldw	r19,192(sp)
    87a8:	dc802f17 	ldw	r18,188(sp)
    87ac:	dc402e17 	ldw	r17,184(sp)
    87b0:	dc002d17 	ldw	r16,180(sp)
    87b4:	dec03704 	addi	sp,sp,220
    87b8:	f800283a 	ret
    87bc:	00059280 	call	5928 <__sinit>
    87c0:	003f2f06 	br	8480 <___vfiprintf_internal_r+0x48>
    87c4:	0463c83a 	sub	r17,zero,r17
    87c8:	d8802215 	stw	r2,136(sp)
    87cc:	a5000114 	ori	r20,r20,4
    87d0:	80c00007 	ldb	r3,0(r16)
    87d4:	003f7706 	br	85b4 <___vfiprintf_internal_r+0x17c>
    87d8:	00800c04 	movi	r2,48
    87dc:	da802217 	ldw	r10,136(sp)
    87e0:	d8801d05 	stb	r2,116(sp)
    87e4:	00801e04 	movi	r2,120
    87e8:	d8801d45 	stb	r2,117(sp)
    87ec:	d8001d85 	stb	zero,118(sp)
    87f0:	50c00104 	addi	r3,r10,4
    87f4:	54800017 	ldw	r18,0(r10)
    87f8:	0027883a 	mov	r19,zero
    87fc:	a0800094 	ori	r2,r20,2
    8800:	48030b16 	blt	r9,zero,9430 <___vfiprintf_internal_r+0xff8>
    8804:	00bfdfc4 	movi	r2,-129
    8808:	a096703a 	and	r11,r20,r2
    880c:	d8c02215 	stw	r3,136(sp)
    8810:	5d000094 	ori	r20,r11,2
    8814:	90032b1e 	bne	r18,zero,94c4 <___vfiprintf_internal_r+0x108c>
    8818:	00800074 	movhi	r2,1
    881c:	109f4504 	addi	r2,r2,32020
    8820:	d8802615 	stw	r2,152(sp)
    8824:	0039883a 	mov	fp,zero
    8828:	48017b1e 	bne	r9,zero,8e18 <___vfiprintf_internal_r+0x9e0>
    882c:	0013883a 	mov	r9,zero
    8830:	0027883a 	mov	r19,zero
    8834:	dd401a04 	addi	r21,sp,104
    8838:	4825883a 	mov	r18,r9
    883c:	4cc0010e 	bge	r9,r19,8844 <___vfiprintf_internal_r+0x40c>
    8840:	9825883a 	mov	r18,r19
    8844:	e7003fcc 	andi	fp,fp,255
    8848:	e700201c 	xori	fp,fp,128
    884c:	e73fe004 	addi	fp,fp,-128
    8850:	e0000126 	beq	fp,zero,8858 <___vfiprintf_internal_r+0x420>
    8854:	94800044 	addi	r18,r18,1
    8858:	a380008c 	andi	r14,r20,2
    885c:	70000126 	beq	r14,zero,8864 <___vfiprintf_internal_r+0x42c>
    8860:	94800084 	addi	r18,r18,2
    8864:	a700210c 	andi	fp,r20,132
    8868:	e001df1e 	bne	fp,zero,8fe8 <___vfiprintf_internal_r+0xbb0>
    886c:	8c87c83a 	sub	r3,r17,r18
    8870:	00c1dd0e 	bge	zero,r3,8fe8 <___vfiprintf_internal_r+0xbb0>
    8874:	01c00404 	movi	r7,16
    8878:	d8801c17 	ldw	r2,112(sp)
    887c:	38c3ad0e 	bge	r7,r3,9734 <___vfiprintf_internal_r+0x12fc>
    8880:	02800074 	movhi	r10,1
    8884:	529faa04 	addi	r10,r10,32424
    8888:	dc002915 	stw	r16,164(sp)
    888c:	d9801b17 	ldw	r6,108(sp)
    8890:	da802415 	stw	r10,144(sp)
    8894:	03c001c4 	movi	r15,7
    8898:	da402515 	stw	r9,148(sp)
    889c:	db802815 	stw	r14,160(sp)
    88a0:	1821883a 	mov	r16,r3
    88a4:	00000506 	br	88bc <___vfiprintf_internal_r+0x484>
    88a8:	31400084 	addi	r5,r6,2
    88ac:	42000204 	addi	r8,r8,8
    88b0:	200d883a 	mov	r6,r4
    88b4:	843ffc04 	addi	r16,r16,-16
    88b8:	3c000d0e 	bge	r7,r16,88f0 <___vfiprintf_internal_r+0x4b8>
    88bc:	10800404 	addi	r2,r2,16
    88c0:	31000044 	addi	r4,r6,1
    88c4:	45800015 	stw	r22,0(r8)
    88c8:	41c00115 	stw	r7,4(r8)
    88cc:	d8801c15 	stw	r2,112(sp)
    88d0:	d9001b15 	stw	r4,108(sp)
    88d4:	793ff40e 	bge	r15,r4,88a8 <___vfiprintf_internal_r+0x470>
    88d8:	1001b51e 	bne	r2,zero,8fb0 <___vfiprintf_internal_r+0xb78>
    88dc:	843ffc04 	addi	r16,r16,-16
    88e0:	000d883a 	mov	r6,zero
    88e4:	01400044 	movi	r5,1
    88e8:	d811883a 	mov	r8,sp
    88ec:	3c3ff316 	blt	r7,r16,88bc <___vfiprintf_internal_r+0x484>
    88f0:	8007883a 	mov	r3,r16
    88f4:	da402517 	ldw	r9,148(sp)
    88f8:	db802817 	ldw	r14,160(sp)
    88fc:	dc002917 	ldw	r16,164(sp)
    8900:	da802417 	ldw	r10,144(sp)
    8904:	1885883a 	add	r2,r3,r2
    8908:	40c00115 	stw	r3,4(r8)
    890c:	42800015 	stw	r10,0(r8)
    8910:	d8801c15 	stw	r2,112(sp)
    8914:	d9401b15 	stw	r5,108(sp)
    8918:	00c001c4 	movi	r3,7
    891c:	19426016 	blt	r3,r5,92a0 <___vfiprintf_internal_r+0xe68>
    8920:	d8c01d87 	ldb	r3,118(sp)
    8924:	42000204 	addi	r8,r8,8
    8928:	29000044 	addi	r4,r5,1
    892c:	1801b31e 	bne	r3,zero,8ffc <___vfiprintf_internal_r+0xbc4>
    8930:	7001c026 	beq	r14,zero,9034 <___vfiprintf_internal_r+0xbfc>
    8934:	d8c01d04 	addi	r3,sp,116
    8938:	10800084 	addi	r2,r2,2
    893c:	40c00015 	stw	r3,0(r8)
    8940:	00c00084 	movi	r3,2
    8944:	40c00115 	stw	r3,4(r8)
    8948:	d8801c15 	stw	r2,112(sp)
    894c:	d9001b15 	stw	r4,108(sp)
    8950:	00c001c4 	movi	r3,7
    8954:	1902650e 	bge	r3,r4,92ec <___vfiprintf_internal_r+0xeb4>
    8958:	10029a1e 	bne	r2,zero,93c4 <___vfiprintf_internal_r+0xf8c>
    895c:	00c02004 	movi	r3,128
    8960:	01000044 	movi	r4,1
    8964:	000b883a 	mov	r5,zero
    8968:	d811883a 	mov	r8,sp
    896c:	e0c1b31e 	bne	fp,r3,903c <___vfiprintf_internal_r+0xc04>
    8970:	8cb9c83a 	sub	fp,r17,r18
    8974:	0701b10e 	bge	zero,fp,903c <___vfiprintf_internal_r+0xc04>
    8978:	01c00404 	movi	r7,16
    897c:	3f03890e 	bge	r7,fp,97a4 <___vfiprintf_internal_r+0x136c>
    8980:	00c00074 	movhi	r3,1
    8984:	18dfa604 	addi	r3,r3,32408
    8988:	d8c02415 	stw	r3,144(sp)
    898c:	8007883a 	mov	r3,r16
    8990:	034001c4 	movi	r13,7
    8994:	e021883a 	mov	r16,fp
    8998:	da402515 	stw	r9,148(sp)
    899c:	1839883a 	mov	fp,r3
    89a0:	00000506 	br	89b8 <___vfiprintf_internal_r+0x580>
    89a4:	29800084 	addi	r6,r5,2
    89a8:	42000204 	addi	r8,r8,8
    89ac:	180b883a 	mov	r5,r3
    89b0:	843ffc04 	addi	r16,r16,-16
    89b4:	3c000d0e 	bge	r7,r16,89ec <___vfiprintf_internal_r+0x5b4>
    89b8:	10800404 	addi	r2,r2,16
    89bc:	28c00044 	addi	r3,r5,1
    89c0:	45c00015 	stw	r23,0(r8)
    89c4:	41c00115 	stw	r7,4(r8)
    89c8:	d8801c15 	stw	r2,112(sp)
    89cc:	d8c01b15 	stw	r3,108(sp)
    89d0:	68fff40e 	bge	r13,r3,89a4 <___vfiprintf_internal_r+0x56c>
    89d4:	1002241e 	bne	r2,zero,9268 <___vfiprintf_internal_r+0xe30>
    89d8:	843ffc04 	addi	r16,r16,-16
    89dc:	01800044 	movi	r6,1
    89e0:	000b883a 	mov	r5,zero
    89e4:	d811883a 	mov	r8,sp
    89e8:	3c3ff316 	blt	r7,r16,89b8 <___vfiprintf_internal_r+0x580>
    89ec:	da402517 	ldw	r9,148(sp)
    89f0:	e007883a 	mov	r3,fp
    89f4:	8039883a 	mov	fp,r16
    89f8:	1821883a 	mov	r16,r3
    89fc:	d8c02417 	ldw	r3,144(sp)
    8a00:	1705883a 	add	r2,r2,fp
    8a04:	47000115 	stw	fp,4(r8)
    8a08:	40c00015 	stw	r3,0(r8)
    8a0c:	d8801c15 	stw	r2,112(sp)
    8a10:	d9801b15 	stw	r6,108(sp)
    8a14:	00c001c4 	movi	r3,7
    8a18:	19827616 	blt	r3,r6,93f4 <___vfiprintf_internal_r+0xfbc>
    8a1c:	4cf9c83a 	sub	fp,r9,r19
    8a20:	42000204 	addi	r8,r8,8
    8a24:	31000044 	addi	r4,r6,1
    8a28:	300b883a 	mov	r5,r6
    8a2c:	07018516 	blt	zero,fp,9044 <___vfiprintf_internal_r+0xc0c>
    8a30:	9885883a 	add	r2,r19,r2
    8a34:	45400015 	stw	r21,0(r8)
    8a38:	44c00115 	stw	r19,4(r8)
    8a3c:	d8801c15 	stw	r2,112(sp)
    8a40:	d9001b15 	stw	r4,108(sp)
    8a44:	00c001c4 	movi	r3,7
    8a48:	1901dd0e 	bge	r3,r4,91c0 <___vfiprintf_internal_r+0xd88>
    8a4c:	1002401e 	bne	r2,zero,9350 <___vfiprintf_internal_r+0xf18>
    8a50:	d8001b15 	stw	zero,108(sp)
    8a54:	a2c0010c 	andi	r11,r20,4
    8a58:	58000226 	beq	r11,zero,8a64 <___vfiprintf_internal_r+0x62c>
    8a5c:	8ca7c83a 	sub	r19,r17,r18
    8a60:	04c2f216 	blt	zero,r19,962c <___vfiprintf_internal_r+0x11f4>
    8a64:	8c80010e 	bge	r17,r18,8a6c <___vfiprintf_internal_r+0x634>
    8a68:	9023883a 	mov	r17,r18
    8a6c:	da802317 	ldw	r10,140(sp)
    8a70:	5455883a 	add	r10,r10,r17
    8a74:	da802315 	stw	r10,140(sp)
    8a78:	d8001b15 	stw	zero,108(sp)
    8a7c:	d811883a 	mov	r8,sp
    8a80:	003ea206 	br	850c <___vfiprintf_internal_r+0xd4>
    8a84:	a5000814 	ori	r20,r20,32
    8a88:	80c00007 	ldb	r3,0(r16)
    8a8c:	003ec906 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8a90:	80c00007 	ldb	r3,0(r16)
    8a94:	1b030926 	beq	r3,r12,96bc <___vfiprintf_internal_r+0x1284>
    8a98:	a5000414 	ori	r20,r20,16
    8a9c:	003ec506 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8aa0:	21003fcc 	andi	r4,r4,255
    8aa4:	20035e1e 	bne	r4,zero,9820 <___vfiprintf_internal_r+0x13e8>
    8aa8:	a080080c 	andi	r2,r20,32
    8aac:	1002a526 	beq	r2,zero,9544 <___vfiprintf_internal_r+0x110c>
    8ab0:	da802217 	ldw	r10,136(sp)
    8ab4:	50800017 	ldw	r2,0(r10)
    8ab8:	da802317 	ldw	r10,140(sp)
    8abc:	5007d7fa 	srai	r3,r10,31
    8ac0:	da802217 	ldw	r10,136(sp)
    8ac4:	10c00115 	stw	r3,4(r2)
    8ac8:	52800104 	addi	r10,r10,4
    8acc:	da802215 	stw	r10,136(sp)
    8ad0:	da802317 	ldw	r10,140(sp)
    8ad4:	12800015 	stw	r10,0(r2)
    8ad8:	003e8c06 	br	850c <___vfiprintf_internal_r+0xd4>
    8adc:	21003fcc 	andi	r4,r4,255
    8ae0:	2003511e 	bne	r4,zero,9828 <___vfiprintf_internal_r+0x13f0>
    8ae4:	a080080c 	andi	r2,r20,32
    8ae8:	1000a126 	beq	r2,zero,8d70 <___vfiprintf_internal_r+0x938>
    8aec:	da802217 	ldw	r10,136(sp)
    8af0:	d8001d85 	stb	zero,118(sp)
    8af4:	50800204 	addi	r2,r10,8
    8af8:	54800017 	ldw	r18,0(r10)
    8afc:	54c00117 	ldw	r19,4(r10)
    8b00:	4802b416 	blt	r9,zero,95d4 <___vfiprintf_internal_r+0x119c>
    8b04:	013fdfc4 	movi	r4,-129
    8b08:	94c6b03a 	or	r3,r18,r19
    8b0c:	d8802215 	stw	r2,136(sp)
    8b10:	a128703a 	and	r20,r20,r4
    8b14:	1800a226 	beq	r3,zero,8da0 <___vfiprintf_internal_r+0x968>
    8b18:	0039883a 	mov	fp,zero
    8b1c:	dd401a04 	addi	r21,sp,104
    8b20:	9006d0fa 	srli	r3,r18,3
    8b24:	9808977a 	slli	r4,r19,29
    8b28:	9826d0fa 	srli	r19,r19,3
    8b2c:	948001cc 	andi	r18,r18,7
    8b30:	90800c04 	addi	r2,r18,48
    8b34:	ad7fffc4 	addi	r21,r21,-1
    8b38:	20e4b03a 	or	r18,r4,r3
    8b3c:	a8800005 	stb	r2,0(r21)
    8b40:	94c6b03a 	or	r3,r18,r19
    8b44:	183ff61e 	bne	r3,zero,8b20 <___vfiprintf_internal_r+0x6e8>
    8b48:	a0c0004c 	andi	r3,r20,1
    8b4c:	18005926 	beq	r3,zero,8cb4 <___vfiprintf_internal_r+0x87c>
    8b50:	10803fcc 	andi	r2,r2,255
    8b54:	1080201c 	xori	r2,r2,128
    8b58:	10bfe004 	addi	r2,r2,-128
    8b5c:	00c00c04 	movi	r3,48
    8b60:	10c05426 	beq	r2,r3,8cb4 <___vfiprintf_internal_r+0x87c>
    8b64:	da801e17 	ldw	r10,120(sp)
    8b68:	a8bfffc4 	addi	r2,r21,-1
    8b6c:	a8ffffc5 	stb	r3,-1(r21)
    8b70:	50a7c83a 	sub	r19,r10,r2
    8b74:	102b883a 	mov	r21,r2
    8b78:	003f2f06 	br	8838 <___vfiprintf_internal_r+0x400>
    8b7c:	21003fcc 	andi	r4,r4,255
    8b80:	2003421e 	bne	r4,zero,988c <___vfiprintf_internal_r+0x1454>
    8b84:	00800074 	movhi	r2,1
    8b88:	109f4504 	addi	r2,r2,32020
    8b8c:	d8802615 	stw	r2,152(sp)
    8b90:	a080080c 	andi	r2,r20,32
    8b94:	1000aa26 	beq	r2,zero,8e40 <___vfiprintf_internal_r+0xa08>
    8b98:	da802217 	ldw	r10,136(sp)
    8b9c:	54800017 	ldw	r18,0(r10)
    8ba0:	54c00117 	ldw	r19,4(r10)
    8ba4:	52800204 	addi	r10,r10,8
    8ba8:	da802215 	stw	r10,136(sp)
    8bac:	a080004c 	andi	r2,r20,1
    8bb0:	1001d226 	beq	r2,zero,92fc <___vfiprintf_internal_r+0xec4>
    8bb4:	94c4b03a 	or	r2,r18,r19
    8bb8:	1002351e 	bne	r2,zero,9490 <___vfiprintf_internal_r+0x1058>
    8bbc:	d8001d85 	stb	zero,118(sp)
    8bc0:	48022216 	blt	r9,zero,944c <___vfiprintf_internal_r+0x1014>
    8bc4:	00bfdfc4 	movi	r2,-129
    8bc8:	a0a8703a 	and	r20,r20,r2
    8bcc:	003f1506 	br	8824 <___vfiprintf_internal_r+0x3ec>
    8bd0:	da802217 	ldw	r10,136(sp)
    8bd4:	04800044 	movi	r18,1
    8bd8:	d8001d85 	stb	zero,118(sp)
    8bdc:	50800017 	ldw	r2,0(r10)
    8be0:	52800104 	addi	r10,r10,4
    8be4:	da802215 	stw	r10,136(sp)
    8be8:	d8801005 	stb	r2,64(sp)
    8bec:	9027883a 	mov	r19,r18
    8bf0:	dd401004 	addi	r21,sp,64
    8bf4:	0013883a 	mov	r9,zero
    8bf8:	003f1706 	br	8858 <___vfiprintf_internal_r+0x420>
    8bfc:	21003fcc 	andi	r4,r4,255
    8c00:	2003201e 	bne	r4,zero,9884 <___vfiprintf_internal_r+0x144c>
    8c04:	a080080c 	andi	r2,r20,32
    8c08:	10004b26 	beq	r2,zero,8d38 <___vfiprintf_internal_r+0x900>
    8c0c:	da802217 	ldw	r10,136(sp)
    8c10:	50800117 	ldw	r2,4(r10)
    8c14:	54800017 	ldw	r18,0(r10)
    8c18:	52800204 	addi	r10,r10,8
    8c1c:	da802215 	stw	r10,136(sp)
    8c20:	1027883a 	mov	r19,r2
    8c24:	10022c16 	blt	r2,zero,94d8 <___vfiprintf_internal_r+0x10a0>
    8c28:	df001d83 	ldbu	fp,118(sp)
    8c2c:	48007216 	blt	r9,zero,8df8 <___vfiprintf_internal_r+0x9c0>
    8c30:	00ffdfc4 	movi	r3,-129
    8c34:	94c4b03a 	or	r2,r18,r19
    8c38:	a0e8703a 	and	r20,r20,r3
    8c3c:	1000cc26 	beq	r2,zero,8f70 <___vfiprintf_internal_r+0xb38>
    8c40:	98021026 	beq	r19,zero,9484 <___vfiprintf_internal_r+0x104c>
    8c44:	dc402415 	stw	r17,144(sp)
    8c48:	dc002515 	stw	r16,148(sp)
    8c4c:	9823883a 	mov	r17,r19
    8c50:	9021883a 	mov	r16,r18
    8c54:	dd401a04 	addi	r21,sp,104
    8c58:	4825883a 	mov	r18,r9
    8c5c:	4027883a 	mov	r19,r8
    8c60:	8009883a 	mov	r4,r16
    8c64:	880b883a 	mov	r5,r17
    8c68:	01800284 	movi	r6,10
    8c6c:	000f883a 	mov	r7,zero
    8c70:	000a8180 	call	a818 <__umoddi3>
    8c74:	10800c04 	addi	r2,r2,48
    8c78:	ad7fffc4 	addi	r21,r21,-1
    8c7c:	8009883a 	mov	r4,r16
    8c80:	880b883a 	mov	r5,r17
    8c84:	a8800005 	stb	r2,0(r21)
    8c88:	01800284 	movi	r6,10
    8c8c:	000f883a 	mov	r7,zero
    8c90:	000a2a00 	call	a2a0 <__udivdi3>
    8c94:	1021883a 	mov	r16,r2
    8c98:	10c4b03a 	or	r2,r2,r3
    8c9c:	1823883a 	mov	r17,r3
    8ca0:	103fef1e 	bne	r2,zero,8c60 <___vfiprintf_internal_r+0x828>
    8ca4:	dc402417 	ldw	r17,144(sp)
    8ca8:	dc002517 	ldw	r16,148(sp)
    8cac:	9013883a 	mov	r9,r18
    8cb0:	9811883a 	mov	r8,r19
    8cb4:	da801e17 	ldw	r10,120(sp)
    8cb8:	5567c83a 	sub	r19,r10,r21
    8cbc:	003ede06 	br	8838 <___vfiprintf_internal_r+0x400>
    8cc0:	38803fcc 	andi	r2,r7,255
    8cc4:	1080201c 	xori	r2,r2,128
    8cc8:	10bfe004 	addi	r2,r2,-128
    8ccc:	1002371e 	bne	r2,zero,95ac <___vfiprintf_internal_r+0x1174>
    8cd0:	01000044 	movi	r4,1
    8cd4:	01c00804 	movi	r7,32
    8cd8:	80c00007 	ldb	r3,0(r16)
    8cdc:	003e3506 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8ce0:	a5000054 	ori	r20,r20,1
    8ce4:	80c00007 	ldb	r3,0(r16)
    8ce8:	003e3206 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8cec:	a5002014 	ori	r20,r20,128
    8cf0:	80c00007 	ldb	r3,0(r16)
    8cf4:	003e2f06 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8cf8:	8015883a 	mov	r10,r16
    8cfc:	0023883a 	mov	r17,zero
    8d00:	18bff404 	addi	r2,r3,-48
    8d04:	50c00007 	ldb	r3,0(r10)
    8d08:	8c4002a4 	muli	r17,r17,10
    8d0c:	84000044 	addi	r16,r16,1
    8d10:	8015883a 	mov	r10,r16
    8d14:	1463883a 	add	r17,r2,r17
    8d18:	18bff404 	addi	r2,r3,-48
    8d1c:	30bff92e 	bgeu	r6,r2,8d04 <___vfiprintf_internal_r+0x8cc>
    8d20:	003e2506 	br	85b8 <___vfiprintf_internal_r+0x180>
    8d24:	21003fcc 	andi	r4,r4,255
    8d28:	2002d41e 	bne	r4,zero,987c <___vfiprintf_internal_r+0x1444>
    8d2c:	a5000414 	ori	r20,r20,16
    8d30:	a080080c 	andi	r2,r20,32
    8d34:	103fb51e 	bne	r2,zero,8c0c <___vfiprintf_internal_r+0x7d4>
    8d38:	a080040c 	andi	r2,r20,16
    8d3c:	1001f826 	beq	r2,zero,9520 <___vfiprintf_internal_r+0x10e8>
    8d40:	da802217 	ldw	r10,136(sp)
    8d44:	54800017 	ldw	r18,0(r10)
    8d48:	52800104 	addi	r10,r10,4
    8d4c:	da802215 	stw	r10,136(sp)
    8d50:	9027d7fa 	srai	r19,r18,31
    8d54:	9805883a 	mov	r2,r19
    8d58:	003fb206 	br	8c24 <___vfiprintf_internal_r+0x7ec>
    8d5c:	21003fcc 	andi	r4,r4,255
    8d60:	2002c41e 	bne	r4,zero,9874 <___vfiprintf_internal_r+0x143c>
    8d64:	a5000414 	ori	r20,r20,16
    8d68:	a080080c 	andi	r2,r20,32
    8d6c:	103f5f1e 	bne	r2,zero,8aec <___vfiprintf_internal_r+0x6b4>
    8d70:	a080040c 	andi	r2,r20,16
    8d74:	10020f26 	beq	r2,zero,95b4 <___vfiprintf_internal_r+0x117c>
    8d78:	da802217 	ldw	r10,136(sp)
    8d7c:	d8001d85 	stb	zero,118(sp)
    8d80:	0027883a 	mov	r19,zero
    8d84:	50800104 	addi	r2,r10,4
    8d88:	54800017 	ldw	r18,0(r10)
    8d8c:	48021116 	blt	r9,zero,95d4 <___vfiprintf_internal_r+0x119c>
    8d90:	00ffdfc4 	movi	r3,-129
    8d94:	d8802215 	stw	r2,136(sp)
    8d98:	a0e8703a 	and	r20,r20,r3
    8d9c:	903f5e1e 	bne	r18,zero,8b18 <___vfiprintf_internal_r+0x6e0>
    8da0:	0039883a 	mov	fp,zero
    8da4:	4802a626 	beq	r9,zero,9840 <___vfiprintf_internal_r+0x1408>
    8da8:	0025883a 	mov	r18,zero
    8dac:	0027883a 	mov	r19,zero
    8db0:	003f5a06 	br	8b1c <___vfiprintf_internal_r+0x6e4>
    8db4:	21003fcc 	andi	r4,r4,255
    8db8:	20029f1e 	bne	r4,zero,9838 <___vfiprintf_internal_r+0x1400>
    8dbc:	a5000414 	ori	r20,r20,16
    8dc0:	a080080c 	andi	r2,r20,32
    8dc4:	10005e1e 	bne	r2,zero,8f40 <___vfiprintf_internal_r+0xb08>
    8dc8:	a080040c 	andi	r2,r20,16
    8dcc:	1001a21e 	bne	r2,zero,9458 <___vfiprintf_internal_r+0x1020>
    8dd0:	a080100c 	andi	r2,r20,64
    8dd4:	d8001d85 	stb	zero,118(sp)
    8dd8:	da802217 	ldw	r10,136(sp)
    8ddc:	1002231e 	bne	r2,zero,966c <___vfiprintf_internal_r+0x1234>
    8de0:	50800104 	addi	r2,r10,4
    8de4:	54800017 	ldw	r18,0(r10)
    8de8:	0027883a 	mov	r19,zero
    8dec:	4801a00e 	bge	r9,zero,9470 <___vfiprintf_internal_r+0x1038>
    8df0:	d8802215 	stw	r2,136(sp)
    8df4:	0039883a 	mov	fp,zero
    8df8:	94c4b03a 	or	r2,r18,r19
    8dfc:	103f901e 	bne	r2,zero,8c40 <___vfiprintf_internal_r+0x808>
    8e00:	00800044 	movi	r2,1
    8e04:	10803fcc 	andi	r2,r2,255
    8e08:	00c00044 	movi	r3,1
    8e0c:	10c05926 	beq	r2,r3,8f74 <___vfiprintf_internal_r+0xb3c>
    8e10:	00c00084 	movi	r3,2
    8e14:	10ffe41e 	bne	r2,r3,8da8 <___vfiprintf_internal_r+0x970>
    8e18:	0025883a 	mov	r18,zero
    8e1c:	0027883a 	mov	r19,zero
    8e20:	00013d06 	br	9318 <___vfiprintf_internal_r+0xee0>
    8e24:	21003fcc 	andi	r4,r4,255
    8e28:	2002811e 	bne	r4,zero,9830 <___vfiprintf_internal_r+0x13f8>
    8e2c:	00800074 	movhi	r2,1
    8e30:	109f4004 	addi	r2,r2,32000
    8e34:	d8802615 	stw	r2,152(sp)
    8e38:	a080080c 	andi	r2,r20,32
    8e3c:	103f561e 	bne	r2,zero,8b98 <___vfiprintf_internal_r+0x760>
    8e40:	a080040c 	andi	r2,r20,16
    8e44:	1001d126 	beq	r2,zero,958c <___vfiprintf_internal_r+0x1154>
    8e48:	da802217 	ldw	r10,136(sp)
    8e4c:	0027883a 	mov	r19,zero
    8e50:	54800017 	ldw	r18,0(r10)
    8e54:	52800104 	addi	r10,r10,4
    8e58:	da802215 	stw	r10,136(sp)
    8e5c:	003f5306 	br	8bac <___vfiprintf_internal_r+0x774>
    8e60:	da802217 	ldw	r10,136(sp)
    8e64:	d8001d85 	stb	zero,118(sp)
    8e68:	55400017 	ldw	r21,0(r10)
    8e6c:	50c00104 	addi	r3,r10,4
    8e70:	a8024226 	beq	r21,zero,977c <___vfiprintf_internal_r+0x1344>
    8e74:	48021816 	blt	r9,zero,96d8 <___vfiprintf_internal_r+0x12a0>
    8e78:	480d883a 	mov	r6,r9
    8e7c:	000b883a 	mov	r5,zero
    8e80:	a809883a 	mov	r4,r21
    8e84:	d8c02a15 	stw	r3,168(sp)
    8e88:	da002b15 	stw	r8,172(sp)
    8e8c:	da402c15 	stw	r9,176(sp)
    8e90:	00066880 	call	6688 <memchr>
    8e94:	d8c02a17 	ldw	r3,168(sp)
    8e98:	da002b17 	ldw	r8,172(sp)
    8e9c:	da402c17 	ldw	r9,176(sp)
    8ea0:	10024826 	beq	r2,zero,97c4 <___vfiprintf_internal_r+0x138c>
    8ea4:	1567c83a 	sub	r19,r2,r21
    8ea8:	df001d83 	ldbu	fp,118(sp)
    8eac:	d8c02215 	stw	r3,136(sp)
    8eb0:	0013883a 	mov	r9,zero
    8eb4:	003e6006 	br	8838 <___vfiprintf_internal_r+0x400>
    8eb8:	21003fcc 	andi	r4,r4,255
    8ebc:	203fc026 	beq	r4,zero,8dc0 <___vfiprintf_internal_r+0x988>
    8ec0:	d9c01d85 	stb	r7,118(sp)
    8ec4:	003fbe06 	br	8dc0 <___vfiprintf_internal_r+0x988>
    8ec8:	da802217 	ldw	r10,136(sp)
    8ecc:	54400017 	ldw	r17,0(r10)
    8ed0:	50800104 	addi	r2,r10,4
    8ed4:	883e3b16 	blt	r17,zero,87c4 <___vfiprintf_internal_r+0x38c>
    8ed8:	d8802215 	stw	r2,136(sp)
    8edc:	80c00007 	ldb	r3,0(r16)
    8ee0:	003db406 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8ee4:	01000044 	movi	r4,1
    8ee8:	01c00ac4 	movi	r7,43
    8eec:	80c00007 	ldb	r3,0(r16)
    8ef0:	003db006 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8ef4:	80c00007 	ldb	r3,0(r16)
    8ef8:	82800044 	addi	r10,r16,1
    8efc:	1b423c26 	beq	r3,r13,97f0 <___vfiprintf_internal_r+0x13b8>
    8f00:	18bff404 	addi	r2,r3,-48
    8f04:	0013883a 	mov	r9,zero
    8f08:	30822b36 	bltu	r6,r2,97b8 <___vfiprintf_internal_r+0x1380>
    8f0c:	50c00007 	ldb	r3,0(r10)
    8f10:	4a4002a4 	muli	r9,r9,10
    8f14:	54000044 	addi	r16,r10,1
    8f18:	8015883a 	mov	r10,r16
    8f1c:	4893883a 	add	r9,r9,r2
    8f20:	18bff404 	addi	r2,r3,-48
    8f24:	30bff92e 	bgeu	r6,r2,8f0c <___vfiprintf_internal_r+0xad4>
    8f28:	483da30e 	bge	r9,zero,85b8 <___vfiprintf_internal_r+0x180>
    8f2c:	027fffc4 	movi	r9,-1
    8f30:	003da106 	br	85b8 <___vfiprintf_internal_r+0x180>
    8f34:	a5001014 	ori	r20,r20,64
    8f38:	80c00007 	ldb	r3,0(r16)
    8f3c:	003d9d06 	br	85b4 <___vfiprintf_internal_r+0x17c>
    8f40:	da802217 	ldw	r10,136(sp)
    8f44:	d8001d85 	stb	zero,118(sp)
    8f48:	50c00204 	addi	r3,r10,8
    8f4c:	54800017 	ldw	r18,0(r10)
    8f50:	54c00117 	ldw	r19,4(r10)
    8f54:	4801ca16 	blt	r9,zero,9680 <___vfiprintf_internal_r+0x1248>
    8f58:	013fdfc4 	movi	r4,-129
    8f5c:	94c4b03a 	or	r2,r18,r19
    8f60:	d8c02215 	stw	r3,136(sp)
    8f64:	a128703a 	and	r20,r20,r4
    8f68:	0039883a 	mov	fp,zero
    8f6c:	103f341e 	bne	r2,zero,8c40 <___vfiprintf_internal_r+0x808>
    8f70:	483e2e26 	beq	r9,zero,882c <___vfiprintf_internal_r+0x3f4>
    8f74:	0025883a 	mov	r18,zero
    8f78:	94800c04 	addi	r18,r18,48
    8f7c:	dc8019c5 	stb	r18,103(sp)
    8f80:	dcc02717 	ldw	r19,156(sp)
    8f84:	dd4019c4 	addi	r21,sp,103
    8f88:	003e2b06 	br	8838 <___vfiprintf_internal_r+0x400>
    8f8c:	21003fcc 	andi	r4,r4,255
    8f90:	2002361e 	bne	r4,zero,986c <___vfiprintf_internal_r+0x1434>
    8f94:	1801c126 	beq	r3,zero,969c <___vfiprintf_internal_r+0x1264>
    8f98:	04800044 	movi	r18,1
    8f9c:	d8c01005 	stb	r3,64(sp)
    8fa0:	d8001d85 	stb	zero,118(sp)
    8fa4:	9027883a 	mov	r19,r18
    8fa8:	dd401004 	addi	r21,sp,64
    8fac:	003f1106 	br	8bf4 <___vfiprintf_internal_r+0x7bc>
    8fb0:	d9402117 	ldw	r5,132(sp)
    8fb4:	d9002017 	ldw	r4,128(sp)
    8fb8:	d9801a04 	addi	r6,sp,104
    8fbc:	d9c02b15 	stw	r7,172(sp)
    8fc0:	dbc02a15 	stw	r15,168(sp)
    8fc4:	00083240 	call	8324 <__sprint_r.part.0>
    8fc8:	d9c02b17 	ldw	r7,172(sp)
    8fcc:	dbc02a17 	ldw	r15,168(sp)
    8fd0:	10006d1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    8fd4:	d9801b17 	ldw	r6,108(sp)
    8fd8:	d8801c17 	ldw	r2,112(sp)
    8fdc:	d811883a 	mov	r8,sp
    8fe0:	31400044 	addi	r5,r6,1
    8fe4:	003e3306 	br	88b4 <___vfiprintf_internal_r+0x47c>
    8fe8:	d9401b17 	ldw	r5,108(sp)
    8fec:	d8801c17 	ldw	r2,112(sp)
    8ff0:	29000044 	addi	r4,r5,1
    8ff4:	d8c01d87 	ldb	r3,118(sp)
    8ff8:	183e4d26 	beq	r3,zero,8930 <___vfiprintf_internal_r+0x4f8>
    8ffc:	00c00044 	movi	r3,1
    9000:	d9401d84 	addi	r5,sp,118
    9004:	10c5883a 	add	r2,r2,r3
    9008:	41400015 	stw	r5,0(r8)
    900c:	40c00115 	stw	r3,4(r8)
    9010:	d8801c15 	stw	r2,112(sp)
    9014:	d9001b15 	stw	r4,108(sp)
    9018:	014001c4 	movi	r5,7
    901c:	2900a90e 	bge	r5,r4,92c4 <___vfiprintf_internal_r+0xe8c>
    9020:	1000da1e 	bne	r2,zero,938c <___vfiprintf_internal_r+0xf54>
    9024:	7000ab1e 	bne	r14,zero,92d4 <___vfiprintf_internal_r+0xe9c>
    9028:	000b883a 	mov	r5,zero
    902c:	1809883a 	mov	r4,r3
    9030:	d811883a 	mov	r8,sp
    9034:	00c02004 	movi	r3,128
    9038:	e0fe4d26 	beq	fp,r3,8970 <___vfiprintf_internal_r+0x538>
    903c:	4cf9c83a 	sub	fp,r9,r19
    9040:	073e7b0e 	bge	zero,fp,8a30 <___vfiprintf_internal_r+0x5f8>
    9044:	01c00404 	movi	r7,16
    9048:	3f01900e 	bge	r7,fp,968c <___vfiprintf_internal_r+0x1254>
    904c:	00c00074 	movhi	r3,1
    9050:	18dfa604 	addi	r3,r3,32408
    9054:	d8c02415 	stw	r3,144(sp)
    9058:	034001c4 	movi	r13,7
    905c:	00000506 	br	9074 <___vfiprintf_internal_r+0xc3c>
    9060:	29000084 	addi	r4,r5,2
    9064:	42000204 	addi	r8,r8,8
    9068:	180b883a 	mov	r5,r3
    906c:	e73ffc04 	addi	fp,fp,-16
    9070:	3f000d0e 	bge	r7,fp,90a8 <___vfiprintf_internal_r+0xc70>
    9074:	10800404 	addi	r2,r2,16
    9078:	28c00044 	addi	r3,r5,1
    907c:	45c00015 	stw	r23,0(r8)
    9080:	41c00115 	stw	r7,4(r8)
    9084:	d8801c15 	stw	r2,112(sp)
    9088:	d8c01b15 	stw	r3,108(sp)
    908c:	68fff40e 	bge	r13,r3,9060 <___vfiprintf_internal_r+0xc28>
    9090:	1000101e 	bne	r2,zero,90d4 <___vfiprintf_internal_r+0xc9c>
    9094:	e73ffc04 	addi	fp,fp,-16
    9098:	01000044 	movi	r4,1
    909c:	000b883a 	mov	r5,zero
    90a0:	d811883a 	mov	r8,sp
    90a4:	3f3ff316 	blt	r7,fp,9074 <___vfiprintf_internal_r+0xc3c>
    90a8:	da802417 	ldw	r10,144(sp)
    90ac:	1705883a 	add	r2,r2,fp
    90b0:	47000115 	stw	fp,4(r8)
    90b4:	42800015 	stw	r10,0(r8)
    90b8:	d8801c15 	stw	r2,112(sp)
    90bc:	d9001b15 	stw	r4,108(sp)
    90c0:	00c001c4 	movi	r3,7
    90c4:	19003616 	blt	r3,r4,91a0 <___vfiprintf_internal_r+0xd68>
    90c8:	42000204 	addi	r8,r8,8
    90cc:	21000044 	addi	r4,r4,1
    90d0:	003e5706 	br	8a30 <___vfiprintf_internal_r+0x5f8>
    90d4:	d9402117 	ldw	r5,132(sp)
    90d8:	d9002017 	ldw	r4,128(sp)
    90dc:	d9801a04 	addi	r6,sp,104
    90e0:	d9c02b15 	stw	r7,172(sp)
    90e4:	db402a15 	stw	r13,168(sp)
    90e8:	00083240 	call	8324 <__sprint_r.part.0>
    90ec:	d9c02b17 	ldw	r7,172(sp)
    90f0:	db402a17 	ldw	r13,168(sp)
    90f4:	1000241e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    90f8:	d9401b17 	ldw	r5,108(sp)
    90fc:	d8801c17 	ldw	r2,112(sp)
    9100:	d811883a 	mov	r8,sp
    9104:	29000044 	addi	r4,r5,1
    9108:	003fd806 	br	906c <___vfiprintf_internal_r+0xc34>
    910c:	d9401b17 	ldw	r5,108(sp)
    9110:	00c00074 	movhi	r3,1
    9114:	18dfaa04 	addi	r3,r3,32424
    9118:	d8c02415 	stw	r3,144(sp)
    911c:	29400044 	addi	r5,r5,1
    9120:	d8c02417 	ldw	r3,144(sp)
    9124:	14c5883a 	add	r2,r2,r19
    9128:	44c00115 	stw	r19,4(r8)
    912c:	40c00015 	stw	r3,0(r8)
    9130:	d8801c15 	stw	r2,112(sp)
    9134:	d9401b15 	stw	r5,108(sp)
    9138:	00c001c4 	movi	r3,7
    913c:	1940070e 	bge	r3,r5,915c <___vfiprintf_internal_r+0xd24>
    9140:	103e4826 	beq	r2,zero,8a64 <___vfiprintf_internal_r+0x62c>
    9144:	d9402117 	ldw	r5,132(sp)
    9148:	d9002017 	ldw	r4,128(sp)
    914c:	d9801a04 	addi	r6,sp,104
    9150:	00083240 	call	8324 <__sprint_r.part.0>
    9154:	10000c1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9158:	d8801c17 	ldw	r2,112(sp)
    915c:	8c80010e 	bge	r17,r18,9164 <___vfiprintf_internal_r+0xd2c>
    9160:	9023883a 	mov	r17,r18
    9164:	da802317 	ldw	r10,140(sp)
    9168:	5455883a 	add	r10,r10,r17
    916c:	da802315 	stw	r10,140(sp)
    9170:	103e4126 	beq	r2,zero,8a78 <___vfiprintf_internal_r+0x640>
    9174:	d9402117 	ldw	r5,132(sp)
    9178:	d9002017 	ldw	r4,128(sp)
    917c:	d9801a04 	addi	r6,sp,104
    9180:	00083240 	call	8324 <__sprint_r.part.0>
    9184:	103e3c26 	beq	r2,zero,8a78 <___vfiprintf_internal_r+0x640>
    9188:	dd002117 	ldw	r20,132(sp)
    918c:	a080030b 	ldhu	r2,12(r20)
    9190:	1080100c 	andi	r2,r2,64
    9194:	1001231e 	bne	r2,zero,9624 <___vfiprintf_internal_r+0x11ec>
    9198:	d8802317 	ldw	r2,140(sp)
    919c:	003d7b06 	br	878c <___vfiprintf_internal_r+0x354>
    91a0:	1000991e 	bne	r2,zero,9408 <___vfiprintf_internal_r+0xfd0>
    91a4:	00c00044 	movi	r3,1
    91a8:	9805883a 	mov	r2,r19
    91ac:	dd400015 	stw	r21,0(sp)
    91b0:	dcc00115 	stw	r19,4(sp)
    91b4:	dcc01c15 	stw	r19,112(sp)
    91b8:	d8c01b15 	stw	r3,108(sp)
    91bc:	d811883a 	mov	r8,sp
    91c0:	42000204 	addi	r8,r8,8
    91c4:	a2c0010c 	andi	r11,r20,4
    91c8:	583fe426 	beq	r11,zero,915c <___vfiprintf_internal_r+0xd24>
    91cc:	8ca7c83a 	sub	r19,r17,r18
    91d0:	04ffe20e 	bge	zero,r19,915c <___vfiprintf_internal_r+0xd24>
    91d4:	01c00404 	movi	r7,16
    91d8:	3cffcc0e 	bge	r7,r19,910c <___vfiprintf_internal_r+0xcd4>
    91dc:	02800074 	movhi	r10,1
    91e0:	529faa04 	addi	r10,r10,32424
    91e4:	d9001b17 	ldw	r4,108(sp)
    91e8:	da802415 	stw	r10,144(sp)
    91ec:	382b883a 	mov	r21,r7
    91f0:	050001c4 	movi	r20,7
    91f4:	df002017 	ldw	fp,128(sp)
    91f8:	00000506 	br	9210 <___vfiprintf_internal_r+0xdd8>
    91fc:	21400084 	addi	r5,r4,2
    9200:	42000204 	addi	r8,r8,8
    9204:	1809883a 	mov	r4,r3
    9208:	9cfffc04 	addi	r19,r19,-16
    920c:	acffc40e 	bge	r21,r19,9120 <___vfiprintf_internal_r+0xce8>
    9210:	10800404 	addi	r2,r2,16
    9214:	20c00044 	addi	r3,r4,1
    9218:	45800015 	stw	r22,0(r8)
    921c:	45400115 	stw	r21,4(r8)
    9220:	d8801c15 	stw	r2,112(sp)
    9224:	d8c01b15 	stw	r3,108(sp)
    9228:	a0fff40e 	bge	r20,r3,91fc <___vfiprintf_internal_r+0xdc4>
    922c:	1000041e 	bne	r2,zero,9240 <___vfiprintf_internal_r+0xe08>
    9230:	01400044 	movi	r5,1
    9234:	0009883a 	mov	r4,zero
    9238:	d811883a 	mov	r8,sp
    923c:	003ff206 	br	9208 <___vfiprintf_internal_r+0xdd0>
    9240:	d9402117 	ldw	r5,132(sp)
    9244:	d9801a04 	addi	r6,sp,104
    9248:	e009883a 	mov	r4,fp
    924c:	00083240 	call	8324 <__sprint_r.part.0>
    9250:	103fcd1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9254:	d9001b17 	ldw	r4,108(sp)
    9258:	d8801c17 	ldw	r2,112(sp)
    925c:	d811883a 	mov	r8,sp
    9260:	21400044 	addi	r5,r4,1
    9264:	003fe806 	br	9208 <___vfiprintf_internal_r+0xdd0>
    9268:	d9402117 	ldw	r5,132(sp)
    926c:	d9002017 	ldw	r4,128(sp)
    9270:	d9801a04 	addi	r6,sp,104
    9274:	d9c02b15 	stw	r7,172(sp)
    9278:	db402a15 	stw	r13,168(sp)
    927c:	00083240 	call	8324 <__sprint_r.part.0>
    9280:	d9c02b17 	ldw	r7,172(sp)
    9284:	db402a17 	ldw	r13,168(sp)
    9288:	103fbf1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    928c:	d9401b17 	ldw	r5,108(sp)
    9290:	d8801c17 	ldw	r2,112(sp)
    9294:	d811883a 	mov	r8,sp
    9298:	29800044 	addi	r6,r5,1
    929c:	003dc406 	br	89b0 <___vfiprintf_internal_r+0x578>
    92a0:	1000d21e 	bne	r2,zero,95ec <___vfiprintf_internal_r+0x11b4>
    92a4:	d8c01d87 	ldb	r3,118(sp)
    92a8:	18009526 	beq	r3,zero,9500 <___vfiprintf_internal_r+0x10c8>
    92ac:	00800044 	movi	r2,1
    92b0:	d8c01d84 	addi	r3,sp,118
    92b4:	1009883a 	mov	r4,r2
    92b8:	d8c00015 	stw	r3,0(sp)
    92bc:	d8800115 	stw	r2,4(sp)
    92c0:	d811883a 	mov	r8,sp
    92c4:	200b883a 	mov	r5,r4
    92c8:	42000204 	addi	r8,r8,8
    92cc:	21000044 	addi	r4,r4,1
    92d0:	003d9706 	br	8930 <___vfiprintf_internal_r+0x4f8>
    92d4:	d9001d04 	addi	r4,sp,116
    92d8:	00800084 	movi	r2,2
    92dc:	d9000015 	stw	r4,0(sp)
    92e0:	d8800115 	stw	r2,4(sp)
    92e4:	1809883a 	mov	r4,r3
    92e8:	d811883a 	mov	r8,sp
    92ec:	200b883a 	mov	r5,r4
    92f0:	42000204 	addi	r8,r8,8
    92f4:	21000044 	addi	r4,r4,1
    92f8:	003f4e06 	br	9034 <___vfiprintf_internal_r+0xbfc>
    92fc:	d8001d85 	stb	zero,118(sp)
    9300:	48005016 	blt	r9,zero,9444 <___vfiprintf_internal_r+0x100c>
    9304:	00ffdfc4 	movi	r3,-129
    9308:	94c4b03a 	or	r2,r18,r19
    930c:	a0e8703a 	and	r20,r20,r3
    9310:	103d4426 	beq	r2,zero,8824 <___vfiprintf_internal_r+0x3ec>
    9314:	0039883a 	mov	fp,zero
    9318:	d9002617 	ldw	r4,152(sp)
    931c:	dd401a04 	addi	r21,sp,104
    9320:	908003cc 	andi	r2,r18,15
    9324:	9806973a 	slli	r3,r19,28
    9328:	2085883a 	add	r2,r4,r2
    932c:	9024d13a 	srli	r18,r18,4
    9330:	10800003 	ldbu	r2,0(r2)
    9334:	9826d13a 	srli	r19,r19,4
    9338:	ad7fffc4 	addi	r21,r21,-1
    933c:	1ca4b03a 	or	r18,r3,r18
    9340:	a8800005 	stb	r2,0(r21)
    9344:	94c4b03a 	or	r2,r18,r19
    9348:	103ff51e 	bne	r2,zero,9320 <___vfiprintf_internal_r+0xee8>
    934c:	003e5906 	br	8cb4 <___vfiprintf_internal_r+0x87c>
    9350:	d9402117 	ldw	r5,132(sp)
    9354:	d9002017 	ldw	r4,128(sp)
    9358:	d9801a04 	addi	r6,sp,104
    935c:	00083240 	call	8324 <__sprint_r.part.0>
    9360:	103f891e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9364:	d8801c17 	ldw	r2,112(sp)
    9368:	d811883a 	mov	r8,sp
    936c:	003f9506 	br	91c4 <___vfiprintf_internal_r+0xd8c>
    9370:	d9402117 	ldw	r5,132(sp)
    9374:	d9002017 	ldw	r4,128(sp)
    9378:	d9801a04 	addi	r6,sp,104
    937c:	00083240 	call	8324 <__sprint_r.part.0>
    9380:	103f811e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9384:	d811883a 	mov	r8,sp
    9388:	003ced06 	br	8740 <___vfiprintf_internal_r+0x308>
    938c:	d9402117 	ldw	r5,132(sp)
    9390:	d9002017 	ldw	r4,128(sp)
    9394:	d9801a04 	addi	r6,sp,104
    9398:	da402c15 	stw	r9,176(sp)
    939c:	db802a15 	stw	r14,168(sp)
    93a0:	00083240 	call	8324 <__sprint_r.part.0>
    93a4:	da402c17 	ldw	r9,176(sp)
    93a8:	db802a17 	ldw	r14,168(sp)
    93ac:	103f761e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    93b0:	d9401b17 	ldw	r5,108(sp)
    93b4:	d8801c17 	ldw	r2,112(sp)
    93b8:	d811883a 	mov	r8,sp
    93bc:	29000044 	addi	r4,r5,1
    93c0:	003d5b06 	br	8930 <___vfiprintf_internal_r+0x4f8>
    93c4:	d9402117 	ldw	r5,132(sp)
    93c8:	d9002017 	ldw	r4,128(sp)
    93cc:	d9801a04 	addi	r6,sp,104
    93d0:	da402c15 	stw	r9,176(sp)
    93d4:	00083240 	call	8324 <__sprint_r.part.0>
    93d8:	da402c17 	ldw	r9,176(sp)
    93dc:	103f6a1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    93e0:	d9401b17 	ldw	r5,108(sp)
    93e4:	d8801c17 	ldw	r2,112(sp)
    93e8:	d811883a 	mov	r8,sp
    93ec:	29000044 	addi	r4,r5,1
    93f0:	003f1006 	br	9034 <___vfiprintf_internal_r+0xbfc>
    93f4:	1000c31e 	bne	r2,zero,9704 <___vfiprintf_internal_r+0x12cc>
    93f8:	01000044 	movi	r4,1
    93fc:	000b883a 	mov	r5,zero
    9400:	d811883a 	mov	r8,sp
    9404:	003f0d06 	br	903c <___vfiprintf_internal_r+0xc04>
    9408:	d9402117 	ldw	r5,132(sp)
    940c:	d9002017 	ldw	r4,128(sp)
    9410:	d9801a04 	addi	r6,sp,104
    9414:	00083240 	call	8324 <__sprint_r.part.0>
    9418:	103f5b1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    941c:	d9001b17 	ldw	r4,108(sp)
    9420:	d8801c17 	ldw	r2,112(sp)
    9424:	d811883a 	mov	r8,sp
    9428:	21000044 	addi	r4,r4,1
    942c:	003d8006 	br	8a30 <___vfiprintf_internal_r+0x5f8>
    9430:	01000074 	movhi	r4,1
    9434:	211f4504 	addi	r4,r4,32020
    9438:	d9002615 	stw	r4,152(sp)
    943c:	d8c02215 	stw	r3,136(sp)
    9440:	1029883a 	mov	r20,r2
    9444:	94c4b03a 	or	r2,r18,r19
    9448:	103fb21e 	bne	r2,zero,9314 <___vfiprintf_internal_r+0xedc>
    944c:	0039883a 	mov	fp,zero
    9450:	00800084 	movi	r2,2
    9454:	003e6b06 	br	8e04 <___vfiprintf_internal_r+0x9cc>
    9458:	da802217 	ldw	r10,136(sp)
    945c:	d8001d85 	stb	zero,118(sp)
    9460:	0027883a 	mov	r19,zero
    9464:	50800104 	addi	r2,r10,4
    9468:	54800017 	ldw	r18,0(r10)
    946c:	483e6016 	blt	r9,zero,8df0 <___vfiprintf_internal_r+0x9b8>
    9470:	00ffdfc4 	movi	r3,-129
    9474:	d8802215 	stw	r2,136(sp)
    9478:	a0e8703a 	and	r20,r20,r3
    947c:	0039883a 	mov	fp,zero
    9480:	903ebb26 	beq	r18,zero,8f70 <___vfiprintf_internal_r+0xb38>
    9484:	00800244 	movi	r2,9
    9488:	14bdee36 	bltu	r2,r18,8c44 <___vfiprintf_internal_r+0x80c>
    948c:	003eba06 	br	8f78 <___vfiprintf_internal_r+0xb40>
    9490:	00800c04 	movi	r2,48
    9494:	d8c01d45 	stb	r3,117(sp)
    9498:	d8801d05 	stb	r2,116(sp)
    949c:	d8001d85 	stb	zero,118(sp)
    94a0:	a0c00094 	ori	r3,r20,2
    94a4:	4800a916 	blt	r9,zero,974c <___vfiprintf_internal_r+0x1314>
    94a8:	00bfdfc4 	movi	r2,-129
    94ac:	a096703a 	and	r11,r20,r2
    94b0:	5d000094 	ori	r20,r11,2
    94b4:	0039883a 	mov	fp,zero
    94b8:	003f9706 	br	9318 <___vfiprintf_internal_r+0xee0>
    94bc:	8025883a 	mov	r18,r16
    94c0:	003c2e06 	br	857c <___vfiprintf_internal_r+0x144>
    94c4:	00800074 	movhi	r2,1
    94c8:	109f4504 	addi	r2,r2,32020
    94cc:	0039883a 	mov	fp,zero
    94d0:	d8802615 	stw	r2,152(sp)
    94d4:	003f9006 	br	9318 <___vfiprintf_internal_r+0xee0>
    94d8:	04a5c83a 	sub	r18,zero,r18
    94dc:	07000b44 	movi	fp,45
    94e0:	9004c03a 	cmpne	r2,r18,zero
    94e4:	04e7c83a 	sub	r19,zero,r19
    94e8:	df001d85 	stb	fp,118(sp)
    94ec:	98a7c83a 	sub	r19,r19,r2
    94f0:	48009f16 	blt	r9,zero,9770 <___vfiprintf_internal_r+0x1338>
    94f4:	00bfdfc4 	movi	r2,-129
    94f8:	a0a8703a 	and	r20,r20,r2
    94fc:	003dd006 	br	8c40 <___vfiprintf_internal_r+0x808>
    9500:	70004c26 	beq	r14,zero,9634 <___vfiprintf_internal_r+0x11fc>
    9504:	00800084 	movi	r2,2
    9508:	d8c01d04 	addi	r3,sp,116
    950c:	d8c00015 	stw	r3,0(sp)
    9510:	d8800115 	stw	r2,4(sp)
    9514:	01000044 	movi	r4,1
    9518:	d811883a 	mov	r8,sp
    951c:	003f7306 	br	92ec <___vfiprintf_internal_r+0xeb4>
    9520:	a080100c 	andi	r2,r20,64
    9524:	da802217 	ldw	r10,136(sp)
    9528:	103e0626 	beq	r2,zero,8d44 <___vfiprintf_internal_r+0x90c>
    952c:	5480000f 	ldh	r18,0(r10)
    9530:	52800104 	addi	r10,r10,4
    9534:	da802215 	stw	r10,136(sp)
    9538:	9027d7fa 	srai	r19,r18,31
    953c:	9805883a 	mov	r2,r19
    9540:	003db806 	br	8c24 <___vfiprintf_internal_r+0x7ec>
    9544:	a080040c 	andi	r2,r20,16
    9548:	1000091e 	bne	r2,zero,9570 <___vfiprintf_internal_r+0x1138>
    954c:	a2c0100c 	andi	r11,r20,64
    9550:	58000726 	beq	r11,zero,9570 <___vfiprintf_internal_r+0x1138>
    9554:	da802217 	ldw	r10,136(sp)
    9558:	50800017 	ldw	r2,0(r10)
    955c:	52800104 	addi	r10,r10,4
    9560:	da802215 	stw	r10,136(sp)
    9564:	da802317 	ldw	r10,140(sp)
    9568:	1280000d 	sth	r10,0(r2)
    956c:	003be706 	br	850c <___vfiprintf_internal_r+0xd4>
    9570:	da802217 	ldw	r10,136(sp)
    9574:	50800017 	ldw	r2,0(r10)
    9578:	52800104 	addi	r10,r10,4
    957c:	da802215 	stw	r10,136(sp)
    9580:	da802317 	ldw	r10,140(sp)
    9584:	12800015 	stw	r10,0(r2)
    9588:	003be006 	br	850c <___vfiprintf_internal_r+0xd4>
    958c:	a080100c 	andi	r2,r20,64
    9590:	da802217 	ldw	r10,136(sp)
    9594:	10003026 	beq	r2,zero,9658 <___vfiprintf_internal_r+0x1220>
    9598:	5480000b 	ldhu	r18,0(r10)
    959c:	52800104 	addi	r10,r10,4
    95a0:	0027883a 	mov	r19,zero
    95a4:	da802215 	stw	r10,136(sp)
    95a8:	003d8006 	br	8bac <___vfiprintf_internal_r+0x774>
    95ac:	80c00007 	ldb	r3,0(r16)
    95b0:	003c0006 	br	85b4 <___vfiprintf_internal_r+0x17c>
    95b4:	a080100c 	andi	r2,r20,64
    95b8:	d8001d85 	stb	zero,118(sp)
    95bc:	da802217 	ldw	r10,136(sp)
    95c0:	1000201e 	bne	r2,zero,9644 <___vfiprintf_internal_r+0x120c>
    95c4:	50800104 	addi	r2,r10,4
    95c8:	54800017 	ldw	r18,0(r10)
    95cc:	0027883a 	mov	r19,zero
    95d0:	483def0e 	bge	r9,zero,8d90 <___vfiprintf_internal_r+0x958>
    95d4:	94c6b03a 	or	r3,r18,r19
    95d8:	d8802215 	stw	r2,136(sp)
    95dc:	183d4e1e 	bne	r3,zero,8b18 <___vfiprintf_internal_r+0x6e0>
    95e0:	0039883a 	mov	fp,zero
    95e4:	0005883a 	mov	r2,zero
    95e8:	003e0606 	br	8e04 <___vfiprintf_internal_r+0x9cc>
    95ec:	d9402117 	ldw	r5,132(sp)
    95f0:	d9002017 	ldw	r4,128(sp)
    95f4:	d9801a04 	addi	r6,sp,104
    95f8:	da402c15 	stw	r9,176(sp)
    95fc:	db802a15 	stw	r14,168(sp)
    9600:	00083240 	call	8324 <__sprint_r.part.0>
    9604:	da402c17 	ldw	r9,176(sp)
    9608:	db802a17 	ldw	r14,168(sp)
    960c:	103ede1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9610:	d9401b17 	ldw	r5,108(sp)
    9614:	d8801c17 	ldw	r2,112(sp)
    9618:	d811883a 	mov	r8,sp
    961c:	29000044 	addi	r4,r5,1
    9620:	003e7406 	br	8ff4 <___vfiprintf_internal_r+0xbbc>
    9624:	00bfffc4 	movi	r2,-1
    9628:	003c5806 	br	878c <___vfiprintf_internal_r+0x354>
    962c:	d811883a 	mov	r8,sp
    9630:	003ee806 	br	91d4 <___vfiprintf_internal_r+0xd9c>
    9634:	000b883a 	mov	r5,zero
    9638:	01000044 	movi	r4,1
    963c:	d811883a 	mov	r8,sp
    9640:	003e7c06 	br	9034 <___vfiprintf_internal_r+0xbfc>
    9644:	50800104 	addi	r2,r10,4
    9648:	5480000b 	ldhu	r18,0(r10)
    964c:	0027883a 	mov	r19,zero
    9650:	483dcf0e 	bge	r9,zero,8d90 <___vfiprintf_internal_r+0x958>
    9654:	003fdf06 	br	95d4 <___vfiprintf_internal_r+0x119c>
    9658:	54800017 	ldw	r18,0(r10)
    965c:	52800104 	addi	r10,r10,4
    9660:	0027883a 	mov	r19,zero
    9664:	da802215 	stw	r10,136(sp)
    9668:	003d5006 	br	8bac <___vfiprintf_internal_r+0x774>
    966c:	50800104 	addi	r2,r10,4
    9670:	5480000b 	ldhu	r18,0(r10)
    9674:	0027883a 	mov	r19,zero
    9678:	483f7d0e 	bge	r9,zero,9470 <___vfiprintf_internal_r+0x1038>
    967c:	003ddc06 	br	8df0 <___vfiprintf_internal_r+0x9b8>
    9680:	d8c02215 	stw	r3,136(sp)
    9684:	0039883a 	mov	fp,zero
    9688:	003ddb06 	br	8df8 <___vfiprintf_internal_r+0x9c0>
    968c:	02800074 	movhi	r10,1
    9690:	529fa604 	addi	r10,r10,32408
    9694:	da802415 	stw	r10,144(sp)
    9698:	003e8306 	br	90a8 <___vfiprintf_internal_r+0xc70>
    969c:	d8801c17 	ldw	r2,112(sp)
    96a0:	dd002117 	ldw	r20,132(sp)
    96a4:	103eb926 	beq	r2,zero,918c <___vfiprintf_internal_r+0xd54>
    96a8:	d9002017 	ldw	r4,128(sp)
    96ac:	d9801a04 	addi	r6,sp,104
    96b0:	a00b883a 	mov	r5,r20
    96b4:	00083240 	call	8324 <__sprint_r.part.0>
    96b8:	003eb406 	br	918c <___vfiprintf_internal_r+0xd54>
    96bc:	80c00043 	ldbu	r3,1(r16)
    96c0:	a5000814 	ori	r20,r20,32
    96c4:	84000044 	addi	r16,r16,1
    96c8:	18c03fcc 	andi	r3,r3,255
    96cc:	18c0201c 	xori	r3,r3,128
    96d0:	18ffe004 	addi	r3,r3,-128
    96d4:	003bb706 	br	85b4 <___vfiprintf_internal_r+0x17c>
    96d8:	a809883a 	mov	r4,r21
    96dc:	d8c02a15 	stw	r3,168(sp)
    96e0:	da002b15 	stw	r8,172(sp)
    96e4:	00015ec0 	call	15ec <strlen>
    96e8:	d8c02a17 	ldw	r3,168(sp)
    96ec:	1027883a 	mov	r19,r2
    96f0:	df001d83 	ldbu	fp,118(sp)
    96f4:	d8c02215 	stw	r3,136(sp)
    96f8:	0013883a 	mov	r9,zero
    96fc:	da002b17 	ldw	r8,172(sp)
    9700:	003c4d06 	br	8838 <___vfiprintf_internal_r+0x400>
    9704:	d9402117 	ldw	r5,132(sp)
    9708:	d9002017 	ldw	r4,128(sp)
    970c:	d9801a04 	addi	r6,sp,104
    9710:	da402c15 	stw	r9,176(sp)
    9714:	00083240 	call	8324 <__sprint_r.part.0>
    9718:	da402c17 	ldw	r9,176(sp)
    971c:	103e9a1e 	bne	r2,zero,9188 <___vfiprintf_internal_r+0xd50>
    9720:	d9401b17 	ldw	r5,108(sp)
    9724:	d8801c17 	ldw	r2,112(sp)
    9728:	d811883a 	mov	r8,sp
    972c:	29000044 	addi	r4,r5,1
    9730:	003e4206 	br	903c <___vfiprintf_internal_r+0xc04>
    9734:	d9401b17 	ldw	r5,108(sp)
    9738:	01000074 	movhi	r4,1
    973c:	211faa04 	addi	r4,r4,32424
    9740:	d9002415 	stw	r4,144(sp)
    9744:	29400044 	addi	r5,r5,1
    9748:	003c6d06 	br	8900 <___vfiprintf_internal_r+0x4c8>
    974c:	0039883a 	mov	fp,zero
    9750:	00800084 	movi	r2,2
    9754:	10803fcc 	andi	r2,r2,255
    9758:	01000044 	movi	r4,1
    975c:	11001e26 	beq	r2,r4,97d8 <___vfiprintf_internal_r+0x13a0>
    9760:	01000084 	movi	r4,2
    9764:	11001e1e 	bne	r2,r4,97e0 <___vfiprintf_internal_r+0x13a8>
    9768:	1829883a 	mov	r20,r3
    976c:	003eea06 	br	9318 <___vfiprintf_internal_r+0xee0>
    9770:	a007883a 	mov	r3,r20
    9774:	00800044 	movi	r2,1
    9778:	003ff606 	br	9754 <___vfiprintf_internal_r+0x131c>
    977c:	00800184 	movi	r2,6
    9780:	1240012e 	bgeu	r2,r9,9788 <___vfiprintf_internal_r+0x1350>
    9784:	1013883a 	mov	r9,r2
    9788:	4827883a 	mov	r19,r9
    978c:	4825883a 	mov	r18,r9
    9790:	48001516 	blt	r9,zero,97e8 <___vfiprintf_internal_r+0x13b0>
    9794:	05400074 	movhi	r21,1
    9798:	d8c02215 	stw	r3,136(sp)
    979c:	ad5f4a04 	addi	r21,r21,32040
    97a0:	003d1406 	br	8bf4 <___vfiprintf_internal_r+0x7bc>
    97a4:	02800074 	movhi	r10,1
    97a8:	529fa604 	addi	r10,r10,32408
    97ac:	da802415 	stw	r10,144(sp)
    97b0:	200d883a 	mov	r6,r4
    97b4:	003c9106 	br	89fc <___vfiprintf_internal_r+0x5c4>
    97b8:	5021883a 	mov	r16,r10
    97bc:	0013883a 	mov	r9,zero
    97c0:	003b7d06 	br	85b8 <___vfiprintf_internal_r+0x180>
    97c4:	4827883a 	mov	r19,r9
    97c8:	df001d83 	ldbu	fp,118(sp)
    97cc:	d8c02215 	stw	r3,136(sp)
    97d0:	0013883a 	mov	r9,zero
    97d4:	003c1806 	br	8838 <___vfiprintf_internal_r+0x400>
    97d8:	1829883a 	mov	r20,r3
    97dc:	003d1806 	br	8c40 <___vfiprintf_internal_r+0x808>
    97e0:	1829883a 	mov	r20,r3
    97e4:	003ccd06 	br	8b1c <___vfiprintf_internal_r+0x6e4>
    97e8:	0025883a 	mov	r18,zero
    97ec:	003fe906 	br	9794 <___vfiprintf_internal_r+0x135c>
    97f0:	d8802217 	ldw	r2,136(sp)
    97f4:	80c00043 	ldbu	r3,1(r16)
    97f8:	5021883a 	mov	r16,r10
    97fc:	12400017 	ldw	r9,0(r2)
    9800:	10800104 	addi	r2,r2,4
    9804:	d8802215 	stw	r2,136(sp)
    9808:	483faf0e 	bge	r9,zero,96c8 <___vfiprintf_internal_r+0x1290>
    980c:	18c03fcc 	andi	r3,r3,255
    9810:	18c0201c 	xori	r3,r3,128
    9814:	027fffc4 	movi	r9,-1
    9818:	18ffe004 	addi	r3,r3,-128
    981c:	003b6506 	br	85b4 <___vfiprintf_internal_r+0x17c>
    9820:	d9c01d85 	stb	r7,118(sp)
    9824:	003ca006 	br	8aa8 <___vfiprintf_internal_r+0x670>
    9828:	d9c01d85 	stb	r7,118(sp)
    982c:	003cad06 	br	8ae4 <___vfiprintf_internal_r+0x6ac>
    9830:	d9c01d85 	stb	r7,118(sp)
    9834:	003d7d06 	br	8e2c <___vfiprintf_internal_r+0x9f4>
    9838:	d9c01d85 	stb	r7,118(sp)
    983c:	003d5f06 	br	8dbc <___vfiprintf_internal_r+0x984>
    9840:	a080004c 	andi	r2,r20,1
    9844:	0039883a 	mov	fp,zero
    9848:	10000526 	beq	r2,zero,9860 <___vfiprintf_internal_r+0x1428>
    984c:	00800c04 	movi	r2,48
    9850:	d88019c5 	stb	r2,103(sp)
    9854:	dcc02717 	ldw	r19,156(sp)
    9858:	dd4019c4 	addi	r21,sp,103
    985c:	003bf606 	br	8838 <___vfiprintf_internal_r+0x400>
    9860:	0027883a 	mov	r19,zero
    9864:	dd401a04 	addi	r21,sp,104
    9868:	003bf306 	br	8838 <___vfiprintf_internal_r+0x400>
    986c:	d9c01d85 	stb	r7,118(sp)
    9870:	003dc806 	br	8f94 <___vfiprintf_internal_r+0xb5c>
    9874:	d9c01d85 	stb	r7,118(sp)
    9878:	003d3a06 	br	8d64 <___vfiprintf_internal_r+0x92c>
    987c:	d9c01d85 	stb	r7,118(sp)
    9880:	003d2a06 	br	8d2c <___vfiprintf_internal_r+0x8f4>
    9884:	d9c01d85 	stb	r7,118(sp)
    9888:	003cde06 	br	8c04 <___vfiprintf_internal_r+0x7cc>
    988c:	d9c01d85 	stb	r7,118(sp)
    9890:	003cbc06 	br	8b84 <___vfiprintf_internal_r+0x74c>

00009894 <__vfiprintf_internal>:
    9894:	008000b4 	movhi	r2,2
    9898:	10a6f504 	addi	r2,r2,-25644
    989c:	300f883a 	mov	r7,r6
    98a0:	280d883a 	mov	r6,r5
    98a4:	200b883a 	mov	r5,r4
    98a8:	11000017 	ldw	r4,0(r2)
    98ac:	00084381 	jmpi	8438 <___vfiprintf_internal_r>

000098b0 <__sbprintf>:
    98b0:	2880030b 	ldhu	r2,12(r5)
    98b4:	2ac01917 	ldw	r11,100(r5)
    98b8:	2a80038b 	ldhu	r10,14(r5)
    98bc:	2a400717 	ldw	r9,28(r5)
    98c0:	2a000917 	ldw	r8,36(r5)
    98c4:	defee204 	addi	sp,sp,-1144
    98c8:	00c10004 	movi	r3,1024
    98cc:	dc011a15 	stw	r16,1128(sp)
    98d0:	10bfff4c 	andi	r2,r2,65533
    98d4:	2821883a 	mov	r16,r5
    98d8:	d8cb883a 	add	r5,sp,r3
    98dc:	dc811c15 	stw	r18,1136(sp)
    98e0:	dc411b15 	stw	r17,1132(sp)
    98e4:	dfc11d15 	stw	ra,1140(sp)
    98e8:	2025883a 	mov	r18,r4
    98ec:	d881030d 	sth	r2,1036(sp)
    98f0:	dac11915 	stw	r11,1124(sp)
    98f4:	da81038d 	sth	r10,1038(sp)
    98f8:	da410715 	stw	r9,1052(sp)
    98fc:	da010915 	stw	r8,1060(sp)
    9900:	dec10015 	stw	sp,1024(sp)
    9904:	dec10415 	stw	sp,1040(sp)
    9908:	d8c10215 	stw	r3,1032(sp)
    990c:	d8c10515 	stw	r3,1044(sp)
    9910:	d8010615 	stw	zero,1048(sp)
    9914:	00084380 	call	8438 <___vfiprintf_internal_r>
    9918:	1023883a 	mov	r17,r2
    991c:	10000416 	blt	r2,zero,9930 <__sbprintf+0x80>
    9920:	d9410004 	addi	r5,sp,1024
    9924:	9009883a 	mov	r4,r18
    9928:	000554c0 	call	554c <_fflush_r>
    992c:	10000d1e 	bne	r2,zero,9964 <__sbprintf+0xb4>
    9930:	d881030b 	ldhu	r2,1036(sp)
    9934:	1080100c 	andi	r2,r2,64
    9938:	10000326 	beq	r2,zero,9948 <__sbprintf+0x98>
    993c:	8080030b 	ldhu	r2,12(r16)
    9940:	10801014 	ori	r2,r2,64
    9944:	8080030d 	sth	r2,12(r16)
    9948:	8805883a 	mov	r2,r17
    994c:	dfc11d17 	ldw	ra,1140(sp)
    9950:	dc811c17 	ldw	r18,1136(sp)
    9954:	dc411b17 	ldw	r17,1132(sp)
    9958:	dc011a17 	ldw	r16,1128(sp)
    995c:	dec11e04 	addi	sp,sp,1144
    9960:	f800283a 	ret
    9964:	047fffc4 	movi	r17,-1
    9968:	003ff106 	br	9930 <__sbprintf+0x80>

0000996c <_write_r>:
    996c:	defffd04 	addi	sp,sp,-12
    9970:	2805883a 	mov	r2,r5
    9974:	dc000015 	stw	r16,0(sp)
    9978:	040000b4 	movhi	r16,2
    997c:	dc400115 	stw	r17,4(sp)
    9980:	300b883a 	mov	r5,r6
    9984:	842e0204 	addi	r16,r16,-18424
    9988:	2023883a 	mov	r17,r4
    998c:	380d883a 	mov	r6,r7
    9990:	1009883a 	mov	r4,r2
    9994:	dfc00215 	stw	ra,8(sp)
    9998:	80000015 	stw	zero,0(r16)
    999c:	000dbfc0 	call	dbfc <write>
    99a0:	00ffffc4 	movi	r3,-1
    99a4:	10c00526 	beq	r2,r3,99bc <_write_r+0x50>
    99a8:	dfc00217 	ldw	ra,8(sp)
    99ac:	dc400117 	ldw	r17,4(sp)
    99b0:	dc000017 	ldw	r16,0(sp)
    99b4:	dec00304 	addi	sp,sp,12
    99b8:	f800283a 	ret
    99bc:	80c00017 	ldw	r3,0(r16)
    99c0:	183ff926 	beq	r3,zero,99a8 <_write_r+0x3c>
    99c4:	88c00015 	stw	r3,0(r17)
    99c8:	003ff706 	br	99a8 <_write_r+0x3c>

000099cc <_close_r>:
    99cc:	defffd04 	addi	sp,sp,-12
    99d0:	dc000015 	stw	r16,0(sp)
    99d4:	040000b4 	movhi	r16,2
    99d8:	dc400115 	stw	r17,4(sp)
    99dc:	842e0204 	addi	r16,r16,-18424
    99e0:	2023883a 	mov	r17,r4
    99e4:	2809883a 	mov	r4,r5
    99e8:	dfc00215 	stw	ra,8(sp)
    99ec:	80000015 	stw	zero,0(r16)
    99f0:	000d3f40 	call	d3f4 <close>
    99f4:	00ffffc4 	movi	r3,-1
    99f8:	10c00526 	beq	r2,r3,9a10 <_close_r+0x44>
    99fc:	dfc00217 	ldw	ra,8(sp)
    9a00:	dc400117 	ldw	r17,4(sp)
    9a04:	dc000017 	ldw	r16,0(sp)
    9a08:	dec00304 	addi	sp,sp,12
    9a0c:	f800283a 	ret
    9a10:	80c00017 	ldw	r3,0(r16)
    9a14:	183ff926 	beq	r3,zero,99fc <_close_r+0x30>
    9a18:	88c00015 	stw	r3,0(r17)
    9a1c:	003ff706 	br	99fc <_close_r+0x30>

00009a20 <_calloc_r>:
    9a20:	298b383a 	mul	r5,r5,r6
    9a24:	defffe04 	addi	sp,sp,-8
    9a28:	dfc00115 	stw	ra,4(sp)
    9a2c:	dc000015 	stw	r16,0(sp)
    9a30:	0000c4c0 	call	c4c <_malloc_r>
    9a34:	10002926 	beq	r2,zero,9adc <_calloc_r+0xbc>
    9a38:	11bfff17 	ldw	r6,-4(r2)
    9a3c:	1021883a 	mov	r16,r2
    9a40:	00bfff04 	movi	r2,-4
    9a44:	308c703a 	and	r6,r6,r2
    9a48:	00c00904 	movi	r3,36
    9a4c:	308d883a 	add	r6,r6,r2
    9a50:	19801636 	bltu	r3,r6,9aac <_calloc_r+0x8c>
    9a54:	008004c4 	movi	r2,19
    9a58:	11800b2e 	bgeu	r2,r6,9a88 <_calloc_r+0x68>
    9a5c:	80000015 	stw	zero,0(r16)
    9a60:	80000115 	stw	zero,4(r16)
    9a64:	008006c4 	movi	r2,27
    9a68:	11801a2e 	bgeu	r2,r6,9ad4 <_calloc_r+0xb4>
    9a6c:	80000215 	stw	zero,8(r16)
    9a70:	80000315 	stw	zero,12(r16)
    9a74:	30c0151e 	bne	r6,r3,9acc <_calloc_r+0xac>
    9a78:	80000415 	stw	zero,16(r16)
    9a7c:	80800604 	addi	r2,r16,24
    9a80:	80000515 	stw	zero,20(r16)
    9a84:	00000106 	br	9a8c <_calloc_r+0x6c>
    9a88:	8005883a 	mov	r2,r16
    9a8c:	10000015 	stw	zero,0(r2)
    9a90:	10000115 	stw	zero,4(r2)
    9a94:	10000215 	stw	zero,8(r2)
    9a98:	8005883a 	mov	r2,r16
    9a9c:	dfc00117 	ldw	ra,4(sp)
    9aa0:	dc000017 	ldw	r16,0(sp)
    9aa4:	dec00204 	addi	sp,sp,8
    9aa8:	f800283a 	ret
    9aac:	000b883a 	mov	r5,zero
    9ab0:	8009883a 	mov	r4,r16
    9ab4:	0006a100 	call	6a10 <memset>
    9ab8:	8005883a 	mov	r2,r16
    9abc:	dfc00117 	ldw	ra,4(sp)
    9ac0:	dc000017 	ldw	r16,0(sp)
    9ac4:	dec00204 	addi	sp,sp,8
    9ac8:	f800283a 	ret
    9acc:	80800404 	addi	r2,r16,16
    9ad0:	003fee06 	br	9a8c <_calloc_r+0x6c>
    9ad4:	80800204 	addi	r2,r16,8
    9ad8:	003fec06 	br	9a8c <_calloc_r+0x6c>
    9adc:	0005883a 	mov	r2,zero
    9ae0:	003fee06 	br	9a9c <_calloc_r+0x7c>

00009ae4 <_fclose_r>:
    9ae4:	28003926 	beq	r5,zero,9bcc <_fclose_r+0xe8>
    9ae8:	defffc04 	addi	sp,sp,-16
    9aec:	dc400115 	stw	r17,4(sp)
    9af0:	dc000015 	stw	r16,0(sp)
    9af4:	dfc00315 	stw	ra,12(sp)
    9af8:	dc800215 	stw	r18,8(sp)
    9afc:	2023883a 	mov	r17,r4
    9b00:	2821883a 	mov	r16,r5
    9b04:	20000226 	beq	r4,zero,9b10 <_fclose_r+0x2c>
    9b08:	20800e17 	ldw	r2,56(r4)
    9b0c:	10002726 	beq	r2,zero,9bac <_fclose_r+0xc8>
    9b10:	8080030f 	ldh	r2,12(r16)
    9b14:	1000071e 	bne	r2,zero,9b34 <_fclose_r+0x50>
    9b18:	0005883a 	mov	r2,zero
    9b1c:	dfc00317 	ldw	ra,12(sp)
    9b20:	dc800217 	ldw	r18,8(sp)
    9b24:	dc400117 	ldw	r17,4(sp)
    9b28:	dc000017 	ldw	r16,0(sp)
    9b2c:	dec00404 	addi	sp,sp,16
    9b30:	f800283a 	ret
    9b34:	800b883a 	mov	r5,r16
    9b38:	8809883a 	mov	r4,r17
    9b3c:	00053300 	call	5330 <__sflush_r>
    9b40:	1025883a 	mov	r18,r2
    9b44:	80800b17 	ldw	r2,44(r16)
    9b48:	10000426 	beq	r2,zero,9b5c <_fclose_r+0x78>
    9b4c:	81400717 	ldw	r5,28(r16)
    9b50:	8809883a 	mov	r4,r17
    9b54:	103ee83a 	callr	r2
    9b58:	10001616 	blt	r2,zero,9bb4 <_fclose_r+0xd0>
    9b5c:	8080030b 	ldhu	r2,12(r16)
    9b60:	1080200c 	andi	r2,r2,128
    9b64:	1000151e 	bne	r2,zero,9bbc <_fclose_r+0xd8>
    9b68:	81400c17 	ldw	r5,48(r16)
    9b6c:	28000526 	beq	r5,zero,9b84 <_fclose_r+0xa0>
    9b70:	80801004 	addi	r2,r16,64
    9b74:	28800226 	beq	r5,r2,9b80 <_fclose_r+0x9c>
    9b78:	8809883a 	mov	r4,r17
    9b7c:	0005a9c0 	call	5a9c <_free_r>
    9b80:	80000c15 	stw	zero,48(r16)
    9b84:	81401117 	ldw	r5,68(r16)
    9b88:	28000326 	beq	r5,zero,9b98 <_fclose_r+0xb4>
    9b8c:	8809883a 	mov	r4,r17
    9b90:	0005a9c0 	call	5a9c <_free_r>
    9b94:	80001115 	stw	zero,68(r16)
    9b98:	00059380 	call	5938 <__sfp_lock_acquire>
    9b9c:	8000030d 	sth	zero,12(r16)
    9ba0:	000593c0 	call	593c <__sfp_lock_release>
    9ba4:	9005883a 	mov	r2,r18
    9ba8:	003fdc06 	br	9b1c <_fclose_r+0x38>
    9bac:	00059280 	call	5928 <__sinit>
    9bb0:	003fd706 	br	9b10 <_fclose_r+0x2c>
    9bb4:	04bfffc4 	movi	r18,-1
    9bb8:	003fe806 	br	9b5c <_fclose_r+0x78>
    9bbc:	81400417 	ldw	r5,16(r16)
    9bc0:	8809883a 	mov	r4,r17
    9bc4:	0005a9c0 	call	5a9c <_free_r>
    9bc8:	003fe706 	br	9b68 <_fclose_r+0x84>
    9bcc:	0005883a 	mov	r2,zero
    9bd0:	f800283a 	ret

00009bd4 <fclose>:
    9bd4:	008000b4 	movhi	r2,2
    9bd8:	10a6f504 	addi	r2,r2,-25644
    9bdc:	200b883a 	mov	r5,r4
    9be0:	11000017 	ldw	r4,0(r2)
    9be4:	0009ae41 	jmpi	9ae4 <_fclose_r>

00009be8 <__fputwc>:
    9be8:	defff804 	addi	sp,sp,-32
    9bec:	dcc00415 	stw	r19,16(sp)
    9bf0:	dc800315 	stw	r18,12(sp)
    9bf4:	dc000115 	stw	r16,4(sp)
    9bf8:	dfc00715 	stw	ra,28(sp)
    9bfc:	dd400615 	stw	r21,24(sp)
    9c00:	dd000515 	stw	r20,20(sp)
    9c04:	dc400215 	stw	r17,8(sp)
    9c08:	2027883a 	mov	r19,r4
    9c0c:	2825883a 	mov	r18,r5
    9c10:	3021883a 	mov	r16,r6
    9c14:	00064780 	call	6478 <__locale_mb_cur_max>
    9c18:	00c00044 	movi	r3,1
    9c1c:	10c03e26 	beq	r2,r3,9d18 <__fputwc+0x130>
    9c20:	81c01704 	addi	r7,r16,92
    9c24:	900d883a 	mov	r6,r18
    9c28:	d80b883a 	mov	r5,sp
    9c2c:	9809883a 	mov	r4,r19
    9c30:	000a0b80 	call	a0b8 <_wcrtomb_r>
    9c34:	1029883a 	mov	r20,r2
    9c38:	00bfffc4 	movi	r2,-1
    9c3c:	a0802026 	beq	r20,r2,9cc0 <__fputwc+0xd8>
    9c40:	d9400003 	ldbu	r5,0(sp)
    9c44:	a0001c26 	beq	r20,zero,9cb8 <__fputwc+0xd0>
    9c48:	0023883a 	mov	r17,zero
    9c4c:	05400284 	movi	r21,10
    9c50:	00000906 	br	9c78 <__fputwc+0x90>
    9c54:	80800017 	ldw	r2,0(r16)
    9c58:	11400005 	stb	r5,0(r2)
    9c5c:	80c00017 	ldw	r3,0(r16)
    9c60:	18c00044 	addi	r3,r3,1
    9c64:	80c00015 	stw	r3,0(r16)
    9c68:	8c400044 	addi	r17,r17,1
    9c6c:	dc45883a 	add	r2,sp,r17
    9c70:	8d00112e 	bgeu	r17,r20,9cb8 <__fputwc+0xd0>
    9c74:	11400003 	ldbu	r5,0(r2)
    9c78:	80c00217 	ldw	r3,8(r16)
    9c7c:	18ffffc4 	addi	r3,r3,-1
    9c80:	80c00215 	stw	r3,8(r16)
    9c84:	183ff30e 	bge	r3,zero,9c54 <__fputwc+0x6c>
    9c88:	80800617 	ldw	r2,24(r16)
    9c8c:	18801916 	blt	r3,r2,9cf4 <__fputwc+0x10c>
    9c90:	80800017 	ldw	r2,0(r16)
    9c94:	11400005 	stb	r5,0(r2)
    9c98:	80800017 	ldw	r2,0(r16)
    9c9c:	10c00003 	ldbu	r3,0(r2)
    9ca0:	10800044 	addi	r2,r2,1
    9ca4:	1d402326 	beq	r3,r21,9d34 <__fputwc+0x14c>
    9ca8:	80800015 	stw	r2,0(r16)
    9cac:	8c400044 	addi	r17,r17,1
    9cb0:	dc45883a 	add	r2,sp,r17
    9cb4:	8d3fef36 	bltu	r17,r20,9c74 <__fputwc+0x8c>
    9cb8:	9005883a 	mov	r2,r18
    9cbc:	00000406 	br	9cd0 <__fputwc+0xe8>
    9cc0:	80c0030b 	ldhu	r3,12(r16)
    9cc4:	a005883a 	mov	r2,r20
    9cc8:	18c01014 	ori	r3,r3,64
    9ccc:	80c0030d 	sth	r3,12(r16)
    9cd0:	dfc00717 	ldw	ra,28(sp)
    9cd4:	dd400617 	ldw	r21,24(sp)
    9cd8:	dd000517 	ldw	r20,20(sp)
    9cdc:	dcc00417 	ldw	r19,16(sp)
    9ce0:	dc800317 	ldw	r18,12(sp)
    9ce4:	dc400217 	ldw	r17,8(sp)
    9ce8:	dc000117 	ldw	r16,4(sp)
    9cec:	dec00804 	addi	sp,sp,32
    9cf0:	f800283a 	ret
    9cf4:	800d883a 	mov	r6,r16
    9cf8:	29403fcc 	andi	r5,r5,255
    9cfc:	9809883a 	mov	r4,r19
    9d00:	0009f600 	call	9f60 <__swbuf_r>
    9d04:	10bfffe0 	cmpeqi	r2,r2,-1
    9d08:	10803fcc 	andi	r2,r2,255
    9d0c:	103fd626 	beq	r2,zero,9c68 <__fputwc+0x80>
    9d10:	00bfffc4 	movi	r2,-1
    9d14:	003fee06 	br	9cd0 <__fputwc+0xe8>
    9d18:	90ffffc4 	addi	r3,r18,-1
    9d1c:	01003f84 	movi	r4,254
    9d20:	20ffbf36 	bltu	r4,r3,9c20 <__fputwc+0x38>
    9d24:	900b883a 	mov	r5,r18
    9d28:	dc800005 	stb	r18,0(sp)
    9d2c:	1029883a 	mov	r20,r2
    9d30:	003fc506 	br	9c48 <__fputwc+0x60>
    9d34:	800d883a 	mov	r6,r16
    9d38:	a80b883a 	mov	r5,r21
    9d3c:	9809883a 	mov	r4,r19
    9d40:	0009f600 	call	9f60 <__swbuf_r>
    9d44:	10bfffe0 	cmpeqi	r2,r2,-1
    9d48:	003fef06 	br	9d08 <__fputwc+0x120>

00009d4c <_fputwc_r>:
    9d4c:	3080030b 	ldhu	r2,12(r6)
    9d50:	10c8000c 	andi	r3,r2,8192
    9d54:	1800051e 	bne	r3,zero,9d6c <_fputwc_r+0x20>
    9d58:	30c01917 	ldw	r3,100(r6)
    9d5c:	10880014 	ori	r2,r2,8192
    9d60:	3080030d 	sth	r2,12(r6)
    9d64:	18880014 	ori	r2,r3,8192
    9d68:	30801915 	stw	r2,100(r6)
    9d6c:	0009be81 	jmpi	9be8 <__fputwc>

00009d70 <fputwc>:
    9d70:	008000b4 	movhi	r2,2
    9d74:	defffc04 	addi	sp,sp,-16
    9d78:	10a6f504 	addi	r2,r2,-25644
    9d7c:	dc000115 	stw	r16,4(sp)
    9d80:	14000017 	ldw	r16,0(r2)
    9d84:	dc400215 	stw	r17,8(sp)
    9d88:	dfc00315 	stw	ra,12(sp)
    9d8c:	2023883a 	mov	r17,r4
    9d90:	80000226 	beq	r16,zero,9d9c <fputwc+0x2c>
    9d94:	80800e17 	ldw	r2,56(r16)
    9d98:	10001026 	beq	r2,zero,9ddc <fputwc+0x6c>
    9d9c:	2880030b 	ldhu	r2,12(r5)
    9da0:	10c8000c 	andi	r3,r2,8192
    9da4:	1800051e 	bne	r3,zero,9dbc <fputwc+0x4c>
    9da8:	28c01917 	ldw	r3,100(r5)
    9dac:	10880014 	ori	r2,r2,8192
    9db0:	2880030d 	sth	r2,12(r5)
    9db4:	18880014 	ori	r2,r3,8192
    9db8:	28801915 	stw	r2,100(r5)
    9dbc:	280d883a 	mov	r6,r5
    9dc0:	8009883a 	mov	r4,r16
    9dc4:	880b883a 	mov	r5,r17
    9dc8:	dfc00317 	ldw	ra,12(sp)
    9dcc:	dc400217 	ldw	r17,8(sp)
    9dd0:	dc000117 	ldw	r16,4(sp)
    9dd4:	dec00404 	addi	sp,sp,16
    9dd8:	0009be81 	jmpi	9be8 <__fputwc>
    9ddc:	8009883a 	mov	r4,r16
    9de0:	d9400015 	stw	r5,0(sp)
    9de4:	00059280 	call	5928 <__sinit>
    9de8:	d9400017 	ldw	r5,0(sp)
    9dec:	003feb06 	br	9d9c <fputwc+0x2c>

00009df0 <_fstat_r>:
    9df0:	defffd04 	addi	sp,sp,-12
    9df4:	2805883a 	mov	r2,r5
    9df8:	dc000015 	stw	r16,0(sp)
    9dfc:	040000b4 	movhi	r16,2
    9e00:	dc400115 	stw	r17,4(sp)
    9e04:	842e0204 	addi	r16,r16,-18424
    9e08:	2023883a 	mov	r17,r4
    9e0c:	300b883a 	mov	r5,r6
    9e10:	1009883a 	mov	r4,r2
    9e14:	dfc00215 	stw	ra,8(sp)
    9e18:	80000015 	stw	zero,0(r16)
    9e1c:	000d52c0 	call	d52c <fstat>
    9e20:	00ffffc4 	movi	r3,-1
    9e24:	10c00526 	beq	r2,r3,9e3c <_fstat_r+0x4c>
    9e28:	dfc00217 	ldw	ra,8(sp)
    9e2c:	dc400117 	ldw	r17,4(sp)
    9e30:	dc000017 	ldw	r16,0(sp)
    9e34:	dec00304 	addi	sp,sp,12
    9e38:	f800283a 	ret
    9e3c:	80c00017 	ldw	r3,0(r16)
    9e40:	183ff926 	beq	r3,zero,9e28 <_fstat_r+0x38>
    9e44:	88c00015 	stw	r3,0(r17)
    9e48:	003ff706 	br	9e28 <_fstat_r+0x38>

00009e4c <_isatty_r>:
    9e4c:	defffd04 	addi	sp,sp,-12
    9e50:	dc000015 	stw	r16,0(sp)
    9e54:	040000b4 	movhi	r16,2
    9e58:	dc400115 	stw	r17,4(sp)
    9e5c:	842e0204 	addi	r16,r16,-18424
    9e60:	2023883a 	mov	r17,r4
    9e64:	2809883a 	mov	r4,r5
    9e68:	dfc00215 	stw	ra,8(sp)
    9e6c:	80000015 	stw	zero,0(r16)
    9e70:	000d6180 	call	d618 <isatty>
    9e74:	00ffffc4 	movi	r3,-1
    9e78:	10c00526 	beq	r2,r3,9e90 <_isatty_r+0x44>
    9e7c:	dfc00217 	ldw	ra,8(sp)
    9e80:	dc400117 	ldw	r17,4(sp)
    9e84:	dc000017 	ldw	r16,0(sp)
    9e88:	dec00304 	addi	sp,sp,12
    9e8c:	f800283a 	ret
    9e90:	80c00017 	ldw	r3,0(r16)
    9e94:	183ff926 	beq	r3,zero,9e7c <_isatty_r+0x30>
    9e98:	88c00015 	stw	r3,0(r17)
    9e9c:	003ff706 	br	9e7c <_isatty_r+0x30>

00009ea0 <_lseek_r>:
    9ea0:	defffd04 	addi	sp,sp,-12
    9ea4:	2805883a 	mov	r2,r5
    9ea8:	dc000015 	stw	r16,0(sp)
    9eac:	040000b4 	movhi	r16,2
    9eb0:	dc400115 	stw	r17,4(sp)
    9eb4:	300b883a 	mov	r5,r6
    9eb8:	842e0204 	addi	r16,r16,-18424
    9ebc:	2023883a 	mov	r17,r4
    9ec0:	380d883a 	mov	r6,r7
    9ec4:	1009883a 	mov	r4,r2
    9ec8:	dfc00215 	stw	ra,8(sp)
    9ecc:	80000015 	stw	zero,0(r16)
    9ed0:	000d7e40 	call	d7e4 <lseek>
    9ed4:	00ffffc4 	movi	r3,-1
    9ed8:	10c00526 	beq	r2,r3,9ef0 <_lseek_r+0x50>
    9edc:	dfc00217 	ldw	ra,8(sp)
    9ee0:	dc400117 	ldw	r17,4(sp)
    9ee4:	dc000017 	ldw	r16,0(sp)
    9ee8:	dec00304 	addi	sp,sp,12
    9eec:	f800283a 	ret
    9ef0:	80c00017 	ldw	r3,0(r16)
    9ef4:	183ff926 	beq	r3,zero,9edc <_lseek_r+0x3c>
    9ef8:	88c00015 	stw	r3,0(r17)
    9efc:	003ff706 	br	9edc <_lseek_r+0x3c>

00009f00 <_read_r>:
    9f00:	defffd04 	addi	sp,sp,-12
    9f04:	2805883a 	mov	r2,r5
    9f08:	dc000015 	stw	r16,0(sp)
    9f0c:	040000b4 	movhi	r16,2
    9f10:	dc400115 	stw	r17,4(sp)
    9f14:	300b883a 	mov	r5,r6
    9f18:	842e0204 	addi	r16,r16,-18424
    9f1c:	2023883a 	mov	r17,r4
    9f20:	380d883a 	mov	r6,r7
    9f24:	1009883a 	mov	r4,r2
    9f28:	dfc00215 	stw	ra,8(sp)
    9f2c:	80000015 	stw	zero,0(r16)
    9f30:	000d9b00 	call	d9b0 <read>
    9f34:	00ffffc4 	movi	r3,-1
    9f38:	10c00526 	beq	r2,r3,9f50 <_read_r+0x50>
    9f3c:	dfc00217 	ldw	ra,8(sp)
    9f40:	dc400117 	ldw	r17,4(sp)
    9f44:	dc000017 	ldw	r16,0(sp)
    9f48:	dec00304 	addi	sp,sp,12
    9f4c:	f800283a 	ret
    9f50:	80c00017 	ldw	r3,0(r16)
    9f54:	183ff926 	beq	r3,zero,9f3c <_read_r+0x3c>
    9f58:	88c00015 	stw	r3,0(r17)
    9f5c:	003ff706 	br	9f3c <_read_r+0x3c>

00009f60 <__swbuf_r>:
    9f60:	defffb04 	addi	sp,sp,-20
    9f64:	dcc00315 	stw	r19,12(sp)
    9f68:	dc800215 	stw	r18,8(sp)
    9f6c:	dc000015 	stw	r16,0(sp)
    9f70:	dfc00415 	stw	ra,16(sp)
    9f74:	dc400115 	stw	r17,4(sp)
    9f78:	2025883a 	mov	r18,r4
    9f7c:	2827883a 	mov	r19,r5
    9f80:	3021883a 	mov	r16,r6
    9f84:	20000226 	beq	r4,zero,9f90 <__swbuf_r+0x30>
    9f88:	20800e17 	ldw	r2,56(r4)
    9f8c:	10004226 	beq	r2,zero,a098 <__swbuf_r+0x138>
    9f90:	80800617 	ldw	r2,24(r16)
    9f94:	8100030b 	ldhu	r4,12(r16)
    9f98:	80800215 	stw	r2,8(r16)
    9f9c:	2080020c 	andi	r2,r4,8
    9fa0:	10003626 	beq	r2,zero,a07c <__swbuf_r+0x11c>
    9fa4:	80c00417 	ldw	r3,16(r16)
    9fa8:	18003426 	beq	r3,zero,a07c <__swbuf_r+0x11c>
    9fac:	2088000c 	andi	r2,r4,8192
    9fb0:	9c403fcc 	andi	r17,r19,255
    9fb4:	10001a26 	beq	r2,zero,a020 <__swbuf_r+0xc0>
    9fb8:	80800017 	ldw	r2,0(r16)
    9fbc:	81000517 	ldw	r4,20(r16)
    9fc0:	10c7c83a 	sub	r3,r2,r3
    9fc4:	1900200e 	bge	r3,r4,a048 <__swbuf_r+0xe8>
    9fc8:	18c00044 	addi	r3,r3,1
    9fcc:	81000217 	ldw	r4,8(r16)
    9fd0:	11400044 	addi	r5,r2,1
    9fd4:	81400015 	stw	r5,0(r16)
    9fd8:	213fffc4 	addi	r4,r4,-1
    9fdc:	81000215 	stw	r4,8(r16)
    9fe0:	14c00005 	stb	r19,0(r2)
    9fe4:	80800517 	ldw	r2,20(r16)
    9fe8:	10c01e26 	beq	r2,r3,a064 <__swbuf_r+0x104>
    9fec:	8080030b 	ldhu	r2,12(r16)
    9ff0:	1080004c 	andi	r2,r2,1
    9ff4:	10000226 	beq	r2,zero,a000 <__swbuf_r+0xa0>
    9ff8:	00800284 	movi	r2,10
    9ffc:	88801926 	beq	r17,r2,a064 <__swbuf_r+0x104>
    a000:	8805883a 	mov	r2,r17
    a004:	dfc00417 	ldw	ra,16(sp)
    a008:	dcc00317 	ldw	r19,12(sp)
    a00c:	dc800217 	ldw	r18,8(sp)
    a010:	dc400117 	ldw	r17,4(sp)
    a014:	dc000017 	ldw	r16,0(sp)
    a018:	dec00504 	addi	sp,sp,20
    a01c:	f800283a 	ret
    a020:	81401917 	ldw	r5,100(r16)
    a024:	00b7ffc4 	movi	r2,-8193
    a028:	21080014 	ori	r4,r4,8192
    a02c:	2884703a 	and	r2,r5,r2
    a030:	80801915 	stw	r2,100(r16)
    a034:	80800017 	ldw	r2,0(r16)
    a038:	8100030d 	sth	r4,12(r16)
    a03c:	81000517 	ldw	r4,20(r16)
    a040:	10c7c83a 	sub	r3,r2,r3
    a044:	193fe016 	blt	r3,r4,9fc8 <__swbuf_r+0x68>
    a048:	800b883a 	mov	r5,r16
    a04c:	9009883a 	mov	r4,r18
    a050:	000554c0 	call	554c <_fflush_r>
    a054:	1000071e 	bne	r2,zero,a074 <__swbuf_r+0x114>
    a058:	80800017 	ldw	r2,0(r16)
    a05c:	00c00044 	movi	r3,1
    a060:	003fda06 	br	9fcc <__swbuf_r+0x6c>
    a064:	800b883a 	mov	r5,r16
    a068:	9009883a 	mov	r4,r18
    a06c:	000554c0 	call	554c <_fflush_r>
    a070:	103fe326 	beq	r2,zero,a000 <__swbuf_r+0xa0>
    a074:	00bfffc4 	movi	r2,-1
    a078:	003fe206 	br	a004 <__swbuf_r+0xa4>
    a07c:	800b883a 	mov	r5,r16
    a080:	9009883a 	mov	r4,r18
    a084:	00039540 	call	3954 <__swsetup_r>
    a088:	103ffa1e 	bne	r2,zero,a074 <__swbuf_r+0x114>
    a08c:	8100030b 	ldhu	r4,12(r16)
    a090:	80c00417 	ldw	r3,16(r16)
    a094:	003fc506 	br	9fac <__swbuf_r+0x4c>
    a098:	00059280 	call	5928 <__sinit>
    a09c:	003fbc06 	br	9f90 <__swbuf_r+0x30>

0000a0a0 <__swbuf>:
    a0a0:	008000b4 	movhi	r2,2
    a0a4:	10a6f504 	addi	r2,r2,-25644
    a0a8:	280d883a 	mov	r6,r5
    a0ac:	200b883a 	mov	r5,r4
    a0b0:	11000017 	ldw	r4,0(r2)
    a0b4:	0009f601 	jmpi	9f60 <__swbuf_r>

0000a0b8 <_wcrtomb_r>:
    a0b8:	defff604 	addi	sp,sp,-40
    a0bc:	008000b4 	movhi	r2,2
    a0c0:	dc800815 	stw	r18,32(sp)
    a0c4:	dc400715 	stw	r17,28(sp)
    a0c8:	dc000615 	stw	r16,24(sp)
    a0cc:	10a6f704 	addi	r2,r2,-25636
    a0d0:	dfc00915 	stw	ra,36(sp)
    a0d4:	2021883a 	mov	r16,r4
    a0d8:	3823883a 	mov	r17,r7
    a0dc:	14800017 	ldw	r18,0(r2)
    a0e0:	28001426 	beq	r5,zero,a134 <_wcrtomb_r+0x7c>
    a0e4:	d9400415 	stw	r5,16(sp)
    a0e8:	d9800515 	stw	r6,20(sp)
    a0ec:	000646c0 	call	646c <__locale_charset>
    a0f0:	d9800517 	ldw	r6,20(sp)
    a0f4:	d9400417 	ldw	r5,16(sp)
    a0f8:	100f883a 	mov	r7,r2
    a0fc:	dc400015 	stw	r17,0(sp)
    a100:	8009883a 	mov	r4,r16
    a104:	903ee83a 	callr	r18
    a108:	00ffffc4 	movi	r3,-1
    a10c:	10c0031e 	bne	r2,r3,a11c <_wcrtomb_r+0x64>
    a110:	88000015 	stw	zero,0(r17)
    a114:	00c02284 	movi	r3,138
    a118:	80c00015 	stw	r3,0(r16)
    a11c:	dfc00917 	ldw	ra,36(sp)
    a120:	dc800817 	ldw	r18,32(sp)
    a124:	dc400717 	ldw	r17,28(sp)
    a128:	dc000617 	ldw	r16,24(sp)
    a12c:	dec00a04 	addi	sp,sp,40
    a130:	f800283a 	ret
    a134:	000646c0 	call	646c <__locale_charset>
    a138:	100f883a 	mov	r7,r2
    a13c:	dc400015 	stw	r17,0(sp)
    a140:	000d883a 	mov	r6,zero
    a144:	d9400104 	addi	r5,sp,4
    a148:	8009883a 	mov	r4,r16
    a14c:	903ee83a 	callr	r18
    a150:	003fed06 	br	a108 <_wcrtomb_r+0x50>

0000a154 <wcrtomb>:
    a154:	defff604 	addi	sp,sp,-40
    a158:	008000b4 	movhi	r2,2
    a15c:	dc800615 	stw	r18,24(sp)
    a160:	dc400515 	stw	r17,20(sp)
    a164:	10a6f504 	addi	r2,r2,-25644
    a168:	dfc00915 	stw	ra,36(sp)
    a16c:	dd000815 	stw	r20,32(sp)
    a170:	dcc00715 	stw	r19,28(sp)
    a174:	dc000415 	stw	r16,16(sp)
    a178:	3025883a 	mov	r18,r6
    a17c:	14400017 	ldw	r17,0(r2)
    a180:	20001926 	beq	r4,zero,a1e8 <wcrtomb+0x94>
    a184:	008000b4 	movhi	r2,2
    a188:	10a6f704 	addi	r2,r2,-25636
    a18c:	15000017 	ldw	r20,0(r2)
    a190:	2021883a 	mov	r16,r4
    a194:	2827883a 	mov	r19,r5
    a198:	000646c0 	call	646c <__locale_charset>
    a19c:	100f883a 	mov	r7,r2
    a1a0:	dc800015 	stw	r18,0(sp)
    a1a4:	980d883a 	mov	r6,r19
    a1a8:	800b883a 	mov	r5,r16
    a1ac:	8809883a 	mov	r4,r17
    a1b0:	a03ee83a 	callr	r20
    a1b4:	00ffffc4 	movi	r3,-1
    a1b8:	10c0031e 	bne	r2,r3,a1c8 <wcrtomb+0x74>
    a1bc:	90000015 	stw	zero,0(r18)
    a1c0:	00c02284 	movi	r3,138
    a1c4:	88c00015 	stw	r3,0(r17)
    a1c8:	dfc00917 	ldw	ra,36(sp)
    a1cc:	dd000817 	ldw	r20,32(sp)
    a1d0:	dcc00717 	ldw	r19,28(sp)
    a1d4:	dc800617 	ldw	r18,24(sp)
    a1d8:	dc400517 	ldw	r17,20(sp)
    a1dc:	dc000417 	ldw	r16,16(sp)
    a1e0:	dec00a04 	addi	sp,sp,40
    a1e4:	f800283a 	ret
    a1e8:	008000b4 	movhi	r2,2
    a1ec:	10a6f704 	addi	r2,r2,-25636
    a1f0:	14000017 	ldw	r16,0(r2)
    a1f4:	000646c0 	call	646c <__locale_charset>
    a1f8:	100f883a 	mov	r7,r2
    a1fc:	dc800015 	stw	r18,0(sp)
    a200:	000d883a 	mov	r6,zero
    a204:	d9400104 	addi	r5,sp,4
    a208:	8809883a 	mov	r4,r17
    a20c:	803ee83a 	callr	r16
    a210:	003fe806 	br	a1b4 <wcrtomb+0x60>

0000a214 <__ascii_wctomb>:
    a214:	28000526 	beq	r5,zero,a22c <__ascii_wctomb+0x18>
    a218:	00803fc4 	movi	r2,255
    a21c:	11800536 	bltu	r2,r6,a234 <__ascii_wctomb+0x20>
    a220:	29800005 	stb	r6,0(r5)
    a224:	00800044 	movi	r2,1
    a228:	f800283a 	ret
    a22c:	0005883a 	mov	r2,zero
    a230:	f800283a 	ret
    a234:	00802284 	movi	r2,138
    a238:	20800015 	stw	r2,0(r4)
    a23c:	00bfffc4 	movi	r2,-1
    a240:	f800283a 	ret

0000a244 <_wctomb_r>:
    a244:	008000b4 	movhi	r2,2
    a248:	defff904 	addi	sp,sp,-28
    a24c:	10a6f704 	addi	r2,r2,-25636
    a250:	dfc00615 	stw	ra,24(sp)
    a254:	dc400515 	stw	r17,20(sp)
    a258:	dc000415 	stw	r16,16(sp)
    a25c:	3823883a 	mov	r17,r7
    a260:	14000017 	ldw	r16,0(r2)
    a264:	d9000115 	stw	r4,4(sp)
    a268:	d9400215 	stw	r5,8(sp)
    a26c:	d9800315 	stw	r6,12(sp)
    a270:	000646c0 	call	646c <__locale_charset>
    a274:	d9800317 	ldw	r6,12(sp)
    a278:	d9400217 	ldw	r5,8(sp)
    a27c:	d9000117 	ldw	r4,4(sp)
    a280:	100f883a 	mov	r7,r2
    a284:	dc400015 	stw	r17,0(sp)
    a288:	803ee83a 	callr	r16
    a28c:	dfc00617 	ldw	ra,24(sp)
    a290:	dc400517 	ldw	r17,20(sp)
    a294:	dc000417 	ldw	r16,16(sp)
    a298:	dec00704 	addi	sp,sp,28
    a29c:	f800283a 	ret

0000a2a0 <__udivdi3>:
    a2a0:	defff504 	addi	sp,sp,-44
    a2a4:	dcc00415 	stw	r19,16(sp)
    a2a8:	dc000115 	stw	r16,4(sp)
    a2ac:	dfc00a15 	stw	ra,40(sp)
    a2b0:	df000915 	stw	fp,36(sp)
    a2b4:	ddc00815 	stw	r23,32(sp)
    a2b8:	dd800715 	stw	r22,28(sp)
    a2bc:	dd400615 	stw	r21,24(sp)
    a2c0:	dd000515 	stw	r20,20(sp)
    a2c4:	dc800315 	stw	r18,12(sp)
    a2c8:	dc400215 	stw	r17,8(sp)
    a2cc:	2027883a 	mov	r19,r4
    a2d0:	2821883a 	mov	r16,r5
    a2d4:	3800411e 	bne	r7,zero,a3dc <__udivdi3+0x13c>
    a2d8:	3023883a 	mov	r17,r6
    a2dc:	2025883a 	mov	r18,r4
    a2e0:	2980522e 	bgeu	r5,r6,a42c <__udivdi3+0x18c>
    a2e4:	00bfffd4 	movui	r2,65535
    a2e8:	282d883a 	mov	r22,r5
    a2ec:	1180a836 	bltu	r2,r6,a590 <__udivdi3+0x2f0>
    a2f0:	00803fc4 	movi	r2,255
    a2f4:	1185803a 	cmpltu	r2,r2,r6
    a2f8:	100490fa 	slli	r2,r2,3
    a2fc:	3086d83a 	srl	r3,r6,r2
    a300:	01000074 	movhi	r4,1
    a304:	211fae04 	addi	r4,r4,32440
    a308:	20c7883a 	add	r3,r4,r3
    a30c:	18c00003 	ldbu	r3,0(r3)
    a310:	1885883a 	add	r2,r3,r2
    a314:	00c00804 	movi	r3,32
    a318:	1887c83a 	sub	r3,r3,r2
    a31c:	18000526 	beq	r3,zero,a334 <__udivdi3+0x94>
    a320:	80e0983a 	sll	r16,r16,r3
    a324:	9884d83a 	srl	r2,r19,r2
    a328:	30e2983a 	sll	r17,r6,r3
    a32c:	98e4983a 	sll	r18,r19,r3
    a330:	142cb03a 	or	r22,r2,r16
    a334:	882ad43a 	srli	r21,r17,16
    a338:	b009883a 	mov	r4,r22
    a33c:	8d3fffcc 	andi	r20,r17,65535
    a340:	a80b883a 	mov	r5,r21
    a344:	0000bcc0 	call	bcc <__umodsi3>
    a348:	b009883a 	mov	r4,r22
    a34c:	a80b883a 	mov	r5,r21
    a350:	1027883a 	mov	r19,r2
    a354:	0000b680 	call	b68 <__udivsi3>
    a358:	102d883a 	mov	r22,r2
    a35c:	9826943a 	slli	r19,r19,16
    a360:	9004d43a 	srli	r2,r18,16
    a364:	a5a1383a 	mul	r16,r20,r22
    a368:	14c4b03a 	or	r2,r2,r19
    a36c:	1400052e 	bgeu	r2,r16,a384 <__udivdi3+0xe4>
    a370:	1445883a 	add	r2,r2,r17
    a374:	b0ffffc4 	addi	r3,r22,-1
    a378:	14400136 	bltu	r2,r17,a380 <__udivdi3+0xe0>
    a37c:	14012336 	bltu	r2,r16,a80c <__udivdi3+0x56c>
    a380:	182d883a 	mov	r22,r3
    a384:	1421c83a 	sub	r16,r2,r16
    a388:	a80b883a 	mov	r5,r21
    a38c:	8009883a 	mov	r4,r16
    a390:	0000bcc0 	call	bcc <__umodsi3>
    a394:	1027883a 	mov	r19,r2
    a398:	a80b883a 	mov	r5,r21
    a39c:	8009883a 	mov	r4,r16
    a3a0:	0000b680 	call	b68 <__udivsi3>
    a3a4:	9826943a 	slli	r19,r19,16
    a3a8:	a0a9383a 	mul	r20,r20,r2
    a3ac:	94bfffcc 	andi	r18,r18,65535
    a3b0:	94e4b03a 	or	r18,r18,r19
    a3b4:	9500052e 	bgeu	r18,r20,a3cc <__udivdi3+0x12c>
    a3b8:	8ca5883a 	add	r18,r17,r18
    a3bc:	10ffffc4 	addi	r3,r2,-1
    a3c0:	9440f136 	bltu	r18,r17,a788 <__udivdi3+0x4e8>
    a3c4:	9500f02e 	bgeu	r18,r20,a788 <__udivdi3+0x4e8>
    a3c8:	10bfff84 	addi	r2,r2,-2
    a3cc:	b00c943a 	slli	r6,r22,16
    a3d0:	0007883a 	mov	r3,zero
    a3d4:	3084b03a 	or	r2,r6,r2
    a3d8:	00005906 	br	a540 <__udivdi3+0x2a0>
    a3dc:	29c05636 	bltu	r5,r7,a538 <__udivdi3+0x298>
    a3e0:	00bfffd4 	movui	r2,65535
    a3e4:	11c0622e 	bgeu	r2,r7,a570 <__udivdi3+0x2d0>
    a3e8:	00804034 	movhi	r2,256
    a3ec:	10bfffc4 	addi	r2,r2,-1
    a3f0:	11c0ee36 	bltu	r2,r7,a7ac <__udivdi3+0x50c>
    a3f4:	00800404 	movi	r2,16
    a3f8:	3886d83a 	srl	r3,r7,r2
    a3fc:	01000074 	movhi	r4,1
    a400:	211fae04 	addi	r4,r4,32440
    a404:	20c7883a 	add	r3,r4,r3
    a408:	18c00003 	ldbu	r3,0(r3)
    a40c:	05400804 	movi	r21,32
    a410:	1885883a 	add	r2,r3,r2
    a414:	a8abc83a 	sub	r21,r21,r2
    a418:	a800621e 	bne	r21,zero,a5a4 <__udivdi3+0x304>
    a41c:	3c00e936 	bltu	r7,r16,a7c4 <__udivdi3+0x524>
    a420:	9985403a 	cmpgeu	r2,r19,r6
    a424:	0007883a 	mov	r3,zero
    a428:	00004506 	br	a540 <__udivdi3+0x2a0>
    a42c:	3000041e 	bne	r6,zero,a440 <__udivdi3+0x1a0>
    a430:	000b883a 	mov	r5,zero
    a434:	01000044 	movi	r4,1
    a438:	0000b680 	call	b68 <__udivsi3>
    a43c:	1023883a 	mov	r17,r2
    a440:	00bfffd4 	movui	r2,65535
    a444:	14404e2e 	bgeu	r2,r17,a580 <__udivdi3+0x2e0>
    a448:	00804034 	movhi	r2,256
    a44c:	10bfffc4 	addi	r2,r2,-1
    a450:	1440d836 	bltu	r2,r17,a7b4 <__udivdi3+0x514>
    a454:	00800404 	movi	r2,16
    a458:	8886d83a 	srl	r3,r17,r2
    a45c:	01000074 	movhi	r4,1
    a460:	211fae04 	addi	r4,r4,32440
    a464:	20c7883a 	add	r3,r4,r3
    a468:	18c00003 	ldbu	r3,0(r3)
    a46c:	1885883a 	add	r2,r3,r2
    a470:	00c00804 	movi	r3,32
    a474:	1887c83a 	sub	r3,r3,r2
    a478:	18008f1e 	bne	r3,zero,a6b8 <__udivdi3+0x418>
    a47c:	882ad43a 	srli	r21,r17,16
    a480:	8461c83a 	sub	r16,r16,r17
    a484:	8d3fffcc 	andi	r20,r17,65535
    a488:	00c00044 	movi	r3,1
    a48c:	8009883a 	mov	r4,r16
    a490:	a80b883a 	mov	r5,r21
    a494:	d8c00015 	stw	r3,0(sp)
    a498:	0000bcc0 	call	bcc <__umodsi3>
    a49c:	8009883a 	mov	r4,r16
    a4a0:	a80b883a 	mov	r5,r21
    a4a4:	1027883a 	mov	r19,r2
    a4a8:	0000b680 	call	b68 <__udivsi3>
    a4ac:	9826943a 	slli	r19,r19,16
    a4b0:	9008d43a 	srli	r4,r18,16
    a4b4:	1521383a 	mul	r16,r2,r20
    a4b8:	102d883a 	mov	r22,r2
    a4bc:	24c8b03a 	or	r4,r4,r19
    a4c0:	d8c00017 	ldw	r3,0(sp)
    a4c4:	2400052e 	bgeu	r4,r16,a4dc <__udivdi3+0x23c>
    a4c8:	2449883a 	add	r4,r4,r17
    a4cc:	b0bfffc4 	addi	r2,r22,-1
    a4d0:	24400136 	bltu	r4,r17,a4d8 <__udivdi3+0x238>
    a4d4:	2400ca36 	bltu	r4,r16,a800 <__udivdi3+0x560>
    a4d8:	102d883a 	mov	r22,r2
    a4dc:	2421c83a 	sub	r16,r4,r16
    a4e0:	a80b883a 	mov	r5,r21
    a4e4:	8009883a 	mov	r4,r16
    a4e8:	d8c00015 	stw	r3,0(sp)
    a4ec:	0000bcc0 	call	bcc <__umodsi3>
    a4f0:	1027883a 	mov	r19,r2
    a4f4:	a80b883a 	mov	r5,r21
    a4f8:	8009883a 	mov	r4,r16
    a4fc:	0000b680 	call	b68 <__udivsi3>
    a500:	9826943a 	slli	r19,r19,16
    a504:	1529383a 	mul	r20,r2,r20
    a508:	94bfffcc 	andi	r18,r18,65535
    a50c:	94e4b03a 	or	r18,r18,r19
    a510:	d8c00017 	ldw	r3,0(sp)
    a514:	9500052e 	bgeu	r18,r20,a52c <__udivdi3+0x28c>
    a518:	8ca5883a 	add	r18,r17,r18
    a51c:	113fffc4 	addi	r4,r2,-1
    a520:	94409736 	bltu	r18,r17,a780 <__udivdi3+0x4e0>
    a524:	9500962e 	bgeu	r18,r20,a780 <__udivdi3+0x4e0>
    a528:	10bfff84 	addi	r2,r2,-2
    a52c:	b00c943a 	slli	r6,r22,16
    a530:	3084b03a 	or	r2,r6,r2
    a534:	00000206 	br	a540 <__udivdi3+0x2a0>
    a538:	0007883a 	mov	r3,zero
    a53c:	0005883a 	mov	r2,zero
    a540:	dfc00a17 	ldw	ra,40(sp)
    a544:	df000917 	ldw	fp,36(sp)
    a548:	ddc00817 	ldw	r23,32(sp)
    a54c:	dd800717 	ldw	r22,28(sp)
    a550:	dd400617 	ldw	r21,24(sp)
    a554:	dd000517 	ldw	r20,20(sp)
    a558:	dcc00417 	ldw	r19,16(sp)
    a55c:	dc800317 	ldw	r18,12(sp)
    a560:	dc400217 	ldw	r17,8(sp)
    a564:	dc000117 	ldw	r16,4(sp)
    a568:	dec00b04 	addi	sp,sp,44
    a56c:	f800283a 	ret
    a570:	00803fc4 	movi	r2,255
    a574:	11c5803a 	cmpltu	r2,r2,r7
    a578:	100490fa 	slli	r2,r2,3
    a57c:	003f9e06 	br	a3f8 <__udivdi3+0x158>
    a580:	00803fc4 	movi	r2,255
    a584:	1445803a 	cmpltu	r2,r2,r17
    a588:	100490fa 	slli	r2,r2,3
    a58c:	003fb206 	br	a458 <__udivdi3+0x1b8>
    a590:	00804034 	movhi	r2,256
    a594:	10bfffc4 	addi	r2,r2,-1
    a598:	11808836 	bltu	r2,r6,a7bc <__udivdi3+0x51c>
    a59c:	00800404 	movi	r2,16
    a5a0:	003f5606 	br	a2fc <__udivdi3+0x5c>
    a5a4:	30aed83a 	srl	r23,r6,r2
    a5a8:	3d4e983a 	sll	r7,r7,r21
    a5ac:	80acd83a 	srl	r22,r16,r2
    a5b0:	9884d83a 	srl	r2,r19,r2
    a5b4:	3deeb03a 	or	r23,r7,r23
    a5b8:	b824d43a 	srli	r18,r23,16
    a5bc:	8560983a 	sll	r16,r16,r21
    a5c0:	b009883a 	mov	r4,r22
    a5c4:	900b883a 	mov	r5,r18
    a5c8:	3568983a 	sll	r20,r6,r21
    a5cc:	1420b03a 	or	r16,r2,r16
    a5d0:	0000bcc0 	call	bcc <__umodsi3>
    a5d4:	b009883a 	mov	r4,r22
    a5d8:	900b883a 	mov	r5,r18
    a5dc:	1023883a 	mov	r17,r2
    a5e0:	0000b680 	call	b68 <__udivsi3>
    a5e4:	8808943a 	slli	r4,r17,16
    a5e8:	bf3fffcc 	andi	fp,r23,65535
    a5ec:	8006d43a 	srli	r3,r16,16
    a5f0:	e0a3383a 	mul	r17,fp,r2
    a5f4:	100d883a 	mov	r6,r2
    a5f8:	1906b03a 	or	r3,r3,r4
    a5fc:	1c40042e 	bgeu	r3,r17,a610 <__udivdi3+0x370>
    a600:	1dc7883a 	add	r3,r3,r23
    a604:	10bfffc4 	addi	r2,r2,-1
    a608:	1dc0752e 	bgeu	r3,r23,a7e0 <__udivdi3+0x540>
    a60c:	100d883a 	mov	r6,r2
    a610:	1c63c83a 	sub	r17,r3,r17
    a614:	900b883a 	mov	r5,r18
    a618:	8809883a 	mov	r4,r17
    a61c:	d9800015 	stw	r6,0(sp)
    a620:	0000bcc0 	call	bcc <__umodsi3>
    a624:	102d883a 	mov	r22,r2
    a628:	8809883a 	mov	r4,r17
    a62c:	900b883a 	mov	r5,r18
    a630:	0000b680 	call	b68 <__udivsi3>
    a634:	b02c943a 	slli	r22,r22,16
    a638:	e089383a 	mul	r4,fp,r2
    a63c:	843fffcc 	andi	r16,r16,65535
    a640:	85a0b03a 	or	r16,r16,r22
    a644:	d9800017 	ldw	r6,0(sp)
    a648:	8100042e 	bgeu	r16,r4,a65c <__udivdi3+0x3bc>
    a64c:	85e1883a 	add	r16,r16,r23
    a650:	10ffffc4 	addi	r3,r2,-1
    a654:	85c05e2e 	bgeu	r16,r23,a7d0 <__udivdi3+0x530>
    a658:	1805883a 	mov	r2,r3
    a65c:	300c943a 	slli	r6,r6,16
    a660:	a17fffcc 	andi	r5,r20,65535
    a664:	a028d43a 	srli	r20,r20,16
    a668:	3084b03a 	or	r2,r6,r2
    a66c:	10ffffcc 	andi	r3,r2,65535
    a670:	100cd43a 	srli	r6,r2,16
    a674:	194f383a 	mul	r7,r3,r5
    a678:	1d07383a 	mul	r3,r3,r20
    a67c:	314b383a 	mul	r5,r6,r5
    a680:	3810d43a 	srli	r8,r7,16
    a684:	8121c83a 	sub	r16,r16,r4
    a688:	1947883a 	add	r3,r3,r5
    a68c:	40c7883a 	add	r3,r8,r3
    a690:	350d383a 	mul	r6,r6,r20
    a694:	1940022e 	bgeu	r3,r5,a6a0 <__udivdi3+0x400>
    a698:	01000074 	movhi	r4,1
    a69c:	310d883a 	add	r6,r6,r4
    a6a0:	1828d43a 	srli	r20,r3,16
    a6a4:	a18d883a 	add	r6,r20,r6
    a6a8:	81803e36 	bltu	r16,r6,a7a4 <__udivdi3+0x504>
    a6ac:	81803826 	beq	r16,r6,a790 <__udivdi3+0x4f0>
    a6b0:	0007883a 	mov	r3,zero
    a6b4:	003fa206 	br	a540 <__udivdi3+0x2a0>
    a6b8:	88e2983a 	sll	r17,r17,r3
    a6bc:	80a8d83a 	srl	r20,r16,r2
    a6c0:	80e0983a 	sll	r16,r16,r3
    a6c4:	882ad43a 	srli	r21,r17,16
    a6c8:	9884d83a 	srl	r2,r19,r2
    a6cc:	a009883a 	mov	r4,r20
    a6d0:	a80b883a 	mov	r5,r21
    a6d4:	142eb03a 	or	r23,r2,r16
    a6d8:	98e4983a 	sll	r18,r19,r3
    a6dc:	0000bcc0 	call	bcc <__umodsi3>
    a6e0:	a009883a 	mov	r4,r20
    a6e4:	a80b883a 	mov	r5,r21
    a6e8:	1021883a 	mov	r16,r2
    a6ec:	0000b680 	call	b68 <__udivsi3>
    a6f0:	1039883a 	mov	fp,r2
    a6f4:	8d3fffcc 	andi	r20,r17,65535
    a6f8:	8020943a 	slli	r16,r16,16
    a6fc:	b804d43a 	srli	r2,r23,16
    a700:	a72d383a 	mul	r22,r20,fp
    a704:	1404b03a 	or	r2,r2,r16
    a708:	1580062e 	bgeu	r2,r22,a724 <__udivdi3+0x484>
    a70c:	1445883a 	add	r2,r2,r17
    a710:	e0ffffc4 	addi	r3,fp,-1
    a714:	14403836 	bltu	r2,r17,a7f8 <__udivdi3+0x558>
    a718:	1580372e 	bgeu	r2,r22,a7f8 <__udivdi3+0x558>
    a71c:	e73fff84 	addi	fp,fp,-2
    a720:	1445883a 	add	r2,r2,r17
    a724:	15adc83a 	sub	r22,r2,r22
    a728:	a80b883a 	mov	r5,r21
    a72c:	b009883a 	mov	r4,r22
    a730:	0000bcc0 	call	bcc <__umodsi3>
    a734:	1027883a 	mov	r19,r2
    a738:	b009883a 	mov	r4,r22
    a73c:	a80b883a 	mov	r5,r21
    a740:	0000b680 	call	b68 <__udivsi3>
    a744:	9826943a 	slli	r19,r19,16
    a748:	a0a1383a 	mul	r16,r20,r2
    a74c:	b93fffcc 	andi	r4,r23,65535
    a750:	24c8b03a 	or	r4,r4,r19
    a754:	2400062e 	bgeu	r4,r16,a770 <__udivdi3+0x4d0>
    a758:	2449883a 	add	r4,r4,r17
    a75c:	10ffffc4 	addi	r3,r2,-1
    a760:	24402336 	bltu	r4,r17,a7f0 <__udivdi3+0x550>
    a764:	2400222e 	bgeu	r4,r16,a7f0 <__udivdi3+0x550>
    a768:	10bfff84 	addi	r2,r2,-2
    a76c:	2449883a 	add	r4,r4,r17
    a770:	e038943a 	slli	fp,fp,16
    a774:	2421c83a 	sub	r16,r4,r16
    a778:	e086b03a 	or	r3,fp,r2
    a77c:	003f4306 	br	a48c <__udivdi3+0x1ec>
    a780:	2005883a 	mov	r2,r4
    a784:	003f6906 	br	a52c <__udivdi3+0x28c>
    a788:	1805883a 	mov	r2,r3
    a78c:	003f0f06 	br	a3cc <__udivdi3+0x12c>
    a790:	1806943a 	slli	r3,r3,16
    a794:	9d66983a 	sll	r19,r19,r21
    a798:	39ffffcc 	andi	r7,r7,65535
    a79c:	19c7883a 	add	r3,r3,r7
    a7a0:	98ffc32e 	bgeu	r19,r3,a6b0 <__udivdi3+0x410>
    a7a4:	10bfffc4 	addi	r2,r2,-1
    a7a8:	003fc106 	br	a6b0 <__udivdi3+0x410>
    a7ac:	00800604 	movi	r2,24
    a7b0:	003f1106 	br	a3f8 <__udivdi3+0x158>
    a7b4:	00800604 	movi	r2,24
    a7b8:	003f2706 	br	a458 <__udivdi3+0x1b8>
    a7bc:	00800604 	movi	r2,24
    a7c0:	003ece06 	br	a2fc <__udivdi3+0x5c>
    a7c4:	0007883a 	mov	r3,zero
    a7c8:	00800044 	movi	r2,1
    a7cc:	003f5c06 	br	a540 <__udivdi3+0x2a0>
    a7d0:	813fa12e 	bgeu	r16,r4,a658 <__udivdi3+0x3b8>
    a7d4:	10bfff84 	addi	r2,r2,-2
    a7d8:	85e1883a 	add	r16,r16,r23
    a7dc:	003f9f06 	br	a65c <__udivdi3+0x3bc>
    a7e0:	1c7f8a2e 	bgeu	r3,r17,a60c <__udivdi3+0x36c>
    a7e4:	31bfff84 	addi	r6,r6,-2
    a7e8:	1dc7883a 	add	r3,r3,r23
    a7ec:	003f8806 	br	a610 <__udivdi3+0x370>
    a7f0:	1805883a 	mov	r2,r3
    a7f4:	003fde06 	br	a770 <__udivdi3+0x4d0>
    a7f8:	1839883a 	mov	fp,r3
    a7fc:	003fc906 	br	a724 <__udivdi3+0x484>
    a800:	b5bfff84 	addi	r22,r22,-2
    a804:	2449883a 	add	r4,r4,r17
    a808:	003f3406 	br	a4dc <__udivdi3+0x23c>
    a80c:	b5bfff84 	addi	r22,r22,-2
    a810:	1445883a 	add	r2,r2,r17
    a814:	003edb06 	br	a384 <__udivdi3+0xe4>

0000a818 <__umoddi3>:
    a818:	defff404 	addi	sp,sp,-48
    a81c:	df000a15 	stw	fp,40(sp)
    a820:	dc400315 	stw	r17,12(sp)
    a824:	dc000215 	stw	r16,8(sp)
    a828:	dfc00b15 	stw	ra,44(sp)
    a82c:	ddc00915 	stw	r23,36(sp)
    a830:	dd800815 	stw	r22,32(sp)
    a834:	dd400715 	stw	r21,28(sp)
    a838:	dd000615 	stw	r20,24(sp)
    a83c:	dcc00515 	stw	r19,20(sp)
    a840:	dc800415 	stw	r18,16(sp)
    a844:	2021883a 	mov	r16,r4
    a848:	2823883a 	mov	r17,r5
    a84c:	2839883a 	mov	fp,r5
    a850:	38003c1e 	bne	r7,zero,a944 <__umoddi3+0x12c>
    a854:	3027883a 	mov	r19,r6
    a858:	2029883a 	mov	r20,r4
    a85c:	2980512e 	bgeu	r5,r6,a9a4 <__umoddi3+0x18c>
    a860:	00bfffd4 	movui	r2,65535
    a864:	11809a36 	bltu	r2,r6,aad0 <__umoddi3+0x2b8>
    a868:	01003fc4 	movi	r4,255
    a86c:	2189803a 	cmpltu	r4,r4,r6
    a870:	200890fa 	slli	r4,r4,3
    a874:	3104d83a 	srl	r2,r6,r4
    a878:	00c00074 	movhi	r3,1
    a87c:	18dfae04 	addi	r3,r3,32440
    a880:	1885883a 	add	r2,r3,r2
    a884:	10c00003 	ldbu	r3,0(r2)
    a888:	00800804 	movi	r2,32
    a88c:	1909883a 	add	r4,r3,r4
    a890:	1125c83a 	sub	r18,r2,r4
    a894:	90000526 	beq	r18,zero,a8ac <__umoddi3+0x94>
    a898:	8ca2983a 	sll	r17,r17,r18
    a89c:	8108d83a 	srl	r4,r16,r4
    a8a0:	34a6983a 	sll	r19,r6,r18
    a8a4:	84a8983a 	sll	r20,r16,r18
    a8a8:	2478b03a 	or	fp,r4,r17
    a8ac:	982ed43a 	srli	r23,r19,16
    a8b0:	e009883a 	mov	r4,fp
    a8b4:	9dbfffcc 	andi	r22,r19,65535
    a8b8:	b80b883a 	mov	r5,r23
    a8bc:	0000bcc0 	call	bcc <__umodsi3>
    a8c0:	e009883a 	mov	r4,fp
    a8c4:	b80b883a 	mov	r5,r23
    a8c8:	102b883a 	mov	r21,r2
    a8cc:	0000b680 	call	b68 <__udivsi3>
    a8d0:	a806943a 	slli	r3,r21,16
    a8d4:	a008d43a 	srli	r4,r20,16
    a8d8:	b085383a 	mul	r2,r22,r2
    a8dc:	20c8b03a 	or	r4,r4,r3
    a8e0:	2080032e 	bgeu	r4,r2,a8f0 <__umoddi3+0xd8>
    a8e4:	24c9883a 	add	r4,r4,r19
    a8e8:	24c00136 	bltu	r4,r19,a8f0 <__umoddi3+0xd8>
    a8ec:	20811036 	bltu	r4,r2,ad30 <__umoddi3+0x518>
    a8f0:	20abc83a 	sub	r21,r4,r2
    a8f4:	b80b883a 	mov	r5,r23
    a8f8:	a809883a 	mov	r4,r21
    a8fc:	0000bcc0 	call	bcc <__umodsi3>
    a900:	1023883a 	mov	r17,r2
    a904:	b80b883a 	mov	r5,r23
    a908:	a809883a 	mov	r4,r21
    a90c:	0000b680 	call	b68 <__udivsi3>
    a910:	8822943a 	slli	r17,r17,16
    a914:	b085383a 	mul	r2,r22,r2
    a918:	a0ffffcc 	andi	r3,r20,65535
    a91c:	1c46b03a 	or	r3,r3,r17
    a920:	1880042e 	bgeu	r3,r2,a934 <__umoddi3+0x11c>
    a924:	1cc7883a 	add	r3,r3,r19
    a928:	1cc00236 	bltu	r3,r19,a934 <__umoddi3+0x11c>
    a92c:	1880012e 	bgeu	r3,r2,a934 <__umoddi3+0x11c>
    a930:	1cc7883a 	add	r3,r3,r19
    a934:	1885c83a 	sub	r2,r3,r2
    a938:	1484d83a 	srl	r2,r2,r18
    a93c:	0007883a 	mov	r3,zero
    a940:	00004f06 	br	aa80 <__umoddi3+0x268>
    a944:	29c04c36 	bltu	r5,r7,aa78 <__umoddi3+0x260>
    a948:	00bfffd4 	movui	r2,65535
    a94c:	11c0582e 	bgeu	r2,r7,aab0 <__umoddi3+0x298>
    a950:	00804034 	movhi	r2,256
    a954:	10bfffc4 	addi	r2,r2,-1
    a958:	11c0e736 	bltu	r2,r7,acf8 <__umoddi3+0x4e0>
    a95c:	01000404 	movi	r4,16
    a960:	3904d83a 	srl	r2,r7,r4
    a964:	00c00074 	movhi	r3,1
    a968:	18dfae04 	addi	r3,r3,32440
    a96c:	1885883a 	add	r2,r3,r2
    a970:	14c00003 	ldbu	r19,0(r2)
    a974:	00c00804 	movi	r3,32
    a978:	9927883a 	add	r19,r19,r4
    a97c:	1ce9c83a 	sub	r20,r3,r19
    a980:	a000581e 	bne	r20,zero,aae4 <__umoddi3+0x2cc>
    a984:	3c400136 	bltu	r7,r17,a98c <__umoddi3+0x174>
    a988:	8180eb36 	bltu	r16,r6,ad38 <__umoddi3+0x520>
    a98c:	8185c83a 	sub	r2,r16,r6
    a990:	89e3c83a 	sub	r17,r17,r7
    a994:	8089803a 	cmpltu	r4,r16,r2
    a998:	8939c83a 	sub	fp,r17,r4
    a99c:	e007883a 	mov	r3,fp
    a9a0:	00003706 	br	aa80 <__umoddi3+0x268>
    a9a4:	3000041e 	bne	r6,zero,a9b8 <__umoddi3+0x1a0>
    a9a8:	000b883a 	mov	r5,zero
    a9ac:	01000044 	movi	r4,1
    a9b0:	0000b680 	call	b68 <__udivsi3>
    a9b4:	1027883a 	mov	r19,r2
    a9b8:	00bfffd4 	movui	r2,65535
    a9bc:	14c0402e 	bgeu	r2,r19,aac0 <__umoddi3+0x2a8>
    a9c0:	00804034 	movhi	r2,256
    a9c4:	10bfffc4 	addi	r2,r2,-1
    a9c8:	14c0cd36 	bltu	r2,r19,ad00 <__umoddi3+0x4e8>
    a9cc:	00800404 	movi	r2,16
    a9d0:	9886d83a 	srl	r3,r19,r2
    a9d4:	01000074 	movhi	r4,1
    a9d8:	211fae04 	addi	r4,r4,32440
    a9dc:	20c7883a 	add	r3,r4,r3
    a9e0:	18c00003 	ldbu	r3,0(r3)
    a9e4:	1887883a 	add	r3,r3,r2
    a9e8:	00800804 	movi	r2,32
    a9ec:	10e5c83a 	sub	r18,r2,r3
    a9f0:	9000901e 	bne	r18,zero,ac34 <__umoddi3+0x41c>
    a9f4:	982cd43a 	srli	r22,r19,16
    a9f8:	8ce3c83a 	sub	r17,r17,r19
    a9fc:	9d7fffcc 	andi	r21,r19,65535
    aa00:	b00b883a 	mov	r5,r22
    aa04:	8809883a 	mov	r4,r17
    aa08:	0000bcc0 	call	bcc <__umodsi3>
    aa0c:	8809883a 	mov	r4,r17
    aa10:	b00b883a 	mov	r5,r22
    aa14:	1021883a 	mov	r16,r2
    aa18:	0000b680 	call	b68 <__udivsi3>
    aa1c:	8006943a 	slli	r3,r16,16
    aa20:	a008d43a 	srli	r4,r20,16
    aa24:	1545383a 	mul	r2,r2,r21
    aa28:	20c8b03a 	or	r4,r4,r3
    aa2c:	2080042e 	bgeu	r4,r2,aa40 <__umoddi3+0x228>
    aa30:	24c9883a 	add	r4,r4,r19
    aa34:	24c00236 	bltu	r4,r19,aa40 <__umoddi3+0x228>
    aa38:	2080012e 	bgeu	r4,r2,aa40 <__umoddi3+0x228>
    aa3c:	24c9883a 	add	r4,r4,r19
    aa40:	20a1c83a 	sub	r16,r4,r2
    aa44:	b00b883a 	mov	r5,r22
    aa48:	8009883a 	mov	r4,r16
    aa4c:	0000bcc0 	call	bcc <__umodsi3>
    aa50:	1023883a 	mov	r17,r2
    aa54:	b00b883a 	mov	r5,r22
    aa58:	8009883a 	mov	r4,r16
    aa5c:	0000b680 	call	b68 <__udivsi3>
    aa60:	8822943a 	slli	r17,r17,16
    aa64:	1545383a 	mul	r2,r2,r21
    aa68:	a53fffcc 	andi	r20,r20,65535
    aa6c:	a446b03a 	or	r3,r20,r17
    aa70:	18bfb02e 	bgeu	r3,r2,a934 <__umoddi3+0x11c>
    aa74:	003fab06 	br	a924 <__umoddi3+0x10c>
    aa78:	2005883a 	mov	r2,r4
    aa7c:	2807883a 	mov	r3,r5
    aa80:	dfc00b17 	ldw	ra,44(sp)
    aa84:	df000a17 	ldw	fp,40(sp)
    aa88:	ddc00917 	ldw	r23,36(sp)
    aa8c:	dd800817 	ldw	r22,32(sp)
    aa90:	dd400717 	ldw	r21,28(sp)
    aa94:	dd000617 	ldw	r20,24(sp)
    aa98:	dcc00517 	ldw	r19,20(sp)
    aa9c:	dc800417 	ldw	r18,16(sp)
    aaa0:	dc400317 	ldw	r17,12(sp)
    aaa4:	dc000217 	ldw	r16,8(sp)
    aaa8:	dec00c04 	addi	sp,sp,48
    aaac:	f800283a 	ret
    aab0:	04c03fc4 	movi	r19,255
    aab4:	99c9803a 	cmpltu	r4,r19,r7
    aab8:	200890fa 	slli	r4,r4,3
    aabc:	003fa806 	br	a960 <__umoddi3+0x148>
    aac0:	00803fc4 	movi	r2,255
    aac4:	14c5803a 	cmpltu	r2,r2,r19
    aac8:	100490fa 	slli	r2,r2,3
    aacc:	003fc006 	br	a9d0 <__umoddi3+0x1b8>
    aad0:	00804034 	movhi	r2,256
    aad4:	10bfffc4 	addi	r2,r2,-1
    aad8:	11808b36 	bltu	r2,r6,ad08 <__umoddi3+0x4f0>
    aadc:	01000404 	movi	r4,16
    aae0:	003f6406 	br	a874 <__umoddi3+0x5c>
    aae4:	34c4d83a 	srl	r2,r6,r19
    aae8:	3d0e983a 	sll	r7,r7,r20
    aaec:	8cf8d83a 	srl	fp,r17,r19
    aaf0:	8d10983a 	sll	r8,r17,r20
    aaf4:	38aab03a 	or	r21,r7,r2
    aaf8:	a82cd43a 	srli	r22,r21,16
    aafc:	84e2d83a 	srl	r17,r16,r19
    ab00:	e009883a 	mov	r4,fp
    ab04:	b00b883a 	mov	r5,r22
    ab08:	8a22b03a 	or	r17,r17,r8
    ab0c:	3524983a 	sll	r18,r6,r20
    ab10:	0000bcc0 	call	bcc <__umodsi3>
    ab14:	e009883a 	mov	r4,fp
    ab18:	b00b883a 	mov	r5,r22
    ab1c:	102f883a 	mov	r23,r2
    ab20:	0000b680 	call	b68 <__udivsi3>
    ab24:	100d883a 	mov	r6,r2
    ab28:	b808943a 	slli	r4,r23,16
    ab2c:	aa3fffcc 	andi	r8,r21,65535
    ab30:	8804d43a 	srli	r2,r17,16
    ab34:	41af383a 	mul	r23,r8,r6
    ab38:	8520983a 	sll	r16,r16,r20
    ab3c:	1104b03a 	or	r2,r2,r4
    ab40:	15c0042e 	bgeu	r2,r23,ab54 <__umoddi3+0x33c>
    ab44:	1545883a 	add	r2,r2,r21
    ab48:	30ffffc4 	addi	r3,r6,-1
    ab4c:	1540742e 	bgeu	r2,r21,ad20 <__umoddi3+0x508>
    ab50:	180d883a 	mov	r6,r3
    ab54:	15efc83a 	sub	r23,r2,r23
    ab58:	b00b883a 	mov	r5,r22
    ab5c:	b809883a 	mov	r4,r23
    ab60:	d9800115 	stw	r6,4(sp)
    ab64:	da000015 	stw	r8,0(sp)
    ab68:	0000bcc0 	call	bcc <__umodsi3>
    ab6c:	b00b883a 	mov	r5,r22
    ab70:	b809883a 	mov	r4,r23
    ab74:	1039883a 	mov	fp,r2
    ab78:	0000b680 	call	b68 <__udivsi3>
    ab7c:	da000017 	ldw	r8,0(sp)
    ab80:	e038943a 	slli	fp,fp,16
    ab84:	100b883a 	mov	r5,r2
    ab88:	4089383a 	mul	r4,r8,r2
    ab8c:	8a3fffcc 	andi	r8,r17,65535
    ab90:	4710b03a 	or	r8,r8,fp
    ab94:	d9800117 	ldw	r6,4(sp)
    ab98:	4100042e 	bgeu	r8,r4,abac <__umoddi3+0x394>
    ab9c:	4551883a 	add	r8,r8,r21
    aba0:	10bfffc4 	addi	r2,r2,-1
    aba4:	45405a2e 	bgeu	r8,r21,ad10 <__umoddi3+0x4f8>
    aba8:	100b883a 	mov	r5,r2
    abac:	300c943a 	slli	r6,r6,16
    abb0:	91ffffcc 	andi	r7,r18,65535
    abb4:	9004d43a 	srli	r2,r18,16
    abb8:	314cb03a 	or	r6,r6,r5
    abbc:	317fffcc 	andi	r5,r6,65535
    abc0:	300cd43a 	srli	r6,r6,16
    abc4:	29d3383a 	mul	r9,r5,r7
    abc8:	288b383a 	mul	r5,r5,r2
    abcc:	31cf383a 	mul	r7,r6,r7
    abd0:	4806d43a 	srli	r3,r9,16
    abd4:	4111c83a 	sub	r8,r8,r4
    abd8:	29cb883a 	add	r5,r5,r7
    abdc:	194b883a 	add	r5,r3,r5
    abe0:	3085383a 	mul	r2,r6,r2
    abe4:	29c0022e 	bgeu	r5,r7,abf0 <__umoddi3+0x3d8>
    abe8:	00c00074 	movhi	r3,1
    abec:	10c5883a 	add	r2,r2,r3
    abf0:	2808d43a 	srli	r4,r5,16
    abf4:	280a943a 	slli	r5,r5,16
    abf8:	4a7fffcc 	andi	r9,r9,65535
    abfc:	2085883a 	add	r2,r4,r2
    ac00:	2a4b883a 	add	r5,r5,r9
    ac04:	40803636 	bltu	r8,r2,ace0 <__umoddi3+0x4c8>
    ac08:	40804d26 	beq	r8,r2,ad40 <__umoddi3+0x528>
    ac0c:	4089c83a 	sub	r4,r8,r2
    ac10:	280f883a 	mov	r7,r5
    ac14:	81cfc83a 	sub	r7,r16,r7
    ac18:	81c7803a 	cmpltu	r3,r16,r7
    ac1c:	20c7c83a 	sub	r3,r4,r3
    ac20:	1cc4983a 	sll	r2,r3,r19
    ac24:	3d0ed83a 	srl	r7,r7,r20
    ac28:	1d06d83a 	srl	r3,r3,r20
    ac2c:	11c4b03a 	or	r2,r2,r7
    ac30:	003f9306 	br	aa80 <__umoddi3+0x268>
    ac34:	9ca6983a 	sll	r19,r19,r18
    ac38:	88e8d83a 	srl	r20,r17,r3
    ac3c:	80c4d83a 	srl	r2,r16,r3
    ac40:	982cd43a 	srli	r22,r19,16
    ac44:	8ca2983a 	sll	r17,r17,r18
    ac48:	a009883a 	mov	r4,r20
    ac4c:	b00b883a 	mov	r5,r22
    ac50:	1478b03a 	or	fp,r2,r17
    ac54:	0000bcc0 	call	bcc <__umodsi3>
    ac58:	a009883a 	mov	r4,r20
    ac5c:	b00b883a 	mov	r5,r22
    ac60:	1023883a 	mov	r17,r2
    ac64:	0000b680 	call	b68 <__udivsi3>
    ac68:	9d7fffcc 	andi	r21,r19,65535
    ac6c:	880a943a 	slli	r5,r17,16
    ac70:	e008d43a 	srli	r4,fp,16
    ac74:	a885383a 	mul	r2,r21,r2
    ac78:	84a8983a 	sll	r20,r16,r18
    ac7c:	2148b03a 	or	r4,r4,r5
    ac80:	2080042e 	bgeu	r4,r2,ac94 <__umoddi3+0x47c>
    ac84:	24c9883a 	add	r4,r4,r19
    ac88:	24c00236 	bltu	r4,r19,ac94 <__umoddi3+0x47c>
    ac8c:	2080012e 	bgeu	r4,r2,ac94 <__umoddi3+0x47c>
    ac90:	24c9883a 	add	r4,r4,r19
    ac94:	20a3c83a 	sub	r17,r4,r2
    ac98:	b00b883a 	mov	r5,r22
    ac9c:	8809883a 	mov	r4,r17
    aca0:	0000bcc0 	call	bcc <__umodsi3>
    aca4:	102f883a 	mov	r23,r2
    aca8:	8809883a 	mov	r4,r17
    acac:	b00b883a 	mov	r5,r22
    acb0:	0000b680 	call	b68 <__udivsi3>
    acb4:	b82e943a 	slli	r23,r23,16
    acb8:	a885383a 	mul	r2,r21,r2
    acbc:	e13fffcc 	andi	r4,fp,65535
    acc0:	25c8b03a 	or	r4,r4,r23
    acc4:	2080042e 	bgeu	r4,r2,acd8 <__umoddi3+0x4c0>
    acc8:	24c9883a 	add	r4,r4,r19
    accc:	24c00236 	bltu	r4,r19,acd8 <__umoddi3+0x4c0>
    acd0:	2080012e 	bgeu	r4,r2,acd8 <__umoddi3+0x4c0>
    acd4:	24c9883a 	add	r4,r4,r19
    acd8:	20a3c83a 	sub	r17,r4,r2
    acdc:	003f4806 	br	aa00 <__umoddi3+0x1e8>
    ace0:	2c8fc83a 	sub	r7,r5,r18
    ace4:	1545c83a 	sub	r2,r2,r21
    ace8:	29cb803a 	cmpltu	r5,r5,r7
    acec:	1145c83a 	sub	r2,r2,r5
    acf0:	4089c83a 	sub	r4,r8,r2
    acf4:	003fc706 	br	ac14 <__umoddi3+0x3fc>
    acf8:	01000604 	movi	r4,24
    acfc:	003f1806 	br	a960 <__umoddi3+0x148>
    ad00:	00800604 	movi	r2,24
    ad04:	003f3206 	br	a9d0 <__umoddi3+0x1b8>
    ad08:	01000604 	movi	r4,24
    ad0c:	003ed906 	br	a874 <__umoddi3+0x5c>
    ad10:	413fa52e 	bgeu	r8,r4,aba8 <__umoddi3+0x390>
    ad14:	297fff84 	addi	r5,r5,-2
    ad18:	4551883a 	add	r8,r8,r21
    ad1c:	003fa306 	br	abac <__umoddi3+0x394>
    ad20:	15ff8b2e 	bgeu	r2,r23,ab50 <__umoddi3+0x338>
    ad24:	31bfff84 	addi	r6,r6,-2
    ad28:	1545883a 	add	r2,r2,r21
    ad2c:	003f8906 	br	ab54 <__umoddi3+0x33c>
    ad30:	24c9883a 	add	r4,r4,r19
    ad34:	003eee06 	br	a8f0 <__umoddi3+0xd8>
    ad38:	8005883a 	mov	r2,r16
    ad3c:	003f1706 	br	a99c <__umoddi3+0x184>
    ad40:	817fe736 	bltu	r16,r5,ace0 <__umoddi3+0x4c8>
    ad44:	280f883a 	mov	r7,r5
    ad48:	0009883a 	mov	r4,zero
    ad4c:	003fb106 	br	ac14 <__umoddi3+0x3fc>

0000ad50 <__adddf3>:
    ad50:	02c00434 	movhi	r11,16
    ad54:	5affffc4 	addi	r11,r11,-1
    ad58:	2806d7fa 	srli	r3,r5,31
    ad5c:	2ad4703a 	and	r10,r5,r11
    ad60:	3ad2703a 	and	r9,r7,r11
    ad64:	3804d53a 	srli	r2,r7,20
    ad68:	3018d77a 	srli	r12,r6,29
    ad6c:	280ad53a 	srli	r5,r5,20
    ad70:	501490fa 	slli	r10,r10,3
    ad74:	2010d77a 	srli	r8,r4,29
    ad78:	481290fa 	slli	r9,r9,3
    ad7c:	380ed7fa 	srli	r7,r7,31
    ad80:	defffb04 	addi	sp,sp,-20
    ad84:	dc800215 	stw	r18,8(sp)
    ad88:	dc400115 	stw	r17,4(sp)
    ad8c:	dc000015 	stw	r16,0(sp)
    ad90:	dfc00415 	stw	ra,16(sp)
    ad94:	dcc00315 	stw	r19,12(sp)
    ad98:	1c803fcc 	andi	r18,r3,255
    ad9c:	2c01ffcc 	andi	r16,r5,2047
    ada0:	5210b03a 	or	r8,r10,r8
    ada4:	202290fa 	slli	r17,r4,3
    ada8:	1081ffcc 	andi	r2,r2,2047
    adac:	4b12b03a 	or	r9,r9,r12
    adb0:	300c90fa 	slli	r6,r6,3
    adb4:	91c07526 	beq	r18,r7,af8c <__adddf3+0x23c>
    adb8:	8087c83a 	sub	r3,r16,r2
    adbc:	00c0ab0e 	bge	zero,r3,b06c <__adddf3+0x31c>
    adc0:	10002a1e 	bne	r2,zero,ae6c <__adddf3+0x11c>
    adc4:	4984b03a 	or	r2,r9,r6
    adc8:	1000961e 	bne	r2,zero,b024 <__adddf3+0x2d4>
    adcc:	888001cc 	andi	r2,r17,7
    add0:	10000726 	beq	r2,zero,adf0 <__adddf3+0xa0>
    add4:	888003cc 	andi	r2,r17,15
    add8:	00c00104 	movi	r3,4
    addc:	10c00426 	beq	r2,r3,adf0 <__adddf3+0xa0>
    ade0:	88c7883a 	add	r3,r17,r3
    ade4:	1c63803a 	cmpltu	r17,r3,r17
    ade8:	4451883a 	add	r8,r8,r17
    adec:	1823883a 	mov	r17,r3
    adf0:	4080202c 	andhi	r2,r8,128
    adf4:	10005926 	beq	r2,zero,af5c <__adddf3+0x20c>
    adf8:	84000044 	addi	r16,r16,1
    adfc:	0081ffc4 	movi	r2,2047
    ae00:	8080ba26 	beq	r16,r2,b0ec <__adddf3+0x39c>
    ae04:	00bfe034 	movhi	r2,65408
    ae08:	10bfffc4 	addi	r2,r2,-1
    ae0c:	4090703a 	and	r8,r8,r2
    ae10:	4004977a 	slli	r2,r8,29
    ae14:	4010927a 	slli	r8,r8,9
    ae18:	8822d0fa 	srli	r17,r17,3
    ae1c:	8401ffcc 	andi	r16,r16,2047
    ae20:	4010d33a 	srli	r8,r8,12
    ae24:	9007883a 	mov	r3,r18
    ae28:	1444b03a 	or	r2,r2,r17
    ae2c:	8401ffcc 	andi	r16,r16,2047
    ae30:	8020953a 	slli	r16,r16,20
    ae34:	18c03fcc 	andi	r3,r3,255
    ae38:	01000434 	movhi	r4,16
    ae3c:	213fffc4 	addi	r4,r4,-1
    ae40:	180697fa 	slli	r3,r3,31
    ae44:	4110703a 	and	r8,r8,r4
    ae48:	4410b03a 	or	r8,r8,r16
    ae4c:	40c6b03a 	or	r3,r8,r3
    ae50:	dfc00417 	ldw	ra,16(sp)
    ae54:	dcc00317 	ldw	r19,12(sp)
    ae58:	dc800217 	ldw	r18,8(sp)
    ae5c:	dc400117 	ldw	r17,4(sp)
    ae60:	dc000017 	ldw	r16,0(sp)
    ae64:	dec00504 	addi	sp,sp,20
    ae68:	f800283a 	ret
    ae6c:	0081ffc4 	movi	r2,2047
    ae70:	80bfd626 	beq	r16,r2,adcc <__adddf3+0x7c>
    ae74:	4a402034 	orhi	r9,r9,128
    ae78:	00800e04 	movi	r2,56
    ae7c:	10c09f16 	blt	r2,r3,b0fc <__adddf3+0x3ac>
    ae80:	008007c4 	movi	r2,31
    ae84:	10c0c216 	blt	r2,r3,b190 <__adddf3+0x440>
    ae88:	00800804 	movi	r2,32
    ae8c:	10c5c83a 	sub	r2,r2,r3
    ae90:	488a983a 	sll	r5,r9,r2
    ae94:	30c8d83a 	srl	r4,r6,r3
    ae98:	3084983a 	sll	r2,r6,r2
    ae9c:	48c6d83a 	srl	r3,r9,r3
    aea0:	290cb03a 	or	r6,r5,r4
    aea4:	1004c03a 	cmpne	r2,r2,zero
    aea8:	308cb03a 	or	r6,r6,r2
    aeac:	898dc83a 	sub	r6,r17,r6
    aeb0:	89a3803a 	cmpltu	r17,r17,r6
    aeb4:	40d1c83a 	sub	r8,r8,r3
    aeb8:	4451c83a 	sub	r8,r8,r17
    aebc:	3023883a 	mov	r17,r6
    aec0:	4080202c 	andhi	r2,r8,128
    aec4:	10002326 	beq	r2,zero,af54 <__adddf3+0x204>
    aec8:	04c02034 	movhi	r19,128
    aecc:	9cffffc4 	addi	r19,r19,-1
    aed0:	44e6703a 	and	r19,r8,r19
    aed4:	98007626 	beq	r19,zero,b0b0 <__adddf3+0x360>
    aed8:	9809883a 	mov	r4,r19
    aedc:	000d3540 	call	d354 <__clzsi2>
    aee0:	10fffe04 	addi	r3,r2,-8
    aee4:	010007c4 	movi	r4,31
    aee8:	20c07716 	blt	r4,r3,b0c8 <__adddf3+0x378>
    aeec:	00800804 	movi	r2,32
    aef0:	10c5c83a 	sub	r2,r2,r3
    aef4:	8884d83a 	srl	r2,r17,r2
    aef8:	98d0983a 	sll	r8,r19,r3
    aefc:	88e2983a 	sll	r17,r17,r3
    af00:	1204b03a 	or	r2,r2,r8
    af04:	1c007416 	blt	r3,r16,b0d8 <__adddf3+0x388>
    af08:	1c21c83a 	sub	r16,r3,r16
    af0c:	82000044 	addi	r8,r16,1
    af10:	00c007c4 	movi	r3,31
    af14:	1a009116 	blt	r3,r8,b15c <__adddf3+0x40c>
    af18:	00c00804 	movi	r3,32
    af1c:	1a07c83a 	sub	r3,r3,r8
    af20:	8a08d83a 	srl	r4,r17,r8
    af24:	88e2983a 	sll	r17,r17,r3
    af28:	10c6983a 	sll	r3,r2,r3
    af2c:	1210d83a 	srl	r8,r2,r8
    af30:	8804c03a 	cmpne	r2,r17,zero
    af34:	1906b03a 	or	r3,r3,r4
    af38:	18a2b03a 	or	r17,r3,r2
    af3c:	0021883a 	mov	r16,zero
    af40:	003fa206 	br	adcc <__adddf3+0x7c>
    af44:	1890b03a 	or	r8,r3,r2
    af48:	40017d26 	beq	r8,zero,b540 <__adddf3+0x7f0>
    af4c:	1011883a 	mov	r8,r2
    af50:	1823883a 	mov	r17,r3
    af54:	888001cc 	andi	r2,r17,7
    af58:	103f9e1e 	bne	r2,zero,add4 <__adddf3+0x84>
    af5c:	4004977a 	slli	r2,r8,29
    af60:	8822d0fa 	srli	r17,r17,3
    af64:	4010d0fa 	srli	r8,r8,3
    af68:	9007883a 	mov	r3,r18
    af6c:	1444b03a 	or	r2,r2,r17
    af70:	0101ffc4 	movi	r4,2047
    af74:	81002426 	beq	r16,r4,b008 <__adddf3+0x2b8>
    af78:	8120703a 	and	r16,r16,r4
    af7c:	01000434 	movhi	r4,16
    af80:	213fffc4 	addi	r4,r4,-1
    af84:	4110703a 	and	r8,r8,r4
    af88:	003fa806 	br	ae2c <__adddf3+0xdc>
    af8c:	8089c83a 	sub	r4,r16,r2
    af90:	01005e0e 	bge	zero,r4,b10c <__adddf3+0x3bc>
    af94:	10002b26 	beq	r2,zero,b044 <__adddf3+0x2f4>
    af98:	0081ffc4 	movi	r2,2047
    af9c:	80bf8b26 	beq	r16,r2,adcc <__adddf3+0x7c>
    afa0:	4a402034 	orhi	r9,r9,128
    afa4:	00800e04 	movi	r2,56
    afa8:	1100a40e 	bge	r2,r4,b23c <__adddf3+0x4ec>
    afac:	498cb03a 	or	r6,r9,r6
    afb0:	300ac03a 	cmpne	r5,r6,zero
    afb4:	0013883a 	mov	r9,zero
    afb8:	2c4b883a 	add	r5,r5,r17
    afbc:	2c63803a 	cmpltu	r17,r5,r17
    afc0:	4a11883a 	add	r8,r9,r8
    afc4:	8a11883a 	add	r8,r17,r8
    afc8:	2823883a 	mov	r17,r5
    afcc:	4080202c 	andhi	r2,r8,128
    afd0:	103fe026 	beq	r2,zero,af54 <__adddf3+0x204>
    afd4:	84000044 	addi	r16,r16,1
    afd8:	0081ffc4 	movi	r2,2047
    afdc:	8080d226 	beq	r16,r2,b328 <__adddf3+0x5d8>
    afe0:	00bfe034 	movhi	r2,65408
    afe4:	10bfffc4 	addi	r2,r2,-1
    afe8:	4090703a 	and	r8,r8,r2
    afec:	880ad07a 	srli	r5,r17,1
    aff0:	400897fa 	slli	r4,r8,31
    aff4:	88c0004c 	andi	r3,r17,1
    aff8:	28e2b03a 	or	r17,r5,r3
    affc:	4010d07a 	srli	r8,r8,1
    b000:	2462b03a 	or	r17,r4,r17
    b004:	003f7106 	br	adcc <__adddf3+0x7c>
    b008:	4088b03a 	or	r4,r8,r2
    b00c:	20014526 	beq	r4,zero,b524 <__adddf3+0x7d4>
    b010:	01000434 	movhi	r4,16
    b014:	42000234 	orhi	r8,r8,8
    b018:	213fffc4 	addi	r4,r4,-1
    b01c:	4110703a 	and	r8,r8,r4
    b020:	003f8206 	br	ae2c <__adddf3+0xdc>
    b024:	18ffffc4 	addi	r3,r3,-1
    b028:	1800491e 	bne	r3,zero,b150 <__adddf3+0x400>
    b02c:	898bc83a 	sub	r5,r17,r6
    b030:	8963803a 	cmpltu	r17,r17,r5
    b034:	4251c83a 	sub	r8,r8,r9
    b038:	4451c83a 	sub	r8,r8,r17
    b03c:	2823883a 	mov	r17,r5
    b040:	003f9f06 	br	aec0 <__adddf3+0x170>
    b044:	4984b03a 	or	r2,r9,r6
    b048:	103f6026 	beq	r2,zero,adcc <__adddf3+0x7c>
    b04c:	213fffc4 	addi	r4,r4,-1
    b050:	2000931e 	bne	r4,zero,b2a0 <__adddf3+0x550>
    b054:	898d883a 	add	r6,r17,r6
    b058:	3463803a 	cmpltu	r17,r6,r17
    b05c:	4251883a 	add	r8,r8,r9
    b060:	8a11883a 	add	r8,r17,r8
    b064:	3023883a 	mov	r17,r6
    b068:	003fd806 	br	afcc <__adddf3+0x27c>
    b06c:	1800541e 	bne	r3,zero,b1c0 <__adddf3+0x470>
    b070:	80800044 	addi	r2,r16,1
    b074:	1081ffcc 	andi	r2,r2,2047
    b078:	00c00044 	movi	r3,1
    b07c:	1880a00e 	bge	r3,r2,b300 <__adddf3+0x5b0>
    b080:	8989c83a 	sub	r4,r17,r6
    b084:	8905803a 	cmpltu	r2,r17,r4
    b088:	4267c83a 	sub	r19,r8,r9
    b08c:	98a7c83a 	sub	r19,r19,r2
    b090:	9880202c 	andhi	r2,r19,128
    b094:	10006326 	beq	r2,zero,b224 <__adddf3+0x4d4>
    b098:	3463c83a 	sub	r17,r6,r17
    b09c:	4a07c83a 	sub	r3,r9,r8
    b0a0:	344d803a 	cmpltu	r6,r6,r17
    b0a4:	19a7c83a 	sub	r19,r3,r6
    b0a8:	3825883a 	mov	r18,r7
    b0ac:	983f8a1e 	bne	r19,zero,aed8 <__adddf3+0x188>
    b0b0:	8809883a 	mov	r4,r17
    b0b4:	000d3540 	call	d354 <__clzsi2>
    b0b8:	10800804 	addi	r2,r2,32
    b0bc:	10fffe04 	addi	r3,r2,-8
    b0c0:	010007c4 	movi	r4,31
    b0c4:	20ff890e 	bge	r4,r3,aeec <__adddf3+0x19c>
    b0c8:	10bff604 	addi	r2,r2,-40
    b0cc:	8884983a 	sll	r2,r17,r2
    b0d0:	0023883a 	mov	r17,zero
    b0d4:	1c3f8c0e 	bge	r3,r16,af08 <__adddf3+0x1b8>
    b0d8:	023fe034 	movhi	r8,65408
    b0dc:	423fffc4 	addi	r8,r8,-1
    b0e0:	80e1c83a 	sub	r16,r16,r3
    b0e4:	1210703a 	and	r8,r2,r8
    b0e8:	003f3806 	br	adcc <__adddf3+0x7c>
    b0ec:	9007883a 	mov	r3,r18
    b0f0:	0011883a 	mov	r8,zero
    b0f4:	0005883a 	mov	r2,zero
    b0f8:	003f4c06 	br	ae2c <__adddf3+0xdc>
    b0fc:	498cb03a 	or	r6,r9,r6
    b100:	300cc03a 	cmpne	r6,r6,zero
    b104:	0007883a 	mov	r3,zero
    b108:	003f6806 	br	aeac <__adddf3+0x15c>
    b10c:	20009c1e 	bne	r4,zero,b380 <__adddf3+0x630>
    b110:	80800044 	addi	r2,r16,1
    b114:	1141ffcc 	andi	r5,r2,2047
    b118:	01000044 	movi	r4,1
    b11c:	2140670e 	bge	r4,r5,b2bc <__adddf3+0x56c>
    b120:	0101ffc4 	movi	r4,2047
    b124:	11007f26 	beq	r2,r4,b324 <__adddf3+0x5d4>
    b128:	898d883a 	add	r6,r17,r6
    b12c:	4247883a 	add	r3,r8,r9
    b130:	3451803a 	cmpltu	r8,r6,r17
    b134:	40d1883a 	add	r8,r8,r3
    b138:	402297fa 	slli	r17,r8,31
    b13c:	300cd07a 	srli	r6,r6,1
    b140:	4010d07a 	srli	r8,r8,1
    b144:	1021883a 	mov	r16,r2
    b148:	89a2b03a 	or	r17,r17,r6
    b14c:	003f1f06 	br	adcc <__adddf3+0x7c>
    b150:	0081ffc4 	movi	r2,2047
    b154:	80bf481e 	bne	r16,r2,ae78 <__adddf3+0x128>
    b158:	003f1c06 	br	adcc <__adddf3+0x7c>
    b15c:	843ff844 	addi	r16,r16,-31
    b160:	01000804 	movi	r4,32
    b164:	1406d83a 	srl	r3,r2,r16
    b168:	41005026 	beq	r8,r4,b2ac <__adddf3+0x55c>
    b16c:	01001004 	movi	r4,64
    b170:	2211c83a 	sub	r8,r4,r8
    b174:	1204983a 	sll	r2,r2,r8
    b178:	88a2b03a 	or	r17,r17,r2
    b17c:	8822c03a 	cmpne	r17,r17,zero
    b180:	1c62b03a 	or	r17,r3,r17
    b184:	0011883a 	mov	r8,zero
    b188:	0021883a 	mov	r16,zero
    b18c:	003f7106 	br	af54 <__adddf3+0x204>
    b190:	193ff804 	addi	r4,r3,-32
    b194:	00800804 	movi	r2,32
    b198:	4908d83a 	srl	r4,r9,r4
    b19c:	18804526 	beq	r3,r2,b2b4 <__adddf3+0x564>
    b1a0:	00801004 	movi	r2,64
    b1a4:	10c5c83a 	sub	r2,r2,r3
    b1a8:	4886983a 	sll	r3,r9,r2
    b1ac:	198cb03a 	or	r6,r3,r6
    b1b0:	300cc03a 	cmpne	r6,r6,zero
    b1b4:	218cb03a 	or	r6,r4,r6
    b1b8:	0007883a 	mov	r3,zero
    b1bc:	003f3b06 	br	aeac <__adddf3+0x15c>
    b1c0:	80002a26 	beq	r16,zero,b26c <__adddf3+0x51c>
    b1c4:	0101ffc4 	movi	r4,2047
    b1c8:	11006826 	beq	r2,r4,b36c <__adddf3+0x61c>
    b1cc:	00c7c83a 	sub	r3,zero,r3
    b1d0:	42002034 	orhi	r8,r8,128
    b1d4:	01000e04 	movi	r4,56
    b1d8:	20c07c16 	blt	r4,r3,b3cc <__adddf3+0x67c>
    b1dc:	010007c4 	movi	r4,31
    b1e0:	20c0da16 	blt	r4,r3,b54c <__adddf3+0x7fc>
    b1e4:	01000804 	movi	r4,32
    b1e8:	20c9c83a 	sub	r4,r4,r3
    b1ec:	4114983a 	sll	r10,r8,r4
    b1f0:	88cad83a 	srl	r5,r17,r3
    b1f4:	8908983a 	sll	r4,r17,r4
    b1f8:	40c6d83a 	srl	r3,r8,r3
    b1fc:	5162b03a 	or	r17,r10,r5
    b200:	2008c03a 	cmpne	r4,r4,zero
    b204:	8922b03a 	or	r17,r17,r4
    b208:	3463c83a 	sub	r17,r6,r17
    b20c:	48c7c83a 	sub	r3,r9,r3
    b210:	344d803a 	cmpltu	r6,r6,r17
    b214:	1991c83a 	sub	r8,r3,r6
    b218:	1021883a 	mov	r16,r2
    b21c:	3825883a 	mov	r18,r7
    b220:	003f2706 	br	aec0 <__adddf3+0x170>
    b224:	24d0b03a 	or	r8,r4,r19
    b228:	40001b1e 	bne	r8,zero,b298 <__adddf3+0x548>
    b22c:	0005883a 	mov	r2,zero
    b230:	0007883a 	mov	r3,zero
    b234:	0021883a 	mov	r16,zero
    b238:	003f4d06 	br	af70 <__adddf3+0x220>
    b23c:	008007c4 	movi	r2,31
    b240:	11003c16 	blt	r2,r4,b334 <__adddf3+0x5e4>
    b244:	00800804 	movi	r2,32
    b248:	1105c83a 	sub	r2,r2,r4
    b24c:	488e983a 	sll	r7,r9,r2
    b250:	310ad83a 	srl	r5,r6,r4
    b254:	3084983a 	sll	r2,r6,r2
    b258:	4912d83a 	srl	r9,r9,r4
    b25c:	394ab03a 	or	r5,r7,r5
    b260:	1004c03a 	cmpne	r2,r2,zero
    b264:	288ab03a 	or	r5,r5,r2
    b268:	003f5306 	br	afb8 <__adddf3+0x268>
    b26c:	4448b03a 	or	r4,r8,r17
    b270:	20003e26 	beq	r4,zero,b36c <__adddf3+0x61c>
    b274:	00c6303a 	nor	r3,zero,r3
    b278:	18003a1e 	bne	r3,zero,b364 <__adddf3+0x614>
    b27c:	3463c83a 	sub	r17,r6,r17
    b280:	4a07c83a 	sub	r3,r9,r8
    b284:	344d803a 	cmpltu	r6,r6,r17
    b288:	1991c83a 	sub	r8,r3,r6
    b28c:	1021883a 	mov	r16,r2
    b290:	3825883a 	mov	r18,r7
    b294:	003f0a06 	br	aec0 <__adddf3+0x170>
    b298:	2023883a 	mov	r17,r4
    b29c:	003f0d06 	br	aed4 <__adddf3+0x184>
    b2a0:	0081ffc4 	movi	r2,2047
    b2a4:	80bf3f1e 	bne	r16,r2,afa4 <__adddf3+0x254>
    b2a8:	003ec806 	br	adcc <__adddf3+0x7c>
    b2ac:	0005883a 	mov	r2,zero
    b2b0:	003fb106 	br	b178 <__adddf3+0x428>
    b2b4:	0007883a 	mov	r3,zero
    b2b8:	003fbc06 	br	b1ac <__adddf3+0x45c>
    b2bc:	4444b03a 	or	r2,r8,r17
    b2c0:	8000871e 	bne	r16,zero,b4e0 <__adddf3+0x790>
    b2c4:	1000ba26 	beq	r2,zero,b5b0 <__adddf3+0x860>
    b2c8:	4984b03a 	or	r2,r9,r6
    b2cc:	103ebf26 	beq	r2,zero,adcc <__adddf3+0x7c>
    b2d0:	8985883a 	add	r2,r17,r6
    b2d4:	4247883a 	add	r3,r8,r9
    b2d8:	1451803a 	cmpltu	r8,r2,r17
    b2dc:	40d1883a 	add	r8,r8,r3
    b2e0:	40c0202c 	andhi	r3,r8,128
    b2e4:	1023883a 	mov	r17,r2
    b2e8:	183f1a26 	beq	r3,zero,af54 <__adddf3+0x204>
    b2ec:	00bfe034 	movhi	r2,65408
    b2f0:	10bfffc4 	addi	r2,r2,-1
    b2f4:	2021883a 	mov	r16,r4
    b2f8:	4090703a 	and	r8,r8,r2
    b2fc:	003eb306 	br	adcc <__adddf3+0x7c>
    b300:	4444b03a 	or	r2,r8,r17
    b304:	8000291e 	bne	r16,zero,b3ac <__adddf3+0x65c>
    b308:	10004b1e 	bne	r2,zero,b438 <__adddf3+0x6e8>
    b30c:	4990b03a 	or	r8,r9,r6
    b310:	40008b26 	beq	r8,zero,b540 <__adddf3+0x7f0>
    b314:	4811883a 	mov	r8,r9
    b318:	3023883a 	mov	r17,r6
    b31c:	3825883a 	mov	r18,r7
    b320:	003eaa06 	br	adcc <__adddf3+0x7c>
    b324:	1021883a 	mov	r16,r2
    b328:	0011883a 	mov	r8,zero
    b32c:	0005883a 	mov	r2,zero
    b330:	003f0f06 	br	af70 <__adddf3+0x220>
    b334:	217ff804 	addi	r5,r4,-32
    b338:	00800804 	movi	r2,32
    b33c:	494ad83a 	srl	r5,r9,r5
    b340:	20807d26 	beq	r4,r2,b538 <__adddf3+0x7e8>
    b344:	00801004 	movi	r2,64
    b348:	1109c83a 	sub	r4,r2,r4
    b34c:	4912983a 	sll	r9,r9,r4
    b350:	498cb03a 	or	r6,r9,r6
    b354:	300cc03a 	cmpne	r6,r6,zero
    b358:	298ab03a 	or	r5,r5,r6
    b35c:	0013883a 	mov	r9,zero
    b360:	003f1506 	br	afb8 <__adddf3+0x268>
    b364:	0101ffc4 	movi	r4,2047
    b368:	113f9a1e 	bne	r2,r4,b1d4 <__adddf3+0x484>
    b36c:	4811883a 	mov	r8,r9
    b370:	3023883a 	mov	r17,r6
    b374:	1021883a 	mov	r16,r2
    b378:	3825883a 	mov	r18,r7
    b37c:	003e9306 	br	adcc <__adddf3+0x7c>
    b380:	8000161e 	bne	r16,zero,b3dc <__adddf3+0x68c>
    b384:	444ab03a 	or	r5,r8,r17
    b388:	28005126 	beq	r5,zero,b4d0 <__adddf3+0x780>
    b38c:	0108303a 	nor	r4,zero,r4
    b390:	20004d1e 	bne	r4,zero,b4c8 <__adddf3+0x778>
    b394:	89a3883a 	add	r17,r17,r6
    b398:	4253883a 	add	r9,r8,r9
    b39c:	898d803a 	cmpltu	r6,r17,r6
    b3a0:	3251883a 	add	r8,r6,r9
    b3a4:	1021883a 	mov	r16,r2
    b3a8:	003f0806 	br	afcc <__adddf3+0x27c>
    b3ac:	1000301e 	bne	r2,zero,b470 <__adddf3+0x720>
    b3b0:	4984b03a 	or	r2,r9,r6
    b3b4:	10007126 	beq	r2,zero,b57c <__adddf3+0x82c>
    b3b8:	4811883a 	mov	r8,r9
    b3bc:	3023883a 	mov	r17,r6
    b3c0:	3825883a 	mov	r18,r7
    b3c4:	0401ffc4 	movi	r16,2047
    b3c8:	003e8006 	br	adcc <__adddf3+0x7c>
    b3cc:	4462b03a 	or	r17,r8,r17
    b3d0:	8822c03a 	cmpne	r17,r17,zero
    b3d4:	0007883a 	mov	r3,zero
    b3d8:	003f8b06 	br	b208 <__adddf3+0x4b8>
    b3dc:	0141ffc4 	movi	r5,2047
    b3e0:	11403b26 	beq	r2,r5,b4d0 <__adddf3+0x780>
    b3e4:	0109c83a 	sub	r4,zero,r4
    b3e8:	42002034 	orhi	r8,r8,128
    b3ec:	01400e04 	movi	r5,56
    b3f0:	29006716 	blt	r5,r4,b590 <__adddf3+0x840>
    b3f4:	014007c4 	movi	r5,31
    b3f8:	29007016 	blt	r5,r4,b5bc <__adddf3+0x86c>
    b3fc:	01400804 	movi	r5,32
    b400:	290bc83a 	sub	r5,r5,r4
    b404:	4154983a 	sll	r10,r8,r5
    b408:	890ed83a 	srl	r7,r17,r4
    b40c:	894a983a 	sll	r5,r17,r5
    b410:	4108d83a 	srl	r4,r8,r4
    b414:	51e2b03a 	or	r17,r10,r7
    b418:	280ac03a 	cmpne	r5,r5,zero
    b41c:	8962b03a 	or	r17,r17,r5
    b420:	89a3883a 	add	r17,r17,r6
    b424:	2253883a 	add	r9,r4,r9
    b428:	898d803a 	cmpltu	r6,r17,r6
    b42c:	3251883a 	add	r8,r6,r9
    b430:	1021883a 	mov	r16,r2
    b434:	003ee506 	br	afcc <__adddf3+0x27c>
    b438:	4984b03a 	or	r2,r9,r6
    b43c:	103e6326 	beq	r2,zero,adcc <__adddf3+0x7c>
    b440:	8987c83a 	sub	r3,r17,r6
    b444:	88c9803a 	cmpltu	r4,r17,r3
    b448:	4245c83a 	sub	r2,r8,r9
    b44c:	1105c83a 	sub	r2,r2,r4
    b450:	1100202c 	andhi	r4,r2,128
    b454:	203ebb26 	beq	r4,zero,af44 <__adddf3+0x1f4>
    b458:	3463c83a 	sub	r17,r6,r17
    b45c:	4a07c83a 	sub	r3,r9,r8
    b460:	344d803a 	cmpltu	r6,r6,r17
    b464:	1991c83a 	sub	r8,r3,r6
    b468:	3825883a 	mov	r18,r7
    b46c:	003e5706 	br	adcc <__adddf3+0x7c>
    b470:	4984b03a 	or	r2,r9,r6
    b474:	10002e26 	beq	r2,zero,b530 <__adddf3+0x7e0>
    b478:	4004d0fa 	srli	r2,r8,3
    b47c:	8822d0fa 	srli	r17,r17,3
    b480:	4010977a 	slli	r8,r8,29
    b484:	10c0022c 	andhi	r3,r2,8
    b488:	4462b03a 	or	r17,r8,r17
    b48c:	18000826 	beq	r3,zero,b4b0 <__adddf3+0x760>
    b490:	4808d0fa 	srli	r4,r9,3
    b494:	20c0022c 	andhi	r3,r4,8
    b498:	1800051e 	bne	r3,zero,b4b0 <__adddf3+0x760>
    b49c:	300cd0fa 	srli	r6,r6,3
    b4a0:	4806977a 	slli	r3,r9,29
    b4a4:	2005883a 	mov	r2,r4
    b4a8:	3825883a 	mov	r18,r7
    b4ac:	19a2b03a 	or	r17,r3,r6
    b4b0:	8810d77a 	srli	r8,r17,29
    b4b4:	100490fa 	slli	r2,r2,3
    b4b8:	882290fa 	slli	r17,r17,3
    b4bc:	0401ffc4 	movi	r16,2047
    b4c0:	4090b03a 	or	r8,r8,r2
    b4c4:	003e4106 	br	adcc <__adddf3+0x7c>
    b4c8:	0141ffc4 	movi	r5,2047
    b4cc:	117fc71e 	bne	r2,r5,b3ec <__adddf3+0x69c>
    b4d0:	4811883a 	mov	r8,r9
    b4d4:	3023883a 	mov	r17,r6
    b4d8:	1021883a 	mov	r16,r2
    b4dc:	003e3b06 	br	adcc <__adddf3+0x7c>
    b4e0:	10002f26 	beq	r2,zero,b5a0 <__adddf3+0x850>
    b4e4:	4984b03a 	or	r2,r9,r6
    b4e8:	10001126 	beq	r2,zero,b530 <__adddf3+0x7e0>
    b4ec:	4004d0fa 	srli	r2,r8,3
    b4f0:	8822d0fa 	srli	r17,r17,3
    b4f4:	4010977a 	slli	r8,r8,29
    b4f8:	10c0022c 	andhi	r3,r2,8
    b4fc:	4462b03a 	or	r17,r8,r17
    b500:	183feb26 	beq	r3,zero,b4b0 <__adddf3+0x760>
    b504:	4808d0fa 	srli	r4,r9,3
    b508:	20c0022c 	andhi	r3,r4,8
    b50c:	183fe81e 	bne	r3,zero,b4b0 <__adddf3+0x760>
    b510:	300cd0fa 	srli	r6,r6,3
    b514:	4806977a 	slli	r3,r9,29
    b518:	2005883a 	mov	r2,r4
    b51c:	19a2b03a 	or	r17,r3,r6
    b520:	003fe306 	br	b4b0 <__adddf3+0x760>
    b524:	0011883a 	mov	r8,zero
    b528:	0005883a 	mov	r2,zero
    b52c:	003e3f06 	br	ae2c <__adddf3+0xdc>
    b530:	0401ffc4 	movi	r16,2047
    b534:	003e2506 	br	adcc <__adddf3+0x7c>
    b538:	0013883a 	mov	r9,zero
    b53c:	003f8406 	br	b350 <__adddf3+0x600>
    b540:	0005883a 	mov	r2,zero
    b544:	0007883a 	mov	r3,zero
    b548:	003e8906 	br	af70 <__adddf3+0x220>
    b54c:	197ff804 	addi	r5,r3,-32
    b550:	01000804 	movi	r4,32
    b554:	414ad83a 	srl	r5,r8,r5
    b558:	19002426 	beq	r3,r4,b5ec <__adddf3+0x89c>
    b55c:	01001004 	movi	r4,64
    b560:	20c7c83a 	sub	r3,r4,r3
    b564:	40c6983a 	sll	r3,r8,r3
    b568:	1c46b03a 	or	r3,r3,r17
    b56c:	1806c03a 	cmpne	r3,r3,zero
    b570:	28e2b03a 	or	r17,r5,r3
    b574:	0007883a 	mov	r3,zero
    b578:	003f2306 	br	b208 <__adddf3+0x4b8>
    b57c:	0007883a 	mov	r3,zero
    b580:	5811883a 	mov	r8,r11
    b584:	00bfffc4 	movi	r2,-1
    b588:	0401ffc4 	movi	r16,2047
    b58c:	003e7806 	br	af70 <__adddf3+0x220>
    b590:	4462b03a 	or	r17,r8,r17
    b594:	8822c03a 	cmpne	r17,r17,zero
    b598:	0009883a 	mov	r4,zero
    b59c:	003fa006 	br	b420 <__adddf3+0x6d0>
    b5a0:	4811883a 	mov	r8,r9
    b5a4:	3023883a 	mov	r17,r6
    b5a8:	0401ffc4 	movi	r16,2047
    b5ac:	003e0706 	br	adcc <__adddf3+0x7c>
    b5b0:	4811883a 	mov	r8,r9
    b5b4:	3023883a 	mov	r17,r6
    b5b8:	003e0406 	br	adcc <__adddf3+0x7c>
    b5bc:	21fff804 	addi	r7,r4,-32
    b5c0:	01400804 	movi	r5,32
    b5c4:	41ced83a 	srl	r7,r8,r7
    b5c8:	21400a26 	beq	r4,r5,b5f4 <__adddf3+0x8a4>
    b5cc:	01401004 	movi	r5,64
    b5d0:	2909c83a 	sub	r4,r5,r4
    b5d4:	4108983a 	sll	r4,r8,r4
    b5d8:	2448b03a 	or	r4,r4,r17
    b5dc:	2008c03a 	cmpne	r4,r4,zero
    b5e0:	3922b03a 	or	r17,r7,r4
    b5e4:	0009883a 	mov	r4,zero
    b5e8:	003f8d06 	br	b420 <__adddf3+0x6d0>
    b5ec:	0007883a 	mov	r3,zero
    b5f0:	003fdd06 	br	b568 <__adddf3+0x818>
    b5f4:	0009883a 	mov	r4,zero
    b5f8:	003ff706 	br	b5d8 <__adddf3+0x888>

0000b5fc <__divdf3>:
    b5fc:	defff204 	addi	sp,sp,-56
    b600:	dd400915 	stw	r21,36(sp)
    b604:	282ad53a 	srli	r21,r5,20
    b608:	dd000815 	stw	r20,32(sp)
    b60c:	2828d7fa 	srli	r20,r5,31
    b610:	dc000415 	stw	r16,16(sp)
    b614:	04000434 	movhi	r16,16
    b618:	df000c15 	stw	fp,48(sp)
    b61c:	843fffc4 	addi	r16,r16,-1
    b620:	dfc00d15 	stw	ra,52(sp)
    b624:	ddc00b15 	stw	r23,44(sp)
    b628:	dd800a15 	stw	r22,40(sp)
    b62c:	dcc00715 	stw	r19,28(sp)
    b630:	dc800615 	stw	r18,24(sp)
    b634:	dc400515 	stw	r17,20(sp)
    b638:	ad41ffcc 	andi	r21,r21,2047
    b63c:	2c20703a 	and	r16,r5,r16
    b640:	a7003fcc 	andi	fp,r20,255
    b644:	a8006126 	beq	r21,zero,b7cc <__divdf3+0x1d0>
    b648:	0081ffc4 	movi	r2,2047
    b64c:	2025883a 	mov	r18,r4
    b650:	a8803726 	beq	r21,r2,b730 <__divdf3+0x134>
    b654:	80800434 	orhi	r2,r16,16
    b658:	100490fa 	slli	r2,r2,3
    b65c:	2020d77a 	srli	r16,r4,29
    b660:	202490fa 	slli	r18,r4,3
    b664:	ad7f0044 	addi	r21,r21,-1023
    b668:	80a0b03a 	or	r16,r16,r2
    b66c:	0027883a 	mov	r19,zero
    b670:	0013883a 	mov	r9,zero
    b674:	3804d53a 	srli	r2,r7,20
    b678:	382cd7fa 	srli	r22,r7,31
    b67c:	04400434 	movhi	r17,16
    b680:	8c7fffc4 	addi	r17,r17,-1
    b684:	1081ffcc 	andi	r2,r2,2047
    b688:	3011883a 	mov	r8,r6
    b68c:	3c62703a 	and	r17,r7,r17
    b690:	b5c03fcc 	andi	r23,r22,255
    b694:	10006c26 	beq	r2,zero,b848 <__divdf3+0x24c>
    b698:	00c1ffc4 	movi	r3,2047
    b69c:	10c06426 	beq	r2,r3,b830 <__divdf3+0x234>
    b6a0:	88c00434 	orhi	r3,r17,16
    b6a4:	180690fa 	slli	r3,r3,3
    b6a8:	3022d77a 	srli	r17,r6,29
    b6ac:	301090fa 	slli	r8,r6,3
    b6b0:	10bf0044 	addi	r2,r2,-1023
    b6b4:	88e2b03a 	or	r17,r17,r3
    b6b8:	000f883a 	mov	r7,zero
    b6bc:	a58cf03a 	xor	r6,r20,r22
    b6c0:	3cc8b03a 	or	r4,r7,r19
    b6c4:	a8abc83a 	sub	r21,r21,r2
    b6c8:	008003c4 	movi	r2,15
    b6cc:	3007883a 	mov	r3,r6
    b6d0:	34c03fcc 	andi	r19,r6,255
    b6d4:	11009036 	bltu	r2,r4,b918 <__divdf3+0x31c>
    b6d8:	200890ba 	slli	r4,r4,2
    b6dc:	00800074 	movhi	r2,1
    b6e0:	10adbc04 	addi	r2,r2,-18704
    b6e4:	2089883a 	add	r4,r4,r2
    b6e8:	20800017 	ldw	r2,0(r4)
    b6ec:	1000683a 	jmp	r2
    b6f0:	0000b918 	cmpnei	zero,zero,740
    b6f4:	0000b768 	cmpgeui	zero,zero,733
    b6f8:	0000b908 	cmpgei	zero,zero,740
    b6fc:	0000b75c 	xori	zero,zero,733
    b700:	0000b908 	cmpgei	zero,zero,740
    b704:	0000b8dc 	xori	zero,zero,739
    b708:	0000b908 	cmpgei	zero,zero,740
    b70c:	0000b75c 	xori	zero,zero,733
    b710:	0000b768 	cmpgeui	zero,zero,733
    b714:	0000b768 	cmpgeui	zero,zero,733
    b718:	0000b8dc 	xori	zero,zero,739
    b71c:	0000b75c 	xori	zero,zero,733
    b720:	0000b74c 	andi	zero,zero,733
    b724:	0000b74c 	andi	zero,zero,733
    b728:	0000b74c 	andi	zero,zero,733
    b72c:	0000bbfc 	xorhi	zero,zero,751
    b730:	2404b03a 	or	r2,r4,r16
    b734:	1000661e 	bne	r2,zero,b8d0 <__divdf3+0x2d4>
    b738:	04c00204 	movi	r19,8
    b73c:	0021883a 	mov	r16,zero
    b740:	0025883a 	mov	r18,zero
    b744:	02400084 	movi	r9,2
    b748:	003fca06 	br	b674 <__divdf3+0x78>
    b74c:	8023883a 	mov	r17,r16
    b750:	9011883a 	mov	r8,r18
    b754:	e02f883a 	mov	r23,fp
    b758:	480f883a 	mov	r7,r9
    b75c:	00800084 	movi	r2,2
    b760:	3881311e 	bne	r7,r2,bc28 <__divdf3+0x62c>
    b764:	b827883a 	mov	r19,r23
    b768:	98c0004c 	andi	r3,r19,1
    b76c:	0081ffc4 	movi	r2,2047
    b770:	000b883a 	mov	r5,zero
    b774:	0025883a 	mov	r18,zero
    b778:	1004953a 	slli	r2,r2,20
    b77c:	18c03fcc 	andi	r3,r3,255
    b780:	04400434 	movhi	r17,16
    b784:	8c7fffc4 	addi	r17,r17,-1
    b788:	180697fa 	slli	r3,r3,31
    b78c:	2c4a703a 	and	r5,r5,r17
    b790:	288ab03a 	or	r5,r5,r2
    b794:	28c6b03a 	or	r3,r5,r3
    b798:	9005883a 	mov	r2,r18
    b79c:	dfc00d17 	ldw	ra,52(sp)
    b7a0:	df000c17 	ldw	fp,48(sp)
    b7a4:	ddc00b17 	ldw	r23,44(sp)
    b7a8:	dd800a17 	ldw	r22,40(sp)
    b7ac:	dd400917 	ldw	r21,36(sp)
    b7b0:	dd000817 	ldw	r20,32(sp)
    b7b4:	dcc00717 	ldw	r19,28(sp)
    b7b8:	dc800617 	ldw	r18,24(sp)
    b7bc:	dc400517 	ldw	r17,20(sp)
    b7c0:	dc000417 	ldw	r16,16(sp)
    b7c4:	dec00e04 	addi	sp,sp,56
    b7c8:	f800283a 	ret
    b7cc:	2404b03a 	or	r2,r4,r16
    b7d0:	2027883a 	mov	r19,r4
    b7d4:	10003926 	beq	r2,zero,b8bc <__divdf3+0x2c0>
    b7d8:	80012e26 	beq	r16,zero,bc94 <__divdf3+0x698>
    b7dc:	8009883a 	mov	r4,r16
    b7e0:	d9800315 	stw	r6,12(sp)
    b7e4:	d9c00215 	stw	r7,8(sp)
    b7e8:	000d3540 	call	d354 <__clzsi2>
    b7ec:	d9800317 	ldw	r6,12(sp)
    b7f0:	d9c00217 	ldw	r7,8(sp)
    b7f4:	113ffd44 	addi	r4,r2,-11
    b7f8:	00c00704 	movi	r3,28
    b7fc:	19012116 	blt	r3,r4,bc84 <__divdf3+0x688>
    b800:	00c00744 	movi	r3,29
    b804:	147ffe04 	addi	r17,r2,-8
    b808:	1907c83a 	sub	r3,r3,r4
    b80c:	8460983a 	sll	r16,r16,r17
    b810:	98c6d83a 	srl	r3,r19,r3
    b814:	9c64983a 	sll	r18,r19,r17
    b818:	1c20b03a 	or	r16,r3,r16
    b81c:	1080fcc4 	addi	r2,r2,1011
    b820:	00abc83a 	sub	r21,zero,r2
    b824:	0027883a 	mov	r19,zero
    b828:	0013883a 	mov	r9,zero
    b82c:	003f9106 	br	b674 <__divdf3+0x78>
    b830:	3446b03a 	or	r3,r6,r17
    b834:	18001f1e 	bne	r3,zero,b8b4 <__divdf3+0x2b8>
    b838:	0023883a 	mov	r17,zero
    b83c:	0011883a 	mov	r8,zero
    b840:	01c00084 	movi	r7,2
    b844:	003f9d06 	br	b6bc <__divdf3+0xc0>
    b848:	3446b03a 	or	r3,r6,r17
    b84c:	18001526 	beq	r3,zero,b8a4 <__divdf3+0x2a8>
    b850:	88011b26 	beq	r17,zero,bcc0 <__divdf3+0x6c4>
    b854:	8809883a 	mov	r4,r17
    b858:	d9800315 	stw	r6,12(sp)
    b85c:	da400115 	stw	r9,4(sp)
    b860:	000d3540 	call	d354 <__clzsi2>
    b864:	d9800317 	ldw	r6,12(sp)
    b868:	da400117 	ldw	r9,4(sp)
    b86c:	113ffd44 	addi	r4,r2,-11
    b870:	00c00704 	movi	r3,28
    b874:	19010e16 	blt	r3,r4,bcb0 <__divdf3+0x6b4>
    b878:	00c00744 	movi	r3,29
    b87c:	123ffe04 	addi	r8,r2,-8
    b880:	1907c83a 	sub	r3,r3,r4
    b884:	8a22983a 	sll	r17,r17,r8
    b888:	30c6d83a 	srl	r3,r6,r3
    b88c:	3210983a 	sll	r8,r6,r8
    b890:	1c62b03a 	or	r17,r3,r17
    b894:	1080fcc4 	addi	r2,r2,1011
    b898:	0085c83a 	sub	r2,zero,r2
    b89c:	000f883a 	mov	r7,zero
    b8a0:	003f8606 	br	b6bc <__divdf3+0xc0>
    b8a4:	0023883a 	mov	r17,zero
    b8a8:	0011883a 	mov	r8,zero
    b8ac:	01c00044 	movi	r7,1
    b8b0:	003f8206 	br	b6bc <__divdf3+0xc0>
    b8b4:	01c000c4 	movi	r7,3
    b8b8:	003f8006 	br	b6bc <__divdf3+0xc0>
    b8bc:	04c00104 	movi	r19,4
    b8c0:	0021883a 	mov	r16,zero
    b8c4:	0025883a 	mov	r18,zero
    b8c8:	02400044 	movi	r9,1
    b8cc:	003f6906 	br	b674 <__divdf3+0x78>
    b8d0:	04c00304 	movi	r19,12
    b8d4:	024000c4 	movi	r9,3
    b8d8:	003f6606 	br	b674 <__divdf3+0x78>
    b8dc:	01400434 	movhi	r5,16
    b8e0:	0007883a 	mov	r3,zero
    b8e4:	297fffc4 	addi	r5,r5,-1
    b8e8:	04bfffc4 	movi	r18,-1
    b8ec:	0081ffc4 	movi	r2,2047
    b8f0:	003fa106 	br	b778 <__divdf3+0x17c>
    b8f4:	00c00044 	movi	r3,1
    b8f8:	1887c83a 	sub	r3,r3,r2
    b8fc:	01000e04 	movi	r4,56
    b900:	20c1210e 	bge	r4,r3,bd88 <__divdf3+0x78c>
    b904:	98c0004c 	andi	r3,r19,1
    b908:	0005883a 	mov	r2,zero
    b90c:	000b883a 	mov	r5,zero
    b910:	0025883a 	mov	r18,zero
    b914:	003f9806 	br	b778 <__divdf3+0x17c>
    b918:	8c00fd36 	bltu	r17,r16,bd10 <__divdf3+0x714>
    b91c:	8440fb26 	beq	r16,r17,bd0c <__divdf3+0x710>
    b920:	8007883a 	mov	r3,r16
    b924:	ad7fffc4 	addi	r21,r21,-1
    b928:	0021883a 	mov	r16,zero
    b92c:	4004d63a 	srli	r2,r8,24
    b930:	8822923a 	slli	r17,r17,8
    b934:	1809883a 	mov	r4,r3
    b938:	402c923a 	slli	r22,r8,8
    b93c:	88b8b03a 	or	fp,r17,r2
    b940:	e028d43a 	srli	r20,fp,16
    b944:	d8c00015 	stw	r3,0(sp)
    b948:	e5ffffcc 	andi	r23,fp,65535
    b94c:	a00b883a 	mov	r5,r20
    b950:	0000b680 	call	b68 <__udivsi3>
    b954:	d8c00017 	ldw	r3,0(sp)
    b958:	a00b883a 	mov	r5,r20
    b95c:	d8800315 	stw	r2,12(sp)
    b960:	1809883a 	mov	r4,r3
    b964:	0000bcc0 	call	bcc <__umodsi3>
    b968:	d9800317 	ldw	r6,12(sp)
    b96c:	1006943a 	slli	r3,r2,16
    b970:	9004d43a 	srli	r2,r18,16
    b974:	b9a3383a 	mul	r17,r23,r6
    b978:	10c4b03a 	or	r2,r2,r3
    b97c:	1440062e 	bgeu	r2,r17,b998 <__divdf3+0x39c>
    b980:	1705883a 	add	r2,r2,fp
    b984:	30ffffc4 	addi	r3,r6,-1
    b988:	1700ee36 	bltu	r2,fp,bd44 <__divdf3+0x748>
    b98c:	1440ed2e 	bgeu	r2,r17,bd44 <__divdf3+0x748>
    b990:	31bfff84 	addi	r6,r6,-2
    b994:	1705883a 	add	r2,r2,fp
    b998:	1463c83a 	sub	r17,r2,r17
    b99c:	a00b883a 	mov	r5,r20
    b9a0:	8809883a 	mov	r4,r17
    b9a4:	d9800315 	stw	r6,12(sp)
    b9a8:	0000b680 	call	b68 <__udivsi3>
    b9ac:	a00b883a 	mov	r5,r20
    b9b0:	8809883a 	mov	r4,r17
    b9b4:	d8800215 	stw	r2,8(sp)
    b9b8:	0000bcc0 	call	bcc <__umodsi3>
    b9bc:	d9c00217 	ldw	r7,8(sp)
    b9c0:	1004943a 	slli	r2,r2,16
    b9c4:	94bfffcc 	andi	r18,r18,65535
    b9c8:	b9d1383a 	mul	r8,r23,r7
    b9cc:	90a4b03a 	or	r18,r18,r2
    b9d0:	d9800317 	ldw	r6,12(sp)
    b9d4:	9200062e 	bgeu	r18,r8,b9f0 <__divdf3+0x3f4>
    b9d8:	9725883a 	add	r18,r18,fp
    b9dc:	38bfffc4 	addi	r2,r7,-1
    b9e0:	9700d636 	bltu	r18,fp,bd3c <__divdf3+0x740>
    b9e4:	9200d52e 	bgeu	r18,r8,bd3c <__divdf3+0x740>
    b9e8:	39ffff84 	addi	r7,r7,-2
    b9ec:	9725883a 	add	r18,r18,fp
    b9f0:	3004943a 	slli	r2,r6,16
    b9f4:	b012d43a 	srli	r9,r22,16
    b9f8:	b1bfffcc 	andi	r6,r22,65535
    b9fc:	11e2b03a 	or	r17,r2,r7
    ba00:	8806d43a 	srli	r3,r17,16
    ba04:	893fffcc 	andi	r4,r17,65535
    ba08:	218b383a 	mul	r5,r4,r6
    ba0c:	30c5383a 	mul	r2,r6,r3
    ba10:	2249383a 	mul	r4,r4,r9
    ba14:	280ed43a 	srli	r7,r5,16
    ba18:	9225c83a 	sub	r18,r18,r8
    ba1c:	2089883a 	add	r4,r4,r2
    ba20:	3909883a 	add	r4,r7,r4
    ba24:	1a47383a 	mul	r3,r3,r9
    ba28:	2080022e 	bgeu	r4,r2,ba34 <__divdf3+0x438>
    ba2c:	00800074 	movhi	r2,1
    ba30:	1887883a 	add	r3,r3,r2
    ba34:	2004d43a 	srli	r2,r4,16
    ba38:	2008943a 	slli	r4,r4,16
    ba3c:	297fffcc 	andi	r5,r5,65535
    ba40:	10c7883a 	add	r3,r2,r3
    ba44:	2149883a 	add	r4,r4,r5
    ba48:	90c0a536 	bltu	r18,r3,bce0 <__divdf3+0x6e4>
    ba4c:	90c0bf26 	beq	r18,r3,bd4c <__divdf3+0x750>
    ba50:	90c7c83a 	sub	r3,r18,r3
    ba54:	810fc83a 	sub	r7,r16,r4
    ba58:	81e5803a 	cmpltu	r18,r16,r7
    ba5c:	1ca5c83a 	sub	r18,r3,r18
    ba60:	e480c126 	beq	fp,r18,bd68 <__divdf3+0x76c>
    ba64:	a00b883a 	mov	r5,r20
    ba68:	9009883a 	mov	r4,r18
    ba6c:	d9800315 	stw	r6,12(sp)
    ba70:	d9c00215 	stw	r7,8(sp)
    ba74:	da400115 	stw	r9,4(sp)
    ba78:	0000b680 	call	b68 <__udivsi3>
    ba7c:	a00b883a 	mov	r5,r20
    ba80:	9009883a 	mov	r4,r18
    ba84:	d8800015 	stw	r2,0(sp)
    ba88:	0000bcc0 	call	bcc <__umodsi3>
    ba8c:	d9c00217 	ldw	r7,8(sp)
    ba90:	da000017 	ldw	r8,0(sp)
    ba94:	1006943a 	slli	r3,r2,16
    ba98:	3804d43a 	srli	r2,r7,16
    ba9c:	ba21383a 	mul	r16,r23,r8
    baa0:	d9800317 	ldw	r6,12(sp)
    baa4:	10c4b03a 	or	r2,r2,r3
    baa8:	da400117 	ldw	r9,4(sp)
    baac:	1400062e 	bgeu	r2,r16,bac8 <__divdf3+0x4cc>
    bab0:	1705883a 	add	r2,r2,fp
    bab4:	40ffffc4 	addi	r3,r8,-1
    bab8:	1700ad36 	bltu	r2,fp,bd70 <__divdf3+0x774>
    babc:	1400ac2e 	bgeu	r2,r16,bd70 <__divdf3+0x774>
    bac0:	423fff84 	addi	r8,r8,-2
    bac4:	1705883a 	add	r2,r2,fp
    bac8:	1421c83a 	sub	r16,r2,r16
    bacc:	a00b883a 	mov	r5,r20
    bad0:	8009883a 	mov	r4,r16
    bad4:	d9800315 	stw	r6,12(sp)
    bad8:	d9c00215 	stw	r7,8(sp)
    badc:	da000015 	stw	r8,0(sp)
    bae0:	da400115 	stw	r9,4(sp)
    bae4:	0000b680 	call	b68 <__udivsi3>
    bae8:	8009883a 	mov	r4,r16
    baec:	a00b883a 	mov	r5,r20
    baf0:	1025883a 	mov	r18,r2
    baf4:	0000bcc0 	call	bcc <__umodsi3>
    baf8:	d9c00217 	ldw	r7,8(sp)
    bafc:	1004943a 	slli	r2,r2,16
    bb00:	bcaf383a 	mul	r23,r23,r18
    bb04:	393fffcc 	andi	r4,r7,65535
    bb08:	2088b03a 	or	r4,r4,r2
    bb0c:	d9800317 	ldw	r6,12(sp)
    bb10:	da000017 	ldw	r8,0(sp)
    bb14:	da400117 	ldw	r9,4(sp)
    bb18:	25c0062e 	bgeu	r4,r23,bb34 <__divdf3+0x538>
    bb1c:	2709883a 	add	r4,r4,fp
    bb20:	90bfffc4 	addi	r2,r18,-1
    bb24:	27009436 	bltu	r4,fp,bd78 <__divdf3+0x77c>
    bb28:	25c0932e 	bgeu	r4,r23,bd78 <__divdf3+0x77c>
    bb2c:	94bfff84 	addi	r18,r18,-2
    bb30:	2709883a 	add	r4,r4,fp
    bb34:	4004943a 	slli	r2,r8,16
    bb38:	25efc83a 	sub	r23,r4,r23
    bb3c:	1490b03a 	or	r8,r2,r18
    bb40:	4008d43a 	srli	r4,r8,16
    bb44:	40ffffcc 	andi	r3,r8,65535
    bb48:	30c5383a 	mul	r2,r6,r3
    bb4c:	1a47383a 	mul	r3,r3,r9
    bb50:	310d383a 	mul	r6,r6,r4
    bb54:	100ad43a 	srli	r5,r2,16
    bb58:	4913383a 	mul	r9,r9,r4
    bb5c:	1987883a 	add	r3,r3,r6
    bb60:	28c7883a 	add	r3,r5,r3
    bb64:	1980022e 	bgeu	r3,r6,bb70 <__divdf3+0x574>
    bb68:	01000074 	movhi	r4,1
    bb6c:	4913883a 	add	r9,r9,r4
    bb70:	1808d43a 	srli	r4,r3,16
    bb74:	1806943a 	slli	r3,r3,16
    bb78:	10bfffcc 	andi	r2,r2,65535
    bb7c:	2253883a 	add	r9,r4,r9
    bb80:	1887883a 	add	r3,r3,r2
    bb84:	ba403836 	bltu	r23,r9,bc68 <__divdf3+0x66c>
    bb88:	ba403626 	beq	r23,r9,bc64 <__divdf3+0x668>
    bb8c:	42000054 	ori	r8,r8,1
    bb90:	a880ffc4 	addi	r2,r21,1023
    bb94:	00bf570e 	bge	zero,r2,b8f4 <__divdf3+0x2f8>
    bb98:	40c001cc 	andi	r3,r8,7
    bb9c:	18000726 	beq	r3,zero,bbbc <__divdf3+0x5c0>
    bba0:	40c003cc 	andi	r3,r8,15
    bba4:	01000104 	movi	r4,4
    bba8:	19000426 	beq	r3,r4,bbbc <__divdf3+0x5c0>
    bbac:	4107883a 	add	r3,r8,r4
    bbb0:	1a11803a 	cmpltu	r8,r3,r8
    bbb4:	8a23883a 	add	r17,r17,r8
    bbb8:	1811883a 	mov	r8,r3
    bbbc:	88c0402c 	andhi	r3,r17,256
    bbc0:	18000426 	beq	r3,zero,bbd4 <__divdf3+0x5d8>
    bbc4:	00ffc034 	movhi	r3,65280
    bbc8:	18ffffc4 	addi	r3,r3,-1
    bbcc:	a8810004 	addi	r2,r21,1024
    bbd0:	88e2703a 	and	r17,r17,r3
    bbd4:	00c1ff84 	movi	r3,2046
    bbd8:	18bee316 	blt	r3,r2,b768 <__divdf3+0x16c>
    bbdc:	8824977a 	slli	r18,r17,29
    bbe0:	4010d0fa 	srli	r8,r8,3
    bbe4:	8822927a 	slli	r17,r17,9
    bbe8:	1081ffcc 	andi	r2,r2,2047
    bbec:	9224b03a 	or	r18,r18,r8
    bbf0:	880ad33a 	srli	r5,r17,12
    bbf4:	98c0004c 	andi	r3,r19,1
    bbf8:	003edf06 	br	b778 <__divdf3+0x17c>
    bbfc:	8080022c 	andhi	r2,r16,8
    bc00:	10001226 	beq	r2,zero,bc4c <__divdf3+0x650>
    bc04:	8880022c 	andhi	r2,r17,8
    bc08:	1000101e 	bne	r2,zero,bc4c <__divdf3+0x650>
    bc0c:	00800434 	movhi	r2,16
    bc10:	89400234 	orhi	r5,r17,8
    bc14:	10bfffc4 	addi	r2,r2,-1
    bc18:	b007883a 	mov	r3,r22
    bc1c:	288a703a 	and	r5,r5,r2
    bc20:	4025883a 	mov	r18,r8
    bc24:	003f3106 	br	b8ec <__divdf3+0x2f0>
    bc28:	008000c4 	movi	r2,3
    bc2c:	3880a626 	beq	r7,r2,bec8 <__divdf3+0x8cc>
    bc30:	00800044 	movi	r2,1
    bc34:	3880521e 	bne	r7,r2,bd80 <__divdf3+0x784>
    bc38:	b807883a 	mov	r3,r23
    bc3c:	0005883a 	mov	r2,zero
    bc40:	000b883a 	mov	r5,zero
    bc44:	0025883a 	mov	r18,zero
    bc48:	003ecb06 	br	b778 <__divdf3+0x17c>
    bc4c:	00800434 	movhi	r2,16
    bc50:	81400234 	orhi	r5,r16,8
    bc54:	10bfffc4 	addi	r2,r2,-1
    bc58:	a007883a 	mov	r3,r20
    bc5c:	288a703a 	and	r5,r5,r2
    bc60:	003f2206 	br	b8ec <__divdf3+0x2f0>
    bc64:	183fca26 	beq	r3,zero,bb90 <__divdf3+0x594>
    bc68:	e5ef883a 	add	r23,fp,r23
    bc6c:	40bfffc4 	addi	r2,r8,-1
    bc70:	bf00392e 	bgeu	r23,fp,bd58 <__divdf3+0x75c>
    bc74:	1011883a 	mov	r8,r2
    bc78:	ba7fc41e 	bne	r23,r9,bb8c <__divdf3+0x590>
    bc7c:	b0ffc31e 	bne	r22,r3,bb8c <__divdf3+0x590>
    bc80:	003fc306 	br	bb90 <__divdf3+0x594>
    bc84:	143ff604 	addi	r16,r2,-40
    bc88:	9c20983a 	sll	r16,r19,r16
    bc8c:	0025883a 	mov	r18,zero
    bc90:	003ee206 	br	b81c <__divdf3+0x220>
    bc94:	d9800315 	stw	r6,12(sp)
    bc98:	d9c00215 	stw	r7,8(sp)
    bc9c:	000d3540 	call	d354 <__clzsi2>
    bca0:	10800804 	addi	r2,r2,32
    bca4:	d9c00217 	ldw	r7,8(sp)
    bca8:	d9800317 	ldw	r6,12(sp)
    bcac:	003ed106 	br	b7f4 <__divdf3+0x1f8>
    bcb0:	147ff604 	addi	r17,r2,-40
    bcb4:	3462983a 	sll	r17,r6,r17
    bcb8:	0011883a 	mov	r8,zero
    bcbc:	003ef506 	br	b894 <__divdf3+0x298>
    bcc0:	3009883a 	mov	r4,r6
    bcc4:	d9800315 	stw	r6,12(sp)
    bcc8:	da400115 	stw	r9,4(sp)
    bccc:	000d3540 	call	d354 <__clzsi2>
    bcd0:	10800804 	addi	r2,r2,32
    bcd4:	da400117 	ldw	r9,4(sp)
    bcd8:	d9800317 	ldw	r6,12(sp)
    bcdc:	003ee306 	br	b86c <__divdf3+0x270>
    bce0:	85a1883a 	add	r16,r16,r22
    bce4:	8585803a 	cmpltu	r2,r16,r22
    bce8:	1705883a 	add	r2,r2,fp
    bcec:	14a5883a 	add	r18,r2,r18
    bcf0:	88bfffc4 	addi	r2,r17,-1
    bcf4:	e4800c2e 	bgeu	fp,r18,bd28 <__divdf3+0x72c>
    bcf8:	90c03e36 	bltu	r18,r3,bdf4 <__divdf3+0x7f8>
    bcfc:	1c806926 	beq	r3,r18,bea4 <__divdf3+0x8a8>
    bd00:	90c7c83a 	sub	r3,r18,r3
    bd04:	1023883a 	mov	r17,r2
    bd08:	003f5206 	br	ba54 <__divdf3+0x458>
    bd0c:	923f0436 	bltu	r18,r8,b920 <__divdf3+0x324>
    bd10:	800897fa 	slli	r4,r16,31
    bd14:	9004d07a 	srli	r2,r18,1
    bd18:	8006d07a 	srli	r3,r16,1
    bd1c:	902097fa 	slli	r16,r18,31
    bd20:	20a4b03a 	or	r18,r4,r2
    bd24:	003f0106 	br	b92c <__divdf3+0x330>
    bd28:	e4bff51e 	bne	fp,r18,bd00 <__divdf3+0x704>
    bd2c:	85bff22e 	bgeu	r16,r22,bcf8 <__divdf3+0x6fc>
    bd30:	e0c7c83a 	sub	r3,fp,r3
    bd34:	1023883a 	mov	r17,r2
    bd38:	003f4606 	br	ba54 <__divdf3+0x458>
    bd3c:	100f883a 	mov	r7,r2
    bd40:	003f2b06 	br	b9f0 <__divdf3+0x3f4>
    bd44:	180d883a 	mov	r6,r3
    bd48:	003f1306 	br	b998 <__divdf3+0x39c>
    bd4c:	813fe436 	bltu	r16,r4,bce0 <__divdf3+0x6e4>
    bd50:	0007883a 	mov	r3,zero
    bd54:	003f3f06 	br	ba54 <__divdf3+0x458>
    bd58:	ba402c36 	bltu	r23,r9,be0c <__divdf3+0x810>
    bd5c:	4dc05426 	beq	r9,r23,beb0 <__divdf3+0x8b4>
    bd60:	1011883a 	mov	r8,r2
    bd64:	003f8906 	br	bb8c <__divdf3+0x590>
    bd68:	023fffc4 	movi	r8,-1
    bd6c:	003f8806 	br	bb90 <__divdf3+0x594>
    bd70:	1811883a 	mov	r8,r3
    bd74:	003f5406 	br	bac8 <__divdf3+0x4cc>
    bd78:	1025883a 	mov	r18,r2
    bd7c:	003f6d06 	br	bb34 <__divdf3+0x538>
    bd80:	b827883a 	mov	r19,r23
    bd84:	003f8206 	br	bb90 <__divdf3+0x594>
    bd88:	010007c4 	movi	r4,31
    bd8c:	20c02616 	blt	r4,r3,be28 <__divdf3+0x82c>
    bd90:	00800804 	movi	r2,32
    bd94:	10c5c83a 	sub	r2,r2,r3
    bd98:	888a983a 	sll	r5,r17,r2
    bd9c:	40c8d83a 	srl	r4,r8,r3
    bda0:	4084983a 	sll	r2,r8,r2
    bda4:	88e2d83a 	srl	r17,r17,r3
    bda8:	2906b03a 	or	r3,r5,r4
    bdac:	1004c03a 	cmpne	r2,r2,zero
    bdb0:	1886b03a 	or	r3,r3,r2
    bdb4:	188001cc 	andi	r2,r3,7
    bdb8:	10000726 	beq	r2,zero,bdd8 <__divdf3+0x7dc>
    bdbc:	188003cc 	andi	r2,r3,15
    bdc0:	01000104 	movi	r4,4
    bdc4:	11000426 	beq	r2,r4,bdd8 <__divdf3+0x7dc>
    bdc8:	1805883a 	mov	r2,r3
    bdcc:	10c00104 	addi	r3,r2,4
    bdd0:	1885803a 	cmpltu	r2,r3,r2
    bdd4:	88a3883a 	add	r17,r17,r2
    bdd8:	8880202c 	andhi	r2,r17,128
    bddc:	10002726 	beq	r2,zero,be7c <__divdf3+0x880>
    bde0:	98c0004c 	andi	r3,r19,1
    bde4:	00800044 	movi	r2,1
    bde8:	000b883a 	mov	r5,zero
    bdec:	0025883a 	mov	r18,zero
    bdf0:	003e6106 	br	b778 <__divdf3+0x17c>
    bdf4:	85a1883a 	add	r16,r16,r22
    bdf8:	8585803a 	cmpltu	r2,r16,r22
    bdfc:	1705883a 	add	r2,r2,fp
    be00:	14a5883a 	add	r18,r2,r18
    be04:	8c7fff84 	addi	r17,r17,-2
    be08:	003f1106 	br	ba50 <__divdf3+0x454>
    be0c:	b589883a 	add	r4,r22,r22
    be10:	25ad803a 	cmpltu	r22,r4,r22
    be14:	b739883a 	add	fp,r22,fp
    be18:	40bfff84 	addi	r2,r8,-2
    be1c:	bf2f883a 	add	r23,r23,fp
    be20:	202d883a 	mov	r22,r4
    be24:	003f9306 	br	bc74 <__divdf3+0x678>
    be28:	013ff844 	movi	r4,-31
    be2c:	2085c83a 	sub	r2,r4,r2
    be30:	8888d83a 	srl	r4,r17,r2
    be34:	00800804 	movi	r2,32
    be38:	18802126 	beq	r3,r2,bec0 <__divdf3+0x8c4>
    be3c:	00801004 	movi	r2,64
    be40:	10c5c83a 	sub	r2,r2,r3
    be44:	8884983a 	sll	r2,r17,r2
    be48:	1204b03a 	or	r2,r2,r8
    be4c:	1004c03a 	cmpne	r2,r2,zero
    be50:	2084b03a 	or	r2,r4,r2
    be54:	144001cc 	andi	r17,r2,7
    be58:	88000d1e 	bne	r17,zero,be90 <__divdf3+0x894>
    be5c:	000b883a 	mov	r5,zero
    be60:	1024d0fa 	srli	r18,r2,3
    be64:	98c0004c 	andi	r3,r19,1
    be68:	0005883a 	mov	r2,zero
    be6c:	9464b03a 	or	r18,r18,r17
    be70:	003e4106 	br	b778 <__divdf3+0x17c>
    be74:	1007883a 	mov	r3,r2
    be78:	0023883a 	mov	r17,zero
    be7c:	880a927a 	slli	r5,r17,9
    be80:	1805883a 	mov	r2,r3
    be84:	8822977a 	slli	r17,r17,29
    be88:	280ad33a 	srli	r5,r5,12
    be8c:	003ff406 	br	be60 <__divdf3+0x864>
    be90:	10c003cc 	andi	r3,r2,15
    be94:	01000104 	movi	r4,4
    be98:	193ff626 	beq	r3,r4,be74 <__divdf3+0x878>
    be9c:	0023883a 	mov	r17,zero
    bea0:	003fca06 	br	bdcc <__divdf3+0x7d0>
    bea4:	813fd336 	bltu	r16,r4,bdf4 <__divdf3+0x7f8>
    bea8:	1023883a 	mov	r17,r2
    beac:	003fa806 	br	bd50 <__divdf3+0x754>
    beb0:	b0ffd636 	bltu	r22,r3,be0c <__divdf3+0x810>
    beb4:	1011883a 	mov	r8,r2
    beb8:	b0ff341e 	bne	r22,r3,bb8c <__divdf3+0x590>
    bebc:	003f3406 	br	bb90 <__divdf3+0x594>
    bec0:	0005883a 	mov	r2,zero
    bec4:	003fe006 	br	be48 <__divdf3+0x84c>
    bec8:	00800434 	movhi	r2,16
    becc:	89400234 	orhi	r5,r17,8
    bed0:	10bfffc4 	addi	r2,r2,-1
    bed4:	b807883a 	mov	r3,r23
    bed8:	288a703a 	and	r5,r5,r2
    bedc:	4025883a 	mov	r18,r8
    bee0:	003e8206 	br	b8ec <__divdf3+0x2f0>

0000bee4 <__eqdf2>:
    bee4:	2804d53a 	srli	r2,r5,20
    bee8:	3806d53a 	srli	r3,r7,20
    beec:	02000434 	movhi	r8,16
    bef0:	423fffc4 	addi	r8,r8,-1
    bef4:	1081ffcc 	andi	r2,r2,2047
    bef8:	0281ffc4 	movi	r10,2047
    befc:	2a12703a 	and	r9,r5,r8
    bf00:	18c1ffcc 	andi	r3,r3,2047
    bf04:	3a10703a 	and	r8,r7,r8
    bf08:	280ad7fa 	srli	r5,r5,31
    bf0c:	380ed7fa 	srli	r7,r7,31
    bf10:	12801026 	beq	r2,r10,bf54 <__eqdf2+0x70>
    bf14:	0281ffc4 	movi	r10,2047
    bf18:	1a800a26 	beq	r3,r10,bf44 <__eqdf2+0x60>
    bf1c:	10c00226 	beq	r2,r3,bf28 <__eqdf2+0x44>
    bf20:	00800044 	movi	r2,1
    bf24:	f800283a 	ret
    bf28:	4a3ffd1e 	bne	r9,r8,bf20 <__eqdf2+0x3c>
    bf2c:	21bffc1e 	bne	r4,r6,bf20 <__eqdf2+0x3c>
    bf30:	29c00c26 	beq	r5,r7,bf64 <__eqdf2+0x80>
    bf34:	103ffa1e 	bne	r2,zero,bf20 <__eqdf2+0x3c>
    bf38:	2244b03a 	or	r2,r4,r9
    bf3c:	1004c03a 	cmpne	r2,r2,zero
    bf40:	f800283a 	ret
    bf44:	3214b03a 	or	r10,r6,r8
    bf48:	503ff426 	beq	r10,zero,bf1c <__eqdf2+0x38>
    bf4c:	00800044 	movi	r2,1
    bf50:	f800283a 	ret
    bf54:	2254b03a 	or	r10,r4,r9
    bf58:	503fee26 	beq	r10,zero,bf14 <__eqdf2+0x30>
    bf5c:	00800044 	movi	r2,1
    bf60:	f800283a 	ret
    bf64:	0005883a 	mov	r2,zero
    bf68:	f800283a 	ret

0000bf6c <__gedf2>:
    bf6c:	2804d53a 	srli	r2,r5,20
    bf70:	3806d53a 	srli	r3,r7,20
    bf74:	02000434 	movhi	r8,16
    bf78:	423fffc4 	addi	r8,r8,-1
    bf7c:	1081ffcc 	andi	r2,r2,2047
    bf80:	0241ffc4 	movi	r9,2047
    bf84:	2a14703a 	and	r10,r5,r8
    bf88:	18c1ffcc 	andi	r3,r3,2047
    bf8c:	3a10703a 	and	r8,r7,r8
    bf90:	280ad7fa 	srli	r5,r5,31
    bf94:	380ed7fa 	srli	r7,r7,31
    bf98:	12401d26 	beq	r2,r9,c010 <__gedf2+0xa4>
    bf9c:	0241ffc4 	movi	r9,2047
    bfa0:	1a401226 	beq	r3,r9,bfec <__gedf2+0x80>
    bfa4:	1000081e 	bne	r2,zero,bfc8 <__gedf2+0x5c>
    bfa8:	2296b03a 	or	r11,r4,r10
    bfac:	5813003a 	cmpeq	r9,r11,zero
    bfb0:	1800091e 	bne	r3,zero,bfd8 <__gedf2+0x6c>
    bfb4:	3218b03a 	or	r12,r6,r8
    bfb8:	6000071e 	bne	r12,zero,bfd8 <__gedf2+0x6c>
    bfbc:	0005883a 	mov	r2,zero
    bfc0:	5800101e 	bne	r11,zero,c004 <__gedf2+0x98>
    bfc4:	f800283a 	ret
    bfc8:	18000c1e 	bne	r3,zero,bffc <__gedf2+0x90>
    bfcc:	3212b03a 	or	r9,r6,r8
    bfd0:	48000c26 	beq	r9,zero,c004 <__gedf2+0x98>
    bfd4:	0013883a 	mov	r9,zero
    bfd8:	39c03fcc 	andi	r7,r7,255
    bfdc:	48000826 	beq	r9,zero,c000 <__gedf2+0x94>
    bfe0:	38000926 	beq	r7,zero,c008 <__gedf2+0x9c>
    bfe4:	00800044 	movi	r2,1
    bfe8:	f800283a 	ret
    bfec:	3212b03a 	or	r9,r6,r8
    bff0:	483fec26 	beq	r9,zero,bfa4 <__gedf2+0x38>
    bff4:	00bfff84 	movi	r2,-2
    bff8:	f800283a 	ret
    bffc:	39c03fcc 	andi	r7,r7,255
    c000:	29c00626 	beq	r5,r7,c01c <__gedf2+0xb0>
    c004:	283ff726 	beq	r5,zero,bfe4 <__gedf2+0x78>
    c008:	00bfffc4 	movi	r2,-1
    c00c:	f800283a 	ret
    c010:	2292b03a 	or	r9,r4,r10
    c014:	483fe126 	beq	r9,zero,bf9c <__gedf2+0x30>
    c018:	003ff606 	br	bff4 <__gedf2+0x88>
    c01c:	18bff916 	blt	r3,r2,c004 <__gedf2+0x98>
    c020:	10c00316 	blt	r2,r3,c030 <__gedf2+0xc4>
    c024:	42bff736 	bltu	r8,r10,c004 <__gedf2+0x98>
    c028:	52000326 	beq	r10,r8,c038 <__gedf2+0xcc>
    c02c:	5200042e 	bgeu	r10,r8,c040 <__gedf2+0xd4>
    c030:	283fec1e 	bne	r5,zero,bfe4 <__gedf2+0x78>
    c034:	003ff406 	br	c008 <__gedf2+0x9c>
    c038:	313ff236 	bltu	r6,r4,c004 <__gedf2+0x98>
    c03c:	21bffc36 	bltu	r4,r6,c030 <__gedf2+0xc4>
    c040:	0005883a 	mov	r2,zero
    c044:	f800283a 	ret

0000c048 <__ledf2>:
    c048:	2804d53a 	srli	r2,r5,20
    c04c:	3810d53a 	srli	r8,r7,20
    c050:	00c00434 	movhi	r3,16
    c054:	18ffffc4 	addi	r3,r3,-1
    c058:	1081ffcc 	andi	r2,r2,2047
    c05c:	0241ffc4 	movi	r9,2047
    c060:	28d4703a 	and	r10,r5,r3
    c064:	4201ffcc 	andi	r8,r8,2047
    c068:	38c6703a 	and	r3,r7,r3
    c06c:	280ad7fa 	srli	r5,r5,31
    c070:	380ed7fa 	srli	r7,r7,31
    c074:	12401f26 	beq	r2,r9,c0f4 <__ledf2+0xac>
    c078:	0241ffc4 	movi	r9,2047
    c07c:	42401426 	beq	r8,r9,c0d0 <__ledf2+0x88>
    c080:	1000091e 	bne	r2,zero,c0a8 <__ledf2+0x60>
    c084:	2296b03a 	or	r11,r4,r10
    c088:	5813003a 	cmpeq	r9,r11,zero
    c08c:	29403fcc 	andi	r5,r5,255
    c090:	40000a1e 	bne	r8,zero,c0bc <__ledf2+0x74>
    c094:	30d8b03a 	or	r12,r6,r3
    c098:	6000081e 	bne	r12,zero,c0bc <__ledf2+0x74>
    c09c:	0005883a 	mov	r2,zero
    c0a0:	5800111e 	bne	r11,zero,c0e8 <__ledf2+0xa0>
    c0a4:	f800283a 	ret
    c0a8:	29403fcc 	andi	r5,r5,255
    c0ac:	40000c1e 	bne	r8,zero,c0e0 <__ledf2+0x98>
    c0b0:	30d2b03a 	or	r9,r6,r3
    c0b4:	48000c26 	beq	r9,zero,c0e8 <__ledf2+0xa0>
    c0b8:	0013883a 	mov	r9,zero
    c0bc:	39c03fcc 	andi	r7,r7,255
    c0c0:	48000826 	beq	r9,zero,c0e4 <__ledf2+0x9c>
    c0c4:	38001126 	beq	r7,zero,c10c <__ledf2+0xc4>
    c0c8:	00800044 	movi	r2,1
    c0cc:	f800283a 	ret
    c0d0:	30d2b03a 	or	r9,r6,r3
    c0d4:	483fea26 	beq	r9,zero,c080 <__ledf2+0x38>
    c0d8:	00800084 	movi	r2,2
    c0dc:	f800283a 	ret
    c0e0:	39c03fcc 	andi	r7,r7,255
    c0e4:	39400726 	beq	r7,r5,c104 <__ledf2+0xbc>
    c0e8:	2800081e 	bne	r5,zero,c10c <__ledf2+0xc4>
    c0ec:	00800044 	movi	r2,1
    c0f0:	f800283a 	ret
    c0f4:	2292b03a 	or	r9,r4,r10
    c0f8:	483fdf26 	beq	r9,zero,c078 <__ledf2+0x30>
    c0fc:	00800084 	movi	r2,2
    c100:	f800283a 	ret
    c104:	4080030e 	bge	r8,r2,c114 <__ledf2+0xcc>
    c108:	383fef26 	beq	r7,zero,c0c8 <__ledf2+0x80>
    c10c:	00bfffc4 	movi	r2,-1
    c110:	f800283a 	ret
    c114:	123feb16 	blt	r2,r8,c0c4 <__ledf2+0x7c>
    c118:	1abff336 	bltu	r3,r10,c0e8 <__ledf2+0xa0>
    c11c:	50c00326 	beq	r10,r3,c12c <__ledf2+0xe4>
    c120:	50c0042e 	bgeu	r10,r3,c134 <__ledf2+0xec>
    c124:	283fe81e 	bne	r5,zero,c0c8 <__ledf2+0x80>
    c128:	003ff806 	br	c10c <__ledf2+0xc4>
    c12c:	313fee36 	bltu	r6,r4,c0e8 <__ledf2+0xa0>
    c130:	21bffc36 	bltu	r4,r6,c124 <__ledf2+0xdc>
    c134:	0005883a 	mov	r2,zero
    c138:	f800283a 	ret

0000c13c <__muldf3>:
    c13c:	defff304 	addi	sp,sp,-52
    c140:	2804d53a 	srli	r2,r5,20
    c144:	dd800915 	stw	r22,36(sp)
    c148:	282cd7fa 	srli	r22,r5,31
    c14c:	dc000315 	stw	r16,12(sp)
    c150:	04000434 	movhi	r16,16
    c154:	dd400815 	stw	r21,32(sp)
    c158:	dc800515 	stw	r18,20(sp)
    c15c:	843fffc4 	addi	r16,r16,-1
    c160:	dfc00c15 	stw	ra,48(sp)
    c164:	df000b15 	stw	fp,44(sp)
    c168:	ddc00a15 	stw	r23,40(sp)
    c16c:	dd000715 	stw	r20,28(sp)
    c170:	dcc00615 	stw	r19,24(sp)
    c174:	dc400415 	stw	r17,16(sp)
    c178:	1481ffcc 	andi	r18,r2,2047
    c17c:	2c20703a 	and	r16,r5,r16
    c180:	b02b883a 	mov	r21,r22
    c184:	b2403fcc 	andi	r9,r22,255
    c188:	90006026 	beq	r18,zero,c30c <__muldf3+0x1d0>
    c18c:	0081ffc4 	movi	r2,2047
    c190:	2029883a 	mov	r20,r4
    c194:	90803626 	beq	r18,r2,c270 <__muldf3+0x134>
    c198:	80800434 	orhi	r2,r16,16
    c19c:	100490fa 	slli	r2,r2,3
    c1a0:	2020d77a 	srli	r16,r4,29
    c1a4:	202890fa 	slli	r20,r4,3
    c1a8:	94bf0044 	addi	r18,r18,-1023
    c1ac:	80a0b03a 	or	r16,r16,r2
    c1b0:	0027883a 	mov	r19,zero
    c1b4:	0039883a 	mov	fp,zero
    c1b8:	3804d53a 	srli	r2,r7,20
    c1bc:	382ed7fa 	srli	r23,r7,31
    c1c0:	04400434 	movhi	r17,16
    c1c4:	8c7fffc4 	addi	r17,r17,-1
    c1c8:	1081ffcc 	andi	r2,r2,2047
    c1cc:	3011883a 	mov	r8,r6
    c1d0:	3c62703a 	and	r17,r7,r17
    c1d4:	ba803fcc 	andi	r10,r23,255
    c1d8:	10006d26 	beq	r2,zero,c390 <__muldf3+0x254>
    c1dc:	00c1ffc4 	movi	r3,2047
    c1e0:	10c06526 	beq	r2,r3,c378 <__muldf3+0x23c>
    c1e4:	88c00434 	orhi	r3,r17,16
    c1e8:	180690fa 	slli	r3,r3,3
    c1ec:	3022d77a 	srli	r17,r6,29
    c1f0:	301090fa 	slli	r8,r6,3
    c1f4:	10bf0044 	addi	r2,r2,-1023
    c1f8:	88e2b03a 	or	r17,r17,r3
    c1fc:	000b883a 	mov	r5,zero
    c200:	9085883a 	add	r2,r18,r2
    c204:	2cc8b03a 	or	r4,r5,r19
    c208:	00c003c4 	movi	r3,15
    c20c:	bdacf03a 	xor	r22,r23,r22
    c210:	12c00044 	addi	r11,r2,1
    c214:	19009936 	bltu	r3,r4,c47c <__muldf3+0x340>
    c218:	200890ba 	slli	r4,r4,2
    c21c:	00c00074 	movhi	r3,1
    c220:	18f08c04 	addi	r3,r3,-15824
    c224:	20c9883a 	add	r4,r4,r3
    c228:	20c00017 	ldw	r3,0(r4)
    c22c:	1800683a 	jmp	r3
    c230:	0000c47c 	xorhi	zero,zero,785
    c234:	0000c290 	cmplti	zero,zero,778
    c238:	0000c290 	cmplti	zero,zero,778
    c23c:	0000c28c 	andi	zero,zero,778
    c240:	0000c458 	cmpnei	zero,zero,785
    c244:	0000c458 	cmpnei	zero,zero,785
    c248:	0000c440 	call	c44 <free+0xc>
    c24c:	0000c28c 	andi	zero,zero,778
    c250:	0000c458 	cmpnei	zero,zero,785
    c254:	0000c440 	call	c44 <free+0xc>
    c258:	0000c458 	cmpnei	zero,zero,785
    c25c:	0000c28c 	andi	zero,zero,778
    c260:	0000c468 	cmpgeui	zero,zero,785
    c264:	0000c468 	cmpgeui	zero,zero,785
    c268:	0000c468 	cmpgeui	zero,zero,785
    c26c:	0000c684 	movi	zero,794
    c270:	2404b03a 	or	r2,r4,r16
    c274:	10006f1e 	bne	r2,zero,c434 <__muldf3+0x2f8>
    c278:	04c00204 	movi	r19,8
    c27c:	0021883a 	mov	r16,zero
    c280:	0029883a 	mov	r20,zero
    c284:	07000084 	movi	fp,2
    c288:	003fcb06 	br	c1b8 <__muldf3+0x7c>
    c28c:	502d883a 	mov	r22,r10
    c290:	00800084 	movi	r2,2
    c294:	28805726 	beq	r5,r2,c3f4 <__muldf3+0x2b8>
    c298:	008000c4 	movi	r2,3
    c29c:	28816626 	beq	r5,r2,c838 <__muldf3+0x6fc>
    c2a0:	00800044 	movi	r2,1
    c2a4:	2881411e 	bne	r5,r2,c7ac <__muldf3+0x670>
    c2a8:	b02b883a 	mov	r21,r22
    c2ac:	0005883a 	mov	r2,zero
    c2b0:	000b883a 	mov	r5,zero
    c2b4:	0029883a 	mov	r20,zero
    c2b8:	1004953a 	slli	r2,r2,20
    c2bc:	a8c03fcc 	andi	r3,r21,255
    c2c0:	04400434 	movhi	r17,16
    c2c4:	8c7fffc4 	addi	r17,r17,-1
    c2c8:	180697fa 	slli	r3,r3,31
    c2cc:	2c4a703a 	and	r5,r5,r17
    c2d0:	288ab03a 	or	r5,r5,r2
    c2d4:	28c6b03a 	or	r3,r5,r3
    c2d8:	a005883a 	mov	r2,r20
    c2dc:	dfc00c17 	ldw	ra,48(sp)
    c2e0:	df000b17 	ldw	fp,44(sp)
    c2e4:	ddc00a17 	ldw	r23,40(sp)
    c2e8:	dd800917 	ldw	r22,36(sp)
    c2ec:	dd400817 	ldw	r21,32(sp)
    c2f0:	dd000717 	ldw	r20,28(sp)
    c2f4:	dcc00617 	ldw	r19,24(sp)
    c2f8:	dc800517 	ldw	r18,20(sp)
    c2fc:	dc400417 	ldw	r17,16(sp)
    c300:	dc000317 	ldw	r16,12(sp)
    c304:	dec00d04 	addi	sp,sp,52
    c308:	f800283a 	ret
    c30c:	2404b03a 	or	r2,r4,r16
    c310:	2027883a 	mov	r19,r4
    c314:	10004226 	beq	r2,zero,c420 <__muldf3+0x2e4>
    c318:	8000fc26 	beq	r16,zero,c70c <__muldf3+0x5d0>
    c31c:	8009883a 	mov	r4,r16
    c320:	d9800215 	stw	r6,8(sp)
    c324:	d9c00015 	stw	r7,0(sp)
    c328:	da400115 	stw	r9,4(sp)
    c32c:	000d3540 	call	d354 <__clzsi2>
    c330:	d9800217 	ldw	r6,8(sp)
    c334:	d9c00017 	ldw	r7,0(sp)
    c338:	da400117 	ldw	r9,4(sp)
    c33c:	113ffd44 	addi	r4,r2,-11
    c340:	00c00704 	movi	r3,28
    c344:	1900ed16 	blt	r3,r4,c6fc <__muldf3+0x5c0>
    c348:	00c00744 	movi	r3,29
    c34c:	147ffe04 	addi	r17,r2,-8
    c350:	1907c83a 	sub	r3,r3,r4
    c354:	8460983a 	sll	r16,r16,r17
    c358:	98c6d83a 	srl	r3,r19,r3
    c35c:	9c68983a 	sll	r20,r19,r17
    c360:	1c20b03a 	or	r16,r3,r16
    c364:	1080fcc4 	addi	r2,r2,1011
    c368:	00a5c83a 	sub	r18,zero,r2
    c36c:	0027883a 	mov	r19,zero
    c370:	0039883a 	mov	fp,zero
    c374:	003f9006 	br	c1b8 <__muldf3+0x7c>
    c378:	3446b03a 	or	r3,r6,r17
    c37c:	1800261e 	bne	r3,zero,c418 <__muldf3+0x2dc>
    c380:	0023883a 	mov	r17,zero
    c384:	0011883a 	mov	r8,zero
    c388:	01400084 	movi	r5,2
    c38c:	003f9c06 	br	c200 <__muldf3+0xc4>
    c390:	3446b03a 	or	r3,r6,r17
    c394:	18001c26 	beq	r3,zero,c408 <__muldf3+0x2cc>
    c398:	8800ce26 	beq	r17,zero,c6d4 <__muldf3+0x598>
    c39c:	8809883a 	mov	r4,r17
    c3a0:	d9800215 	stw	r6,8(sp)
    c3a4:	da400115 	stw	r9,4(sp)
    c3a8:	da800015 	stw	r10,0(sp)
    c3ac:	000d3540 	call	d354 <__clzsi2>
    c3b0:	d9800217 	ldw	r6,8(sp)
    c3b4:	da400117 	ldw	r9,4(sp)
    c3b8:	da800017 	ldw	r10,0(sp)
    c3bc:	113ffd44 	addi	r4,r2,-11
    c3c0:	00c00704 	movi	r3,28
    c3c4:	1900bf16 	blt	r3,r4,c6c4 <__muldf3+0x588>
    c3c8:	00c00744 	movi	r3,29
    c3cc:	123ffe04 	addi	r8,r2,-8
    c3d0:	1907c83a 	sub	r3,r3,r4
    c3d4:	8a22983a 	sll	r17,r17,r8
    c3d8:	30c6d83a 	srl	r3,r6,r3
    c3dc:	3210983a 	sll	r8,r6,r8
    c3e0:	1c62b03a 	or	r17,r3,r17
    c3e4:	1080fcc4 	addi	r2,r2,1011
    c3e8:	0085c83a 	sub	r2,zero,r2
    c3ec:	000b883a 	mov	r5,zero
    c3f0:	003f8306 	br	c200 <__muldf3+0xc4>
    c3f4:	b02b883a 	mov	r21,r22
    c3f8:	0081ffc4 	movi	r2,2047
    c3fc:	000b883a 	mov	r5,zero
    c400:	0029883a 	mov	r20,zero
    c404:	003fac06 	br	c2b8 <__muldf3+0x17c>
    c408:	0023883a 	mov	r17,zero
    c40c:	0011883a 	mov	r8,zero
    c410:	01400044 	movi	r5,1
    c414:	003f7a06 	br	c200 <__muldf3+0xc4>
    c418:	014000c4 	movi	r5,3
    c41c:	003f7806 	br	c200 <__muldf3+0xc4>
    c420:	04c00104 	movi	r19,4
    c424:	0021883a 	mov	r16,zero
    c428:	0029883a 	mov	r20,zero
    c42c:	07000044 	movi	fp,1
    c430:	003f6106 	br	c1b8 <__muldf3+0x7c>
    c434:	04c00304 	movi	r19,12
    c438:	070000c4 	movi	fp,3
    c43c:	003f5e06 	br	c1b8 <__muldf3+0x7c>
    c440:	01400434 	movhi	r5,16
    c444:	002b883a 	mov	r21,zero
    c448:	297fffc4 	addi	r5,r5,-1
    c44c:	053fffc4 	movi	r20,-1
    c450:	0081ffc4 	movi	r2,2047
    c454:	003f9806 	br	c2b8 <__muldf3+0x17c>
    c458:	8023883a 	mov	r17,r16
    c45c:	a011883a 	mov	r8,r20
    c460:	e00b883a 	mov	r5,fp
    c464:	003f8a06 	br	c290 <__muldf3+0x154>
    c468:	8023883a 	mov	r17,r16
    c46c:	a011883a 	mov	r8,r20
    c470:	482d883a 	mov	r22,r9
    c474:	e00b883a 	mov	r5,fp
    c478:	003f8506 	br	c290 <__muldf3+0x154>
    c47c:	a00ad43a 	srli	r5,r20,16
    c480:	401ad43a 	srli	r13,r8,16
    c484:	a53fffcc 	andi	r20,r20,65535
    c488:	423fffcc 	andi	r8,r8,65535
    c48c:	4519383a 	mul	r12,r8,r20
    c490:	4147383a 	mul	r3,r8,r5
    c494:	6d09383a 	mul	r4,r13,r20
    c498:	600cd43a 	srli	r6,r12,16
    c49c:	2b5d383a 	mul	r14,r5,r13
    c4a0:	20c9883a 	add	r4,r4,r3
    c4a4:	310d883a 	add	r6,r6,r4
    c4a8:	30c0022e 	bgeu	r6,r3,c4b4 <__muldf3+0x378>
    c4ac:	00c00074 	movhi	r3,1
    c4b0:	70dd883a 	add	r14,r14,r3
    c4b4:	8826d43a 	srli	r19,r17,16
    c4b8:	8bffffcc 	andi	r15,r17,65535
    c4bc:	7d23383a 	mul	r17,r15,r20
    c4c0:	7949383a 	mul	r4,r15,r5
    c4c4:	9d29383a 	mul	r20,r19,r20
    c4c8:	8814d43a 	srli	r10,r17,16
    c4cc:	3012943a 	slli	r9,r6,16
    c4d0:	a129883a 	add	r20,r20,r4
    c4d4:	633fffcc 	andi	r12,r12,65535
    c4d8:	5515883a 	add	r10,r10,r20
    c4dc:	3006d43a 	srli	r3,r6,16
    c4e0:	4b13883a 	add	r9,r9,r12
    c4e4:	2ccb383a 	mul	r5,r5,r19
    c4e8:	5100022e 	bgeu	r10,r4,c4f4 <__muldf3+0x3b8>
    c4ec:	01000074 	movhi	r4,1
    c4f0:	290b883a 	add	r5,r5,r4
    c4f4:	802ad43a 	srli	r21,r16,16
    c4f8:	843fffcc 	andi	r16,r16,65535
    c4fc:	440d383a 	mul	r6,r8,r16
    c500:	4565383a 	mul	r18,r8,r21
    c504:	8349383a 	mul	r4,r16,r13
    c508:	500e943a 	slli	r7,r10,16
    c50c:	3010d43a 	srli	r8,r6,16
    c510:	5028d43a 	srli	r20,r10,16
    c514:	2489883a 	add	r4,r4,r18
    c518:	8abfffcc 	andi	r10,r17,65535
    c51c:	3a95883a 	add	r10,r7,r10
    c520:	4119883a 	add	r12,r8,r4
    c524:	a169883a 	add	r20,r20,r5
    c528:	1a87883a 	add	r3,r3,r10
    c52c:	6d5b383a 	mul	r13,r13,r21
    c530:	6480022e 	bgeu	r12,r18,c53c <__muldf3+0x400>
    c534:	01000074 	movhi	r4,1
    c538:	691b883a 	add	r13,r13,r4
    c53c:	7c25383a 	mul	r18,r15,r16
    c540:	7d4b383a 	mul	r5,r15,r21
    c544:	84cf383a 	mul	r7,r16,r19
    c548:	901ed43a 	srli	r15,r18,16
    c54c:	6008d43a 	srli	r4,r12,16
    c550:	6010943a 	slli	r8,r12,16
    c554:	394f883a 	add	r7,r7,r5
    c558:	333fffcc 	andi	r12,r6,65535
    c55c:	79df883a 	add	r15,r15,r7
    c560:	235b883a 	add	r13,r4,r13
    c564:	9d63383a 	mul	r17,r19,r21
    c568:	4309883a 	add	r4,r8,r12
    c56c:	7940022e 	bgeu	r15,r5,c578 <__muldf3+0x43c>
    c570:	01400074 	movhi	r5,1
    c574:	8963883a 	add	r17,r17,r5
    c578:	780a943a 	slli	r5,r15,16
    c57c:	91bfffcc 	andi	r6,r18,65535
    c580:	70c7883a 	add	r3,r14,r3
    c584:	298d883a 	add	r6,r5,r6
    c588:	1a8f803a 	cmpltu	r7,r3,r10
    c58c:	350b883a 	add	r5,r6,r20
    c590:	20c7883a 	add	r3,r4,r3
    c594:	3955883a 	add	r10,r7,r5
    c598:	1909803a 	cmpltu	r4,r3,r4
    c59c:	6a91883a 	add	r8,r13,r10
    c5a0:	780cd43a 	srli	r6,r15,16
    c5a4:	2219883a 	add	r12,r4,r8
    c5a8:	2d0b803a 	cmpltu	r5,r5,r20
    c5ac:	51cf803a 	cmpltu	r7,r10,r7
    c5b0:	29ceb03a 	or	r7,r5,r7
    c5b4:	4351803a 	cmpltu	r8,r8,r13
    c5b8:	610b803a 	cmpltu	r5,r12,r4
    c5bc:	4148b03a 	or	r4,r8,r5
    c5c0:	398f883a 	add	r7,r7,r6
    c5c4:	3909883a 	add	r4,r7,r4
    c5c8:	1810927a 	slli	r8,r3,9
    c5cc:	2449883a 	add	r4,r4,r17
    c5d0:	2008927a 	slli	r4,r4,9
    c5d4:	6022d5fa 	srli	r17,r12,23
    c5d8:	1806d5fa 	srli	r3,r3,23
    c5dc:	4252b03a 	or	r9,r8,r9
    c5e0:	600a927a 	slli	r5,r12,9
    c5e4:	4810c03a 	cmpne	r8,r9,zero
    c5e8:	2462b03a 	or	r17,r4,r17
    c5ec:	40c6b03a 	or	r3,r8,r3
    c5f0:	8900402c 	andhi	r4,r17,256
    c5f4:	1950b03a 	or	r8,r3,r5
    c5f8:	20000726 	beq	r4,zero,c618 <__muldf3+0x4dc>
    c5fc:	4006d07a 	srli	r3,r8,1
    c600:	880497fa 	slli	r2,r17,31
    c604:	4200004c 	andi	r8,r8,1
    c608:	8822d07a 	srli	r17,r17,1
    c60c:	1a10b03a 	or	r8,r3,r8
    c610:	1210b03a 	or	r8,r2,r8
    c614:	5805883a 	mov	r2,r11
    c618:	1140ffc4 	addi	r5,r2,1023
    c61c:	0140440e 	bge	zero,r5,c730 <__muldf3+0x5f4>
    c620:	40c001cc 	andi	r3,r8,7
    c624:	18000726 	beq	r3,zero,c644 <__muldf3+0x508>
    c628:	40c003cc 	andi	r3,r8,15
    c62c:	01000104 	movi	r4,4
    c630:	19000426 	beq	r3,r4,c644 <__muldf3+0x508>
    c634:	4107883a 	add	r3,r8,r4
    c638:	1a11803a 	cmpltu	r8,r3,r8
    c63c:	8a23883a 	add	r17,r17,r8
    c640:	1811883a 	mov	r8,r3
    c644:	88c0402c 	andhi	r3,r17,256
    c648:	18000426 	beq	r3,zero,c65c <__muldf3+0x520>
    c64c:	11410004 	addi	r5,r2,1024
    c650:	00bfc034 	movhi	r2,65280
    c654:	10bfffc4 	addi	r2,r2,-1
    c658:	88a2703a 	and	r17,r17,r2
    c65c:	0081ff84 	movi	r2,2046
    c660:	117f6416 	blt	r2,r5,c3f4 <__muldf3+0x2b8>
    c664:	8828977a 	slli	r20,r17,29
    c668:	4010d0fa 	srli	r8,r8,3
    c66c:	8822927a 	slli	r17,r17,9
    c670:	2881ffcc 	andi	r2,r5,2047
    c674:	a228b03a 	or	r20,r20,r8
    c678:	880ad33a 	srli	r5,r17,12
    c67c:	b02b883a 	mov	r21,r22
    c680:	003f0d06 	br	c2b8 <__muldf3+0x17c>
    c684:	8080022c 	andhi	r2,r16,8
    c688:	10000926 	beq	r2,zero,c6b0 <__muldf3+0x574>
    c68c:	8880022c 	andhi	r2,r17,8
    c690:	1000071e 	bne	r2,zero,c6b0 <__muldf3+0x574>
    c694:	00800434 	movhi	r2,16
    c698:	89400234 	orhi	r5,r17,8
    c69c:	10bfffc4 	addi	r2,r2,-1
    c6a0:	b82b883a 	mov	r21,r23
    c6a4:	288a703a 	and	r5,r5,r2
    c6a8:	4029883a 	mov	r20,r8
    c6ac:	003f6806 	br	c450 <__muldf3+0x314>
    c6b0:	00800434 	movhi	r2,16
    c6b4:	81400234 	orhi	r5,r16,8
    c6b8:	10bfffc4 	addi	r2,r2,-1
    c6bc:	288a703a 	and	r5,r5,r2
    c6c0:	003f6306 	br	c450 <__muldf3+0x314>
    c6c4:	147ff604 	addi	r17,r2,-40
    c6c8:	3462983a 	sll	r17,r6,r17
    c6cc:	0011883a 	mov	r8,zero
    c6d0:	003f4406 	br	c3e4 <__muldf3+0x2a8>
    c6d4:	3009883a 	mov	r4,r6
    c6d8:	d9800215 	stw	r6,8(sp)
    c6dc:	da400115 	stw	r9,4(sp)
    c6e0:	da800015 	stw	r10,0(sp)
    c6e4:	000d3540 	call	d354 <__clzsi2>
    c6e8:	10800804 	addi	r2,r2,32
    c6ec:	da800017 	ldw	r10,0(sp)
    c6f0:	da400117 	ldw	r9,4(sp)
    c6f4:	d9800217 	ldw	r6,8(sp)
    c6f8:	003f3006 	br	c3bc <__muldf3+0x280>
    c6fc:	143ff604 	addi	r16,r2,-40
    c700:	9c20983a 	sll	r16,r19,r16
    c704:	0029883a 	mov	r20,zero
    c708:	003f1606 	br	c364 <__muldf3+0x228>
    c70c:	d9800215 	stw	r6,8(sp)
    c710:	d9c00015 	stw	r7,0(sp)
    c714:	da400115 	stw	r9,4(sp)
    c718:	000d3540 	call	d354 <__clzsi2>
    c71c:	10800804 	addi	r2,r2,32
    c720:	da400117 	ldw	r9,4(sp)
    c724:	d9c00017 	ldw	r7,0(sp)
    c728:	d9800217 	ldw	r6,8(sp)
    c72c:	003f0306 	br	c33c <__muldf3+0x200>
    c730:	00c00044 	movi	r3,1
    c734:	1947c83a 	sub	r3,r3,r5
    c738:	00800e04 	movi	r2,56
    c73c:	10feda16 	blt	r2,r3,c2a8 <__muldf3+0x16c>
    c740:	008007c4 	movi	r2,31
    c744:	10c01b16 	blt	r2,r3,c7b4 <__muldf3+0x678>
    c748:	00800804 	movi	r2,32
    c74c:	10c5c83a 	sub	r2,r2,r3
    c750:	888a983a 	sll	r5,r17,r2
    c754:	40c8d83a 	srl	r4,r8,r3
    c758:	4084983a 	sll	r2,r8,r2
    c75c:	88e2d83a 	srl	r17,r17,r3
    c760:	2906b03a 	or	r3,r5,r4
    c764:	1004c03a 	cmpne	r2,r2,zero
    c768:	1886b03a 	or	r3,r3,r2
    c76c:	188001cc 	andi	r2,r3,7
    c770:	10000726 	beq	r2,zero,c790 <__muldf3+0x654>
    c774:	188003cc 	andi	r2,r3,15
    c778:	01000104 	movi	r4,4
    c77c:	11000426 	beq	r2,r4,c790 <__muldf3+0x654>
    c780:	1805883a 	mov	r2,r3
    c784:	10c00104 	addi	r3,r2,4
    c788:	1885803a 	cmpltu	r2,r3,r2
    c78c:	88a3883a 	add	r17,r17,r2
    c790:	8880202c 	andhi	r2,r17,128
    c794:	10001c26 	beq	r2,zero,c808 <__muldf3+0x6cc>
    c798:	b02b883a 	mov	r21,r22
    c79c:	00800044 	movi	r2,1
    c7a0:	000b883a 	mov	r5,zero
    c7a4:	0029883a 	mov	r20,zero
    c7a8:	003ec306 	br	c2b8 <__muldf3+0x17c>
    c7ac:	5805883a 	mov	r2,r11
    c7b0:	003f9906 	br	c618 <__muldf3+0x4dc>
    c7b4:	00bff844 	movi	r2,-31
    c7b8:	1145c83a 	sub	r2,r2,r5
    c7bc:	8888d83a 	srl	r4,r17,r2
    c7c0:	00800804 	movi	r2,32
    c7c4:	18801a26 	beq	r3,r2,c830 <__muldf3+0x6f4>
    c7c8:	00801004 	movi	r2,64
    c7cc:	10c5c83a 	sub	r2,r2,r3
    c7d0:	8884983a 	sll	r2,r17,r2
    c7d4:	1204b03a 	or	r2,r2,r8
    c7d8:	1004c03a 	cmpne	r2,r2,zero
    c7dc:	2084b03a 	or	r2,r4,r2
    c7e0:	144001cc 	andi	r17,r2,7
    c7e4:	88000d1e 	bne	r17,zero,c81c <__muldf3+0x6e0>
    c7e8:	000b883a 	mov	r5,zero
    c7ec:	1028d0fa 	srli	r20,r2,3
    c7f0:	b02b883a 	mov	r21,r22
    c7f4:	0005883a 	mov	r2,zero
    c7f8:	a468b03a 	or	r20,r20,r17
    c7fc:	003eae06 	br	c2b8 <__muldf3+0x17c>
    c800:	1007883a 	mov	r3,r2
    c804:	0023883a 	mov	r17,zero
    c808:	880a927a 	slli	r5,r17,9
    c80c:	1805883a 	mov	r2,r3
    c810:	8822977a 	slli	r17,r17,29
    c814:	280ad33a 	srli	r5,r5,12
    c818:	003ff406 	br	c7ec <__muldf3+0x6b0>
    c81c:	10c003cc 	andi	r3,r2,15
    c820:	01000104 	movi	r4,4
    c824:	193ff626 	beq	r3,r4,c800 <__muldf3+0x6c4>
    c828:	0023883a 	mov	r17,zero
    c82c:	003fd506 	br	c784 <__muldf3+0x648>
    c830:	0005883a 	mov	r2,zero
    c834:	003fe706 	br	c7d4 <__muldf3+0x698>
    c838:	00800434 	movhi	r2,16
    c83c:	89400234 	orhi	r5,r17,8
    c840:	10bfffc4 	addi	r2,r2,-1
    c844:	b02b883a 	mov	r21,r22
    c848:	288a703a 	and	r5,r5,r2
    c84c:	4029883a 	mov	r20,r8
    c850:	003eff06 	br	c450 <__muldf3+0x314>

0000c854 <__subdf3>:
    c854:	02000434 	movhi	r8,16
    c858:	423fffc4 	addi	r8,r8,-1
    c85c:	defffb04 	addi	sp,sp,-20
    c860:	2a14703a 	and	r10,r5,r8
    c864:	3812d53a 	srli	r9,r7,20
    c868:	3a10703a 	and	r8,r7,r8
    c86c:	2006d77a 	srli	r3,r4,29
    c870:	3004d77a 	srli	r2,r6,29
    c874:	dc000015 	stw	r16,0(sp)
    c878:	501490fa 	slli	r10,r10,3
    c87c:	2820d53a 	srli	r16,r5,20
    c880:	401090fa 	slli	r8,r8,3
    c884:	dc800215 	stw	r18,8(sp)
    c888:	dc400115 	stw	r17,4(sp)
    c88c:	dfc00415 	stw	ra,16(sp)
    c890:	202290fa 	slli	r17,r4,3
    c894:	dcc00315 	stw	r19,12(sp)
    c898:	4a41ffcc 	andi	r9,r9,2047
    c89c:	0101ffc4 	movi	r4,2047
    c8a0:	2824d7fa 	srli	r18,r5,31
    c8a4:	8401ffcc 	andi	r16,r16,2047
    c8a8:	50c6b03a 	or	r3,r10,r3
    c8ac:	380ed7fa 	srli	r7,r7,31
    c8b0:	408ab03a 	or	r5,r8,r2
    c8b4:	300c90fa 	slli	r6,r6,3
    c8b8:	49009626 	beq	r9,r4,cb14 <__subdf3+0x2c0>
    c8bc:	39c0005c 	xori	r7,r7,1
    c8c0:	8245c83a 	sub	r2,r16,r9
    c8c4:	3c807426 	beq	r7,r18,ca98 <__subdf3+0x244>
    c8c8:	0080af0e 	bge	zero,r2,cb88 <__subdf3+0x334>
    c8cc:	48002a1e 	bne	r9,zero,c978 <__subdf3+0x124>
    c8d0:	2988b03a 	or	r4,r5,r6
    c8d4:	20009a1e 	bne	r4,zero,cb40 <__subdf3+0x2ec>
    c8d8:	888001cc 	andi	r2,r17,7
    c8dc:	10000726 	beq	r2,zero,c8fc <__subdf3+0xa8>
    c8e0:	888003cc 	andi	r2,r17,15
    c8e4:	01000104 	movi	r4,4
    c8e8:	11000426 	beq	r2,r4,c8fc <__subdf3+0xa8>
    c8ec:	890b883a 	add	r5,r17,r4
    c8f0:	2c63803a 	cmpltu	r17,r5,r17
    c8f4:	1c47883a 	add	r3,r3,r17
    c8f8:	2823883a 	mov	r17,r5
    c8fc:	1880202c 	andhi	r2,r3,128
    c900:	10005926 	beq	r2,zero,ca68 <__subdf3+0x214>
    c904:	84000044 	addi	r16,r16,1
    c908:	0081ffc4 	movi	r2,2047
    c90c:	8080be26 	beq	r16,r2,cc08 <__subdf3+0x3b4>
    c910:	017fe034 	movhi	r5,65408
    c914:	297fffc4 	addi	r5,r5,-1
    c918:	1946703a 	and	r3,r3,r5
    c91c:	1804977a 	slli	r2,r3,29
    c920:	1806927a 	slli	r3,r3,9
    c924:	8822d0fa 	srli	r17,r17,3
    c928:	8401ffcc 	andi	r16,r16,2047
    c92c:	180ad33a 	srli	r5,r3,12
    c930:	9100004c 	andi	r4,r18,1
    c934:	1444b03a 	or	r2,r2,r17
    c938:	80c1ffcc 	andi	r3,r16,2047
    c93c:	1820953a 	slli	r16,r3,20
    c940:	20c03fcc 	andi	r3,r4,255
    c944:	180897fa 	slli	r4,r3,31
    c948:	00c00434 	movhi	r3,16
    c94c:	18ffffc4 	addi	r3,r3,-1
    c950:	28c6703a 	and	r3,r5,r3
    c954:	1c06b03a 	or	r3,r3,r16
    c958:	1906b03a 	or	r3,r3,r4
    c95c:	dfc00417 	ldw	ra,16(sp)
    c960:	dcc00317 	ldw	r19,12(sp)
    c964:	dc800217 	ldw	r18,8(sp)
    c968:	dc400117 	ldw	r17,4(sp)
    c96c:	dc000017 	ldw	r16,0(sp)
    c970:	dec00504 	addi	sp,sp,20
    c974:	f800283a 	ret
    c978:	0101ffc4 	movi	r4,2047
    c97c:	813fd626 	beq	r16,r4,c8d8 <__subdf3+0x84>
    c980:	29402034 	orhi	r5,r5,128
    c984:	01000e04 	movi	r4,56
    c988:	2080a316 	blt	r4,r2,cc18 <__subdf3+0x3c4>
    c98c:	010007c4 	movi	r4,31
    c990:	2080c616 	blt	r4,r2,ccac <__subdf3+0x458>
    c994:	01000804 	movi	r4,32
    c998:	2089c83a 	sub	r4,r4,r2
    c99c:	2910983a 	sll	r8,r5,r4
    c9a0:	308ed83a 	srl	r7,r6,r2
    c9a4:	3108983a 	sll	r4,r6,r4
    c9a8:	2884d83a 	srl	r2,r5,r2
    c9ac:	41ccb03a 	or	r6,r8,r7
    c9b0:	2008c03a 	cmpne	r4,r4,zero
    c9b4:	310cb03a 	or	r6,r6,r4
    c9b8:	898dc83a 	sub	r6,r17,r6
    c9bc:	89a3803a 	cmpltu	r17,r17,r6
    c9c0:	1887c83a 	sub	r3,r3,r2
    c9c4:	1c47c83a 	sub	r3,r3,r17
    c9c8:	3023883a 	mov	r17,r6
    c9cc:	1880202c 	andhi	r2,r3,128
    c9d0:	10002326 	beq	r2,zero,ca60 <__subdf3+0x20c>
    c9d4:	04c02034 	movhi	r19,128
    c9d8:	9cffffc4 	addi	r19,r19,-1
    c9dc:	1ce6703a 	and	r19,r3,r19
    c9e0:	98007a26 	beq	r19,zero,cbcc <__subdf3+0x378>
    c9e4:	9809883a 	mov	r4,r19
    c9e8:	000d3540 	call	d354 <__clzsi2>
    c9ec:	113ffe04 	addi	r4,r2,-8
    c9f0:	00c007c4 	movi	r3,31
    c9f4:	19007b16 	blt	r3,r4,cbe4 <__subdf3+0x390>
    c9f8:	00800804 	movi	r2,32
    c9fc:	1105c83a 	sub	r2,r2,r4
    ca00:	8884d83a 	srl	r2,r17,r2
    ca04:	9906983a 	sll	r3,r19,r4
    ca08:	8922983a 	sll	r17,r17,r4
    ca0c:	10c4b03a 	or	r2,r2,r3
    ca10:	24007816 	blt	r4,r16,cbf4 <__subdf3+0x3a0>
    ca14:	2421c83a 	sub	r16,r4,r16
    ca18:	80c00044 	addi	r3,r16,1
    ca1c:	010007c4 	movi	r4,31
    ca20:	20c09516 	blt	r4,r3,cc78 <__subdf3+0x424>
    ca24:	01400804 	movi	r5,32
    ca28:	28cbc83a 	sub	r5,r5,r3
    ca2c:	88c8d83a 	srl	r4,r17,r3
    ca30:	8962983a 	sll	r17,r17,r5
    ca34:	114a983a 	sll	r5,r2,r5
    ca38:	10c6d83a 	srl	r3,r2,r3
    ca3c:	8804c03a 	cmpne	r2,r17,zero
    ca40:	290ab03a 	or	r5,r5,r4
    ca44:	28a2b03a 	or	r17,r5,r2
    ca48:	0021883a 	mov	r16,zero
    ca4c:	003fa206 	br	c8d8 <__subdf3+0x84>
    ca50:	2090b03a 	or	r8,r4,r2
    ca54:	40018e26 	beq	r8,zero,d090 <__subdf3+0x83c>
    ca58:	1007883a 	mov	r3,r2
    ca5c:	2023883a 	mov	r17,r4
    ca60:	888001cc 	andi	r2,r17,7
    ca64:	103f9e1e 	bne	r2,zero,c8e0 <__subdf3+0x8c>
    ca68:	1804977a 	slli	r2,r3,29
    ca6c:	8822d0fa 	srli	r17,r17,3
    ca70:	1810d0fa 	srli	r8,r3,3
    ca74:	9100004c 	andi	r4,r18,1
    ca78:	1444b03a 	or	r2,r2,r17
    ca7c:	00c1ffc4 	movi	r3,2047
    ca80:	80c02826 	beq	r16,r3,cb24 <__subdf3+0x2d0>
    ca84:	01400434 	movhi	r5,16
    ca88:	297fffc4 	addi	r5,r5,-1
    ca8c:	80e0703a 	and	r16,r16,r3
    ca90:	414a703a 	and	r5,r8,r5
    ca94:	003fa806 	br	c938 <__subdf3+0xe4>
    ca98:	0080630e 	bge	zero,r2,cc28 <__subdf3+0x3d4>
    ca9c:	48003026 	beq	r9,zero,cb60 <__subdf3+0x30c>
    caa0:	0101ffc4 	movi	r4,2047
    caa4:	813f8c26 	beq	r16,r4,c8d8 <__subdf3+0x84>
    caa8:	29402034 	orhi	r5,r5,128
    caac:	01000e04 	movi	r4,56
    cab0:	2080a90e 	bge	r4,r2,cd58 <__subdf3+0x504>
    cab4:	298cb03a 	or	r6,r5,r6
    cab8:	3012c03a 	cmpne	r9,r6,zero
    cabc:	0005883a 	mov	r2,zero
    cac0:	4c53883a 	add	r9,r9,r17
    cac4:	4c63803a 	cmpltu	r17,r9,r17
    cac8:	10c7883a 	add	r3,r2,r3
    cacc:	88c7883a 	add	r3,r17,r3
    cad0:	4823883a 	mov	r17,r9
    cad4:	1880202c 	andhi	r2,r3,128
    cad8:	1000d026 	beq	r2,zero,ce1c <__subdf3+0x5c8>
    cadc:	84000044 	addi	r16,r16,1
    cae0:	0081ffc4 	movi	r2,2047
    cae4:	8080fe26 	beq	r16,r2,cee0 <__subdf3+0x68c>
    cae8:	00bfe034 	movhi	r2,65408
    caec:	10bfffc4 	addi	r2,r2,-1
    caf0:	1886703a 	and	r3,r3,r2
    caf4:	880ad07a 	srli	r5,r17,1
    caf8:	180497fa 	slli	r2,r3,31
    cafc:	8900004c 	andi	r4,r17,1
    cb00:	2922b03a 	or	r17,r5,r4
    cb04:	1806d07a 	srli	r3,r3,1
    cb08:	1462b03a 	or	r17,r2,r17
    cb0c:	3825883a 	mov	r18,r7
    cb10:	003f7106 	br	c8d8 <__subdf3+0x84>
    cb14:	2984b03a 	or	r2,r5,r6
    cb18:	103f6826 	beq	r2,zero,c8bc <__subdf3+0x68>
    cb1c:	39c03fcc 	andi	r7,r7,255
    cb20:	003f6706 	br	c8c0 <__subdf3+0x6c>
    cb24:	4086b03a 	or	r3,r8,r2
    cb28:	18015226 	beq	r3,zero,d074 <__subdf3+0x820>
    cb2c:	00c00434 	movhi	r3,16
    cb30:	41400234 	orhi	r5,r8,8
    cb34:	18ffffc4 	addi	r3,r3,-1
    cb38:	28ca703a 	and	r5,r5,r3
    cb3c:	003f7e06 	br	c938 <__subdf3+0xe4>
    cb40:	10bfffc4 	addi	r2,r2,-1
    cb44:	1000491e 	bne	r2,zero,cc6c <__subdf3+0x418>
    cb48:	898fc83a 	sub	r7,r17,r6
    cb4c:	89e3803a 	cmpltu	r17,r17,r7
    cb50:	1947c83a 	sub	r3,r3,r5
    cb54:	1c47c83a 	sub	r3,r3,r17
    cb58:	3823883a 	mov	r17,r7
    cb5c:	003f9b06 	br	c9cc <__subdf3+0x178>
    cb60:	2988b03a 	or	r4,r5,r6
    cb64:	203f5c26 	beq	r4,zero,c8d8 <__subdf3+0x84>
    cb68:	10bfffc4 	addi	r2,r2,-1
    cb6c:	1000931e 	bne	r2,zero,cdbc <__subdf3+0x568>
    cb70:	898d883a 	add	r6,r17,r6
    cb74:	3463803a 	cmpltu	r17,r6,r17
    cb78:	1947883a 	add	r3,r3,r5
    cb7c:	88c7883a 	add	r3,r17,r3
    cb80:	3023883a 	mov	r17,r6
    cb84:	003fd306 	br	cad4 <__subdf3+0x280>
    cb88:	1000541e 	bne	r2,zero,ccdc <__subdf3+0x488>
    cb8c:	80800044 	addi	r2,r16,1
    cb90:	1081ffcc 	andi	r2,r2,2047
    cb94:	01000044 	movi	r4,1
    cb98:	2080a20e 	bge	r4,r2,ce24 <__subdf3+0x5d0>
    cb9c:	8989c83a 	sub	r4,r17,r6
    cba0:	8905803a 	cmpltu	r2,r17,r4
    cba4:	1967c83a 	sub	r19,r3,r5
    cba8:	98a7c83a 	sub	r19,r19,r2
    cbac:	9880202c 	andhi	r2,r19,128
    cbb0:	10006326 	beq	r2,zero,cd40 <__subdf3+0x4ec>
    cbb4:	3463c83a 	sub	r17,r6,r17
    cbb8:	28c7c83a 	sub	r3,r5,r3
    cbbc:	344d803a 	cmpltu	r6,r6,r17
    cbc0:	19a7c83a 	sub	r19,r3,r6
    cbc4:	3825883a 	mov	r18,r7
    cbc8:	983f861e 	bne	r19,zero,c9e4 <__subdf3+0x190>
    cbcc:	8809883a 	mov	r4,r17
    cbd0:	000d3540 	call	d354 <__clzsi2>
    cbd4:	10800804 	addi	r2,r2,32
    cbd8:	113ffe04 	addi	r4,r2,-8
    cbdc:	00c007c4 	movi	r3,31
    cbe0:	193f850e 	bge	r3,r4,c9f8 <__subdf3+0x1a4>
    cbe4:	10bff604 	addi	r2,r2,-40
    cbe8:	8884983a 	sll	r2,r17,r2
    cbec:	0023883a 	mov	r17,zero
    cbf0:	243f880e 	bge	r4,r16,ca14 <__subdf3+0x1c0>
    cbf4:	00ffe034 	movhi	r3,65408
    cbf8:	18ffffc4 	addi	r3,r3,-1
    cbfc:	8121c83a 	sub	r16,r16,r4
    cc00:	10c6703a 	and	r3,r2,r3
    cc04:	003f3406 	br	c8d8 <__subdf3+0x84>
    cc08:	9100004c 	andi	r4,r18,1
    cc0c:	000b883a 	mov	r5,zero
    cc10:	0005883a 	mov	r2,zero
    cc14:	003f4806 	br	c938 <__subdf3+0xe4>
    cc18:	298cb03a 	or	r6,r5,r6
    cc1c:	300cc03a 	cmpne	r6,r6,zero
    cc20:	0005883a 	mov	r2,zero
    cc24:	003f6406 	br	c9b8 <__subdf3+0x164>
    cc28:	10009a1e 	bne	r2,zero,ce94 <__subdf3+0x640>
    cc2c:	82400044 	addi	r9,r16,1
    cc30:	4881ffcc 	andi	r2,r9,2047
    cc34:	02800044 	movi	r10,1
    cc38:	5080670e 	bge	r10,r2,cdd8 <__subdf3+0x584>
    cc3c:	0081ffc4 	movi	r2,2047
    cc40:	4880af26 	beq	r9,r2,cf00 <__subdf3+0x6ac>
    cc44:	898d883a 	add	r6,r17,r6
    cc48:	1945883a 	add	r2,r3,r5
    cc4c:	3447803a 	cmpltu	r3,r6,r17
    cc50:	1887883a 	add	r3,r3,r2
    cc54:	182297fa 	slli	r17,r3,31
    cc58:	300cd07a 	srli	r6,r6,1
    cc5c:	1806d07a 	srli	r3,r3,1
    cc60:	4821883a 	mov	r16,r9
    cc64:	89a2b03a 	or	r17,r17,r6
    cc68:	003f1b06 	br	c8d8 <__subdf3+0x84>
    cc6c:	0101ffc4 	movi	r4,2047
    cc70:	813f441e 	bne	r16,r4,c984 <__subdf3+0x130>
    cc74:	003f1806 	br	c8d8 <__subdf3+0x84>
    cc78:	843ff844 	addi	r16,r16,-31
    cc7c:	01400804 	movi	r5,32
    cc80:	1408d83a 	srl	r4,r2,r16
    cc84:	19405026 	beq	r3,r5,cdc8 <__subdf3+0x574>
    cc88:	01401004 	movi	r5,64
    cc8c:	28c7c83a 	sub	r3,r5,r3
    cc90:	10c4983a 	sll	r2,r2,r3
    cc94:	88a2b03a 	or	r17,r17,r2
    cc98:	8822c03a 	cmpne	r17,r17,zero
    cc9c:	2462b03a 	or	r17,r4,r17
    cca0:	0007883a 	mov	r3,zero
    cca4:	0021883a 	mov	r16,zero
    cca8:	003f6d06 	br	ca60 <__subdf3+0x20c>
    ccac:	11fff804 	addi	r7,r2,-32
    ccb0:	01000804 	movi	r4,32
    ccb4:	29ced83a 	srl	r7,r5,r7
    ccb8:	11004526 	beq	r2,r4,cdd0 <__subdf3+0x57c>
    ccbc:	01001004 	movi	r4,64
    ccc0:	2089c83a 	sub	r4,r4,r2
    ccc4:	2904983a 	sll	r2,r5,r4
    ccc8:	118cb03a 	or	r6,r2,r6
    cccc:	300cc03a 	cmpne	r6,r6,zero
    ccd0:	398cb03a 	or	r6,r7,r6
    ccd4:	0005883a 	mov	r2,zero
    ccd8:	003f3706 	br	c9b8 <__subdf3+0x164>
    ccdc:	80002a26 	beq	r16,zero,cd88 <__subdf3+0x534>
    cce0:	0101ffc4 	movi	r4,2047
    cce4:	49006626 	beq	r9,r4,ce80 <__subdf3+0x62c>
    cce8:	0085c83a 	sub	r2,zero,r2
    ccec:	18c02034 	orhi	r3,r3,128
    ccf0:	01000e04 	movi	r4,56
    ccf4:	20807e16 	blt	r4,r2,cef0 <__subdf3+0x69c>
    ccf8:	010007c4 	movi	r4,31
    ccfc:	2080e716 	blt	r4,r2,d09c <__subdf3+0x848>
    cd00:	01000804 	movi	r4,32
    cd04:	2089c83a 	sub	r4,r4,r2
    cd08:	1914983a 	sll	r10,r3,r4
    cd0c:	8890d83a 	srl	r8,r17,r2
    cd10:	8908983a 	sll	r4,r17,r4
    cd14:	1884d83a 	srl	r2,r3,r2
    cd18:	5222b03a 	or	r17,r10,r8
    cd1c:	2006c03a 	cmpne	r3,r4,zero
    cd20:	88e2b03a 	or	r17,r17,r3
    cd24:	3463c83a 	sub	r17,r6,r17
    cd28:	2885c83a 	sub	r2,r5,r2
    cd2c:	344d803a 	cmpltu	r6,r6,r17
    cd30:	1187c83a 	sub	r3,r2,r6
    cd34:	4821883a 	mov	r16,r9
    cd38:	3825883a 	mov	r18,r7
    cd3c:	003f2306 	br	c9cc <__subdf3+0x178>
    cd40:	24d0b03a 	or	r8,r4,r19
    cd44:	40001b1e 	bne	r8,zero,cdb4 <__subdf3+0x560>
    cd48:	0005883a 	mov	r2,zero
    cd4c:	0009883a 	mov	r4,zero
    cd50:	0021883a 	mov	r16,zero
    cd54:	003f4906 	br	ca7c <__subdf3+0x228>
    cd58:	010007c4 	movi	r4,31
    cd5c:	20803a16 	blt	r4,r2,ce48 <__subdf3+0x5f4>
    cd60:	01000804 	movi	r4,32
    cd64:	2089c83a 	sub	r4,r4,r2
    cd68:	2912983a 	sll	r9,r5,r4
    cd6c:	3090d83a 	srl	r8,r6,r2
    cd70:	3108983a 	sll	r4,r6,r4
    cd74:	2884d83a 	srl	r2,r5,r2
    cd78:	4a12b03a 	or	r9,r9,r8
    cd7c:	2008c03a 	cmpne	r4,r4,zero
    cd80:	4912b03a 	or	r9,r9,r4
    cd84:	003f4e06 	br	cac0 <__subdf3+0x26c>
    cd88:	1c48b03a 	or	r4,r3,r17
    cd8c:	20003c26 	beq	r4,zero,ce80 <__subdf3+0x62c>
    cd90:	0084303a 	nor	r2,zero,r2
    cd94:	1000381e 	bne	r2,zero,ce78 <__subdf3+0x624>
    cd98:	3463c83a 	sub	r17,r6,r17
    cd9c:	28c5c83a 	sub	r2,r5,r3
    cda0:	344d803a 	cmpltu	r6,r6,r17
    cda4:	1187c83a 	sub	r3,r2,r6
    cda8:	4821883a 	mov	r16,r9
    cdac:	3825883a 	mov	r18,r7
    cdb0:	003f0606 	br	c9cc <__subdf3+0x178>
    cdb4:	2023883a 	mov	r17,r4
    cdb8:	003f0906 	br	c9e0 <__subdf3+0x18c>
    cdbc:	0101ffc4 	movi	r4,2047
    cdc0:	813f3a1e 	bne	r16,r4,caac <__subdf3+0x258>
    cdc4:	003ec406 	br	c8d8 <__subdf3+0x84>
    cdc8:	0005883a 	mov	r2,zero
    cdcc:	003fb106 	br	cc94 <__subdf3+0x440>
    cdd0:	0005883a 	mov	r2,zero
    cdd4:	003fbc06 	br	ccc8 <__subdf3+0x474>
    cdd8:	1c44b03a 	or	r2,r3,r17
    cddc:	80008e1e 	bne	r16,zero,d018 <__subdf3+0x7c4>
    cde0:	1000c826 	beq	r2,zero,d104 <__subdf3+0x8b0>
    cde4:	2984b03a 	or	r2,r5,r6
    cde8:	103ebb26 	beq	r2,zero,c8d8 <__subdf3+0x84>
    cdec:	8989883a 	add	r4,r17,r6
    cdf0:	1945883a 	add	r2,r3,r5
    cdf4:	2447803a 	cmpltu	r3,r4,r17
    cdf8:	1887883a 	add	r3,r3,r2
    cdfc:	1880202c 	andhi	r2,r3,128
    ce00:	2023883a 	mov	r17,r4
    ce04:	103f1626 	beq	r2,zero,ca60 <__subdf3+0x20c>
    ce08:	00bfe034 	movhi	r2,65408
    ce0c:	10bfffc4 	addi	r2,r2,-1
    ce10:	5021883a 	mov	r16,r10
    ce14:	1886703a 	and	r3,r3,r2
    ce18:	003eaf06 	br	c8d8 <__subdf3+0x84>
    ce1c:	3825883a 	mov	r18,r7
    ce20:	003f0f06 	br	ca60 <__subdf3+0x20c>
    ce24:	1c44b03a 	or	r2,r3,r17
    ce28:	8000251e 	bne	r16,zero,cec0 <__subdf3+0x66c>
    ce2c:	1000661e 	bne	r2,zero,cfc8 <__subdf3+0x774>
    ce30:	2990b03a 	or	r8,r5,r6
    ce34:	40009626 	beq	r8,zero,d090 <__subdf3+0x83c>
    ce38:	2807883a 	mov	r3,r5
    ce3c:	3023883a 	mov	r17,r6
    ce40:	3825883a 	mov	r18,r7
    ce44:	003ea406 	br	c8d8 <__subdf3+0x84>
    ce48:	127ff804 	addi	r9,r2,-32
    ce4c:	01000804 	movi	r4,32
    ce50:	2a52d83a 	srl	r9,r5,r9
    ce54:	11008c26 	beq	r2,r4,d088 <__subdf3+0x834>
    ce58:	01001004 	movi	r4,64
    ce5c:	2085c83a 	sub	r2,r4,r2
    ce60:	2884983a 	sll	r2,r5,r2
    ce64:	118cb03a 	or	r6,r2,r6
    ce68:	300cc03a 	cmpne	r6,r6,zero
    ce6c:	4992b03a 	or	r9,r9,r6
    ce70:	0005883a 	mov	r2,zero
    ce74:	003f1206 	br	cac0 <__subdf3+0x26c>
    ce78:	0101ffc4 	movi	r4,2047
    ce7c:	493f9c1e 	bne	r9,r4,ccf0 <__subdf3+0x49c>
    ce80:	2807883a 	mov	r3,r5
    ce84:	3023883a 	mov	r17,r6
    ce88:	4821883a 	mov	r16,r9
    ce8c:	3825883a 	mov	r18,r7
    ce90:	003e9106 	br	c8d8 <__subdf3+0x84>
    ce94:	80001f1e 	bne	r16,zero,cf14 <__subdf3+0x6c0>
    ce98:	1c48b03a 	or	r4,r3,r17
    ce9c:	20005a26 	beq	r4,zero,d008 <__subdf3+0x7b4>
    cea0:	0084303a 	nor	r2,zero,r2
    cea4:	1000561e 	bne	r2,zero,d000 <__subdf3+0x7ac>
    cea8:	89a3883a 	add	r17,r17,r6
    ceac:	1945883a 	add	r2,r3,r5
    ceb0:	898d803a 	cmpltu	r6,r17,r6
    ceb4:	3087883a 	add	r3,r6,r2
    ceb8:	4821883a 	mov	r16,r9
    cebc:	003f0506 	br	cad4 <__subdf3+0x280>
    cec0:	10002b1e 	bne	r2,zero,cf70 <__subdf3+0x71c>
    cec4:	2984b03a 	or	r2,r5,r6
    cec8:	10008026 	beq	r2,zero,d0cc <__subdf3+0x878>
    cecc:	2807883a 	mov	r3,r5
    ced0:	3023883a 	mov	r17,r6
    ced4:	3825883a 	mov	r18,r7
    ced8:	0401ffc4 	movi	r16,2047
    cedc:	003e7e06 	br	c8d8 <__subdf3+0x84>
    cee0:	3809883a 	mov	r4,r7
    cee4:	0011883a 	mov	r8,zero
    cee8:	0005883a 	mov	r2,zero
    ceec:	003ee306 	br	ca7c <__subdf3+0x228>
    cef0:	1c62b03a 	or	r17,r3,r17
    cef4:	8822c03a 	cmpne	r17,r17,zero
    cef8:	0005883a 	mov	r2,zero
    cefc:	003f8906 	br	cd24 <__subdf3+0x4d0>
    cf00:	3809883a 	mov	r4,r7
    cf04:	4821883a 	mov	r16,r9
    cf08:	0011883a 	mov	r8,zero
    cf0c:	0005883a 	mov	r2,zero
    cf10:	003eda06 	br	ca7c <__subdf3+0x228>
    cf14:	0101ffc4 	movi	r4,2047
    cf18:	49003b26 	beq	r9,r4,d008 <__subdf3+0x7b4>
    cf1c:	0085c83a 	sub	r2,zero,r2
    cf20:	18c02034 	orhi	r3,r3,128
    cf24:	01000e04 	movi	r4,56
    cf28:	20806e16 	blt	r4,r2,d0e4 <__subdf3+0x890>
    cf2c:	010007c4 	movi	r4,31
    cf30:	20807716 	blt	r4,r2,d110 <__subdf3+0x8bc>
    cf34:	01000804 	movi	r4,32
    cf38:	2089c83a 	sub	r4,r4,r2
    cf3c:	1914983a 	sll	r10,r3,r4
    cf40:	8890d83a 	srl	r8,r17,r2
    cf44:	8908983a 	sll	r4,r17,r4
    cf48:	1884d83a 	srl	r2,r3,r2
    cf4c:	5222b03a 	or	r17,r10,r8
    cf50:	2006c03a 	cmpne	r3,r4,zero
    cf54:	88e2b03a 	or	r17,r17,r3
    cf58:	89a3883a 	add	r17,r17,r6
    cf5c:	1145883a 	add	r2,r2,r5
    cf60:	898d803a 	cmpltu	r6,r17,r6
    cf64:	3087883a 	add	r3,r6,r2
    cf68:	4821883a 	mov	r16,r9
    cf6c:	003ed906 	br	cad4 <__subdf3+0x280>
    cf70:	2984b03a 	or	r2,r5,r6
    cf74:	10004226 	beq	r2,zero,d080 <__subdf3+0x82c>
    cf78:	1808d0fa 	srli	r4,r3,3
    cf7c:	8822d0fa 	srli	r17,r17,3
    cf80:	1806977a 	slli	r3,r3,29
    cf84:	2080022c 	andhi	r2,r4,8
    cf88:	1c62b03a 	or	r17,r3,r17
    cf8c:	10000826 	beq	r2,zero,cfb0 <__subdf3+0x75c>
    cf90:	2812d0fa 	srli	r9,r5,3
    cf94:	4880022c 	andhi	r2,r9,8
    cf98:	1000051e 	bne	r2,zero,cfb0 <__subdf3+0x75c>
    cf9c:	300cd0fa 	srli	r6,r6,3
    cfa0:	2804977a 	slli	r2,r5,29
    cfa4:	4809883a 	mov	r4,r9
    cfa8:	3825883a 	mov	r18,r7
    cfac:	11a2b03a 	or	r17,r2,r6
    cfb0:	8806d77a 	srli	r3,r17,29
    cfb4:	200890fa 	slli	r4,r4,3
    cfb8:	882290fa 	slli	r17,r17,3
    cfbc:	0401ffc4 	movi	r16,2047
    cfc0:	1906b03a 	or	r3,r3,r4
    cfc4:	003e4406 	br	c8d8 <__subdf3+0x84>
    cfc8:	2984b03a 	or	r2,r5,r6
    cfcc:	103e4226 	beq	r2,zero,c8d8 <__subdf3+0x84>
    cfd0:	8989c83a 	sub	r4,r17,r6
    cfd4:	8911803a 	cmpltu	r8,r17,r4
    cfd8:	1945c83a 	sub	r2,r3,r5
    cfdc:	1205c83a 	sub	r2,r2,r8
    cfe0:	1200202c 	andhi	r8,r2,128
    cfe4:	403e9a26 	beq	r8,zero,ca50 <__subdf3+0x1fc>
    cfe8:	3463c83a 	sub	r17,r6,r17
    cfec:	28c5c83a 	sub	r2,r5,r3
    cff0:	344d803a 	cmpltu	r6,r6,r17
    cff4:	1187c83a 	sub	r3,r2,r6
    cff8:	3825883a 	mov	r18,r7
    cffc:	003e3606 	br	c8d8 <__subdf3+0x84>
    d000:	0101ffc4 	movi	r4,2047
    d004:	493fc71e 	bne	r9,r4,cf24 <__subdf3+0x6d0>
    d008:	2807883a 	mov	r3,r5
    d00c:	3023883a 	mov	r17,r6
    d010:	4821883a 	mov	r16,r9
    d014:	003e3006 	br	c8d8 <__subdf3+0x84>
    d018:	10003626 	beq	r2,zero,d0f4 <__subdf3+0x8a0>
    d01c:	2984b03a 	or	r2,r5,r6
    d020:	10001726 	beq	r2,zero,d080 <__subdf3+0x82c>
    d024:	1808d0fa 	srli	r4,r3,3
    d028:	8822d0fa 	srli	r17,r17,3
    d02c:	1806977a 	slli	r3,r3,29
    d030:	2080022c 	andhi	r2,r4,8
    d034:	1c62b03a 	or	r17,r3,r17
    d038:	10000726 	beq	r2,zero,d058 <__subdf3+0x804>
    d03c:	2812d0fa 	srli	r9,r5,3
    d040:	4880022c 	andhi	r2,r9,8
    d044:	1000041e 	bne	r2,zero,d058 <__subdf3+0x804>
    d048:	300cd0fa 	srli	r6,r6,3
    d04c:	2804977a 	slli	r2,r5,29
    d050:	4809883a 	mov	r4,r9
    d054:	11a2b03a 	or	r17,r2,r6
    d058:	8806d77a 	srli	r3,r17,29
    d05c:	200890fa 	slli	r4,r4,3
    d060:	882290fa 	slli	r17,r17,3
    d064:	3825883a 	mov	r18,r7
    d068:	1906b03a 	or	r3,r3,r4
    d06c:	0401ffc4 	movi	r16,2047
    d070:	003e1906 	br	c8d8 <__subdf3+0x84>
    d074:	000b883a 	mov	r5,zero
    d078:	0005883a 	mov	r2,zero
    d07c:	003e2e06 	br	c938 <__subdf3+0xe4>
    d080:	0401ffc4 	movi	r16,2047
    d084:	003e1406 	br	c8d8 <__subdf3+0x84>
    d088:	0005883a 	mov	r2,zero
    d08c:	003f7506 	br	ce64 <__subdf3+0x610>
    d090:	0005883a 	mov	r2,zero
    d094:	0009883a 	mov	r4,zero
    d098:	003e7806 	br	ca7c <__subdf3+0x228>
    d09c:	123ff804 	addi	r8,r2,-32
    d0a0:	01000804 	movi	r4,32
    d0a4:	1a10d83a 	srl	r8,r3,r8
    d0a8:	11002526 	beq	r2,r4,d140 <__subdf3+0x8ec>
    d0ac:	01001004 	movi	r4,64
    d0b0:	2085c83a 	sub	r2,r4,r2
    d0b4:	1884983a 	sll	r2,r3,r2
    d0b8:	1444b03a 	or	r2,r2,r17
    d0bc:	1004c03a 	cmpne	r2,r2,zero
    d0c0:	40a2b03a 	or	r17,r8,r2
    d0c4:	0005883a 	mov	r2,zero
    d0c8:	003f1606 	br	cd24 <__subdf3+0x4d0>
    d0cc:	02000434 	movhi	r8,16
    d0d0:	0009883a 	mov	r4,zero
    d0d4:	423fffc4 	addi	r8,r8,-1
    d0d8:	00bfffc4 	movi	r2,-1
    d0dc:	0401ffc4 	movi	r16,2047
    d0e0:	003e6606 	br	ca7c <__subdf3+0x228>
    d0e4:	1c62b03a 	or	r17,r3,r17
    d0e8:	8822c03a 	cmpne	r17,r17,zero
    d0ec:	0005883a 	mov	r2,zero
    d0f0:	003f9906 	br	cf58 <__subdf3+0x704>
    d0f4:	2807883a 	mov	r3,r5
    d0f8:	3023883a 	mov	r17,r6
    d0fc:	0401ffc4 	movi	r16,2047
    d100:	003df506 	br	c8d8 <__subdf3+0x84>
    d104:	2807883a 	mov	r3,r5
    d108:	3023883a 	mov	r17,r6
    d10c:	003df206 	br	c8d8 <__subdf3+0x84>
    d110:	123ff804 	addi	r8,r2,-32
    d114:	01000804 	movi	r4,32
    d118:	1a10d83a 	srl	r8,r3,r8
    d11c:	11000a26 	beq	r2,r4,d148 <__subdf3+0x8f4>
    d120:	01001004 	movi	r4,64
    d124:	2085c83a 	sub	r2,r4,r2
    d128:	1884983a 	sll	r2,r3,r2
    d12c:	1444b03a 	or	r2,r2,r17
    d130:	1004c03a 	cmpne	r2,r2,zero
    d134:	40a2b03a 	or	r17,r8,r2
    d138:	0005883a 	mov	r2,zero
    d13c:	003f8606 	br	cf58 <__subdf3+0x704>
    d140:	0005883a 	mov	r2,zero
    d144:	003fdc06 	br	d0b8 <__subdf3+0x864>
    d148:	0005883a 	mov	r2,zero
    d14c:	003ff706 	br	d12c <__subdf3+0x8d8>

0000d150 <__fixdfsi>:
    d150:	280cd53a 	srli	r6,r5,20
    d154:	00c00434 	movhi	r3,16
    d158:	18ffffc4 	addi	r3,r3,-1
    d15c:	3181ffcc 	andi	r6,r6,2047
    d160:	01c0ff84 	movi	r7,1022
    d164:	28c6703a 	and	r3,r5,r3
    d168:	280ad7fa 	srli	r5,r5,31
    d16c:	3980120e 	bge	r7,r6,d1b8 <__fixdfsi+0x68>
    d170:	00810744 	movi	r2,1053
    d174:	11800c16 	blt	r2,r6,d1a8 <__fixdfsi+0x58>
    d178:	00810cc4 	movi	r2,1075
    d17c:	1185c83a 	sub	r2,r2,r6
    d180:	01c007c4 	movi	r7,31
    d184:	18c00434 	orhi	r3,r3,16
    d188:	38800d16 	blt	r7,r2,d1c0 <__fixdfsi+0x70>
    d18c:	31befb44 	addi	r6,r6,-1043
    d190:	2084d83a 	srl	r2,r4,r2
    d194:	1986983a 	sll	r3,r3,r6
    d198:	1884b03a 	or	r2,r3,r2
    d19c:	28000726 	beq	r5,zero,d1bc <__fixdfsi+0x6c>
    d1a0:	0085c83a 	sub	r2,zero,r2
    d1a4:	f800283a 	ret
    d1a8:	00a00034 	movhi	r2,32768
    d1ac:	10bfffc4 	addi	r2,r2,-1
    d1b0:	2885883a 	add	r2,r5,r2
    d1b4:	f800283a 	ret
    d1b8:	0005883a 	mov	r2,zero
    d1bc:	f800283a 	ret
    d1c0:	008104c4 	movi	r2,1043
    d1c4:	1185c83a 	sub	r2,r2,r6
    d1c8:	1884d83a 	srl	r2,r3,r2
    d1cc:	003ff306 	br	d19c <__fixdfsi+0x4c>

0000d1d0 <__floatsidf>:
    d1d0:	defffd04 	addi	sp,sp,-12
    d1d4:	dfc00215 	stw	ra,8(sp)
    d1d8:	dc400115 	stw	r17,4(sp)
    d1dc:	dc000015 	stw	r16,0(sp)
    d1e0:	20002b26 	beq	r4,zero,d290 <__floatsidf+0xc0>
    d1e4:	2023883a 	mov	r17,r4
    d1e8:	2020d7fa 	srli	r16,r4,31
    d1ec:	20002d16 	blt	r4,zero,d2a4 <__floatsidf+0xd4>
    d1f0:	8809883a 	mov	r4,r17
    d1f4:	000d3540 	call	d354 <__clzsi2>
    d1f8:	01410784 	movi	r5,1054
    d1fc:	288bc83a 	sub	r5,r5,r2
    d200:	01010cc4 	movi	r4,1075
    d204:	2149c83a 	sub	r4,r4,r5
    d208:	00c007c4 	movi	r3,31
    d20c:	1900160e 	bge	r3,r4,d268 <__floatsidf+0x98>
    d210:	00c104c4 	movi	r3,1043
    d214:	1947c83a 	sub	r3,r3,r5
    d218:	88c6983a 	sll	r3,r17,r3
    d21c:	00800434 	movhi	r2,16
    d220:	10bfffc4 	addi	r2,r2,-1
    d224:	1886703a 	and	r3,r3,r2
    d228:	2941ffcc 	andi	r5,r5,2047
    d22c:	800d883a 	mov	r6,r16
    d230:	0005883a 	mov	r2,zero
    d234:	280a953a 	slli	r5,r5,20
    d238:	31803fcc 	andi	r6,r6,255
    d23c:	01000434 	movhi	r4,16
    d240:	300c97fa 	slli	r6,r6,31
    d244:	213fffc4 	addi	r4,r4,-1
    d248:	1906703a 	and	r3,r3,r4
    d24c:	1946b03a 	or	r3,r3,r5
    d250:	1986b03a 	or	r3,r3,r6
    d254:	dfc00217 	ldw	ra,8(sp)
    d258:	dc400117 	ldw	r17,4(sp)
    d25c:	dc000017 	ldw	r16,0(sp)
    d260:	dec00304 	addi	sp,sp,12
    d264:	f800283a 	ret
    d268:	00c002c4 	movi	r3,11
    d26c:	1887c83a 	sub	r3,r3,r2
    d270:	88c6d83a 	srl	r3,r17,r3
    d274:	8904983a 	sll	r2,r17,r4
    d278:	01000434 	movhi	r4,16
    d27c:	213fffc4 	addi	r4,r4,-1
    d280:	2941ffcc 	andi	r5,r5,2047
    d284:	1906703a 	and	r3,r3,r4
    d288:	800d883a 	mov	r6,r16
    d28c:	003fe906 	br	d234 <__floatsidf+0x64>
    d290:	000d883a 	mov	r6,zero
    d294:	000b883a 	mov	r5,zero
    d298:	0007883a 	mov	r3,zero
    d29c:	0005883a 	mov	r2,zero
    d2a0:	003fe406 	br	d234 <__floatsidf+0x64>
    d2a4:	0123c83a 	sub	r17,zero,r4
    d2a8:	003fd106 	br	d1f0 <__floatsidf+0x20>

0000d2ac <__floatunsidf>:
    d2ac:	defffe04 	addi	sp,sp,-8
    d2b0:	dc000015 	stw	r16,0(sp)
    d2b4:	dfc00115 	stw	ra,4(sp)
    d2b8:	2021883a 	mov	r16,r4
    d2bc:	20002226 	beq	r4,zero,d348 <__floatunsidf+0x9c>
    d2c0:	000d3540 	call	d354 <__clzsi2>
    d2c4:	01010784 	movi	r4,1054
    d2c8:	2089c83a 	sub	r4,r4,r2
    d2cc:	01810cc4 	movi	r6,1075
    d2d0:	310dc83a 	sub	r6,r6,r4
    d2d4:	00c007c4 	movi	r3,31
    d2d8:	1980120e 	bge	r3,r6,d324 <__floatunsidf+0x78>
    d2dc:	00c104c4 	movi	r3,1043
    d2e0:	1907c83a 	sub	r3,r3,r4
    d2e4:	80ca983a 	sll	r5,r16,r3
    d2e8:	00800434 	movhi	r2,16
    d2ec:	10bfffc4 	addi	r2,r2,-1
    d2f0:	2101ffcc 	andi	r4,r4,2047
    d2f4:	0021883a 	mov	r16,zero
    d2f8:	288a703a 	and	r5,r5,r2
    d2fc:	2008953a 	slli	r4,r4,20
    d300:	00c00434 	movhi	r3,16
    d304:	18ffffc4 	addi	r3,r3,-1
    d308:	28c6703a 	and	r3,r5,r3
    d30c:	8005883a 	mov	r2,r16
    d310:	1906b03a 	or	r3,r3,r4
    d314:	dfc00117 	ldw	ra,4(sp)
    d318:	dc000017 	ldw	r16,0(sp)
    d31c:	dec00204 	addi	sp,sp,8
    d320:	f800283a 	ret
    d324:	00c002c4 	movi	r3,11
    d328:	188bc83a 	sub	r5,r3,r2
    d32c:	814ad83a 	srl	r5,r16,r5
    d330:	00c00434 	movhi	r3,16
    d334:	18ffffc4 	addi	r3,r3,-1
    d338:	81a0983a 	sll	r16,r16,r6
    d33c:	2101ffcc 	andi	r4,r4,2047
    d340:	28ca703a 	and	r5,r5,r3
    d344:	003fed06 	br	d2fc <__floatunsidf+0x50>
    d348:	0009883a 	mov	r4,zero
    d34c:	000b883a 	mov	r5,zero
    d350:	003fea06 	br	d2fc <__floatunsidf+0x50>

0000d354 <__clzsi2>:
    d354:	00bfffd4 	movui	r2,65535
    d358:	11000536 	bltu	r2,r4,d370 <__clzsi2+0x1c>
    d35c:	00803fc4 	movi	r2,255
    d360:	11000f36 	bltu	r2,r4,d3a0 <__clzsi2+0x4c>
    d364:	00800804 	movi	r2,32
    d368:	0007883a 	mov	r3,zero
    d36c:	00000506 	br	d384 <__clzsi2+0x30>
    d370:	00804034 	movhi	r2,256
    d374:	10bfffc4 	addi	r2,r2,-1
    d378:	11000c2e 	bgeu	r2,r4,d3ac <__clzsi2+0x58>
    d37c:	00800204 	movi	r2,8
    d380:	00c00604 	movi	r3,24
    d384:	20c8d83a 	srl	r4,r4,r3
    d388:	00c00074 	movhi	r3,1
    d38c:	18dfae04 	addi	r3,r3,32440
    d390:	1909883a 	add	r4,r3,r4
    d394:	20c00003 	ldbu	r3,0(r4)
    d398:	10c5c83a 	sub	r2,r2,r3
    d39c:	f800283a 	ret
    d3a0:	00800604 	movi	r2,24
    d3a4:	00c00204 	movi	r3,8
    d3a8:	003ff606 	br	d384 <__clzsi2+0x30>
    d3ac:	00800404 	movi	r2,16
    d3b0:	1007883a 	mov	r3,r2
    d3b4:	003ff306 	br	d384 <__clzsi2+0x30>

0000d3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3b8:	defffe04 	addi	sp,sp,-8
    d3bc:	dfc00115 	stw	ra,4(sp)
    d3c0:	df000015 	stw	fp,0(sp)
    d3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3c8:	d0a00b17 	ldw	r2,-32724(gp)
    d3cc:	10000326 	beq	r2,zero,d3dc <alt_get_errno+0x24>
    d3d0:	d0a00b17 	ldw	r2,-32724(gp)
    d3d4:	103ee83a 	callr	r2
    d3d8:	00000106 	br	d3e0 <alt_get_errno+0x28>
    d3dc:	d0a71004 	addi	r2,gp,-25536
}
    d3e0:	e037883a 	mov	sp,fp
    d3e4:	dfc00117 	ldw	ra,4(sp)
    d3e8:	df000017 	ldw	fp,0(sp)
    d3ec:	dec00204 	addi	sp,sp,8
    d3f0:	f800283a 	ret

0000d3f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d3f4:	defffb04 	addi	sp,sp,-20
    d3f8:	dfc00415 	stw	ra,16(sp)
    d3fc:	df000315 	stw	fp,12(sp)
    d400:	df000304 	addi	fp,sp,12
    d404:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d408:	e0bfff17 	ldw	r2,-4(fp)
    d40c:	10000616 	blt	r2,zero,d428 <close+0x34>
    d410:	e0bfff17 	ldw	r2,-4(fp)
    d414:	10c00324 	muli	r3,r2,12
    d418:	008000b4 	movhi	r2,2
    d41c:	10a27704 	addi	r2,r2,-30244
    d420:	1885883a 	add	r2,r3,r2
    d424:	00000106 	br	d42c <close+0x38>
    d428:	0005883a 	mov	r2,zero
    d42c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d430:	e0bffd17 	ldw	r2,-12(fp)
    d434:	10001926 	beq	r2,zero,d49c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d438:	e0bffd17 	ldw	r2,-12(fp)
    d43c:	10800017 	ldw	r2,0(r2)
    d440:	10800417 	ldw	r2,16(r2)
    d444:	10000626 	beq	r2,zero,d460 <close+0x6c>
    d448:	e0bffd17 	ldw	r2,-12(fp)
    d44c:	10800017 	ldw	r2,0(r2)
    d450:	10800417 	ldw	r2,16(r2)
    d454:	e13ffd17 	ldw	r4,-12(fp)
    d458:	103ee83a 	callr	r2
    d45c:	00000106 	br	d464 <close+0x70>
    d460:	0005883a 	mov	r2,zero
    d464:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d468:	e13fff17 	ldw	r4,-4(fp)
    d46c:	000daac0 	call	daac <alt_release_fd>
    if (rval < 0)
    d470:	e0bffe17 	ldw	r2,-8(fp)
    d474:	1000070e 	bge	r2,zero,d494 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d478:	000d3b80 	call	d3b8 <alt_get_errno>
    d47c:	1007883a 	mov	r3,r2
    d480:	e0bffe17 	ldw	r2,-8(fp)
    d484:	0085c83a 	sub	r2,zero,r2
    d488:	18800015 	stw	r2,0(r3)
      return -1;
    d48c:	00bfffc4 	movi	r2,-1
    d490:	00000706 	br	d4b0 <close+0xbc>
    }
    return 0;
    d494:	0005883a 	mov	r2,zero
    d498:	00000506 	br	d4b0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d49c:	000d3b80 	call	d3b8 <alt_get_errno>
    d4a0:	1007883a 	mov	r3,r2
    d4a4:	00801444 	movi	r2,81
    d4a8:	18800015 	stw	r2,0(r3)
    return -1;
    d4ac:	00bfffc4 	movi	r2,-1
  }
}
    d4b0:	e037883a 	mov	sp,fp
    d4b4:	dfc00117 	ldw	ra,4(sp)
    d4b8:	df000017 	ldw	fp,0(sp)
    d4bc:	dec00204 	addi	sp,sp,8
    d4c0:	f800283a 	ret

0000d4c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d4c4:	defffc04 	addi	sp,sp,-16
    d4c8:	df000315 	stw	fp,12(sp)
    d4cc:	df000304 	addi	fp,sp,12
    d4d0:	e13ffd15 	stw	r4,-12(fp)
    d4d4:	e17ffe15 	stw	r5,-8(fp)
    d4d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d4dc:	e0bfff17 	ldw	r2,-4(fp)
}
    d4e0:	e037883a 	mov	sp,fp
    d4e4:	df000017 	ldw	fp,0(sp)
    d4e8:	dec00104 	addi	sp,sp,4
    d4ec:	f800283a 	ret

0000d4f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4f0:	defffe04 	addi	sp,sp,-8
    d4f4:	dfc00115 	stw	ra,4(sp)
    d4f8:	df000015 	stw	fp,0(sp)
    d4fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d500:	d0a00b17 	ldw	r2,-32724(gp)
    d504:	10000326 	beq	r2,zero,d514 <alt_get_errno+0x24>
    d508:	d0a00b17 	ldw	r2,-32724(gp)
    d50c:	103ee83a 	callr	r2
    d510:	00000106 	br	d518 <alt_get_errno+0x28>
    d514:	d0a71004 	addi	r2,gp,-25536
}
    d518:	e037883a 	mov	sp,fp
    d51c:	dfc00117 	ldw	ra,4(sp)
    d520:	df000017 	ldw	fp,0(sp)
    d524:	dec00204 	addi	sp,sp,8
    d528:	f800283a 	ret

0000d52c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d52c:	defffb04 	addi	sp,sp,-20
    d530:	dfc00415 	stw	ra,16(sp)
    d534:	df000315 	stw	fp,12(sp)
    d538:	df000304 	addi	fp,sp,12
    d53c:	e13ffe15 	stw	r4,-8(fp)
    d540:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d544:	e0bffe17 	ldw	r2,-8(fp)
    d548:	10000616 	blt	r2,zero,d564 <fstat+0x38>
    d54c:	e0bffe17 	ldw	r2,-8(fp)
    d550:	10c00324 	muli	r3,r2,12
    d554:	008000b4 	movhi	r2,2
    d558:	10a27704 	addi	r2,r2,-30244
    d55c:	1885883a 	add	r2,r3,r2
    d560:	00000106 	br	d568 <fstat+0x3c>
    d564:	0005883a 	mov	r2,zero
    d568:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d56c:	e0bffd17 	ldw	r2,-12(fp)
    d570:	10001026 	beq	r2,zero,d5b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d574:	e0bffd17 	ldw	r2,-12(fp)
    d578:	10800017 	ldw	r2,0(r2)
    d57c:	10800817 	ldw	r2,32(r2)
    d580:	10000726 	beq	r2,zero,d5a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d584:	e0bffd17 	ldw	r2,-12(fp)
    d588:	10800017 	ldw	r2,0(r2)
    d58c:	10800817 	ldw	r2,32(r2)
    d590:	e17fff17 	ldw	r5,-4(fp)
    d594:	e13ffd17 	ldw	r4,-12(fp)
    d598:	103ee83a 	callr	r2
    d59c:	00000a06 	br	d5c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d5a0:	e0bfff17 	ldw	r2,-4(fp)
    d5a4:	00c80004 	movi	r3,8192
    d5a8:	10c00115 	stw	r3,4(r2)
      return 0;
    d5ac:	0005883a 	mov	r2,zero
    d5b0:	00000506 	br	d5c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d5b4:	000d4f00 	call	d4f0 <alt_get_errno>
    d5b8:	1007883a 	mov	r3,r2
    d5bc:	00801444 	movi	r2,81
    d5c0:	18800015 	stw	r2,0(r3)
    return -1;
    d5c4:	00bfffc4 	movi	r2,-1
  }
}
    d5c8:	e037883a 	mov	sp,fp
    d5cc:	dfc00117 	ldw	ra,4(sp)
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00204 	addi	sp,sp,8
    d5d8:	f800283a 	ret

0000d5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5dc:	defffe04 	addi	sp,sp,-8
    d5e0:	dfc00115 	stw	ra,4(sp)
    d5e4:	df000015 	stw	fp,0(sp)
    d5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5ec:	d0a00b17 	ldw	r2,-32724(gp)
    d5f0:	10000326 	beq	r2,zero,d600 <alt_get_errno+0x24>
    d5f4:	d0a00b17 	ldw	r2,-32724(gp)
    d5f8:	103ee83a 	callr	r2
    d5fc:	00000106 	br	d604 <alt_get_errno+0x28>
    d600:	d0a71004 	addi	r2,gp,-25536
}
    d604:	e037883a 	mov	sp,fp
    d608:	dfc00117 	ldw	ra,4(sp)
    d60c:	df000017 	ldw	fp,0(sp)
    d610:	dec00204 	addi	sp,sp,8
    d614:	f800283a 	ret

0000d618 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d618:	deffed04 	addi	sp,sp,-76
    d61c:	dfc01215 	stw	ra,72(sp)
    d620:	df001115 	stw	fp,68(sp)
    d624:	df001104 	addi	fp,sp,68
    d628:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d62c:	e0bfff17 	ldw	r2,-4(fp)
    d630:	10000616 	blt	r2,zero,d64c <isatty+0x34>
    d634:	e0bfff17 	ldw	r2,-4(fp)
    d638:	10c00324 	muli	r3,r2,12
    d63c:	008000b4 	movhi	r2,2
    d640:	10a27704 	addi	r2,r2,-30244
    d644:	1885883a 	add	r2,r3,r2
    d648:	00000106 	br	d650 <isatty+0x38>
    d64c:	0005883a 	mov	r2,zero
    d650:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d654:	e0bfef17 	ldw	r2,-68(fp)
    d658:	10000e26 	beq	r2,zero,d694 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d65c:	e0bfef17 	ldw	r2,-68(fp)
    d660:	10800017 	ldw	r2,0(r2)
    d664:	10800817 	ldw	r2,32(r2)
    d668:	1000021e 	bne	r2,zero,d674 <isatty+0x5c>
    {
      return 1;
    d66c:	00800044 	movi	r2,1
    d670:	00000d06 	br	d6a8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d674:	e0bff004 	addi	r2,fp,-64
    d678:	100b883a 	mov	r5,r2
    d67c:	e13fff17 	ldw	r4,-4(fp)
    d680:	000d52c0 	call	d52c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d684:	e0bff117 	ldw	r2,-60(fp)
    d688:	10880020 	cmpeqi	r2,r2,8192
    d68c:	10803fcc 	andi	r2,r2,255
    d690:	00000506 	br	d6a8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d694:	000d5dc0 	call	d5dc <alt_get_errno>
    d698:	1007883a 	mov	r3,r2
    d69c:	00801444 	movi	r2,81
    d6a0:	18800015 	stw	r2,0(r3)
    return 0;
    d6a4:	0005883a 	mov	r2,zero
  }
}
    d6a8:	e037883a 	mov	sp,fp
    d6ac:	dfc00117 	ldw	ra,4(sp)
    d6b0:	df000017 	ldw	fp,0(sp)
    d6b4:	dec00204 	addi	sp,sp,8
    d6b8:	f800283a 	ret

0000d6bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d6bc:	defffc04 	addi	sp,sp,-16
    d6c0:	df000315 	stw	fp,12(sp)
    d6c4:	df000304 	addi	fp,sp,12
    d6c8:	e13ffd15 	stw	r4,-12(fp)
    d6cc:	e17ffe15 	stw	r5,-8(fp)
    d6d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d6d4:	e0fffe17 	ldw	r3,-8(fp)
    d6d8:	e0bffd17 	ldw	r2,-12(fp)
    d6dc:	18800c26 	beq	r3,r2,d710 <alt_load_section+0x54>
  {
    while( to != end )
    d6e0:	00000806 	br	d704 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d6e4:	e0bffe17 	ldw	r2,-8(fp)
    d6e8:	10c00104 	addi	r3,r2,4
    d6ec:	e0fffe15 	stw	r3,-8(fp)
    d6f0:	e0fffd17 	ldw	r3,-12(fp)
    d6f4:	19000104 	addi	r4,r3,4
    d6f8:	e13ffd15 	stw	r4,-12(fp)
    d6fc:	18c00017 	ldw	r3,0(r3)
    d700:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d704:	e0fffe17 	ldw	r3,-8(fp)
    d708:	e0bfff17 	ldw	r2,-4(fp)
    d70c:	18bff51e 	bne	r3,r2,d6e4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d710:	0001883a 	nop
    d714:	e037883a 	mov	sp,fp
    d718:	df000017 	ldw	fp,0(sp)
    d71c:	dec00104 	addi	sp,sp,4
    d720:	f800283a 	ret

0000d724 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d724:	defffe04 	addi	sp,sp,-8
    d728:	dfc00115 	stw	ra,4(sp)
    d72c:	df000015 	stw	fp,0(sp)
    d730:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d734:	018000b4 	movhi	r6,2
    d738:	31a72104 	addi	r6,r6,-25468
    d73c:	014000b4 	movhi	r5,2
    d740:	29604404 	addi	r5,r5,-32496
    d744:	010000b4 	movhi	r4,2
    d748:	21272104 	addi	r4,r4,-25468
    d74c:	000d6bc0 	call	d6bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d750:	01800034 	movhi	r6,0
    d754:	31809104 	addi	r6,r6,580
    d758:	01400034 	movhi	r5,0
    d75c:	29400804 	addi	r5,r5,32
    d760:	01000034 	movhi	r4,0
    d764:	21000804 	addi	r4,r4,32
    d768:	000d6bc0 	call	d6bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d76c:	018000b4 	movhi	r6,2
    d770:	31a04404 	addi	r6,r6,-32496
    d774:	01400074 	movhi	r5,1
    d778:	295ef304 	addi	r5,r5,31692
    d77c:	01000074 	movhi	r4,1
    d780:	211ef304 	addi	r4,r4,31692
    d784:	000d6bc0 	call	d6bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d788:	00167f40 	call	167f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d78c:	00169b40 	call	169b4 <alt_icache_flush_all>
}
    d790:	0001883a 	nop
    d794:	e037883a 	mov	sp,fp
    d798:	dfc00117 	ldw	ra,4(sp)
    d79c:	df000017 	ldw	fp,0(sp)
    d7a0:	dec00204 	addi	sp,sp,8
    d7a4:	f800283a 	ret

0000d7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7a8:	defffe04 	addi	sp,sp,-8
    d7ac:	dfc00115 	stw	ra,4(sp)
    d7b0:	df000015 	stw	fp,0(sp)
    d7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7b8:	d0a00b17 	ldw	r2,-32724(gp)
    d7bc:	10000326 	beq	r2,zero,d7cc <alt_get_errno+0x24>
    d7c0:	d0a00b17 	ldw	r2,-32724(gp)
    d7c4:	103ee83a 	callr	r2
    d7c8:	00000106 	br	d7d0 <alt_get_errno+0x28>
    d7cc:	d0a71004 	addi	r2,gp,-25536
}
    d7d0:	e037883a 	mov	sp,fp
    d7d4:	dfc00117 	ldw	ra,4(sp)
    d7d8:	df000017 	ldw	fp,0(sp)
    d7dc:	dec00204 	addi	sp,sp,8
    d7e0:	f800283a 	ret

0000d7e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d7e4:	defff904 	addi	sp,sp,-28
    d7e8:	dfc00615 	stw	ra,24(sp)
    d7ec:	df000515 	stw	fp,20(sp)
    d7f0:	df000504 	addi	fp,sp,20
    d7f4:	e13ffd15 	stw	r4,-12(fp)
    d7f8:	e17ffe15 	stw	r5,-8(fp)
    d7fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d800:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d804:	e0bffd17 	ldw	r2,-12(fp)
    d808:	10000616 	blt	r2,zero,d824 <lseek+0x40>
    d80c:	e0bffd17 	ldw	r2,-12(fp)
    d810:	10c00324 	muli	r3,r2,12
    d814:	008000b4 	movhi	r2,2
    d818:	10a27704 	addi	r2,r2,-30244
    d81c:	1885883a 	add	r2,r3,r2
    d820:	00000106 	br	d828 <lseek+0x44>
    d824:	0005883a 	mov	r2,zero
    d828:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d82c:	e0bffc17 	ldw	r2,-16(fp)
    d830:	10001026 	beq	r2,zero,d874 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d834:	e0bffc17 	ldw	r2,-16(fp)
    d838:	10800017 	ldw	r2,0(r2)
    d83c:	10800717 	ldw	r2,28(r2)
    d840:	10000926 	beq	r2,zero,d868 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d844:	e0bffc17 	ldw	r2,-16(fp)
    d848:	10800017 	ldw	r2,0(r2)
    d84c:	10800717 	ldw	r2,28(r2)
    d850:	e1bfff17 	ldw	r6,-4(fp)
    d854:	e17ffe17 	ldw	r5,-8(fp)
    d858:	e13ffc17 	ldw	r4,-16(fp)
    d85c:	103ee83a 	callr	r2
    d860:	e0bffb15 	stw	r2,-20(fp)
    d864:	00000506 	br	d87c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d868:	00bfde84 	movi	r2,-134
    d86c:	e0bffb15 	stw	r2,-20(fp)
    d870:	00000206 	br	d87c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d874:	00bfebc4 	movi	r2,-81
    d878:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d87c:	e0bffb17 	ldw	r2,-20(fp)
    d880:	1000070e 	bge	r2,zero,d8a0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d884:	000d7a80 	call	d7a8 <alt_get_errno>
    d888:	1007883a 	mov	r3,r2
    d88c:	e0bffb17 	ldw	r2,-20(fp)
    d890:	0085c83a 	sub	r2,zero,r2
    d894:	18800015 	stw	r2,0(r3)
    rc = -1;
    d898:	00bfffc4 	movi	r2,-1
    d89c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d8a0:	e0bffb17 	ldw	r2,-20(fp)
}
    d8a4:	e037883a 	mov	sp,fp
    d8a8:	dfc00117 	ldw	ra,4(sp)
    d8ac:	df000017 	ldw	fp,0(sp)
    d8b0:	dec00204 	addi	sp,sp,8
    d8b4:	f800283a 	ret

0000d8b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d8b8:	defff904 	addi	sp,sp,-28
    d8bc:	dfc00615 	stw	ra,24(sp)
    d8c0:	df000515 	stw	fp,20(sp)
    d8c4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d8c8:	0009883a 	mov	r4,zero
    d8cc:	00157fc0 	call	157fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d8d0:	000e8740 	call	e874 <OSInit>
    d8d4:	01000044 	movi	r4,1
    d8d8:	00131c40 	call	131c4 <OSSemCreate>
    d8dc:	d0a71915 	stw	r2,-25500(gp)
    d8e0:	01000044 	movi	r4,1
    d8e4:	00131c40 	call	131c4 <OSSemCreate>
    d8e8:	d0a71b15 	stw	r2,-25492(gp)
    d8ec:	d0a71404 	addi	r2,gp,-25520
    d8f0:	e0bffc15 	stw	r2,-16(fp)
    d8f4:	00800044 	movi	r2,1
    d8f8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d8fc:	e0bffd0b 	ldhu	r2,-12(fp)
    d900:	1009883a 	mov	r4,r2
    d904:	00131c40 	call	131c4 <OSSemCreate>
    d908:	1007883a 	mov	r3,r2
    d90c:	e0bffc17 	ldw	r2,-16(fp)
    d910:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d914:	00158340 	call	15834 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d918:	01800074 	movhi	r6,1
    d91c:	319ff104 	addi	r6,r6,32708
    d920:	01400074 	movhi	r5,1
    d924:	295ff104 	addi	r5,r5,32708
    d928:	01000074 	movhi	r4,1
    d92c:	211ff104 	addi	r4,r4,32708
    d930:	0016d380 	call	16d38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d934:	00168f40 	call	168f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d938:	01000074 	movhi	r4,1
    d93c:	211a5504 	addi	r4,r4,26964
    d940:	00178380 	call	17838 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d944:	d0a71517 	ldw	r2,-25516(gp)
    d948:	d0e71617 	ldw	r3,-25512(gp)
    d94c:	d1271717 	ldw	r4,-25508(gp)
    d950:	200d883a 	mov	r6,r4
    d954:	180b883a 	mov	r5,r3
    d958:	1009883a 	mov	r4,r2
    d95c:	00009a40 	call	9a4 <main>
    d960:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d964:	01000044 	movi	r4,1
    d968:	000d3f40 	call	d3f4 <close>
  exit (result);
    d96c:	e13ffb17 	ldw	r4,-20(fp)
    d970:	001784c0 	call	1784c <exit>

0000d974 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d974:	defffe04 	addi	sp,sp,-8
    d978:	dfc00115 	stw	ra,4(sp)
    d97c:	df000015 	stw	fp,0(sp)
    d980:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d984:	d0a00b17 	ldw	r2,-32724(gp)
    d988:	10000326 	beq	r2,zero,d998 <alt_get_errno+0x24>
    d98c:	d0a00b17 	ldw	r2,-32724(gp)
    d990:	103ee83a 	callr	r2
    d994:	00000106 	br	d99c <alt_get_errno+0x28>
    d998:	d0a71004 	addi	r2,gp,-25536
}
    d99c:	e037883a 	mov	sp,fp
    d9a0:	dfc00117 	ldw	ra,4(sp)
    d9a4:	df000017 	ldw	fp,0(sp)
    d9a8:	dec00204 	addi	sp,sp,8
    d9ac:	f800283a 	ret

0000d9b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d9b0:	defff904 	addi	sp,sp,-28
    d9b4:	dfc00615 	stw	ra,24(sp)
    d9b8:	df000515 	stw	fp,20(sp)
    d9bc:	df000504 	addi	fp,sp,20
    d9c0:	e13ffd15 	stw	r4,-12(fp)
    d9c4:	e17ffe15 	stw	r5,-8(fp)
    d9c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9cc:	e0bffd17 	ldw	r2,-12(fp)
    d9d0:	10000616 	blt	r2,zero,d9ec <read+0x3c>
    d9d4:	e0bffd17 	ldw	r2,-12(fp)
    d9d8:	10c00324 	muli	r3,r2,12
    d9dc:	008000b4 	movhi	r2,2
    d9e0:	10a27704 	addi	r2,r2,-30244
    d9e4:	1885883a 	add	r2,r3,r2
    d9e8:	00000106 	br	d9f0 <read+0x40>
    d9ec:	0005883a 	mov	r2,zero
    d9f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d9f4:	e0bffb17 	ldw	r2,-20(fp)
    d9f8:	10002226 	beq	r2,zero,da84 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d9fc:	e0bffb17 	ldw	r2,-20(fp)
    da00:	10800217 	ldw	r2,8(r2)
    da04:	108000cc 	andi	r2,r2,3
    da08:	10800060 	cmpeqi	r2,r2,1
    da0c:	1000181e 	bne	r2,zero,da70 <read+0xc0>
        (fd->dev->read))
    da10:	e0bffb17 	ldw	r2,-20(fp)
    da14:	10800017 	ldw	r2,0(r2)
    da18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    da1c:	10001426 	beq	r2,zero,da70 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    da20:	e0bffb17 	ldw	r2,-20(fp)
    da24:	10800017 	ldw	r2,0(r2)
    da28:	10800517 	ldw	r2,20(r2)
    da2c:	e0ffff17 	ldw	r3,-4(fp)
    da30:	180d883a 	mov	r6,r3
    da34:	e17ffe17 	ldw	r5,-8(fp)
    da38:	e13ffb17 	ldw	r4,-20(fp)
    da3c:	103ee83a 	callr	r2
    da40:	e0bffc15 	stw	r2,-16(fp)
    da44:	e0bffc17 	ldw	r2,-16(fp)
    da48:	1000070e 	bge	r2,zero,da68 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    da4c:	000d9740 	call	d974 <alt_get_errno>
    da50:	1007883a 	mov	r3,r2
    da54:	e0bffc17 	ldw	r2,-16(fp)
    da58:	0085c83a 	sub	r2,zero,r2
    da5c:	18800015 	stw	r2,0(r3)
          return -1;
    da60:	00bfffc4 	movi	r2,-1
    da64:	00000c06 	br	da98 <read+0xe8>
        }
        return rval;
    da68:	e0bffc17 	ldw	r2,-16(fp)
    da6c:	00000a06 	br	da98 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    da70:	000d9740 	call	d974 <alt_get_errno>
    da74:	1007883a 	mov	r3,r2
    da78:	00800344 	movi	r2,13
    da7c:	18800015 	stw	r2,0(r3)
    da80:	00000406 	br	da94 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    da84:	000d9740 	call	d974 <alt_get_errno>
    da88:	1007883a 	mov	r3,r2
    da8c:	00801444 	movi	r2,81
    da90:	18800015 	stw	r2,0(r3)
  }
  return -1;
    da94:	00bfffc4 	movi	r2,-1
}
    da98:	e037883a 	mov	sp,fp
    da9c:	dfc00117 	ldw	ra,4(sp)
    daa0:	df000017 	ldw	fp,0(sp)
    daa4:	dec00204 	addi	sp,sp,8
    daa8:	f800283a 	ret

0000daac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    daac:	defffe04 	addi	sp,sp,-8
    dab0:	df000115 	stw	fp,4(sp)
    dab4:	df000104 	addi	fp,sp,4
    dab8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    dabc:	e0bfff17 	ldw	r2,-4(fp)
    dac0:	108000d0 	cmplti	r2,r2,3
    dac4:	10000d1e 	bne	r2,zero,dafc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    dac8:	008000b4 	movhi	r2,2
    dacc:	10a27704 	addi	r2,r2,-30244
    dad0:	e0ffff17 	ldw	r3,-4(fp)
    dad4:	18c00324 	muli	r3,r3,12
    dad8:	10c5883a 	add	r2,r2,r3
    dadc:	10800204 	addi	r2,r2,8
    dae0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dae4:	008000b4 	movhi	r2,2
    dae8:	10a27704 	addi	r2,r2,-30244
    daec:	e0ffff17 	ldw	r3,-4(fp)
    daf0:	18c00324 	muli	r3,r3,12
    daf4:	10c5883a 	add	r2,r2,r3
    daf8:	10000015 	stw	zero,0(r2)
  }
}
    dafc:	0001883a 	nop
    db00:	e037883a 	mov	sp,fp
    db04:	df000017 	ldw	fp,0(sp)
    db08:	dec00104 	addi	sp,sp,4
    db0c:	f800283a 	ret

0000db10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    db10:	defff904 	addi	sp,sp,-28
    db14:	df000615 	stw	fp,24(sp)
    db18:	df000604 	addi	fp,sp,24
    db1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db20:	0005303a 	rdctl	r2,status
    db24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db28:	e0fffe17 	ldw	r3,-8(fp)
    db2c:	00bfff84 	movi	r2,-2
    db30:	1884703a 	and	r2,r3,r2
    db34:	1001703a 	wrctl	status,r2
  
  return context;
    db38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    db3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    db40:	d0a00c17 	ldw	r2,-32720(gp)
    db44:	10c000c4 	addi	r3,r2,3
    db48:	00bfff04 	movi	r2,-4
    db4c:	1884703a 	and	r2,r3,r2
    db50:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    db54:	d0e00c17 	ldw	r3,-32720(gp)
    db58:	e0bfff17 	ldw	r2,-4(fp)
    db5c:	1887883a 	add	r3,r3,r2
    db60:	00810034 	movhi	r2,1024
    db64:	10800004 	addi	r2,r2,0
    db68:	10c0062e 	bgeu	r2,r3,db84 <sbrk+0x74>
    db6c:	e0bffb17 	ldw	r2,-20(fp)
    db70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db74:	e0bffa17 	ldw	r2,-24(fp)
    db78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    db7c:	00bfffc4 	movi	r2,-1
    db80:	00000b06 	br	dbb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    db84:	d0a00c17 	ldw	r2,-32720(gp)
    db88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    db8c:	d0e00c17 	ldw	r3,-32720(gp)
    db90:	e0bfff17 	ldw	r2,-4(fp)
    db94:	1885883a 	add	r2,r3,r2
    db98:	d0a00c15 	stw	r2,-32720(gp)
    db9c:	e0bffb17 	ldw	r2,-20(fp)
    dba0:	e0bffc15 	stw	r2,-16(fp)
    dba4:	e0bffc17 	ldw	r2,-16(fp)
    dba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dbac:	e0bffd17 	ldw	r2,-12(fp)
} 
    dbb0:	e037883a 	mov	sp,fp
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00104 	addi	sp,sp,4
    dbbc:	f800283a 	ret

0000dbc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dbc0:	defffe04 	addi	sp,sp,-8
    dbc4:	dfc00115 	stw	ra,4(sp)
    dbc8:	df000015 	stw	fp,0(sp)
    dbcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dbd0:	d0a00b17 	ldw	r2,-32724(gp)
    dbd4:	10000326 	beq	r2,zero,dbe4 <alt_get_errno+0x24>
    dbd8:	d0a00b17 	ldw	r2,-32724(gp)
    dbdc:	103ee83a 	callr	r2
    dbe0:	00000106 	br	dbe8 <alt_get_errno+0x28>
    dbe4:	d0a71004 	addi	r2,gp,-25536
}
    dbe8:	e037883a 	mov	sp,fp
    dbec:	dfc00117 	ldw	ra,4(sp)
    dbf0:	df000017 	ldw	fp,0(sp)
    dbf4:	dec00204 	addi	sp,sp,8
    dbf8:	f800283a 	ret

0000dbfc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dbfc:	defff904 	addi	sp,sp,-28
    dc00:	dfc00615 	stw	ra,24(sp)
    dc04:	df000515 	stw	fp,20(sp)
    dc08:	df000504 	addi	fp,sp,20
    dc0c:	e13ffd15 	stw	r4,-12(fp)
    dc10:	e17ffe15 	stw	r5,-8(fp)
    dc14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dc18:	e0bffd17 	ldw	r2,-12(fp)
    dc1c:	10000616 	blt	r2,zero,dc38 <write+0x3c>
    dc20:	e0bffd17 	ldw	r2,-12(fp)
    dc24:	10c00324 	muli	r3,r2,12
    dc28:	008000b4 	movhi	r2,2
    dc2c:	10a27704 	addi	r2,r2,-30244
    dc30:	1885883a 	add	r2,r3,r2
    dc34:	00000106 	br	dc3c <write+0x40>
    dc38:	0005883a 	mov	r2,zero
    dc3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dc40:	e0bffb17 	ldw	r2,-20(fp)
    dc44:	10002126 	beq	r2,zero,dccc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dc48:	e0bffb17 	ldw	r2,-20(fp)
    dc4c:	10800217 	ldw	r2,8(r2)
    dc50:	108000cc 	andi	r2,r2,3
    dc54:	10001826 	beq	r2,zero,dcb8 <write+0xbc>
    dc58:	e0bffb17 	ldw	r2,-20(fp)
    dc5c:	10800017 	ldw	r2,0(r2)
    dc60:	10800617 	ldw	r2,24(r2)
    dc64:	10001426 	beq	r2,zero,dcb8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dc68:	e0bffb17 	ldw	r2,-20(fp)
    dc6c:	10800017 	ldw	r2,0(r2)
    dc70:	10800617 	ldw	r2,24(r2)
    dc74:	e0ffff17 	ldw	r3,-4(fp)
    dc78:	180d883a 	mov	r6,r3
    dc7c:	e17ffe17 	ldw	r5,-8(fp)
    dc80:	e13ffb17 	ldw	r4,-20(fp)
    dc84:	103ee83a 	callr	r2
    dc88:	e0bffc15 	stw	r2,-16(fp)
    dc8c:	e0bffc17 	ldw	r2,-16(fp)
    dc90:	1000070e 	bge	r2,zero,dcb0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    dc94:	000dbc00 	call	dbc0 <alt_get_errno>
    dc98:	1007883a 	mov	r3,r2
    dc9c:	e0bffc17 	ldw	r2,-16(fp)
    dca0:	0085c83a 	sub	r2,zero,r2
    dca4:	18800015 	stw	r2,0(r3)
        return -1;
    dca8:	00bfffc4 	movi	r2,-1
    dcac:	00000c06 	br	dce0 <write+0xe4>
      }
      return rval;
    dcb0:	e0bffc17 	ldw	r2,-16(fp)
    dcb4:	00000a06 	br	dce0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dcb8:	000dbc00 	call	dbc0 <alt_get_errno>
    dcbc:	1007883a 	mov	r3,r2
    dcc0:	00800344 	movi	r2,13
    dcc4:	18800015 	stw	r2,0(r3)
    dcc8:	00000406 	br	dcdc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dccc:	000dbc00 	call	dbc0 <alt_get_errno>
    dcd0:	1007883a 	mov	r3,r2
    dcd4:	00801444 	movi	r2,81
    dcd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dcdc:	00bfffc4 	movi	r2,-1
}
    dce0:	e037883a 	mov	sp,fp
    dce4:	dfc00117 	ldw	ra,4(sp)
    dce8:	df000017 	ldw	fp,0(sp)
    dcec:	dec00204 	addi	sp,sp,8
    dcf0:	f800283a 	ret

0000dcf4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    dcf4:	deffdf04 	addi	sp,sp,-132
    dcf8:	dfc02015 	stw	ra,128(sp)
    dcfc:	df001f15 	stw	fp,124(sp)
    dd00:	df001f04 	addi	fp,sp,124
    dd04:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    dd08:	e0bfe204 	addi	r2,fp,-120
    dd0c:	100b883a 	mov	r5,r2
    dd10:	01003fc4 	movi	r4,255
    dd14:	001514c0 	call	1514c <OSTaskQuery>
    dd18:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    dd1c:	e0bffe83 	ldbu	r2,-6(fp)
    dd20:	10803fcc 	andi	r2,r2,255
    dd24:	10001e1e 	bne	r2,zero,dda0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    dd28:	e0bfee83 	ldbu	r2,-70(fp)
    dd2c:	10803fcc 	andi	r2,r2,255
    dd30:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    dd34:	d0a71917 	ldw	r2,-25500(gp)
    dd38:	e0fffd04 	addi	r3,fp,-12
    dd3c:	180b883a 	mov	r5,r3
    dd40:	1009883a 	mov	r4,r2
    dd44:	00139640 	call	13964 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    dd48:	e0bffe43 	ldbu	r2,-7(fp)
    dd4c:	10803fcc 	andi	r2,r2,255
    dd50:	10000726 	beq	r2,zero,dd70 <__env_lock+0x7c>
    dd54:	d0a00d17 	ldw	r2,-32716(gp)
    dd58:	e0ffe117 	ldw	r3,-124(fp)
    dd5c:	1880041e 	bne	r3,r2,dd70 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    dd60:	d0a71817 	ldw	r2,-25504(gp)
    dd64:	10800044 	addi	r2,r2,1
    dd68:	d0a71815 	stw	r2,-25504(gp)
    dd6c:	00000a06 	br	dd98 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    dd70:	d0a71917 	ldw	r2,-25500(gp)
    dd74:	e0fffe84 	addi	r3,fp,-6
    dd78:	180d883a 	mov	r6,r3
    dd7c:	000b883a 	mov	r5,zero
    dd80:	1009883a 	mov	r4,r2
    dd84:	00134dc0 	call	134dc <OSSemPend>
    locks  = 1;
    dd88:	00800044 	movi	r2,1
    dd8c:	d0a71815 	stw	r2,-25504(gp)
    lockid = id;
    dd90:	e0bfe117 	ldw	r2,-124(fp)
    dd94:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    dd98:	0001883a 	nop
    dd9c:	00000106 	br	dda4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    dda0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    dda4:	e037883a 	mov	sp,fp
    dda8:	dfc00117 	ldw	ra,4(sp)
    ddac:	df000017 	ldw	fp,0(sp)
    ddb0:	dec00204 	addi	sp,sp,8
    ddb4:	f800283a 	ret

0000ddb8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    ddb8:	defffd04 	addi	sp,sp,-12
    ddbc:	dfc00215 	stw	ra,8(sp)
    ddc0:	df000115 	stw	fp,4(sp)
    ddc4:	df000104 	addi	fp,sp,4
    ddc8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    ddcc:	d0a71817 	ldw	r2,-25504(gp)
    ddd0:	10000b26 	beq	r2,zero,de00 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    ddd4:	d0a71817 	ldw	r2,-25504(gp)
    ddd8:	10bfffc4 	addi	r2,r2,-1
    dddc:	d0a71815 	stw	r2,-25504(gp)
    dde0:	d0a71817 	ldw	r2,-25504(gp)
    dde4:	1000071e 	bne	r2,zero,de04 <__env_unlock+0x4c>
  {
    lockid = -1;
    dde8:	00bfffc4 	movi	r2,-1
    ddec:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    ddf0:	d0a71917 	ldw	r2,-25500(gp)
    ddf4:	1009883a 	mov	r4,r2
    ddf8:	00138540 	call	13854 <OSSemPost>
    ddfc:	00000106 	br	de04 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    de00:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    de04:	e037883a 	mov	sp,fp
    de08:	dfc00117 	ldw	ra,4(sp)
    de0c:	df000017 	ldw	fp,0(sp)
    de10:	dec00204 	addi	sp,sp,8
    de14:	f800283a 	ret

0000de18 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    de18:	deffdb04 	addi	sp,sp,-148
    de1c:	dfc02415 	stw	ra,144(sp)
    de20:	df002315 	stw	fp,140(sp)
    de24:	df002304 	addi	fp,sp,140
    de28:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    de2c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    de30:	d0a71c43 	ldbu	r2,-25487(gp)
    de34:	10803fcc 	andi	r2,r2,255
    de38:	10800060 	cmpeqi	r2,r2,1
    de3c:	10003626 	beq	r2,zero,df18 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    de40:	e0bfe204 	addi	r2,fp,-120
    de44:	100b883a 	mov	r5,r2
    de48:	01003fc4 	movi	r4,255
    de4c:	001514c0 	call	1514c <OSTaskQuery>
    de50:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    de54:	e0bffe83 	ldbu	r2,-6(fp)
    de58:	10803fcc 	andi	r2,r2,255
    de5c:	1000301e 	bne	r2,zero,df20 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    de60:	e0bfee83 	ldbu	r2,-70(fp)
    de64:	10803fcc 	andi	r2,r2,255
    de68:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    de6c:	d0a71b17 	ldw	r2,-25492(gp)
    de70:	e0fffd04 	addi	r3,fp,-12
    de74:	180b883a 	mov	r5,r3
    de78:	1009883a 	mov	r4,r2
    de7c:	00139640 	call	13964 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de80:	0005303a 	rdctl	r2,status
    de84:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de88:	e0ffe117 	ldw	r3,-124(fp)
    de8c:	00bfff84 	movi	r2,-2
    de90:	1884703a 	and	r2,r3,r2
    de94:	1001703a 	wrctl	status,r2
  
  return context;
    de98:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    de9c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    dea0:	e0bffd0b 	ldhu	r2,-12(fp)
    dea4:	10bfffcc 	andi	r2,r2,65535
    dea8:	10000b1e 	bne	r2,zero,ded8 <__malloc_lock+0xc0>
    deac:	d0a00e17 	ldw	r2,-32712(gp)
    deb0:	e0ffde17 	ldw	r3,-136(fp)
    deb4:	1880081e 	bne	r3,r2,ded8 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    deb8:	d0a71a17 	ldw	r2,-25496(gp)
    debc:	10800044 	addi	r2,r2,1
    dec0:	d0a71a15 	stw	r2,-25496(gp)
    dec4:	e0bfdd17 	ldw	r2,-140(fp)
    dec8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    decc:	e0bfdf17 	ldw	r2,-132(fp)
    ded0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ded4:	00000e06 	br	df10 <__malloc_lock+0xf8>
    ded8:	e0bfdd17 	ldw	r2,-140(fp)
    dedc:	e0bfe015 	stw	r2,-128(fp)
    dee0:	e0bfe017 	ldw	r2,-128(fp)
    dee4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    dee8:	d0a71b17 	ldw	r2,-25492(gp)
    deec:	e0fffe84 	addi	r3,fp,-6
    def0:	180d883a 	mov	r6,r3
    def4:	000b883a 	mov	r5,zero
    def8:	1009883a 	mov	r4,r2
    defc:	00134dc0 	call	134dc <OSSemPend>
    locks  = 1;
    df00:	00800044 	movi	r2,1
    df04:	d0a71a15 	stw	r2,-25496(gp)
    lockid = id;
    df08:	e0bfde17 	ldw	r2,-136(fp)
    df0c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    df10:	0001883a 	nop
    df14:	00000306 	br	df24 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    df18:	0001883a 	nop
    df1c:	00000106 	br	df24 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    df20:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    df24:	e037883a 	mov	sp,fp
    df28:	dfc00117 	ldw	ra,4(sp)
    df2c:	df000017 	ldw	fp,0(sp)
    df30:	dec00204 	addi	sp,sp,8
    df34:	f800283a 	ret

0000df38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    df38:	defff804 	addi	sp,sp,-32
    df3c:	dfc00715 	stw	ra,28(sp)
    df40:	df000615 	stw	fp,24(sp)
    df44:	df000604 	addi	fp,sp,24
    df48:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    df4c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    df50:	d0a71c43 	ldbu	r2,-25487(gp)
    df54:	10803fcc 	andi	r2,r2,255
    df58:	10800060 	cmpeqi	r2,r2,1
    df5c:	10002326 	beq	r2,zero,dfec <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df60:	0005303a 	rdctl	r2,status
    df64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df68:	e0fffe17 	ldw	r3,-8(fp)
    df6c:	00bfff84 	movi	r2,-2
    df70:	1884703a 	and	r2,r3,r2
    df74:	1001703a 	wrctl	status,r2
  
  return context;
    df78:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    df7c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    df80:	d0a71a17 	ldw	r2,-25496(gp)
    df84:	1000051e 	bne	r2,zero,df9c <__malloc_unlock+0x64>
    df88:	e0bffa17 	ldw	r2,-24(fp)
    df8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df90:	e0bffb17 	ldw	r2,-20(fp)
    df94:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    df98:	00001506 	br	dff0 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    df9c:	d0a71a17 	ldw	r2,-25496(gp)
    dfa0:	10bfffc4 	addi	r2,r2,-1
    dfa4:	d0a71a15 	stw	r2,-25496(gp)
    dfa8:	d0a71a17 	ldw	r2,-25496(gp)
    dfac:	10000a1e 	bne	r2,zero,dfd8 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    dfb0:	00bfffc4 	movi	r2,-1
    dfb4:	d0a00e15 	stw	r2,-32712(gp)
    dfb8:	e0bffa17 	ldw	r2,-24(fp)
    dfbc:	e0bffc15 	stw	r2,-16(fp)
    dfc0:	e0bffc17 	ldw	r2,-16(fp)
    dfc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    dfc8:	d0a71b17 	ldw	r2,-25492(gp)
    dfcc:	1009883a 	mov	r4,r2
    dfd0:	00138540 	call	13854 <OSSemPost>
    dfd4:	00000606 	br	dff0 <__malloc_unlock+0xb8>
    dfd8:	e0bffa17 	ldw	r2,-24(fp)
    dfdc:	e0bffd15 	stw	r2,-12(fp)
    dfe0:	e0bffd17 	ldw	r2,-12(fp)
    dfe4:	1001703a 	wrctl	status,r2
    dfe8:	00000106 	br	dff0 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    dfec:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dff0:	e037883a 	mov	sp,fp
    dff4:	dfc00117 	ldw	ra,4(sp)
    dff8:	df000017 	ldw	fp,0(sp)
    dffc:	dec00204 	addi	sp,sp,8
    e000:	f800283a 	ret

0000e004 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e004:	defff704 	addi	sp,sp,-36
    e008:	dfc00815 	stw	ra,32(sp)
    e00c:	df000715 	stw	fp,28(sp)
    e010:	df000704 	addi	fp,sp,28
    e014:	e13ffd15 	stw	r4,-12(fp)
    e018:	e17ffe15 	stw	r5,-8(fp)
    e01c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e020:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e024:	e0bfff17 	ldw	r2,-4(fp)
    e028:	1000021e 	bne	r2,zero,e034 <OSEventNameGet+0x30>
        return (0);
    e02c:	0005883a 	mov	r2,zero
    e030:	00003706 	br	e110 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e034:	e0bffd17 	ldw	r2,-12(fp)
    e038:	1000051e 	bne	r2,zero,e050 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e03c:	e0bfff17 	ldw	r2,-4(fp)
    e040:	00c00104 	movi	r3,4
    e044:	10c00005 	stb	r3,0(r2)
        return (0);
    e048:	0005883a 	mov	r2,zero
    e04c:	00003006 	br	e110 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e050:	e0bffe17 	ldw	r2,-8(fp)
    e054:	1000051e 	bne	r2,zero,e06c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e058:	e0bfff17 	ldw	r2,-4(fp)
    e05c:	00c00304 	movi	r3,12
    e060:	10c00005 	stb	r3,0(r2)
        return (0);
    e064:	0005883a 	mov	r2,zero
    e068:	00002906 	br	e110 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e06c:	d0a72a03 	ldbu	r2,-25432(gp)
    e070:	10803fcc 	andi	r2,r2,255
    e074:	10000526 	beq	r2,zero,e08c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e078:	e0bfff17 	ldw	r2,-4(fp)
    e07c:	00c00444 	movi	r3,17
    e080:	10c00005 	stb	r3,0(r2)
        return (0);
    e084:	0005883a 	mov	r2,zero
    e088:	00002106 	br	e110 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e08c:	e0bffd17 	ldw	r2,-12(fp)
    e090:	10800003 	ldbu	r2,0(r2)
    e094:	10803fcc 	andi	r2,r2,255
    e098:	10bfffc4 	addi	r2,r2,-1
    e09c:	10800128 	cmpgeui	r2,r2,4
    e0a0:	10000526 	beq	r2,zero,e0b8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e0a4:	e0bfff17 	ldw	r2,-4(fp)
    e0a8:	00c00044 	movi	r3,1
    e0ac:	10c00005 	stb	r3,0(r2)
             return (0);
    e0b0:	0005883a 	mov	r2,zero
    e0b4:	00001606 	br	e110 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e0b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0bc:	0005303a 	rdctl	r2,status
    e0c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0c4:	e0fffb17 	ldw	r3,-20(fp)
    e0c8:	00bfff84 	movi	r2,-2
    e0cc:	1884703a 	and	r2,r3,r2
    e0d0:	1001703a 	wrctl	status,r2
  
  return context;
    e0d4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e0d8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e0dc:	e0bffd17 	ldw	r2,-12(fp)
    e0e0:	10800384 	addi	r2,r2,14
    e0e4:	100b883a 	mov	r5,r2
    e0e8:	e13ffe17 	ldw	r4,-8(fp)
    e0ec:	000fa880 	call	fa88 <OS_StrCopy>
    e0f0:	e0bffa05 	stb	r2,-24(fp)
    e0f4:	e0bff917 	ldw	r2,-28(fp)
    e0f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0fc:	e0bffc17 	ldw	r2,-16(fp)
    e100:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e104:	e0bfff17 	ldw	r2,-4(fp)
    e108:	10000005 	stb	zero,0(r2)
    return (len);
    e10c:	e0bffa03 	ldbu	r2,-24(fp)
}
    e110:	e037883a 	mov	sp,fp
    e114:	dfc00117 	ldw	ra,4(sp)
    e118:	df000017 	ldw	fp,0(sp)
    e11c:	dec00204 	addi	sp,sp,8
    e120:	f800283a 	ret

0000e124 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e124:	defff604 	addi	sp,sp,-40
    e128:	dfc00915 	stw	ra,36(sp)
    e12c:	df000815 	stw	fp,32(sp)
    e130:	df000804 	addi	fp,sp,32
    e134:	e13ffd15 	stw	r4,-12(fp)
    e138:	e17ffe15 	stw	r5,-8(fp)
    e13c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e140:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e144:	e0bfff17 	ldw	r2,-4(fp)
    e148:	10004026 	beq	r2,zero,e24c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e14c:	e0bffd17 	ldw	r2,-12(fp)
    e150:	1000041e 	bne	r2,zero,e164 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e154:	e0bfff17 	ldw	r2,-4(fp)
    e158:	00c00104 	movi	r3,4
    e15c:	10c00005 	stb	r3,0(r2)
        return;
    e160:	00003b06 	br	e250 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e164:	e0bffe17 	ldw	r2,-8(fp)
    e168:	1000041e 	bne	r2,zero,e17c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e16c:	e0bfff17 	ldw	r2,-4(fp)
    e170:	00c00304 	movi	r3,12
    e174:	10c00005 	stb	r3,0(r2)
        return;
    e178:	00003506 	br	e250 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e17c:	d0a72a03 	ldbu	r2,-25432(gp)
    e180:	10803fcc 	andi	r2,r2,255
    e184:	10000426 	beq	r2,zero,e198 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e188:	e0bfff17 	ldw	r2,-4(fp)
    e18c:	00c00484 	movi	r3,18
    e190:	10c00005 	stb	r3,0(r2)
        return;
    e194:	00002e06 	br	e250 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e198:	e0bffd17 	ldw	r2,-12(fp)
    e19c:	10800003 	ldbu	r2,0(r2)
    e1a0:	10803fcc 	andi	r2,r2,255
    e1a4:	10bfffc4 	addi	r2,r2,-1
    e1a8:	10800128 	cmpgeui	r2,r2,4
    e1ac:	10000426 	beq	r2,zero,e1c0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e1b0:	e0bfff17 	ldw	r2,-4(fp)
    e1b4:	00c00044 	movi	r3,1
    e1b8:	10c00005 	stb	r3,0(r2)
             return;
    e1bc:	00002406 	br	e250 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e1c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1c4:	0005303a 	rdctl	r2,status
    e1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1cc:	e0fffc17 	ldw	r3,-16(fp)
    e1d0:	00bfff84 	movi	r2,-2
    e1d4:	1884703a 	and	r2,r3,r2
    e1d8:	1001703a 	wrctl	status,r2
  
  return context;
    e1dc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e1e0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e1e4:	e13ffe17 	ldw	r4,-8(fp)
    e1e8:	000fafc0 	call	fafc <OS_StrLen>
    e1ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e1f0:	e0bffa03 	ldbu	r2,-24(fp)
    e1f4:	10800830 	cmpltui	r2,r2,32
    e1f8:	1000081e 	bne	r2,zero,e21c <OSEventNameSet+0xf8>
    e1fc:	e0bff817 	ldw	r2,-32(fp)
    e200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e204:	e0bff917 	ldw	r2,-28(fp)
    e208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e20c:	e0bfff17 	ldw	r2,-4(fp)
    e210:	00c002c4 	movi	r3,11
    e214:	10c00005 	stb	r3,0(r2)
        return;
    e218:	00000d06 	br	e250 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e21c:	e0bffd17 	ldw	r2,-12(fp)
    e220:	10800384 	addi	r2,r2,14
    e224:	e17ffe17 	ldw	r5,-8(fp)
    e228:	1009883a 	mov	r4,r2
    e22c:	000fa880 	call	fa88 <OS_StrCopy>
    e230:	e0bff817 	ldw	r2,-32(fp)
    e234:	e0bffb15 	stw	r2,-20(fp)
    e238:	e0bffb17 	ldw	r2,-20(fp)
    e23c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e240:	e0bfff17 	ldw	r2,-4(fp)
    e244:	10000005 	stb	zero,0(r2)
    e248:	00000106 	br	e250 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e24c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e250:	e037883a 	mov	sp,fp
    e254:	dfc00117 	ldw	ra,4(sp)
    e258:	df000017 	ldw	fp,0(sp)
    e25c:	dec00204 	addi	sp,sp,8
    e260:	f800283a 	ret

0000e264 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e264:	deffed04 	addi	sp,sp,-76
    e268:	dfc01215 	stw	ra,72(sp)
    e26c:	df001115 	stw	fp,68(sp)
    e270:	df001104 	addi	fp,sp,68
    e274:	e13ffc15 	stw	r4,-16(fp)
    e278:	e17ffd15 	stw	r5,-12(fp)
    e27c:	e1bffe15 	stw	r6,-8(fp)
    e280:	3805883a 	mov	r2,r7
    e284:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e288:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e28c:	e0800217 	ldw	r2,8(fp)
    e290:	1000021e 	bne	r2,zero,e29c <OSEventPendMulti+0x38>
        return (0);
    e294:	0005883a 	mov	r2,zero
    e298:	00017106 	br	e860 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e29c:	e0bffc17 	ldw	r2,-16(fp)
    e2a0:	1000051e 	bne	r2,zero,e2b8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e2a4:	e0800217 	ldw	r2,8(fp)
    e2a8:	00c00104 	movi	r3,4
    e2ac:	10c00005 	stb	r3,0(r2)
        return (0);
    e2b0:	0005883a 	mov	r2,zero
    e2b4:	00016a06 	br	e860 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e2b8:	e0bffd17 	ldw	r2,-12(fp)
    e2bc:	1000051e 	bne	r2,zero,e2d4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e2c0:	e0800217 	ldw	r2,8(fp)
    e2c4:	00c00104 	movi	r3,4
    e2c8:	10c00005 	stb	r3,0(r2)
        return (0);
    e2cc:	0005883a 	mov	r2,zero
    e2d0:	00016306 	br	e860 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	1000051e 	bne	r2,zero,e2f0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e2dc:	e0800217 	ldw	r2,8(fp)
    e2e0:	00c00104 	movi	r3,4
    e2e4:	10c00005 	stb	r3,0(r2)
        return (0);
    e2e8:	0005883a 	mov	r2,zero
    e2ec:	00015c06 	br	e860 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e2f0:	e0bffd17 	ldw	r2,-12(fp)
    e2f4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e2f8:	e0bffc17 	ldw	r2,-16(fp)
    e2fc:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e300:	e0bfef17 	ldw	r2,-68(fp)
    e304:	10800017 	ldw	r2,0(r2)
    e308:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e30c:	00001906 	br	e374 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e310:	e0bff017 	ldw	r2,-64(fp)
    e314:	10800003 	ldbu	r2,0(r2)
    e318:	10803fcc 	andi	r2,r2,255
    e31c:	10c000a0 	cmpeqi	r3,r2,2
    e320:	1800091e 	bne	r3,zero,e348 <OSEventPendMulti+0xe4>
    e324:	10c000e0 	cmpeqi	r3,r2,3
    e328:	1800091e 	bne	r3,zero,e350 <OSEventPendMulti+0xec>
    e32c:	10800060 	cmpeqi	r2,r2,1
    e330:	1000091e 	bne	r2,zero,e358 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e334:	e0800217 	ldw	r2,8(fp)
    e338:	00c00044 	movi	r3,1
    e33c:	10c00005 	stb	r3,0(r2)
                 return (0);
    e340:	0005883a 	mov	r2,zero
    e344:	00014606 	br	e860 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e348:	0001883a 	nop
    e34c:	00000306 	br	e35c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e350:	0001883a 	nop
    e354:	00000106 	br	e35c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e358:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e35c:	e0bfef17 	ldw	r2,-68(fp)
    e360:	10800104 	addi	r2,r2,4
    e364:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e368:	e0bfef17 	ldw	r2,-68(fp)
    e36c:	10800017 	ldw	r2,0(r2)
    e370:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e374:	e0bff017 	ldw	r2,-64(fp)
    e378:	103fe51e 	bne	r2,zero,e310 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e37c:	d0a72a03 	ldbu	r2,-25432(gp)
    e380:	10803fcc 	andi	r2,r2,255
    e384:	10000526 	beq	r2,zero,e39c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e388:	e0800217 	ldw	r2,8(fp)
    e38c:	00c00084 	movi	r3,2
    e390:	10c00005 	stb	r3,0(r2)
        return (0);
    e394:	0005883a 	mov	r2,zero
    e398:	00013106 	br	e860 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e39c:	d0a71c03 	ldbu	r2,-25488(gp)
    e3a0:	10803fcc 	andi	r2,r2,255
    e3a4:	10000526 	beq	r2,zero,e3bc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e3a8:	e0800217 	ldw	r2,8(fp)
    e3ac:	00c00344 	movi	r3,13
    e3b0:	10c00005 	stb	r3,0(r2)
        return (0);
    e3b4:	0005883a 	mov	r2,zero
    e3b8:	00012906 	br	e860 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3bc:	0005303a 	rdctl	r2,status
    e3c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3c4:	e0fffb17 	ldw	r3,-20(fp)
    e3c8:	00bfff84 	movi	r2,-2
    e3cc:	1884703a 	and	r2,r3,r2
    e3d0:	1001703a 	wrctl	status,r2
  
  return context;
    e3d4:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e3d8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e3dc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e3e0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e3e4:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e3e8:	e0bffc17 	ldw	r2,-16(fp)
    e3ec:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e3f0:	e0bfef17 	ldw	r2,-68(fp)
    e3f4:	10800017 	ldw	r2,0(r2)
    e3f8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e3fc:	00008106 	br	e604 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e400:	e0bff017 	ldw	r2,-64(fp)
    e404:	10800003 	ldbu	r2,0(r2)
    e408:	10803fcc 	andi	r2,r2,255
    e40c:	10c000a0 	cmpeqi	r3,r2,2
    e410:	18003c1e 	bne	r3,zero,e504 <OSEventPendMulti+0x2a0>
    e414:	10c000e0 	cmpeqi	r3,r2,3
    e418:	1800031e 	bne	r3,zero,e428 <OSEventPendMulti+0x1c4>
    e41c:	10800060 	cmpeqi	r2,r2,1
    e420:	10001e1e 	bne	r2,zero,e49c <OSEventPendMulti+0x238>
    e424:	00006606 	br	e5c0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e428:	e0bff017 	ldw	r2,-64(fp)
    e42c:	1080020b 	ldhu	r2,8(r2)
    e430:	10bfffcc 	andi	r2,r2,65535
    e434:	10001526 	beq	r2,zero,e48c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e438:	e0bff017 	ldw	r2,-64(fp)
    e43c:	1080020b 	ldhu	r2,8(r2)
    e440:	10bfffc4 	addi	r2,r2,-1
    e444:	1007883a 	mov	r3,r2
    e448:	e0bff017 	ldw	r2,-64(fp)
    e44c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e450:	e0bffd17 	ldw	r2,-12(fp)
    e454:	10c00104 	addi	r3,r2,4
    e458:	e0fffd15 	stw	r3,-12(fp)
    e45c:	e0fff017 	ldw	r3,-64(fp)
    e460:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e464:	00800044 	movi	r2,1
    e468:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e46c:	e0bffe17 	ldw	r2,-8(fp)
    e470:	10c00104 	addi	r3,r2,4
    e474:	e0fffe15 	stw	r3,-8(fp)
    e478:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e47c:	e0bff18b 	ldhu	r2,-58(fp)
    e480:	10800044 	addi	r2,r2,1
    e484:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e488:	00005806 	br	e5ec <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e48c:	e0bff203 	ldbu	r2,-56(fp)
    e490:	10800054 	ori	r2,r2,1
    e494:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e498:	00005406 	br	e5ec <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e49c:	e0bff017 	ldw	r2,-64(fp)
    e4a0:	10800117 	ldw	r2,4(r2)
    e4a4:	10001326 	beq	r2,zero,e4f4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e4a8:	e0bffe17 	ldw	r2,-8(fp)
    e4ac:	10c00104 	addi	r3,r2,4
    e4b0:	e0fffe15 	stw	r3,-8(fp)
    e4b4:	e0fff017 	ldw	r3,-64(fp)
    e4b8:	18c00117 	ldw	r3,4(r3)
    e4bc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e4c0:	e0bff017 	ldw	r2,-64(fp)
    e4c4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e4c8:	e0bffd17 	ldw	r2,-12(fp)
    e4cc:	10c00104 	addi	r3,r2,4
    e4d0:	e0fffd15 	stw	r3,-12(fp)
    e4d4:	e0fff017 	ldw	r3,-64(fp)
    e4d8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e4dc:	00800044 	movi	r2,1
    e4e0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e4e4:	e0bff18b 	ldhu	r2,-58(fp)
    e4e8:	10800044 	addi	r2,r2,1
    e4ec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e4f0:	00003e06 	br	e5ec <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e4f4:	e0bff203 	ldbu	r2,-56(fp)
    e4f8:	10800094 	ori	r2,r2,2
    e4fc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e500:	00003a06 	br	e5ec <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e504:	e0bff017 	ldw	r2,-64(fp)
    e508:	10800117 	ldw	r2,4(r2)
    e50c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e510:	e0bff517 	ldw	r2,-44(fp)
    e514:	1080058b 	ldhu	r2,22(r2)
    e518:	10bfffcc 	andi	r2,r2,65535
    e51c:	10002426 	beq	r2,zero,e5b0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e520:	e0bffe17 	ldw	r2,-8(fp)
    e524:	10c00104 	addi	r3,r2,4
    e528:	e0fffe15 	stw	r3,-8(fp)
    e52c:	e0fff517 	ldw	r3,-44(fp)
    e530:	18c00417 	ldw	r3,16(r3)
    e534:	19400104 	addi	r5,r3,4
    e538:	e13ff517 	ldw	r4,-44(fp)
    e53c:	21400415 	stw	r5,16(r4)
    e540:	18c00017 	ldw	r3,0(r3)
    e544:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e548:	e0bff517 	ldw	r2,-44(fp)
    e54c:	10c00417 	ldw	r3,16(r2)
    e550:	e0bff517 	ldw	r2,-44(fp)
    e554:	10800217 	ldw	r2,8(r2)
    e558:	1880041e 	bne	r3,r2,e56c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e55c:	e0bff517 	ldw	r2,-44(fp)
    e560:	10c00117 	ldw	r3,4(r2)
    e564:	e0bff517 	ldw	r2,-44(fp)
    e568:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e56c:	e0bff517 	ldw	r2,-44(fp)
    e570:	1080058b 	ldhu	r2,22(r2)
    e574:	10bfffc4 	addi	r2,r2,-1
    e578:	1007883a 	mov	r3,r2
    e57c:	e0bff517 	ldw	r2,-44(fp)
    e580:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e584:	e0bffd17 	ldw	r2,-12(fp)
    e588:	10c00104 	addi	r3,r2,4
    e58c:	e0fffd15 	stw	r3,-12(fp)
    e590:	e0fff017 	ldw	r3,-64(fp)
    e594:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e598:	00800044 	movi	r2,1
    e59c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e5a0:	e0bff18b 	ldhu	r2,-58(fp)
    e5a4:	10800044 	addi	r2,r2,1
    e5a8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e5ac:	00000f06 	br	e5ec <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e5b0:	e0bff203 	ldbu	r2,-56(fp)
    e5b4:	10800114 	ori	r2,r2,4
    e5b8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e5bc:	00000b06 	br	e5ec <OSEventPendMulti+0x388>
    e5c0:	e0bff317 	ldw	r2,-52(fp)
    e5c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5c8:	e0bff417 	ldw	r2,-48(fp)
    e5cc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e5d0:	e0bffd17 	ldw	r2,-12(fp)
    e5d4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e5d8:	e0800217 	ldw	r2,8(fp)
    e5dc:	00c00044 	movi	r3,1
    e5e0:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e5e4:	e0bff18b 	ldhu	r2,-58(fp)
    e5e8:	00009d06 	br	e860 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e5ec:	e0bfef17 	ldw	r2,-68(fp)
    e5f0:	10800104 	addi	r2,r2,4
    e5f4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e5f8:	e0bfef17 	ldw	r2,-68(fp)
    e5fc:	10800017 	ldw	r2,0(r2)
    e600:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e604:	e0bff017 	ldw	r2,-64(fp)
    e608:	103f7d1e 	bne	r2,zero,e400 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e60c:	e0bff103 	ldbu	r2,-60(fp)
    e610:	10800058 	cmpnei	r2,r2,1
    e614:	10000a1e 	bne	r2,zero,e640 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e618:	e0bffd17 	ldw	r2,-12(fp)
    e61c:	10000015 	stw	zero,0(r2)
    e620:	e0bff317 	ldw	r2,-52(fp)
    e624:	e0bff615 	stw	r2,-40(fp)
    e628:	e0bff617 	ldw	r2,-40(fp)
    e62c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e630:	e0800217 	ldw	r2,8(fp)
    e634:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e638:	e0bff18b 	ldhu	r2,-58(fp)
    e63c:	00008806 	br	e860 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e640:	d0a72b17 	ldw	r2,-25428(gp)
    e644:	d0e72b17 	ldw	r3,-25428(gp)
    e648:	19000c03 	ldbu	r4,48(r3)
    e64c:	e0fff203 	ldbu	r3,-56(fp)
    e650:	20c6b03a 	or	r3,r4,r3
    e654:	1809883a 	mov	r4,r3
    e658:	00ffe004 	movi	r3,-128
    e65c:	20c6b03a 	or	r3,r4,r3
    e660:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e664:	d0a72b17 	ldw	r2,-25428(gp)
    e668:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e66c:	d0a72b17 	ldw	r2,-25428(gp)
    e670:	e0ffff0b 	ldhu	r3,-4(fp)
    e674:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e678:	e13ffc17 	ldw	r4,-16(fp)
    e67c:	000f1a00 	call	f1a0 <OS_EventTaskWaitMulti>
    e680:	e0bff317 	ldw	r2,-52(fp)
    e684:	e0bff915 	stw	r2,-28(fp)
    e688:	e0bff917 	ldw	r2,-28(fp)
    e68c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e690:	000f9440 	call	f944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e694:	0005303a 	rdctl	r2,status
    e698:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e69c:	e0fff717 	ldw	r3,-36(fp)
    e6a0:	00bfff84 	movi	r2,-2
    e6a4:	1884703a 	and	r2,r3,r2
    e6a8:	1001703a 	wrctl	status,r2
  
  return context;
    e6ac:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e6b0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e6b4:	d0a72b17 	ldw	r2,-25428(gp)
    e6b8:	10800c43 	ldbu	r2,49(r2)
    e6bc:	10803fcc 	andi	r2,r2,255
    e6c0:	10000226 	beq	r2,zero,e6cc <OSEventPendMulti+0x468>
    e6c4:	108000a0 	cmpeqi	r2,r2,2
    e6c8:	10001826 	beq	r2,zero,e72c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e6cc:	d0a72b17 	ldw	r2,-25428(gp)
    e6d0:	10800717 	ldw	r2,28(r2)
    e6d4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e6d8:	e0bff017 	ldw	r2,-64(fp)
    e6dc:	10000b26 	beq	r2,zero,e70c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10c00104 	addi	r3,r2,4
    e6e8:	e0fffd15 	stw	r3,-12(fp)
    e6ec:	e0fff017 	ldw	r3,-64(fp)
    e6f0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e6f4:	e0bffd17 	ldw	r2,-12(fp)
    e6f8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e6fc:	e0bff18b 	ldhu	r2,-58(fp)
    e700:	10800044 	addi	r2,r2,1
    e704:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e708:	00000d06 	br	e740 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e70c:	d0a72b17 	ldw	r2,-25428(gp)
    e710:	00c00044 	movi	r3,1
    e714:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e718:	d0a72b17 	ldw	r2,-25428(gp)
    e71c:	e17ffc17 	ldw	r5,-16(fp)
    e720:	1009883a 	mov	r4,r2
    e724:	000f3a80 	call	f3a8 <OS_EventTaskRemoveMulti>
             }
			 break;
    e728:	00000506 	br	e740 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e72c:	d0a72b17 	ldw	r2,-25428(gp)
    e730:	e17ffc17 	ldw	r5,-16(fp)
    e734:	1009883a 	mov	r4,r2
    e738:	000f3a80 	call	f3a8 <OS_EventTaskRemoveMulti>
             break;
    e73c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e740:	d0a72b17 	ldw	r2,-25428(gp)
    e744:	10800c43 	ldbu	r2,49(r2)
    e748:	10803fcc 	andi	r2,r2,255
    e74c:	10000326 	beq	r2,zero,e75c <OSEventPendMulti+0x4f8>
    e750:	108000a0 	cmpeqi	r2,r2,2
    e754:	1000231e 	bne	r2,zero,e7e4 <OSEventPendMulti+0x580>
    e758:	00002a06 	br	e804 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e75c:	e0bff017 	ldw	r2,-64(fp)
    e760:	10800003 	ldbu	r2,0(r2)
    e764:	10803fcc 	andi	r2,r2,255
    e768:	0080100e 	bge	zero,r2,e7ac <OSEventPendMulti+0x548>
    e76c:	10c000d0 	cmplti	r3,r2,3
    e770:	1800071e 	bne	r3,zero,e790 <OSEventPendMulti+0x52c>
    e774:	108000e0 	cmpeqi	r2,r2,3
    e778:	10000c26 	beq	r2,zero,e7ac <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e77c:	e0bffe17 	ldw	r2,-8(fp)
    e780:	10c00104 	addi	r3,r2,4
    e784:	e0fffe15 	stw	r3,-8(fp)
    e788:	10000015 	stw	zero,0(r2)
                      break;
    e78c:	00001206 	br	e7d8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e790:	e0bffe17 	ldw	r2,-8(fp)
    e794:	10c00104 	addi	r3,r2,4
    e798:	e0fffe15 	stw	r3,-8(fp)
    e79c:	d0e72b17 	ldw	r3,-25428(gp)
    e7a0:	18c00917 	ldw	r3,36(r3)
    e7a4:	10c00015 	stw	r3,0(r2)
                      break;
    e7a8:	00000b06 	br	e7d8 <OSEventPendMulti+0x574>
    e7ac:	e0bff317 	ldw	r2,-52(fp)
    e7b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7b4:	e0bff817 	ldw	r2,-32(fp)
    e7b8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
    e7c0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e7c4:	e0800217 	ldw	r2,8(fp)
    e7c8:	00c00044 	movi	r3,1
    e7cc:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e7d0:	e0bff18b 	ldhu	r2,-58(fp)
    e7d4:	00002206 	br	e860 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e7d8:	e0800217 	ldw	r2,8(fp)
    e7dc:	10000005 	stb	zero,0(r2)
             break;
    e7e0:	00001006 	br	e824 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e7e4:	e0bffe17 	ldw	r2,-8(fp)
    e7e8:	10c00104 	addi	r3,r2,4
    e7ec:	e0fffe15 	stw	r3,-8(fp)
    e7f0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e7f4:	e0800217 	ldw	r2,8(fp)
    e7f8:	00c00384 	movi	r3,14
    e7fc:	10c00005 	stb	r3,0(r2)
             break;
    e800:	00000806 	br	e824 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e804:	e0bffe17 	ldw	r2,-8(fp)
    e808:	10c00104 	addi	r3,r2,4
    e80c:	e0fffe15 	stw	r3,-8(fp)
    e810:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e814:	e0800217 	ldw	r2,8(fp)
    e818:	00c00284 	movi	r3,10
    e81c:	10c00005 	stb	r3,0(r2)
             break;
    e820:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e824:	d0a72b17 	ldw	r2,-25428(gp)
    e828:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e82c:	d0a72b17 	ldw	r2,-25428(gp)
    e830:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e834:	d0a72b17 	ldw	r2,-25428(gp)
    e838:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e83c:	d0a72b17 	ldw	r2,-25428(gp)
    e840:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e844:	d0a72b17 	ldw	r2,-25428(gp)
    e848:	10000915 	stw	zero,36(r2)
    e84c:	e0bff317 	ldw	r2,-52(fp)
    e850:	e0bffa15 	stw	r2,-24(fp)
    e854:	e0bffa17 	ldw	r2,-24(fp)
    e858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e85c:	e0bff18b 	ldhu	r2,-58(fp)
}
    e860:	e037883a 	mov	sp,fp
    e864:	dfc00117 	ldw	ra,4(sp)
    e868:	df000017 	ldw	fp,0(sp)
    e86c:	dec00204 	addi	sp,sp,8
    e870:	f800283a 	ret

0000e874 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e874:	defffe04 	addi	sp,sp,-8
    e878:	dfc00115 	stw	ra,4(sp)
    e87c:	df000015 	stw	fp,0(sp)
    e880:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e884:	00174a40 	call	174a4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e888:	000f5f00 	call	f5f0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e88c:	000f6380 	call	f638 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e890:	000f7a40 	call	f7a4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e894:	000f5100 	call	f510 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e898:	00116440 	call	11644 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e89c:	0011f440 	call	11f44 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e8a0:	001306c0 	call	1306c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e8a4:	000f6a40 	call	f6a4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e8a8:	000f7240 	call	f724 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e8ac:	00174c40 	call	174c4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e8b0:	00100180 	call	10018 <OSDebugInit>
#endif
}
    e8b4:	0001883a 	nop
    e8b8:	e037883a 	mov	sp,fp
    e8bc:	dfc00117 	ldw	ra,4(sp)
    e8c0:	df000017 	ldw	fp,0(sp)
    e8c4:	dec00204 	addi	sp,sp,8
    e8c8:	f800283a 	ret

0000e8cc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e8cc:	deffff04 	addi	sp,sp,-4
    e8d0:	df000015 	stw	fp,0(sp)
    e8d4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    e8d8:	d0a71c43 	ldbu	r2,-25487(gp)
    e8dc:	10803fcc 	andi	r2,r2,255
    e8e0:	10800058 	cmpnei	r2,r2,1
    e8e4:	1000071e 	bne	r2,zero,e904 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    e8e8:	d0a72a03 	ldbu	r2,-25432(gp)
    e8ec:	10803fcc 	andi	r2,r2,255
    e8f0:	10803fe0 	cmpeqi	r2,r2,255
    e8f4:	1000031e 	bne	r2,zero,e904 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e8f8:	d0a72a03 	ldbu	r2,-25432(gp)
    e8fc:	10800044 	addi	r2,r2,1
    e900:	d0a72a05 	stb	r2,-25432(gp)
        }
    }
}
    e904:	0001883a 	nop
    e908:	e037883a 	mov	sp,fp
    e90c:	df000017 	ldw	fp,0(sp)
    e910:	dec00104 	addi	sp,sp,4
    e914:	f800283a 	ret

0000e918 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e918:	defffb04 	addi	sp,sp,-20
    e91c:	dfc00415 	stw	ra,16(sp)
    e920:	df000315 	stw	fp,12(sp)
    e924:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e928:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e92c:	d0a71c43 	ldbu	r2,-25487(gp)
    e930:	10803fcc 	andi	r2,r2,255
    e934:	10800058 	cmpnei	r2,r2,1
    e938:	10002f1e 	bne	r2,zero,e9f8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e93c:	0005303a 	rdctl	r2,status
    e940:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e944:	e0ffff17 	ldw	r3,-4(fp)
    e948:	00bfff84 	movi	r2,-2
    e94c:	1884703a 	and	r2,r3,r2
    e950:	1001703a 	wrctl	status,r2
  
  return context;
    e954:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e958:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e95c:	d0a72a03 	ldbu	r2,-25432(gp)
    e960:	10803fcc 	andi	r2,r2,255
    e964:	10000326 	beq	r2,zero,e974 <OSIntExit+0x5c>
            OSIntNesting--;
    e968:	d0a72a03 	ldbu	r2,-25432(gp)
    e96c:	10bfffc4 	addi	r2,r2,-1
    e970:	d0a72a05 	stb	r2,-25432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e974:	d0a72a03 	ldbu	r2,-25432(gp)
    e978:	10803fcc 	andi	r2,r2,255
    e97c:	10001a1e 	bne	r2,zero,e9e8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e980:	d0a71c03 	ldbu	r2,-25488(gp)
    e984:	10803fcc 	andi	r2,r2,255
    e988:	1000171e 	bne	r2,zero,e9e8 <OSIntExit+0xd0>
                OS_SchedNew();
    e98c:	000fa140 	call	fa14 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e990:	d0e71e03 	ldbu	r3,-25480(gp)
    e994:	d0a71e43 	ldbu	r2,-25479(gp)
    e998:	18c03fcc 	andi	r3,r3,255
    e99c:	10803fcc 	andi	r2,r2,255
    e9a0:	18801126 	beq	r3,r2,e9e8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e9a4:	d0a71e03 	ldbu	r2,-25480(gp)
    e9a8:	10c03fcc 	andi	r3,r2,255
    e9ac:	008000b4 	movhi	r2,2
    e9b0:	1086a404 	addi	r2,r2,6800
    e9b4:	18c7883a 	add	r3,r3,r3
    e9b8:	18c7883a 	add	r3,r3,r3
    e9bc:	10c5883a 	add	r2,r2,r3
    e9c0:	10800017 	ldw	r2,0(r2)
    e9c4:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e9c8:	d0a72617 	ldw	r2,-25448(gp)
    e9cc:	10c00e17 	ldw	r3,56(r2)
    e9d0:	18c00044 	addi	r3,r3,1
    e9d4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e9d8:	d0a72117 	ldw	r2,-25468(gp)
    e9dc:	10800044 	addi	r2,r2,1
    e9e0:	d0a72115 	stw	r2,-25468(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e9e4:	00171d00 	call	171d0 <OSCtxSw>
    e9e8:	e0bffd17 	ldw	r2,-12(fp)
    e9ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9f0:	e0bffe17 	ldw	r2,-8(fp)
    e9f4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e9f8:	0001883a 	nop
    e9fc:	e037883a 	mov	sp,fp
    ea00:	dfc00117 	ldw	ra,4(sp)
    ea04:	df000017 	ldw	fp,0(sp)
    ea08:	dec00204 	addi	sp,sp,8
    ea0c:	f800283a 	ret

0000ea10 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    ea10:	defffc04 	addi	sp,sp,-16
    ea14:	df000315 	stw	fp,12(sp)
    ea18:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ea1c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    ea20:	d0a71c43 	ldbu	r2,-25487(gp)
    ea24:	10803fcc 	andi	r2,r2,255
    ea28:	10800058 	cmpnei	r2,r2,1
    ea2c:	1000161e 	bne	r2,zero,ea88 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea30:	0005303a 	rdctl	r2,status
    ea34:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea38:	e0ffff17 	ldw	r3,-4(fp)
    ea3c:	00bfff84 	movi	r2,-2
    ea40:	1884703a 	and	r2,r3,r2
    ea44:	1001703a 	wrctl	status,r2
  
  return context;
    ea48:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ea4c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    ea50:	d0a72a03 	ldbu	r2,-25432(gp)
    ea54:	10803fcc 	andi	r2,r2,255
    ea58:	1000071e 	bne	r2,zero,ea78 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    ea5c:	d0a71c03 	ldbu	r2,-25488(gp)
    ea60:	10803fcc 	andi	r2,r2,255
    ea64:	10803fe0 	cmpeqi	r2,r2,255
    ea68:	1000031e 	bne	r2,zero,ea78 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    ea6c:	d0a71c03 	ldbu	r2,-25488(gp)
    ea70:	10800044 	addi	r2,r2,1
    ea74:	d0a71c05 	stb	r2,-25488(gp)
    ea78:	e0bffd17 	ldw	r2,-12(fp)
    ea7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea80:	e0bffe17 	ldw	r2,-8(fp)
    ea84:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ea88:	0001883a 	nop
    ea8c:	e037883a 	mov	sp,fp
    ea90:	df000017 	ldw	fp,0(sp)
    ea94:	dec00104 	addi	sp,sp,4
    ea98:	f800283a 	ret

0000ea9c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    ea9c:	defff804 	addi	sp,sp,-32
    eaa0:	dfc00715 	stw	ra,28(sp)
    eaa4:	df000615 	stw	fp,24(sp)
    eaa8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    eaac:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    eab0:	d0a71c43 	ldbu	r2,-25487(gp)
    eab4:	10803fcc 	andi	r2,r2,255
    eab8:	10800058 	cmpnei	r2,r2,1
    eabc:	1000281e 	bne	r2,zero,eb60 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eac0:	0005303a 	rdctl	r2,status
    eac4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eac8:	e0ffff17 	ldw	r3,-4(fp)
    eacc:	00bfff84 	movi	r2,-2
    ead0:	1884703a 	and	r2,r3,r2
    ead4:	1001703a 	wrctl	status,r2
  
  return context;
    ead8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    eadc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    eae0:	d0a71c03 	ldbu	r2,-25488(gp)
    eae4:	10803fcc 	andi	r2,r2,255
    eae8:	10001926 	beq	r2,zero,eb50 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    eaec:	d0a71c03 	ldbu	r2,-25488(gp)
    eaf0:	10bfffc4 	addi	r2,r2,-1
    eaf4:	d0a71c05 	stb	r2,-25488(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    eaf8:	d0a71c03 	ldbu	r2,-25488(gp)
    eafc:	10803fcc 	andi	r2,r2,255
    eb00:	10000e1e 	bne	r2,zero,eb3c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    eb04:	d0a72a03 	ldbu	r2,-25432(gp)
    eb08:	10803fcc 	andi	r2,r2,255
    eb0c:	1000061e 	bne	r2,zero,eb28 <OSSchedUnlock+0x8c>
    eb10:	e0bffa17 	ldw	r2,-24(fp)
    eb14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb18:	e0bffb17 	ldw	r2,-20(fp)
    eb1c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    eb20:	000f9440 	call	f944 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    eb24:	00000e06 	br	eb60 <OSSchedUnlock+0xc4>
    eb28:	e0bffa17 	ldw	r2,-24(fp)
    eb2c:	e0bffc15 	stw	r2,-16(fp)
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	1001703a 	wrctl	status,r2
    eb38:	00000906 	br	eb60 <OSSchedUnlock+0xc4>
    eb3c:	e0bffa17 	ldw	r2,-24(fp)
    eb40:	e0bffd15 	stw	r2,-12(fp)
    eb44:	e0bffd17 	ldw	r2,-12(fp)
    eb48:	1001703a 	wrctl	status,r2
    eb4c:	00000406 	br	eb60 <OSSchedUnlock+0xc4>
    eb50:	e0bffa17 	ldw	r2,-24(fp)
    eb54:	e0bffe15 	stw	r2,-8(fp)
    eb58:	e0bffe17 	ldw	r2,-8(fp)
    eb5c:	1001703a 	wrctl	status,r2
    eb60:	0001883a 	nop
    eb64:	e037883a 	mov	sp,fp
    eb68:	dfc00117 	ldw	ra,4(sp)
    eb6c:	df000017 	ldw	fp,0(sp)
    eb70:	dec00204 	addi	sp,sp,8
    eb74:	f800283a 	ret

0000eb78 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    eb78:	defffe04 	addi	sp,sp,-8
    eb7c:	dfc00115 	stw	ra,4(sp)
    eb80:	df000015 	stw	fp,0(sp)
    eb84:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    eb88:	d0a71c43 	ldbu	r2,-25487(gp)
    eb8c:	10803fcc 	andi	r2,r2,255
    eb90:	10000f1e 	bne	r2,zero,ebd0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    eb94:	000fa140 	call	fa14 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    eb98:	d0a71e03 	ldbu	r2,-25480(gp)
    eb9c:	d0a71e45 	stb	r2,-25479(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    eba0:	d0a71e03 	ldbu	r2,-25480(gp)
    eba4:	10c03fcc 	andi	r3,r2,255
    eba8:	008000b4 	movhi	r2,2
    ebac:	1086a404 	addi	r2,r2,6800
    ebb0:	18c7883a 	add	r3,r3,r3
    ebb4:	18c7883a 	add	r3,r3,r3
    ebb8:	10c5883a 	add	r2,r2,r3
    ebbc:	10800017 	ldw	r2,0(r2)
    ebc0:	d0a72615 	stw	r2,-25448(gp)
        OSTCBCur      = OSTCBHighRdy;
    ebc4:	d0a72617 	ldw	r2,-25448(gp)
    ebc8:	d0a72b15 	stw	r2,-25428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    ebcc:	001725c0 	call	1725c <OSStartHighRdy>
    }
}
    ebd0:	0001883a 	nop
    ebd4:	e037883a 	mov	sp,fp
    ebd8:	dfc00117 	ldw	ra,4(sp)
    ebdc:	df000017 	ldw	fp,0(sp)
    ebe0:	dec00204 	addi	sp,sp,8
    ebe4:	f800283a 	ret

0000ebe8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    ebe8:	defff904 	addi	sp,sp,-28
    ebec:	dfc00615 	stw	ra,24(sp)
    ebf0:	df000515 	stw	fp,20(sp)
    ebf4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ebf8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    ebfc:	01000084 	movi	r4,2
    ec00:	00152e00 	call	152e0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec04:	0005303a 	rdctl	r2,status
    ec08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec0c:	e0fffc17 	ldw	r3,-16(fp)
    ec10:	00bfff84 	movi	r2,-2
    ec14:	1884703a 	and	r2,r3,r2
    ec18:	1001703a 	wrctl	status,r2
  
  return context;
    ec1c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    ec20:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    ec24:	d0271d15 	stw	zero,-25484(gp)
    ec28:	e0bffb17 	ldw	r2,-20(fp)
    ec2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec30:	e0bffd17 	ldw	r2,-12(fp)
    ec34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    ec38:	01001904 	movi	r4,100
    ec3c:	00152e00 	call	152e0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec40:	0005303a 	rdctl	r2,status
    ec44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec48:	e0fffe17 	ldw	r3,-8(fp)
    ec4c:	00bfff84 	movi	r2,-2
    ec50:	1884703a 	and	r2,r3,r2
    ec54:	1001703a 	wrctl	status,r2
  
  return context;
    ec58:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    ec5c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    ec60:	d0a71d17 	ldw	r2,-25484(gp)
    ec64:	d0a72215 	stw	r2,-25464(gp)
    OSStatRdy    = OS_TRUE;
    ec68:	00800044 	movi	r2,1
    ec6c:	d0a72e05 	stb	r2,-25416(gp)
    ec70:	e0bffb17 	ldw	r2,-20(fp)
    ec74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec78:	e0bfff17 	ldw	r2,-4(fp)
    ec7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    ec80:	0001883a 	nop
    ec84:	e037883a 	mov	sp,fp
    ec88:	dfc00117 	ldw	ra,4(sp)
    ec8c:	df000017 	ldw	fp,0(sp)
    ec90:	dec00204 	addi	sp,sp,8
    ec94:	f800283a 	ret

0000ec98 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    ec98:	defff704 	addi	sp,sp,-36
    ec9c:	dfc00815 	stw	ra,32(sp)
    eca0:	df000715 	stw	fp,28(sp)
    eca4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    eca8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    ecac:	00174840 	call	17484 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecb0:	0005303a 	rdctl	r2,status
    ecb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecb8:	e0fffd17 	ldw	r3,-12(fp)
    ecbc:	00bfff84 	movi	r2,-2
    ecc0:	1884703a 	and	r2,r3,r2
    ecc4:	1001703a 	wrctl	status,r2
  
  return context;
    ecc8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    eccc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    ecd0:	d0a72c17 	ldw	r2,-25424(gp)
    ecd4:	10800044 	addi	r2,r2,1
    ecd8:	d0a72c15 	stw	r2,-25424(gp)
    ecdc:	e0bffb17 	ldw	r2,-20(fp)
    ece0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ece4:	e0bfff17 	ldw	r2,-4(fp)
    ece8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    ecec:	d0a71c43 	ldbu	r2,-25487(gp)
    ecf0:	10803fcc 	andi	r2,r2,255
    ecf4:	10800058 	cmpnei	r2,r2,1
    ecf8:	10006a1e 	bne	r2,zero,eea4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    ecfc:	d0a72003 	ldbu	r2,-25472(gp)
    ed00:	10803fcc 	andi	r2,r2,255
    ed04:	10c00060 	cmpeqi	r3,r2,1
    ed08:	1800061e 	bne	r3,zero,ed24 <OSTimeTick+0x8c>
    ed0c:	10c000a0 	cmpeqi	r3,r2,2
    ed10:	1800061e 	bne	r3,zero,ed2c <OSTimeTick+0x94>
    ed14:	10000a1e 	bne	r2,zero,ed40 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ed18:	00800044 	movi	r2,1
    ed1c:	e0bffa05 	stb	r2,-24(fp)
                 break;
    ed20:	00000b06 	br	ed50 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ed24:	e03ffa05 	stb	zero,-24(fp)
                 break;
    ed28:	00000906 	br	ed50 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    ed2c:	00800044 	movi	r2,1
    ed30:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    ed34:	00800044 	movi	r2,1
    ed38:	d0a72005 	stb	r2,-25472(gp)
                 break;
    ed3c:	00000406 	br	ed50 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    ed40:	00800044 	movi	r2,1
    ed44:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    ed48:	d0272005 	stb	zero,-25472(gp)
                 break;
    ed4c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    ed50:	e0bffa03 	ldbu	r2,-24(fp)
    ed54:	10005226 	beq	r2,zero,eea0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    ed58:	d0a71f17 	ldw	r2,-25476(gp)
    ed5c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ed60:	00004906 	br	ee88 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed64:	0005303a 	rdctl	r2,status
    ed68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed6c:	e0fffc17 	ldw	r3,-16(fp)
    ed70:	00bfff84 	movi	r2,-2
    ed74:	1884703a 	and	r2,r3,r2
    ed78:	1001703a 	wrctl	status,r2
  
  return context;
    ed7c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    ed80:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    ed84:	e0bff917 	ldw	r2,-28(fp)
    ed88:	10800b8b 	ldhu	r2,46(r2)
    ed8c:	10bfffcc 	andi	r2,r2,65535
    ed90:	10003626 	beq	r2,zero,ee6c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ed94:	e0bff917 	ldw	r2,-28(fp)
    ed98:	10800b8b 	ldhu	r2,46(r2)
    ed9c:	10bfffc4 	addi	r2,r2,-1
    eda0:	1007883a 	mov	r3,r2
    eda4:	e0bff917 	ldw	r2,-28(fp)
    eda8:	10c00b8d 	sth	r3,46(r2)
    edac:	e0bff917 	ldw	r2,-28(fp)
    edb0:	10800b8b 	ldhu	r2,46(r2)
    edb4:	10bfffcc 	andi	r2,r2,65535
    edb8:	10002c1e 	bne	r2,zero,ee6c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    edbc:	e0bff917 	ldw	r2,-28(fp)
    edc0:	10800c03 	ldbu	r2,48(r2)
    edc4:	10803fcc 	andi	r2,r2,255
    edc8:	10800dcc 	andi	r2,r2,55
    edcc:	10000b26 	beq	r2,zero,edfc <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    edd0:	e0bff917 	ldw	r2,-28(fp)
    edd4:	10c00c03 	ldbu	r3,48(r2)
    edd8:	00bff204 	movi	r2,-56
    eddc:	1884703a 	and	r2,r3,r2
    ede0:	1007883a 	mov	r3,r2
    ede4:	e0bff917 	ldw	r2,-28(fp)
    ede8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    edec:	e0bff917 	ldw	r2,-28(fp)
    edf0:	00c00044 	movi	r3,1
    edf4:	10c00c45 	stb	r3,49(r2)
    edf8:	00000206 	br	ee04 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    edfc:	e0bff917 	ldw	r2,-28(fp)
    ee00:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ee04:	e0bff917 	ldw	r2,-28(fp)
    ee08:	10800c03 	ldbu	r2,48(r2)
    ee0c:	10803fcc 	andi	r2,r2,255
    ee10:	1080020c 	andi	r2,r2,8
    ee14:	1000151e 	bne	r2,zero,ee6c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ee18:	e0bff917 	ldw	r2,-28(fp)
    ee1c:	10c00d83 	ldbu	r3,54(r2)
    ee20:	d0a72803 	ldbu	r2,-25440(gp)
    ee24:	1884b03a 	or	r2,r3,r2
    ee28:	d0a72805 	stb	r2,-25440(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ee2c:	e0bff917 	ldw	r2,-28(fp)
    ee30:	10800d03 	ldbu	r2,52(r2)
    ee34:	10c03fcc 	andi	r3,r2,255
    ee38:	e0bff917 	ldw	r2,-28(fp)
    ee3c:	10800d03 	ldbu	r2,52(r2)
    ee40:	11003fcc 	andi	r4,r2,255
    ee44:	d0a72844 	addi	r2,gp,-25439
    ee48:	2085883a 	add	r2,r4,r2
    ee4c:	11000003 	ldbu	r4,0(r2)
    ee50:	e0bff917 	ldw	r2,-28(fp)
    ee54:	10800d43 	ldbu	r2,53(r2)
    ee58:	2084b03a 	or	r2,r4,r2
    ee5c:	1009883a 	mov	r4,r2
    ee60:	d0a72844 	addi	r2,gp,-25439
    ee64:	1885883a 	add	r2,r3,r2
    ee68:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    ee6c:	e0bff917 	ldw	r2,-28(fp)
    ee70:	10800517 	ldw	r2,20(r2)
    ee74:	e0bff915 	stw	r2,-28(fp)
    ee78:	e0bffb17 	ldw	r2,-20(fp)
    ee7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee80:	e0bffe17 	ldw	r2,-8(fp)
    ee84:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ee88:	e0bff917 	ldw	r2,-28(fp)
    ee8c:	10800c83 	ldbu	r2,50(r2)
    ee90:	10803fcc 	andi	r2,r2,255
    ee94:	10800518 	cmpnei	r2,r2,20
    ee98:	103fb21e 	bne	r2,zero,ed64 <OSTimeTick+0xcc>
    ee9c:	00000106 	br	eea4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    eea0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    eea4:	e037883a 	mov	sp,fp
    eea8:	dfc00117 	ldw	ra,4(sp)
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00204 	addi	sp,sp,8
    eeb4:	f800283a 	ret

0000eeb8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    eeb8:	deffff04 	addi	sp,sp,-4
    eebc:	df000015 	stw	fp,0(sp)
    eec0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    eec4:	00804784 	movi	r2,286
}
    eec8:	e037883a 	mov	sp,fp
    eecc:	df000017 	ldw	fp,0(sp)
    eed0:	dec00104 	addi	sp,sp,4
    eed4:	f800283a 	ret

0000eed8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    eed8:	deffff04 	addi	sp,sp,-4
    eedc:	df000015 	stw	fp,0(sp)
    eee0:	d839883a 	mov	fp,sp
}
    eee4:	0001883a 	nop
    eee8:	e037883a 	mov	sp,fp
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00104 	addi	sp,sp,4
    eef4:	f800283a 	ret

0000eef8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    eef8:	defff804 	addi	sp,sp,-32
    eefc:	dfc00715 	stw	ra,28(sp)
    ef00:	df000615 	stw	fp,24(sp)
    ef04:	df000604 	addi	fp,sp,24
    ef08:	e13ffc15 	stw	r4,-16(fp)
    ef0c:	e17ffd15 	stw	r5,-12(fp)
    ef10:	3007883a 	mov	r3,r6
    ef14:	3805883a 	mov	r2,r7
    ef18:	e0fffe05 	stb	r3,-8(fp)
    ef1c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    ef20:	e0bffc17 	ldw	r2,-16(fp)
    ef24:	10800283 	ldbu	r2,10(r2)
    ef28:	10c03fcc 	andi	r3,r2,255
    ef2c:	00800074 	movhi	r2,1
    ef30:	109ff604 	addi	r2,r2,32728
    ef34:	10c5883a 	add	r2,r2,r3
    ef38:	10800003 	ldbu	r2,0(r2)
    ef3c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    ef40:	e0bffa03 	ldbu	r2,-24(fp)
    ef44:	e0fffc17 	ldw	r3,-16(fp)
    ef48:	1885883a 	add	r2,r3,r2
    ef4c:	108002c4 	addi	r2,r2,11
    ef50:	10800003 	ldbu	r2,0(r2)
    ef54:	10c03fcc 	andi	r3,r2,255
    ef58:	00800074 	movhi	r2,1
    ef5c:	109ff604 	addi	r2,r2,32728
    ef60:	10c5883a 	add	r2,r2,r3
    ef64:	10800003 	ldbu	r2,0(r2)
    ef68:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ef6c:	e0bffa03 	ldbu	r2,-24(fp)
    ef70:	100490fa 	slli	r2,r2,3
    ef74:	1007883a 	mov	r3,r2
    ef78:	e0bffa43 	ldbu	r2,-23(fp)
    ef7c:	1885883a 	add	r2,r3,r2
    ef80:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ef84:	e0fffa83 	ldbu	r3,-22(fp)
    ef88:	008000b4 	movhi	r2,2
    ef8c:	1086a404 	addi	r2,r2,6800
    ef90:	18c7883a 	add	r3,r3,r3
    ef94:	18c7883a 	add	r3,r3,r3
    ef98:	10c5883a 	add	r2,r2,r3
    ef9c:	10800017 	ldw	r2,0(r2)
    efa0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    efa4:	e0bffb17 	ldw	r2,-20(fp)
    efa8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    efac:	e0bffb17 	ldw	r2,-20(fp)
    efb0:	e0fffd17 	ldw	r3,-12(fp)
    efb4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    efb8:	e0bffb17 	ldw	r2,-20(fp)
    efbc:	10800c03 	ldbu	r2,48(r2)
    efc0:	1007883a 	mov	r3,r2
    efc4:	e0bffe03 	ldbu	r2,-8(fp)
    efc8:	0084303a 	nor	r2,zero,r2
    efcc:	1884703a 	and	r2,r3,r2
    efd0:	1007883a 	mov	r3,r2
    efd4:	e0bffb17 	ldw	r2,-20(fp)
    efd8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    efdc:	e0bffb17 	ldw	r2,-20(fp)
    efe0:	e0ffff03 	ldbu	r3,-4(fp)
    efe4:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    efe8:	e0bffb17 	ldw	r2,-20(fp)
    efec:	10800c03 	ldbu	r2,48(r2)
    eff0:	10803fcc 	andi	r2,r2,255
    eff4:	1080020c 	andi	r2,r2,8
    eff8:	1000111e 	bne	r2,zero,f040 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    effc:	e0bffb17 	ldw	r2,-20(fp)
    f000:	10c00d83 	ldbu	r3,54(r2)
    f004:	d0a72803 	ldbu	r2,-25440(gp)
    f008:	1884b03a 	or	r2,r3,r2
    f00c:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f010:	e0fffa03 	ldbu	r3,-24(fp)
    f014:	e13ffa03 	ldbu	r4,-24(fp)
    f018:	d0a72844 	addi	r2,gp,-25439
    f01c:	2085883a 	add	r2,r4,r2
    f020:	11000003 	ldbu	r4,0(r2)
    f024:	e0bffb17 	ldw	r2,-20(fp)
    f028:	10800d43 	ldbu	r2,53(r2)
    f02c:	2084b03a 	or	r2,r4,r2
    f030:	1009883a 	mov	r4,r2
    f034:	d0a72844 	addi	r2,gp,-25439
    f038:	1885883a 	add	r2,r3,r2
    f03c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f040:	e17ffc17 	ldw	r5,-16(fp)
    f044:	e13ffb17 	ldw	r4,-20(fp)
    f048:	000f2f00 	call	f2f0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f04c:	e0bffb17 	ldw	r2,-20(fp)
    f050:	10800817 	ldw	r2,32(r2)
    f054:	10000826 	beq	r2,zero,f078 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f058:	e0bffb17 	ldw	r2,-20(fp)
    f05c:	10800817 	ldw	r2,32(r2)
    f060:	100b883a 	mov	r5,r2
    f064:	e13ffb17 	ldw	r4,-20(fp)
    f068:	000f3a80 	call	f3a8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f06c:	e0bffb17 	ldw	r2,-20(fp)
    f070:	e0fffc17 	ldw	r3,-16(fp)
    f074:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f078:	e0bffa83 	ldbu	r2,-22(fp)
}
    f07c:	e037883a 	mov	sp,fp
    f080:	dfc00117 	ldw	ra,4(sp)
    f084:	df000017 	ldw	fp,0(sp)
    f088:	dec00204 	addi	sp,sp,8
    f08c:	f800283a 	ret

0000f090 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f090:	defffd04 	addi	sp,sp,-12
    f094:	df000215 	stw	fp,8(sp)
    f098:	df000204 	addi	fp,sp,8
    f09c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f0a0:	d0a72b17 	ldw	r2,-25428(gp)
    f0a4:	e0ffff17 	ldw	r3,-4(fp)
    f0a8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f0ac:	d0a72b17 	ldw	r2,-25428(gp)
    f0b0:	10800d03 	ldbu	r2,52(r2)
    f0b4:	10803fcc 	andi	r2,r2,255
    f0b8:	d0e72b17 	ldw	r3,-25428(gp)
    f0bc:	18c00d03 	ldbu	r3,52(r3)
    f0c0:	18c03fcc 	andi	r3,r3,255
    f0c4:	e13fff17 	ldw	r4,-4(fp)
    f0c8:	20c7883a 	add	r3,r4,r3
    f0cc:	18c002c4 	addi	r3,r3,11
    f0d0:	19000003 	ldbu	r4,0(r3)
    f0d4:	d0e72b17 	ldw	r3,-25428(gp)
    f0d8:	18c00d43 	ldbu	r3,53(r3)
    f0dc:	20c6b03a 	or	r3,r4,r3
    f0e0:	1809883a 	mov	r4,r3
    f0e4:	e0ffff17 	ldw	r3,-4(fp)
    f0e8:	1885883a 	add	r2,r3,r2
    f0ec:	108002c4 	addi	r2,r2,11
    f0f0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f0f4:	e0bfff17 	ldw	r2,-4(fp)
    f0f8:	10c00283 	ldbu	r3,10(r2)
    f0fc:	d0a72b17 	ldw	r2,-25428(gp)
    f100:	10800d83 	ldbu	r2,54(r2)
    f104:	1884b03a 	or	r2,r3,r2
    f108:	1007883a 	mov	r3,r2
    f10c:	e0bfff17 	ldw	r2,-4(fp)
    f110:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f114:	d0a72b17 	ldw	r2,-25428(gp)
    f118:	10800d03 	ldbu	r2,52(r2)
    f11c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f120:	e0fffe03 	ldbu	r3,-8(fp)
    f124:	e13ffe03 	ldbu	r4,-8(fp)
    f128:	d0a72844 	addi	r2,gp,-25439
    f12c:	2085883a 	add	r2,r4,r2
    f130:	10800003 	ldbu	r2,0(r2)
    f134:	1009883a 	mov	r4,r2
    f138:	d0a72b17 	ldw	r2,-25428(gp)
    f13c:	10800d43 	ldbu	r2,53(r2)
    f140:	0084303a 	nor	r2,zero,r2
    f144:	2084703a 	and	r2,r4,r2
    f148:	1009883a 	mov	r4,r2
    f14c:	d0a72844 	addi	r2,gp,-25439
    f150:	1885883a 	add	r2,r3,r2
    f154:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f158:	e0fffe03 	ldbu	r3,-8(fp)
    f15c:	d0a72844 	addi	r2,gp,-25439
    f160:	1885883a 	add	r2,r3,r2
    f164:	10800003 	ldbu	r2,0(r2)
    f168:	10803fcc 	andi	r2,r2,255
    f16c:	1000071e 	bne	r2,zero,f18c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f170:	d0a72b17 	ldw	r2,-25428(gp)
    f174:	10800d83 	ldbu	r2,54(r2)
    f178:	0084303a 	nor	r2,zero,r2
    f17c:	1007883a 	mov	r3,r2
    f180:	d0a72803 	ldbu	r2,-25440(gp)
    f184:	1884703a 	and	r2,r3,r2
    f188:	d0a72805 	stb	r2,-25440(gp)
    }
}
    f18c:	0001883a 	nop
    f190:	e037883a 	mov	sp,fp
    f194:	df000017 	ldw	fp,0(sp)
    f198:	dec00104 	addi	sp,sp,4
    f19c:	f800283a 	ret

0000f1a0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f1a0:	defffb04 	addi	sp,sp,-20
    f1a4:	df000415 	stw	fp,16(sp)
    f1a8:	df000404 	addi	fp,sp,16
    f1ac:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f1b0:	d0a72b17 	ldw	r2,-25428(gp)
    f1b4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f1b8:	d0a72b17 	ldw	r2,-25428(gp)
    f1bc:	e0ffff17 	ldw	r3,-4(fp)
    f1c0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f1c4:	e0bfff17 	ldw	r2,-4(fp)
    f1c8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f1cc:	e0bffc17 	ldw	r2,-16(fp)
    f1d0:	10800017 	ldw	r2,0(r2)
    f1d4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f1d8:	00002006 	br	f25c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f1dc:	d0a72b17 	ldw	r2,-25428(gp)
    f1e0:	10800d03 	ldbu	r2,52(r2)
    f1e4:	10803fcc 	andi	r2,r2,255
    f1e8:	d0e72b17 	ldw	r3,-25428(gp)
    f1ec:	18c00d03 	ldbu	r3,52(r3)
    f1f0:	18c03fcc 	andi	r3,r3,255
    f1f4:	e13ffd17 	ldw	r4,-12(fp)
    f1f8:	20c7883a 	add	r3,r4,r3
    f1fc:	18c002c4 	addi	r3,r3,11
    f200:	19000003 	ldbu	r4,0(r3)
    f204:	d0e72b17 	ldw	r3,-25428(gp)
    f208:	18c00d43 	ldbu	r3,53(r3)
    f20c:	20c6b03a 	or	r3,r4,r3
    f210:	1809883a 	mov	r4,r3
    f214:	e0fffd17 	ldw	r3,-12(fp)
    f218:	1885883a 	add	r2,r3,r2
    f21c:	108002c4 	addi	r2,r2,11
    f220:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f224:	e0bffd17 	ldw	r2,-12(fp)
    f228:	10c00283 	ldbu	r3,10(r2)
    f22c:	d0a72b17 	ldw	r2,-25428(gp)
    f230:	10800d83 	ldbu	r2,54(r2)
    f234:	1884b03a 	or	r2,r3,r2
    f238:	1007883a 	mov	r3,r2
    f23c:	e0bffd17 	ldw	r2,-12(fp)
    f240:	10c00285 	stb	r3,10(r2)
        pevents++;
    f244:	e0bffc17 	ldw	r2,-16(fp)
    f248:	10800104 	addi	r2,r2,4
    f24c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f250:	e0bffc17 	ldw	r2,-16(fp)
    f254:	10800017 	ldw	r2,0(r2)
    f258:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f25c:	e0bffd17 	ldw	r2,-12(fp)
    f260:	103fde1e 	bne	r2,zero,f1dc <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f264:	d0a72b17 	ldw	r2,-25428(gp)
    f268:	10800d03 	ldbu	r2,52(r2)
    f26c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f270:	e0fffe03 	ldbu	r3,-8(fp)
    f274:	e13ffe03 	ldbu	r4,-8(fp)
    f278:	d0a72844 	addi	r2,gp,-25439
    f27c:	2085883a 	add	r2,r4,r2
    f280:	10800003 	ldbu	r2,0(r2)
    f284:	1009883a 	mov	r4,r2
    f288:	d0a72b17 	ldw	r2,-25428(gp)
    f28c:	10800d43 	ldbu	r2,53(r2)
    f290:	0084303a 	nor	r2,zero,r2
    f294:	2084703a 	and	r2,r4,r2
    f298:	1009883a 	mov	r4,r2
    f29c:	d0a72844 	addi	r2,gp,-25439
    f2a0:	1885883a 	add	r2,r3,r2
    f2a4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f2a8:	e0fffe03 	ldbu	r3,-8(fp)
    f2ac:	d0a72844 	addi	r2,gp,-25439
    f2b0:	1885883a 	add	r2,r3,r2
    f2b4:	10800003 	ldbu	r2,0(r2)
    f2b8:	10803fcc 	andi	r2,r2,255
    f2bc:	1000071e 	bne	r2,zero,f2dc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f2c0:	d0a72b17 	ldw	r2,-25428(gp)
    f2c4:	10800d83 	ldbu	r2,54(r2)
    f2c8:	0084303a 	nor	r2,zero,r2
    f2cc:	1007883a 	mov	r3,r2
    f2d0:	d0a72803 	ldbu	r2,-25440(gp)
    f2d4:	1884703a 	and	r2,r3,r2
    f2d8:	d0a72805 	stb	r2,-25440(gp)
    }
}
    f2dc:	0001883a 	nop
    f2e0:	e037883a 	mov	sp,fp
    f2e4:	df000017 	ldw	fp,0(sp)
    f2e8:	dec00104 	addi	sp,sp,4
    f2ec:	f800283a 	ret

0000f2f0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f2f0:	defffc04 	addi	sp,sp,-16
    f2f4:	df000315 	stw	fp,12(sp)
    f2f8:	df000304 	addi	fp,sp,12
    f2fc:	e13ffe15 	stw	r4,-8(fp)
    f300:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f304:	e0bffe17 	ldw	r2,-8(fp)
    f308:	10800d03 	ldbu	r2,52(r2)
    f30c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f310:	e0bffd03 	ldbu	r2,-12(fp)
    f314:	e0fffd03 	ldbu	r3,-12(fp)
    f318:	e13fff17 	ldw	r4,-4(fp)
    f31c:	20c7883a 	add	r3,r4,r3
    f320:	18c002c4 	addi	r3,r3,11
    f324:	18c00003 	ldbu	r3,0(r3)
    f328:	1809883a 	mov	r4,r3
    f32c:	e0fffe17 	ldw	r3,-8(fp)
    f330:	18c00d43 	ldbu	r3,53(r3)
    f334:	00c6303a 	nor	r3,zero,r3
    f338:	20c6703a 	and	r3,r4,r3
    f33c:	1809883a 	mov	r4,r3
    f340:	e0ffff17 	ldw	r3,-4(fp)
    f344:	1885883a 	add	r2,r3,r2
    f348:	108002c4 	addi	r2,r2,11
    f34c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f350:	e0bffd03 	ldbu	r2,-12(fp)
    f354:	e0ffff17 	ldw	r3,-4(fp)
    f358:	1885883a 	add	r2,r3,r2
    f35c:	108002c4 	addi	r2,r2,11
    f360:	10800003 	ldbu	r2,0(r2)
    f364:	10803fcc 	andi	r2,r2,255
    f368:	10000a1e 	bne	r2,zero,f394 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f36c:	e0bfff17 	ldw	r2,-4(fp)
    f370:	10800283 	ldbu	r2,10(r2)
    f374:	1007883a 	mov	r3,r2
    f378:	e0bffe17 	ldw	r2,-8(fp)
    f37c:	10800d83 	ldbu	r2,54(r2)
    f380:	0084303a 	nor	r2,zero,r2
    f384:	1884703a 	and	r2,r3,r2
    f388:	1007883a 	mov	r3,r2
    f38c:	e0bfff17 	ldw	r2,-4(fp)
    f390:	10c00285 	stb	r3,10(r2)
    }
}
    f394:	0001883a 	nop
    f398:	e037883a 	mov	sp,fp
    f39c:	df000017 	ldw	fp,0(sp)
    f3a0:	dec00104 	addi	sp,sp,4
    f3a4:	f800283a 	ret

0000f3a8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f3a8:	defffa04 	addi	sp,sp,-24
    f3ac:	df000515 	stw	fp,20(sp)
    f3b0:	df000504 	addi	fp,sp,20
    f3b4:	e13ffe15 	stw	r4,-8(fp)
    f3b8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f3bc:	e0bffe17 	ldw	r2,-8(fp)
    f3c0:	10800d03 	ldbu	r2,52(r2)
    f3c4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f3c8:	e0bffe17 	ldw	r2,-8(fp)
    f3cc:	10800d83 	ldbu	r2,54(r2)
    f3d0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f3d4:	e0bffe17 	ldw	r2,-8(fp)
    f3d8:	10800d43 	ldbu	r2,53(r2)
    f3dc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f3e0:	e0bfff17 	ldw	r2,-4(fp)
    f3e4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f3e8:	e0bffb17 	ldw	r2,-20(fp)
    f3ec:	10800017 	ldw	r2,0(r2)
    f3f0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f3f4:	00002506 	br	f48c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f3f8:	e0bffd03 	ldbu	r2,-12(fp)
    f3fc:	e0fffd03 	ldbu	r3,-12(fp)
    f400:	e13ffc17 	ldw	r4,-16(fp)
    f404:	20c7883a 	add	r3,r4,r3
    f408:	18c002c4 	addi	r3,r3,11
    f40c:	18c00003 	ldbu	r3,0(r3)
    f410:	1809883a 	mov	r4,r3
    f414:	e0fffd83 	ldbu	r3,-10(fp)
    f418:	00c6303a 	nor	r3,zero,r3
    f41c:	20c6703a 	and	r3,r4,r3
    f420:	1809883a 	mov	r4,r3
    f424:	e0fffc17 	ldw	r3,-16(fp)
    f428:	1885883a 	add	r2,r3,r2
    f42c:	108002c4 	addi	r2,r2,11
    f430:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f434:	e0bffd03 	ldbu	r2,-12(fp)
    f438:	e0fffc17 	ldw	r3,-16(fp)
    f43c:	1885883a 	add	r2,r3,r2
    f440:	108002c4 	addi	r2,r2,11
    f444:	10800003 	ldbu	r2,0(r2)
    f448:	10803fcc 	andi	r2,r2,255
    f44c:	1000091e 	bne	r2,zero,f474 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f450:	e0bffc17 	ldw	r2,-16(fp)
    f454:	10800283 	ldbu	r2,10(r2)
    f458:	1007883a 	mov	r3,r2
    f45c:	e0bffd43 	ldbu	r2,-11(fp)
    f460:	0084303a 	nor	r2,zero,r2
    f464:	1884703a 	and	r2,r3,r2
    f468:	1007883a 	mov	r3,r2
    f46c:	e0bffc17 	ldw	r2,-16(fp)
    f470:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f474:	e0bffb17 	ldw	r2,-20(fp)
    f478:	10800104 	addi	r2,r2,4
    f47c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f480:	e0bffb17 	ldw	r2,-20(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f48c:	e0bffc17 	ldw	r2,-16(fp)
    f490:	103fd91e 	bne	r2,zero,f3f8 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f494:	0001883a 	nop
    f498:	e037883a 	mov	sp,fp
    f49c:	df000017 	ldw	fp,0(sp)
    f4a0:	dec00104 	addi	sp,sp,4
    f4a4:	f800283a 	ret

0000f4a8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f4a8:	defffc04 	addi	sp,sp,-16
    f4ac:	df000315 	stw	fp,12(sp)
    f4b0:	df000304 	addi	fp,sp,12
    f4b4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f4b8:	e0bfff17 	ldw	r2,-4(fp)
    f4bc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f4c0:	e0bfff17 	ldw	r2,-4(fp)
    f4c4:	108002c4 	addi	r2,r2,11
    f4c8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f4cc:	e03ffe05 	stb	zero,-8(fp)
    f4d0:	00000706 	br	f4f0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f4d4:	e0bffd17 	ldw	r2,-12(fp)
    f4d8:	10c00044 	addi	r3,r2,1
    f4dc:	e0fffd15 	stw	r3,-12(fp)
    f4e0:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f4e4:	e0bffe03 	ldbu	r2,-8(fp)
    f4e8:	10800044 	addi	r2,r2,1
    f4ec:	e0bffe05 	stb	r2,-8(fp)
    f4f0:	e0bffe03 	ldbu	r2,-8(fp)
    f4f4:	108000f0 	cmpltui	r2,r2,3
    f4f8:	103ff61e 	bne	r2,zero,f4d4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    f4fc:	0001883a 	nop
    f500:	e037883a 	mov	sp,fp
    f504:	df000017 	ldw	fp,0(sp)
    f508:	dec00104 	addi	sp,sp,4
    f50c:	f800283a 	ret

0000f510 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f510:	defffb04 	addi	sp,sp,-20
    f514:	dfc00415 	stw	ra,16(sp)
    f518:	df000315 	stw	fp,12(sp)
    f51c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f520:	0142d004 	movi	r5,2880
    f524:	010000b4 	movhi	r4,2
    f528:	21029004 	addi	r4,r4,2624
    f52c:	000f8880 	call	f888 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f530:	008000b4 	movhi	r2,2
    f534:	10829004 	addi	r2,r2,2624
    f538:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f53c:	008000b4 	movhi	r2,2
    f540:	10829c04 	addi	r2,r2,2672
    f544:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f548:	e03ffd0d 	sth	zero,-12(fp)
    f54c:	00001306 	br	f59c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f558:	e0bffe17 	ldw	r2,-8(fp)
    f55c:	e0ffff17 	ldw	r3,-4(fp)
    f560:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f564:	e0bffe17 	ldw	r2,-8(fp)
    f568:	00c00fc4 	movi	r3,63
    f56c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f570:	e0bffe17 	ldw	r2,-8(fp)
    f574:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f578:	e0bffe17 	ldw	r2,-8(fp)
    f57c:	10800c04 	addi	r2,r2,48
    f580:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f584:	e0bfff17 	ldw	r2,-4(fp)
    f588:	10800c04 	addi	r2,r2,48
    f58c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f590:	e0bffd0b 	ldhu	r2,-12(fp)
    f594:	10800044 	addi	r2,r2,1
    f598:	e0bffd0d 	sth	r2,-12(fp)
    f59c:	e0bffd0b 	ldhu	r2,-12(fp)
    f5a0:	10800ef0 	cmpltui	r2,r2,59
    f5a4:	103fea1e 	bne	r2,zero,f550 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f5a8:	e0bffe17 	ldw	r2,-8(fp)
    f5ac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f5b0:	e0bffe17 	ldw	r2,-8(fp)
    f5b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f5b8:	e0bffe17 	ldw	r2,-8(fp)
    f5bc:	00c00fc4 	movi	r3,63
    f5c0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f5c4:	e0bffe17 	ldw	r2,-8(fp)
    f5c8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f5cc:	008000b4 	movhi	r2,2
    f5d0:	10829004 	addi	r2,r2,2624
    f5d4:	d0a72915 	stw	r2,-25436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f5d8:	0001883a 	nop
    f5dc:	e037883a 	mov	sp,fp
    f5e0:	dfc00117 	ldw	ra,4(sp)
    f5e4:	df000017 	ldw	fp,0(sp)
    f5e8:	dec00204 	addi	sp,sp,8
    f5ec:	f800283a 	ret

0000f5f0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f5f0:	deffff04 	addi	sp,sp,-4
    f5f4:	df000015 	stw	fp,0(sp)
    f5f8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f5fc:	d0272c15 	stw	zero,-25424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f600:	d0272a05 	stb	zero,-25432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f604:	d0271c05 	stb	zero,-25488(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f608:	d0272445 	stb	zero,-25455(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f60c:	d0271c45 	stb	zero,-25487(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f610:	d0272115 	stw	zero,-25468(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f614:	d0271d15 	stw	zero,-25484(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f618:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtrMax  = 0L;
    f61c:	d0272215 	stw	zero,-25464(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f620:	d0272e05 	stb	zero,-25416(gp)
#endif
}
    f624:	0001883a 	nop
    f628:	e037883a 	mov	sp,fp
    f62c:	df000017 	ldw	fp,0(sp)
    f630:	dec00104 	addi	sp,sp,4
    f634:	f800283a 	ret

0000f638 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f638:	defffd04 	addi	sp,sp,-12
    f63c:	df000215 	stw	fp,8(sp)
    f640:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f644:	d0272805 	stb	zero,-25440(gp)
    prdytbl       = &OSRdyTbl[0];
    f648:	d0a72844 	addi	r2,gp,-25439
    f64c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f650:	e03ffe05 	stb	zero,-8(fp)
    f654:	00000706 	br	f674 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	10c00044 	addi	r3,r2,1
    f660:	e0ffff15 	stw	r3,-4(fp)
    f664:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f668:	e0bffe03 	ldbu	r2,-8(fp)
    f66c:	10800044 	addi	r2,r2,1
    f670:	e0bffe05 	stb	r2,-8(fp)
    f674:	e0bffe03 	ldbu	r2,-8(fp)
    f678:	108000f0 	cmpltui	r2,r2,3
    f67c:	103ff61e 	bne	r2,zero,f658 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f680:	d0271e45 	stb	zero,-25479(gp)
    OSPrioHighRdy = 0;
    f684:	d0271e05 	stb	zero,-25480(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f688:	d0272615 	stw	zero,-25448(gp)
    OSTCBCur      = (OS_TCB *)0;
    f68c:	d0272b15 	stw	zero,-25428(gp)
}
    f690:	0001883a 	nop
    f694:	e037883a 	mov	sp,fp
    f698:	df000017 	ldw	fp,0(sp)
    f69c:	dec00104 	addi	sp,sp,4
    f6a0:	f800283a 	ret

0000f6a4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f6a4:	defff804 	addi	sp,sp,-32
    f6a8:	dfc00715 	stw	ra,28(sp)
    f6ac:	df000615 	stw	fp,24(sp)
    f6b0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f6b4:	008000c4 	movi	r2,3
    f6b8:	d8800415 	stw	r2,16(sp)
    f6bc:	d8000315 	stw	zero,12(sp)
    f6c0:	00808004 	movi	r2,512
    f6c4:	d8800215 	stw	r2,8(sp)
    f6c8:	008000b4 	movhi	r2,2
    f6cc:	10809004 	addi	r2,r2,576
    f6d0:	d8800115 	stw	r2,4(sp)
    f6d4:	00bfffd4 	movui	r2,65535
    f6d8:	d8800015 	stw	r2,0(sp)
    f6dc:	01c00504 	movi	r7,20
    f6e0:	018000b4 	movhi	r6,2
    f6e4:	31828f04 	addi	r6,r6,2620
    f6e8:	000b883a 	mov	r5,zero
    f6ec:	01000074 	movhi	r4,1
    f6f0:	213ed404 	addi	r4,r4,-1200
    f6f4:	00142100 	call	14210 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f6f8:	e1bfff04 	addi	r6,fp,-4
    f6fc:	014000b4 	movhi	r5,2
    f700:	29603604 	addi	r5,r5,-32552
    f704:	01000504 	movi	r4,20
    f708:	0014a200 	call	14a20 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f70c:	0001883a 	nop
    f710:	e037883a 	mov	sp,fp
    f714:	dfc00117 	ldw	ra,4(sp)
    f718:	df000017 	ldw	fp,0(sp)
    f71c:	dec00204 	addi	sp,sp,8
    f720:	f800283a 	ret

0000f724 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f724:	defff804 	addi	sp,sp,-32
    f728:	dfc00715 	stw	ra,28(sp)
    f72c:	df000615 	stw	fp,24(sp)
    f730:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f734:	008000c4 	movi	r2,3
    f738:	d8800415 	stw	r2,16(sp)
    f73c:	d8000315 	stw	zero,12(sp)
    f740:	00808004 	movi	r2,512
    f744:	d8800215 	stw	r2,8(sp)
    f748:	008000b4 	movhi	r2,2
    f74c:	10be1804 	addi	r2,r2,-1952
    f750:	d8800115 	stw	r2,4(sp)
    f754:	00bfff94 	movui	r2,65534
    f758:	d8800015 	stw	r2,0(sp)
    f75c:	01c004c4 	movi	r7,19
    f760:	018000b4 	movhi	r6,2
    f764:	31801704 	addi	r6,r6,92
    f768:	000b883a 	mov	r5,zero
    f76c:	01000074 	movhi	r4,1
    f770:	213eeb04 	addi	r4,r4,-1108
    f774:	00142100 	call	14210 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f778:	e1bfff04 	addi	r6,fp,-4
    f77c:	014000b4 	movhi	r5,2
    f780:	29603a04 	addi	r5,r5,-32536
    f784:	010004c4 	movi	r4,19
    f788:	0014a200 	call	14a20 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f78c:	0001883a 	nop
    f790:	e037883a 	mov	sp,fp
    f794:	dfc00117 	ldw	ra,4(sp)
    f798:	df000017 	ldw	fp,0(sp)
    f79c:	dec00204 	addi	sp,sp,8
    f7a0:	f800283a 	ret

0000f7a4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f7a4:	defffb04 	addi	sp,sp,-20
    f7a8:	dfc00415 	stw	ra,16(sp)
    f7ac:	df000315 	stw	fp,12(sp)
    f7b0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f7b4:	01414404 	movi	r5,1296
    f7b8:	010000b4 	movhi	r4,2
    f7bc:	21056004 	addi	r4,r4,5504
    f7c0:	000f8880 	call	f888 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f7c4:	01401504 	movi	r5,84
    f7c8:	010000b4 	movhi	r4,2
    f7cc:	2106a404 	addi	r4,r4,6800
    f7d0:	000f8880 	call	f888 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f7d4:	008000b4 	movhi	r2,2
    f7d8:	10856004 	addi	r2,r2,5504
    f7dc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f7e0:	008000b4 	movhi	r2,2
    f7e4:	10857b04 	addi	r2,r2,5612
    f7e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f7ec:	e03ffd05 	stb	zero,-12(fp)
    f7f0:	00001106 	br	f838 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f7f4:	e0bffe17 	ldw	r2,-8(fp)
    f7f8:	e0ffff17 	ldw	r3,-4(fp)
    f7fc:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f800:	e0bffe17 	ldw	r2,-8(fp)
    f804:	00c00fc4 	movi	r3,63
    f808:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f80c:	e0bffe17 	ldw	r2,-8(fp)
    f810:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f814:	e0bffe17 	ldw	r2,-8(fp)
    f818:	10801b04 	addi	r2,r2,108
    f81c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f820:	e0bfff17 	ldw	r2,-4(fp)
    f824:	10801b04 	addi	r2,r2,108
    f828:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f82c:	e0bffd03 	ldbu	r2,-12(fp)
    f830:	10800044 	addi	r2,r2,1
    f834:	e0bffd05 	stb	r2,-12(fp)
    f838:	e0bffd03 	ldbu	r2,-12(fp)
    f83c:	108002f0 	cmpltui	r2,r2,11
    f840:	103fec1e 	bne	r2,zero,f7f4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f844:	e0bffe17 	ldw	r2,-8(fp)
    f848:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f84c:	e0bffe17 	ldw	r2,-8(fp)
    f850:	00c00fc4 	movi	r3,63
    f854:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f858:	e0bffe17 	ldw	r2,-8(fp)
    f85c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f860:	d0271f15 	stw	zero,-25476(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f864:	008000b4 	movhi	r2,2
    f868:	10856004 	addi	r2,r2,5504
    f86c:	d0a72315 	stw	r2,-25460(gp)
}
    f870:	0001883a 	nop
    f874:	e037883a 	mov	sp,fp
    f878:	dfc00117 	ldw	ra,4(sp)
    f87c:	df000017 	ldw	fp,0(sp)
    f880:	dec00204 	addi	sp,sp,8
    f884:	f800283a 	ret

0000f888 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f888:	defffd04 	addi	sp,sp,-12
    f88c:	df000215 	stw	fp,8(sp)
    f890:	df000204 	addi	fp,sp,8
    f894:	e13ffe15 	stw	r4,-8(fp)
    f898:	2805883a 	mov	r2,r5
    f89c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f8a0:	00000706 	br	f8c0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f8a4:	e0bffe17 	ldw	r2,-8(fp)
    f8a8:	10c00044 	addi	r3,r2,1
    f8ac:	e0fffe15 	stw	r3,-8(fp)
    f8b0:	10000005 	stb	zero,0(r2)
        size--;
    f8b4:	e0bfff0b 	ldhu	r2,-4(fp)
    f8b8:	10bfffc4 	addi	r2,r2,-1
    f8bc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f8c0:	e0bfff0b 	ldhu	r2,-4(fp)
    f8c4:	103ff71e 	bne	r2,zero,f8a4 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f8c8:	0001883a 	nop
    f8cc:	e037883a 	mov	sp,fp
    f8d0:	df000017 	ldw	fp,0(sp)
    f8d4:	dec00104 	addi	sp,sp,4
    f8d8:	f800283a 	ret

0000f8dc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f8dc:	defffc04 	addi	sp,sp,-16
    f8e0:	df000315 	stw	fp,12(sp)
    f8e4:	df000304 	addi	fp,sp,12
    f8e8:	e13ffd15 	stw	r4,-12(fp)
    f8ec:	e17ffe15 	stw	r5,-8(fp)
    f8f0:	3005883a 	mov	r2,r6
    f8f4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f8f8:	00000b06 	br	f928 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	10c00044 	addi	r3,r2,1
    f904:	e0fffd15 	stw	r3,-12(fp)
    f908:	e0fffe17 	ldw	r3,-8(fp)
    f90c:	19000044 	addi	r4,r3,1
    f910:	e13ffe15 	stw	r4,-8(fp)
    f914:	18c00003 	ldbu	r3,0(r3)
    f918:	10c00005 	stb	r3,0(r2)
        size--;
    f91c:	e0bfff0b 	ldhu	r2,-4(fp)
    f920:	10bfffc4 	addi	r2,r2,-1
    f924:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f928:	e0bfff0b 	ldhu	r2,-4(fp)
    f92c:	103ff31e 	bne	r2,zero,f8fc <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    f930:	0001883a 	nop
    f934:	e037883a 	mov	sp,fp
    f938:	df000017 	ldw	fp,0(sp)
    f93c:	dec00104 	addi	sp,sp,4
    f940:	f800283a 	ret

0000f944 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f944:	defffb04 	addi	sp,sp,-20
    f948:	dfc00415 	stw	ra,16(sp)
    f94c:	df000315 	stw	fp,12(sp)
    f950:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f954:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f958:	0005303a 	rdctl	r2,status
    f95c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f960:	e0ffff17 	ldw	r3,-4(fp)
    f964:	00bfff84 	movi	r2,-2
    f968:	1884703a 	and	r2,r3,r2
    f96c:	1001703a 	wrctl	status,r2
  
  return context;
    f970:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    f974:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f978:	d0a72a03 	ldbu	r2,-25432(gp)
    f97c:	10803fcc 	andi	r2,r2,255
    f980:	10001a1e 	bne	r2,zero,f9ec <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f984:	d0a71c03 	ldbu	r2,-25488(gp)
    f988:	10803fcc 	andi	r2,r2,255
    f98c:	1000171e 	bne	r2,zero,f9ec <OS_Sched+0xa8>
            OS_SchedNew();
    f990:	000fa140 	call	fa14 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f994:	d0e71e03 	ldbu	r3,-25480(gp)
    f998:	d0a71e43 	ldbu	r2,-25479(gp)
    f99c:	18c03fcc 	andi	r3,r3,255
    f9a0:	10803fcc 	andi	r2,r2,255
    f9a4:	18801126 	beq	r3,r2,f9ec <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f9a8:	d0a71e03 	ldbu	r2,-25480(gp)
    f9ac:	10c03fcc 	andi	r3,r2,255
    f9b0:	008000b4 	movhi	r2,2
    f9b4:	1086a404 	addi	r2,r2,6800
    f9b8:	18c7883a 	add	r3,r3,r3
    f9bc:	18c7883a 	add	r3,r3,r3
    f9c0:	10c5883a 	add	r2,r2,r3
    f9c4:	10800017 	ldw	r2,0(r2)
    f9c8:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f9cc:	d0a72617 	ldw	r2,-25448(gp)
    f9d0:	10c00e17 	ldw	r3,56(r2)
    f9d4:	18c00044 	addi	r3,r3,1
    f9d8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f9dc:	d0a72117 	ldw	r2,-25468(gp)
    f9e0:	10800044 	addi	r2,r2,1
    f9e4:	d0a72115 	stw	r2,-25468(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f9e8:	00171d00 	call	171d0 <OSCtxSw>
    f9ec:	e0bffd17 	ldw	r2,-12(fp)
    f9f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9f4:	e0bffe17 	ldw	r2,-8(fp)
    f9f8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f9fc:	0001883a 	nop
    fa00:	e037883a 	mov	sp,fp
    fa04:	dfc00117 	ldw	ra,4(sp)
    fa08:	df000017 	ldw	fp,0(sp)
    fa0c:	dec00204 	addi	sp,sp,8
    fa10:	f800283a 	ret

0000fa14 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    fa14:	defffe04 	addi	sp,sp,-8
    fa18:	df000115 	stw	fp,4(sp)
    fa1c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    fa20:	d0a72803 	ldbu	r2,-25440(gp)
    fa24:	10c03fcc 	andi	r3,r2,255
    fa28:	00800074 	movhi	r2,1
    fa2c:	109ff604 	addi	r2,r2,32728
    fa30:	10c5883a 	add	r2,r2,r3
    fa34:	10800003 	ldbu	r2,0(r2)
    fa38:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    fa3c:	e0bfff03 	ldbu	r2,-4(fp)
    fa40:	100490fa 	slli	r2,r2,3
    fa44:	1009883a 	mov	r4,r2
    fa48:	e0ffff03 	ldbu	r3,-4(fp)
    fa4c:	d0a72844 	addi	r2,gp,-25439
    fa50:	1885883a 	add	r2,r3,r2
    fa54:	10800003 	ldbu	r2,0(r2)
    fa58:	10c03fcc 	andi	r3,r2,255
    fa5c:	00800074 	movhi	r2,1
    fa60:	109ff604 	addi	r2,r2,32728
    fa64:	10c5883a 	add	r2,r2,r3
    fa68:	10800003 	ldbu	r2,0(r2)
    fa6c:	2085883a 	add	r2,r4,r2
    fa70:	d0a71e05 	stb	r2,-25480(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    fa74:	0001883a 	nop
    fa78:	e037883a 	mov	sp,fp
    fa7c:	df000017 	ldw	fp,0(sp)
    fa80:	dec00104 	addi	sp,sp,4
    fa84:	f800283a 	ret

0000fa88 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    fa88:	defffc04 	addi	sp,sp,-16
    fa8c:	df000315 	stw	fp,12(sp)
    fa90:	df000304 	addi	fp,sp,12
    fa94:	e13ffe15 	stw	r4,-8(fp)
    fa98:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    fa9c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    faa0:	00000b06 	br	fad0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    faa4:	e0bffe17 	ldw	r2,-8(fp)
    faa8:	10c00044 	addi	r3,r2,1
    faac:	e0fffe15 	stw	r3,-8(fp)
    fab0:	e0ffff17 	ldw	r3,-4(fp)
    fab4:	19000044 	addi	r4,r3,1
    fab8:	e13fff15 	stw	r4,-4(fp)
    fabc:	18c00003 	ldbu	r3,0(r3)
    fac0:	10c00005 	stb	r3,0(r2)
        len++;
    fac4:	e0bffd03 	ldbu	r2,-12(fp)
    fac8:	10800044 	addi	r2,r2,1
    facc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fad0:	e0bfff17 	ldw	r2,-4(fp)
    fad4:	10800003 	ldbu	r2,0(r2)
    fad8:	10803fcc 	andi	r2,r2,255
    fadc:	103ff11e 	bne	r2,zero,faa4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    fae0:	e0bffe17 	ldw	r2,-8(fp)
    fae4:	10000005 	stb	zero,0(r2)
    return (len);
    fae8:	e0bffd03 	ldbu	r2,-12(fp)
}
    faec:	e037883a 	mov	sp,fp
    faf0:	df000017 	ldw	fp,0(sp)
    faf4:	dec00104 	addi	sp,sp,4
    faf8:	f800283a 	ret

0000fafc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    fafc:	defffd04 	addi	sp,sp,-12
    fb00:	df000215 	stw	fp,8(sp)
    fb04:	df000204 	addi	fp,sp,8
    fb08:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    fb0c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    fb10:	00000606 	br	fb2c <OS_StrLen+0x30>
        psrc++;
    fb14:	e0bfff17 	ldw	r2,-4(fp)
    fb18:	10800044 	addi	r2,r2,1
    fb1c:	e0bfff15 	stw	r2,-4(fp)
        len++;
    fb20:	e0bffe03 	ldbu	r2,-8(fp)
    fb24:	10800044 	addi	r2,r2,1
    fb28:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fb2c:	e0bfff17 	ldw	r2,-4(fp)
    fb30:	10800003 	ldbu	r2,0(r2)
    fb34:	10803fcc 	andi	r2,r2,255
    fb38:	103ff61e 	bne	r2,zero,fb14 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    fb3c:	e0bffe03 	ldbu	r2,-8(fp)
}
    fb40:	e037883a 	mov	sp,fp
    fb44:	df000017 	ldw	fp,0(sp)
    fb48:	dec00104 	addi	sp,sp,4
    fb4c:	f800283a 	ret

0000fb50 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    fb50:	defffa04 	addi	sp,sp,-24
    fb54:	dfc00515 	stw	ra,20(sp)
    fb58:	df000415 	stw	fp,16(sp)
    fb5c:	df000404 	addi	fp,sp,16
    fb60:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb64:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb68:	0005303a 	rdctl	r2,status
    fb6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb70:	e0fffd17 	ldw	r3,-12(fp)
    fb74:	00bfff84 	movi	r2,-2
    fb78:	1884703a 	and	r2,r3,r2
    fb7c:	1001703a 	wrctl	status,r2
  
  return context;
    fb80:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    fb84:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    fb88:	d0a71d17 	ldw	r2,-25484(gp)
    fb8c:	10800044 	addi	r2,r2,1
    fb90:	d0a71d15 	stw	r2,-25484(gp)
    fb94:	e0bffc17 	ldw	r2,-16(fp)
    fb98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb9c:	e0bffe17 	ldw	r2,-8(fp)
    fba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    fba4:	00174e40 	call	174e4 <OSTaskIdleHook>
    }
    fba8:	003fef06 	br	fb68 <OS_TaskIdle+0x18>

0000fbac <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    fbac:	defffa04 	addi	sp,sp,-24
    fbb0:	dfc00515 	stw	ra,20(sp)
    fbb4:	df000415 	stw	fp,16(sp)
    fbb8:	df000404 	addi	fp,sp,16
    fbbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fbc0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fbc4:	00000206 	br	fbd0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    fbc8:	01003204 	movi	r4,200
    fbcc:	00152e00 	call	152e0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fbd0:	d0a72e03 	ldbu	r2,-25416(gp)
    fbd4:	10803fcc 	andi	r2,r2,255
    fbd8:	103ffb26 	beq	r2,zero,fbc8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    fbdc:	d0a72217 	ldw	r2,-25464(gp)
    fbe0:	01401904 	movi	r5,100
    fbe4:	1009883a 	mov	r4,r2
    fbe8:	0000b680 	call	b68 <__udivsi3>
    fbec:	d0a72215 	stw	r2,-25464(gp)
    if (OSIdleCtrMax == 0L) {
    fbf0:	d0a72217 	ldw	r2,-25464(gp)
    fbf4:	1000031e 	bne	r2,zero,fc04 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    fbf8:	d0272405 	stb	zero,-25456(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    fbfc:	01003fc4 	movi	r4,255
    fc00:	0014f680 	call	14f68 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc04:	0005303a 	rdctl	r2,status
    fc08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc0c:	e0fffd17 	ldw	r3,-12(fp)
    fc10:	00bfff84 	movi	r2,-2
    fc14:	1884703a 	and	r2,r3,r2
    fc18:	1001703a 	wrctl	status,r2
  
  return context;
    fc1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    fc20:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    fc24:	d0a71d17 	ldw	r2,-25484(gp)
    fc28:	d0a72f15 	stw	r2,-25412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    fc2c:	d0271d15 	stw	zero,-25484(gp)
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc38:	e0bffe17 	ldw	r2,-8(fp)
    fc3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    fc40:	d0a72f17 	ldw	r2,-25412(gp)
    fc44:	d0e72217 	ldw	r3,-25464(gp)
    fc48:	180b883a 	mov	r5,r3
    fc4c:	1009883a 	mov	r4,r2
    fc50:	0000b680 	call	b68 <__udivsi3>
    fc54:	1007883a 	mov	r3,r2
    fc58:	00801904 	movi	r2,100
    fc5c:	10c5c83a 	sub	r2,r2,r3
    fc60:	d0a72405 	stb	r2,-25456(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    fc64:	00174640 	call	17464 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    fc68:	000fc780 	call	fc78 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    fc6c:	01001904 	movi	r4,100
    fc70:	00152e00 	call	152e0 <OSTimeDly>
    }
    fc74:	003fe306 	br	fc04 <OS_TaskStat+0x58>

0000fc78 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    fc78:	defffa04 	addi	sp,sp,-24
    fc7c:	dfc00515 	stw	ra,20(sp)
    fc80:	df000415 	stw	fp,16(sp)
    fc84:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fc88:	e03ffc05 	stb	zero,-16(fp)
    fc8c:	00002406 	br	fd20 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    fc90:	e0bffc03 	ldbu	r2,-16(fp)
    fc94:	e0fffe04 	addi	r3,fp,-8
    fc98:	180b883a 	mov	r5,r3
    fc9c:	1009883a 	mov	r4,r2
    fca0:	0014da80 	call	14da8 <OSTaskStkChk>
    fca4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    fca8:	e0bffc43 	ldbu	r2,-15(fp)
    fcac:	1000191e 	bne	r2,zero,fd14 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    fcb0:	e0fffc03 	ldbu	r3,-16(fp)
    fcb4:	008000b4 	movhi	r2,2
    fcb8:	1086a404 	addi	r2,r2,6800
    fcbc:	18c7883a 	add	r3,r3,r3
    fcc0:	18c7883a 	add	r3,r3,r3
    fcc4:	10c5883a 	add	r2,r2,r3
    fcc8:	10800017 	ldw	r2,0(r2)
    fccc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    fcd0:	e0bffd17 	ldw	r2,-12(fp)
    fcd4:	10000f26 	beq	r2,zero,fd14 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    fcd8:	e0bffd17 	ldw	r2,-12(fp)
    fcdc:	10800060 	cmpeqi	r2,r2,1
    fce0:	10000c1e 	bne	r2,zero,fd14 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    fce4:	e0bffd17 	ldw	r2,-12(fp)
    fce8:	10c00217 	ldw	r3,8(r2)
    fcec:	e0bffd17 	ldw	r2,-12(fp)
    fcf0:	10800317 	ldw	r2,12(r2)
    fcf4:	1085883a 	add	r2,r2,r2
    fcf8:	1085883a 	add	r2,r2,r2
    fcfc:	1887883a 	add	r3,r3,r2
    fd00:	e0bffd17 	ldw	r2,-12(fp)
    fd04:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    fd08:	e0ffff17 	ldw	r3,-4(fp)
    fd0c:	e0bffd17 	ldw	r2,-12(fp)
    fd10:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fd14:	e0bffc03 	ldbu	r2,-16(fp)
    fd18:	10800044 	addi	r2,r2,1
    fd1c:	e0bffc05 	stb	r2,-16(fp)
    fd20:	e0bffc03 	ldbu	r2,-16(fp)
    fd24:	10800570 	cmpltui	r2,r2,21
    fd28:	103fd91e 	bne	r2,zero,fc90 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    fd2c:	0001883a 	nop
    fd30:	e037883a 	mov	sp,fp
    fd34:	dfc00117 	ldw	ra,4(sp)
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00204 	addi	sp,sp,8
    fd40:	f800283a 	ret

0000fd44 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    fd44:	defff204 	addi	sp,sp,-56
    fd48:	dfc00d15 	stw	ra,52(sp)
    fd4c:	df000c15 	stw	fp,48(sp)
    fd50:	df000c04 	addi	fp,sp,48
    fd54:	e17ffc15 	stw	r5,-16(fp)
    fd58:	e1bffd15 	stw	r6,-12(fp)
    fd5c:	3807883a 	mov	r3,r7
    fd60:	e0800417 	ldw	r2,16(fp)
    fd64:	e13ffb05 	stb	r4,-20(fp)
    fd68:	e0fffe0d 	sth	r3,-8(fp)
    fd6c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fd70:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd74:	0005303a 	rdctl	r2,status
    fd78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd7c:	e0fffa17 	ldw	r3,-24(fp)
    fd80:	00bfff84 	movi	r2,-2
    fd84:	1884703a 	and	r2,r3,r2
    fd88:	1001703a 	wrctl	status,r2
  
  return context;
    fd8c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    fd90:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    fd94:	d0a72317 	ldw	r2,-25460(gp)
    fd98:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    fd9c:	e0bff617 	ldw	r2,-40(fp)
    fda0:	10009326 	beq	r2,zero,fff0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    fda4:	e0bff617 	ldw	r2,-40(fp)
    fda8:	10800517 	ldw	r2,20(r2)
    fdac:	d0a72315 	stw	r2,-25460(gp)
    fdb0:	e0bff417 	ldw	r2,-48(fp)
    fdb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdb8:	e0bff817 	ldw	r2,-32(fp)
    fdbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    fdc0:	e0bff617 	ldw	r2,-40(fp)
    fdc4:	e0fffc17 	ldw	r3,-16(fp)
    fdc8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    fdcc:	e0bff617 	ldw	r2,-40(fp)
    fdd0:	e0fffb03 	ldbu	r3,-20(fp)
    fdd4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    fdd8:	e0bff617 	ldw	r2,-40(fp)
    fddc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    fde0:	e0bff617 	ldw	r2,-40(fp)
    fde4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    fde8:	e0bff617 	ldw	r2,-40(fp)
    fdec:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    fdf0:	e0bff617 	ldw	r2,-40(fp)
    fdf4:	e0c00317 	ldw	r3,12(fp)
    fdf8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fdfc:	e0bff617 	ldw	r2,-40(fp)
    fe00:	e0c00217 	ldw	r3,8(fp)
    fe04:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    fe08:	e0bff617 	ldw	r2,-40(fp)
    fe0c:	e0fffd17 	ldw	r3,-12(fp)
    fe10:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    fe14:	e0bff617 	ldw	r2,-40(fp)
    fe18:	e0ffff0b 	ldhu	r3,-4(fp)
    fe1c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    fe20:	e0bff617 	ldw	r2,-40(fp)
    fe24:	e0fffe0b 	ldhu	r3,-8(fp)
    fe28:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    fe2c:	e0bff617 	ldw	r2,-40(fp)
    fe30:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    fe34:	e0bffb03 	ldbu	r2,-20(fp)
    fe38:	1004d0fa 	srli	r2,r2,3
    fe3c:	1007883a 	mov	r3,r2
    fe40:	e0bff617 	ldw	r2,-40(fp)
    fe44:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    fe48:	e0bffb03 	ldbu	r2,-20(fp)
    fe4c:	108001cc 	andi	r2,r2,7
    fe50:	1007883a 	mov	r3,r2
    fe54:	e0bff617 	ldw	r2,-40(fp)
    fe58:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    fe5c:	e0bff617 	ldw	r2,-40(fp)
    fe60:	10800d03 	ldbu	r2,52(r2)
    fe64:	10803fcc 	andi	r2,r2,255
    fe68:	00c00044 	movi	r3,1
    fe6c:	1884983a 	sll	r2,r3,r2
    fe70:	1007883a 	mov	r3,r2
    fe74:	e0bff617 	ldw	r2,-40(fp)
    fe78:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    fe7c:	e0bff617 	ldw	r2,-40(fp)
    fe80:	10800cc3 	ldbu	r2,51(r2)
    fe84:	10803fcc 	andi	r2,r2,255
    fe88:	00c00044 	movi	r3,1
    fe8c:	1884983a 	sll	r2,r3,r2
    fe90:	1007883a 	mov	r3,r2
    fe94:	e0bff617 	ldw	r2,-40(fp)
    fe98:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    fe9c:	e0bff617 	ldw	r2,-40(fp)
    fea0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    fea4:	e0bff617 	ldw	r2,-40(fp)
    fea8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    feac:	e0bff617 	ldw	r2,-40(fp)
    feb0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    feb4:	e0bff617 	ldw	r2,-40(fp)
    feb8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    febc:	e0bff617 	ldw	r2,-40(fp)
    fec0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    fec4:	e0bff617 	ldw	r2,-40(fp)
    fec8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    fecc:	e0bff617 	ldw	r2,-40(fp)
    fed0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    fed4:	e0bff617 	ldw	r2,-40(fp)
    fed8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    fedc:	e0bff617 	ldw	r2,-40(fp)
    fee0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    fee4:	e0bff617 	ldw	r2,-40(fp)
    fee8:	00c00fc4 	movi	r3,63
    feec:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    fef0:	e0bff617 	ldw	r2,-40(fp)
    fef4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    fef8:	e13ff617 	ldw	r4,-40(fp)
    fefc:	00175040 	call	17504 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    ff00:	e13ff617 	ldw	r4,-40(fp)
    ff04:	00173fc0 	call	173fc <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff08:	0005303a 	rdctl	r2,status
    ff0c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff10:	e0fff517 	ldw	r3,-44(fp)
    ff14:	00bfff84 	movi	r2,-2
    ff18:	1884703a 	and	r2,r3,r2
    ff1c:	1001703a 	wrctl	status,r2
  
  return context;
    ff20:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    ff24:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    ff28:	e0fffb03 	ldbu	r3,-20(fp)
    ff2c:	008000b4 	movhi	r2,2
    ff30:	1086a404 	addi	r2,r2,6800
    ff34:	18c7883a 	add	r3,r3,r3
    ff38:	18c7883a 	add	r3,r3,r3
    ff3c:	10c5883a 	add	r2,r2,r3
    ff40:	e0fff617 	ldw	r3,-40(fp)
    ff44:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    ff48:	d0e71f17 	ldw	r3,-25476(gp)
    ff4c:	e0bff617 	ldw	r2,-40(fp)
    ff50:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    ff54:	e0bff617 	ldw	r2,-40(fp)
    ff58:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    ff5c:	d0a71f17 	ldw	r2,-25476(gp)
    ff60:	10000326 	beq	r2,zero,ff70 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    ff64:	d0a71f17 	ldw	r2,-25476(gp)
    ff68:	e0fff617 	ldw	r3,-40(fp)
    ff6c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    ff70:	e0bff617 	ldw	r2,-40(fp)
    ff74:	d0a71f15 	stw	r2,-25476(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    ff78:	e0bff617 	ldw	r2,-40(fp)
    ff7c:	10c00d83 	ldbu	r3,54(r2)
    ff80:	d0a72803 	ldbu	r2,-25440(gp)
    ff84:	1884b03a 	or	r2,r3,r2
    ff88:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ff8c:	e0bff617 	ldw	r2,-40(fp)
    ff90:	10800d03 	ldbu	r2,52(r2)
    ff94:	10c03fcc 	andi	r3,r2,255
    ff98:	e0bff617 	ldw	r2,-40(fp)
    ff9c:	10800d03 	ldbu	r2,52(r2)
    ffa0:	11003fcc 	andi	r4,r2,255
    ffa4:	d0a72844 	addi	r2,gp,-25439
    ffa8:	2085883a 	add	r2,r4,r2
    ffac:	11000003 	ldbu	r4,0(r2)
    ffb0:	e0bff617 	ldw	r2,-40(fp)
    ffb4:	10800d43 	ldbu	r2,53(r2)
    ffb8:	2084b03a 	or	r2,r4,r2
    ffbc:	1009883a 	mov	r4,r2
    ffc0:	d0a72844 	addi	r2,gp,-25439
    ffc4:	1885883a 	add	r2,r3,r2
    ffc8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    ffcc:	d0a72443 	ldbu	r2,-25455(gp)
    ffd0:	10800044 	addi	r2,r2,1
    ffd4:	d0a72445 	stb	r2,-25455(gp)
    ffd8:	e0bff417 	ldw	r2,-48(fp)
    ffdc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffe0:	e0bff717 	ldw	r2,-36(fp)
    ffe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    ffe8:	0005883a 	mov	r2,zero
    ffec:	00000506 	br	10004 <OS_TCBInit+0x2c0>
    fff0:	e0bff417 	ldw	r2,-48(fp)
    fff4:	e0bff915 	stw	r2,-28(fp)
    fff8:	e0bff917 	ldw	r2,-28(fp)
    fffc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   10000:	00801084 	movi	r2,66
}
   10004:	e037883a 	mov	sp,fp
   10008:	dfc00117 	ldw	ra,4(sp)
   1000c:	df000017 	ldw	fp,0(sp)
   10010:	dec00204 	addi	sp,sp,8
   10014:	f800283a 	ret

00010018 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10018:	defffe04 	addi	sp,sp,-8
   1001c:	df000115 	stw	fp,4(sp)
   10020:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   10024:	d0a00f04 	addi	r2,gp,-32708
   10028:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   1002c:	d0a01004 	addi	r2,gp,-32704
   10030:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   10034:	d0a01184 	addi	r2,gp,-32698
   10038:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   1003c:	d0a01204 	addi	r2,gp,-32696
   10040:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   10044:	d0a01104 	addi	r2,gp,-32700
   10048:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1004c:	d0a01284 	addi	r2,gp,-32694
   10050:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   10054:	d0a01304 	addi	r2,gp,-32692
   10058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1005c:	d0a01384 	addi	r2,gp,-32690
   10060:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   10064:	d0a01404 	addi	r2,gp,-32688
   10068:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1006c:	d0a01484 	addi	r2,gp,-32686
   10070:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   10074:	d0a01504 	addi	r2,gp,-32684
   10078:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1007c:	d0a01584 	addi	r2,gp,-32682
   10080:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   10084:	d0a01604 	addi	r2,gp,-32680
   10088:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1008c:	d0a01684 	addi	r2,gp,-32678
   10090:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   10094:	d0a01704 	addi	r2,gp,-32676
   10098:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1009c:	d0a01784 	addi	r2,gp,-32674
   100a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   100a4:	d0a01804 	addi	r2,gp,-32672
   100a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   100ac:	d0a01884 	addi	r2,gp,-32670
   100b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   100b4:	d0a01904 	addi	r2,gp,-32668
   100b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   100bc:	d0a01984 	addi	r2,gp,-32666
   100c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   100c4:	d0a01a04 	addi	r2,gp,-32664
   100c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   100cc:	d0a01a84 	addi	r2,gp,-32662
   100d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   100d4:	d0a01b04 	addi	r2,gp,-32660
   100d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   100dc:	d0a01b84 	addi	r2,gp,-32658
   100e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   100e4:	d0a01c04 	addi	r2,gp,-32656
   100e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   100ec:	d0a01c84 	addi	r2,gp,-32654
   100f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   100f4:	d0a01d04 	addi	r2,gp,-32652
   100f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   100fc:	d0a01d84 	addi	r2,gp,-32650
   10100:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   10104:	d0a01e04 	addi	r2,gp,-32648
   10108:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1010c:	d0a01e84 	addi	r2,gp,-32646
   10110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   10114:	d0a01f04 	addi	r2,gp,-32644
   10118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1011c:	d0a01f84 	addi	r2,gp,-32642
   10120:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   10124:	d0a02004 	addi	r2,gp,-32640
   10128:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1012c:	d0a02084 	addi	r2,gp,-32638
   10130:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   10134:	d0a02104 	addi	r2,gp,-32636
   10138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1013c:	d0a02184 	addi	r2,gp,-32634
   10140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   10144:	d0a02204 	addi	r2,gp,-32632
   10148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1014c:	d0a02284 	addi	r2,gp,-32630
   10150:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   10154:	d0a02304 	addi	r2,gp,-32628
   10158:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1015c:	d0a02384 	addi	r2,gp,-32626
   10160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   10164:	d0a02404 	addi	r2,gp,-32624
   10168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1016c:	d0a02484 	addi	r2,gp,-32622
   10170:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   10174:	d0a02504 	addi	r2,gp,-32620
   10178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1017c:	d0a02584 	addi	r2,gp,-32618
   10180:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   10184:	d0a02604 	addi	r2,gp,-32616
   10188:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1018c:	d0a02b04 	addi	r2,gp,-32596
   10190:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   10194:	0001883a 	nop
   10198:	e037883a 	mov	sp,fp
   1019c:	df000017 	ldw	fp,0(sp)
   101a0:	dec00104 	addi	sp,sp,4
   101a4:	f800283a 	ret

000101a8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   101a8:	defff204 	addi	sp,sp,-56
   101ac:	df000d15 	stw	fp,52(sp)
   101b0:	df000d04 	addi	fp,sp,52
   101b4:	e13ffc15 	stw	r4,-16(fp)
   101b8:	2807883a 	mov	r3,r5
   101bc:	3005883a 	mov	r2,r6
   101c0:	e1ffff15 	stw	r7,-4(fp)
   101c4:	e0fffd0d 	sth	r3,-12(fp)
   101c8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   101cc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   101d0:	e0bfff17 	ldw	r2,-4(fp)
   101d4:	1000021e 	bne	r2,zero,101e0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   101d8:	0005883a 	mov	r2,zero
   101dc:	0000b006 	br	104a0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   101e0:	e0bffc17 	ldw	r2,-16(fp)
   101e4:	1000051e 	bne	r2,zero,101fc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   101e8:	e0bfff17 	ldw	r2,-4(fp)
   101ec:	00c01b84 	movi	r3,110
   101f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   101f4:	0005883a 	mov	r2,zero
   101f8:	0000a906 	br	104a0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	10800003 	ldbu	r2,0(r2)
   10204:	10803fcc 	andi	r2,r2,255
   10208:	10800160 	cmpeqi	r2,r2,5
   1020c:	1000051e 	bne	r2,zero,10224 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10210:	e0bfff17 	ldw	r2,-4(fp)
   10214:	00c00044 	movi	r3,1
   10218:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1021c:	0005883a 	mov	r2,zero
   10220:	00009f06 	br	104a0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10224:	e0fffe03 	ldbu	r3,-8(fp)
   10228:	00bfe004 	movi	r2,-128
   1022c:	1884703a 	and	r2,r3,r2
   10230:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   10234:	e0bff503 	ldbu	r2,-44(fp)
   10238:	10000626 	beq	r2,zero,10254 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1023c:	e0bffe03 	ldbu	r2,-8(fp)
   10240:	10801fcc 	andi	r2,r2,127
   10244:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10248:	00800044 	movi	r2,1
   1024c:	e0bff385 	stb	r2,-50(fp)
   10250:	00000106 	br	10258 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   10254:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10258:	e0bfff17 	ldw	r2,-4(fp)
   1025c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10260:	0005303a 	rdctl	r2,status
   10264:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10268:	e0fffb17 	ldw	r3,-20(fp)
   1026c:	00bfff84 	movi	r2,-2
   10270:	1884703a 	and	r2,r3,r2
   10274:	1001703a 	wrctl	status,r2
  
  return context;
   10278:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1027c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   10280:	e0bffe03 	ldbu	r2,-8(fp)
   10284:	10c00060 	cmpeqi	r3,r2,1
   10288:	18005f1e 	bne	r3,zero,10408 <OSFlagAccept+0x260>
   1028c:	10c00088 	cmpgei	r3,r2,2
   10290:	1800021e 	bne	r3,zero,1029c <OSFlagAccept+0xf4>
   10294:	10003f26 	beq	r2,zero,10394 <OSFlagAccept+0x1ec>
   10298:	00007706 	br	10478 <OSFlagAccept+0x2d0>
   1029c:	10c000a0 	cmpeqi	r3,r2,2
   102a0:	1800031e 	bne	r3,zero,102b0 <OSFlagAccept+0x108>
   102a4:	108000e0 	cmpeqi	r2,r2,3
   102a8:	10001e1e 	bne	r2,zero,10324 <OSFlagAccept+0x17c>
   102ac:	00007206 	br	10478 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   102b0:	e0bffc17 	ldw	r2,-16(fp)
   102b4:	10c0020b 	ldhu	r3,8(r2)
   102b8:	e0bffd0b 	ldhu	r2,-12(fp)
   102bc:	1884703a 	and	r2,r3,r2
   102c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   102c4:	e0fff30b 	ldhu	r3,-52(fp)
   102c8:	e0bffd0b 	ldhu	r2,-12(fp)
   102cc:	18800d1e 	bne	r3,r2,10304 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   102d0:	e0bff383 	ldbu	r2,-50(fp)
   102d4:	10800058 	cmpnei	r2,r2,1
   102d8:	10000d1e 	bne	r2,zero,10310 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   102dc:	e0bffc17 	ldw	r2,-16(fp)
   102e0:	1080020b 	ldhu	r2,8(r2)
   102e4:	1007883a 	mov	r3,r2
   102e8:	e0bff30b 	ldhu	r2,-52(fp)
   102ec:	0084303a 	nor	r2,zero,r2
   102f0:	1884703a 	and	r2,r3,r2
   102f4:	1007883a 	mov	r3,r2
   102f8:	e0bffc17 	ldw	r2,-16(fp)
   102fc:	10c0020d 	sth	r3,8(r2)
   10300:	00000306 	br	10310 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10304:	e0bfff17 	ldw	r2,-4(fp)
   10308:	00c01c04 	movi	r3,112
   1030c:	10c00005 	stb	r3,0(r2)
   10310:	e0bff417 	ldw	r2,-48(fp)
   10314:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10318:	e0bff617 	ldw	r2,-40(fp)
   1031c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10320:	00005e06 	br	1049c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	10c0020b 	ldhu	r3,8(r2)
   1032c:	e0bffd0b 	ldhu	r2,-12(fp)
   10330:	1884703a 	and	r2,r3,r2
   10334:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10338:	e0bff30b 	ldhu	r2,-52(fp)
   1033c:	10000d26 	beq	r2,zero,10374 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10340:	e0bff383 	ldbu	r2,-50(fp)
   10344:	10800058 	cmpnei	r2,r2,1
   10348:	10000d1e 	bne	r2,zero,10380 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1034c:	e0bffc17 	ldw	r2,-16(fp)
   10350:	1080020b 	ldhu	r2,8(r2)
   10354:	1007883a 	mov	r3,r2
   10358:	e0bff30b 	ldhu	r2,-52(fp)
   1035c:	0084303a 	nor	r2,zero,r2
   10360:	1884703a 	and	r2,r3,r2
   10364:	1007883a 	mov	r3,r2
   10368:	e0bffc17 	ldw	r2,-16(fp)
   1036c:	10c0020d 	sth	r3,8(r2)
   10370:	00000306 	br	10380 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	00c01c04 	movi	r3,112
   1037c:	10c00005 	stb	r3,0(r2)
   10380:	e0bff417 	ldw	r2,-48(fp)
   10384:	e0bff715 	stw	r2,-36(fp)
   10388:	e0bff717 	ldw	r2,-36(fp)
   1038c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10390:	00004206 	br	1049c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	1080020b 	ldhu	r2,8(r2)
   1039c:	0084303a 	nor	r2,zero,r2
   103a0:	1007883a 	mov	r3,r2
   103a4:	e0bffd0b 	ldhu	r2,-12(fp)
   103a8:	1884703a 	and	r2,r3,r2
   103ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   103b0:	e0fff30b 	ldhu	r3,-52(fp)
   103b4:	e0bffd0b 	ldhu	r2,-12(fp)
   103b8:	18800b1e 	bne	r3,r2,103e8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   103bc:	e0bff383 	ldbu	r2,-50(fp)
   103c0:	10800058 	cmpnei	r2,r2,1
   103c4:	10000b1e 	bne	r2,zero,103f4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   103c8:	e0bffc17 	ldw	r2,-16(fp)
   103cc:	10c0020b 	ldhu	r3,8(r2)
   103d0:	e0bff30b 	ldhu	r2,-52(fp)
   103d4:	1884b03a 	or	r2,r3,r2
   103d8:	1007883a 	mov	r3,r2
   103dc:	e0bffc17 	ldw	r2,-16(fp)
   103e0:	10c0020d 	sth	r3,8(r2)
   103e4:	00000306 	br	103f4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   103e8:	e0bfff17 	ldw	r2,-4(fp)
   103ec:	00c01c04 	movi	r3,112
   103f0:	10c00005 	stb	r3,0(r2)
   103f4:	e0bff417 	ldw	r2,-48(fp)
   103f8:	e0bff815 	stw	r2,-32(fp)
   103fc:	e0bff817 	ldw	r2,-32(fp)
   10400:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10404:	00002506 	br	1049c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10408:	e0bffc17 	ldw	r2,-16(fp)
   1040c:	1080020b 	ldhu	r2,8(r2)
   10410:	0084303a 	nor	r2,zero,r2
   10414:	1007883a 	mov	r3,r2
   10418:	e0bffd0b 	ldhu	r2,-12(fp)
   1041c:	1884703a 	and	r2,r3,r2
   10420:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10424:	e0bff30b 	ldhu	r2,-52(fp)
   10428:	10000b26 	beq	r2,zero,10458 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1042c:	e0bff383 	ldbu	r2,-50(fp)
   10430:	10800058 	cmpnei	r2,r2,1
   10434:	10000b1e 	bne	r2,zero,10464 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10438:	e0bffc17 	ldw	r2,-16(fp)
   1043c:	10c0020b 	ldhu	r3,8(r2)
   10440:	e0bff30b 	ldhu	r2,-52(fp)
   10444:	1884b03a 	or	r2,r3,r2
   10448:	1007883a 	mov	r3,r2
   1044c:	e0bffc17 	ldw	r2,-16(fp)
   10450:	10c0020d 	sth	r3,8(r2)
   10454:	00000306 	br	10464 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10458:	e0bfff17 	ldw	r2,-4(fp)
   1045c:	00c01c04 	movi	r3,112
   10460:	10c00005 	stb	r3,0(r2)
   10464:	e0bff417 	ldw	r2,-48(fp)
   10468:	e0bff915 	stw	r2,-28(fp)
   1046c:	e0bff917 	ldw	r2,-28(fp)
   10470:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10474:	00000906 	br	1049c <OSFlagAccept+0x2f4>
   10478:	e0bff417 	ldw	r2,-48(fp)
   1047c:	e0bffa15 	stw	r2,-24(fp)
   10480:	e0bffa17 	ldw	r2,-24(fp)
   10484:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10488:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1048c:	e0bfff17 	ldw	r2,-4(fp)
   10490:	00c01bc4 	movi	r3,111
   10494:	10c00005 	stb	r3,0(r2)
             break;
   10498:	0001883a 	nop
    }
    return (flags_rdy);
   1049c:	e0bff30b 	ldhu	r2,-52(fp)
}
   104a0:	e037883a 	mov	sp,fp
   104a4:	df000017 	ldw	fp,0(sp)
   104a8:	dec00104 	addi	sp,sp,4
   104ac:	f800283a 	ret

000104b0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   104b0:	defff804 	addi	sp,sp,-32
   104b4:	df000715 	stw	fp,28(sp)
   104b8:	df000704 	addi	fp,sp,28
   104bc:	2005883a 	mov	r2,r4
   104c0:	e17fff15 	stw	r5,-4(fp)
   104c4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   104c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   104cc:	e0bfff17 	ldw	r2,-4(fp)
   104d0:	1000021e 	bne	r2,zero,104dc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   104d4:	0005883a 	mov	r2,zero
   104d8:	00003306 	br	105a8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   104dc:	d0a72a03 	ldbu	r2,-25432(gp)
   104e0:	10803fcc 	andi	r2,r2,255
   104e4:	10000526 	beq	r2,zero,104fc <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	00c00404 	movi	r3,16
   104f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   104f4:	0005883a 	mov	r2,zero
   104f8:	00002b06 	br	105a8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104fc:	0005303a 	rdctl	r2,status
   10500:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10504:	e0fffd17 	ldw	r3,-12(fp)
   10508:	00bfff84 	movi	r2,-2
   1050c:	1884703a 	and	r2,r3,r2
   10510:	1001703a 	wrctl	status,r2
  
  return context;
   10514:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10518:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1051c:	d0a72d17 	ldw	r2,-25420(gp)
   10520:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10524:	e0bffb17 	ldw	r2,-20(fp)
   10528:	10001726 	beq	r2,zero,10588 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1052c:	d0a72d17 	ldw	r2,-25420(gp)
   10530:	10800117 	ldw	r2,4(r2)
   10534:	d0a72d15 	stw	r2,-25420(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10538:	e0bffb17 	ldw	r2,-20(fp)
   1053c:	00c00144 	movi	r3,5
   10540:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10544:	e0bffb17 	ldw	r2,-20(fp)
   10548:	e0fffe0b 	ldhu	r3,-8(fp)
   1054c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10550:	e0bffb17 	ldw	r2,-20(fp)
   10554:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10558:	e0bffb17 	ldw	r2,-20(fp)
   1055c:	00c00fc4 	movi	r3,63
   10560:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10564:	e0bffb17 	ldw	r2,-20(fp)
   10568:	100002c5 	stb	zero,11(r2)
   1056c:	e0bff917 	ldw	r2,-28(fp)
   10570:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10574:	e0bffa17 	ldw	r2,-24(fp)
   10578:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1057c:	e0bfff17 	ldw	r2,-4(fp)
   10580:	10000005 	stb	zero,0(r2)
   10584:	00000706 	br	105a4 <OSFlagCreate+0xf4>
   10588:	e0bff917 	ldw	r2,-28(fp)
   1058c:	e0bffc15 	stw	r2,-16(fp)
   10590:	e0bffc17 	ldw	r2,-16(fp)
   10594:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10598:	e0bfff17 	ldw	r2,-4(fp)
   1059c:	00c01c84 	movi	r3,114
   105a0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   105a4:	e0bffb17 	ldw	r2,-20(fp)
}
   105a8:	e037883a 	mov	sp,fp
   105ac:	df000017 	ldw	fp,0(sp)
   105b0:	dec00104 	addi	sp,sp,4
   105b4:	f800283a 	ret

000105b8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   105b8:	defff204 	addi	sp,sp,-56
   105bc:	dfc00d15 	stw	ra,52(sp)
   105c0:	df000c15 	stw	fp,48(sp)
   105c4:	df000c04 	addi	fp,sp,48
   105c8:	e13ffd15 	stw	r4,-12(fp)
   105cc:	2805883a 	mov	r2,r5
   105d0:	e1bfff15 	stw	r6,-4(fp)
   105d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   105d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   105dc:	e0bfff17 	ldw	r2,-4(fp)
   105e0:	1000021e 	bne	r2,zero,105ec <OSFlagDel+0x34>
        return (pgrp);
   105e4:	e0bffd17 	ldw	r2,-12(fp)
   105e8:	00008006 	br	107ec <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   105ec:	e0bffd17 	ldw	r2,-12(fp)
   105f0:	1000051e 	bne	r2,zero,10608 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   105f4:	e0bfff17 	ldw	r2,-4(fp)
   105f8:	00c01b84 	movi	r3,110
   105fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	00007906 	br	107ec <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10608:	d0a72a03 	ldbu	r2,-25432(gp)
   1060c:	10803fcc 	andi	r2,r2,255
   10610:	10000526 	beq	r2,zero,10628 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10614:	e0bfff17 	ldw	r2,-4(fp)
   10618:	00c003c4 	movi	r3,15
   1061c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10620:	e0bffd17 	ldw	r2,-12(fp)
   10624:	00007106 	br	107ec <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10628:	e0bffd17 	ldw	r2,-12(fp)
   1062c:	10800003 	ldbu	r2,0(r2)
   10630:	10803fcc 	andi	r2,r2,255
   10634:	10800160 	cmpeqi	r2,r2,5
   10638:	1000051e 	bne	r2,zero,10650 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1063c:	e0bfff17 	ldw	r2,-4(fp)
   10640:	00c00044 	movi	r3,1
   10644:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10648:	e0bffd17 	ldw	r2,-12(fp)
   1064c:	00006706 	br	107ec <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10650:	0005303a 	rdctl	r2,status
   10654:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10658:	e0fffc17 	ldw	r3,-16(fp)
   1065c:	00bfff84 	movi	r2,-2
   10660:	1884703a 	and	r2,r3,r2
   10664:	1001703a 	wrctl	status,r2
  
  return context;
   10668:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1066c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800117 	ldw	r2,4(r2)
   10678:	10000326 	beq	r2,zero,10688 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1067c:	00800044 	movi	r2,1
   10680:	e0bff405 	stb	r2,-48(fp)
   10684:	00000106 	br	1068c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10688:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1068c:	e0bffe03 	ldbu	r2,-8(fp)
   10690:	10000326 	beq	r2,zero,106a0 <OSFlagDel+0xe8>
   10694:	10800060 	cmpeqi	r2,r2,1
   10698:	1000231e 	bne	r2,zero,10728 <OSFlagDel+0x170>
   1069c:	00004806 	br	107c0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   106a0:	e0bff403 	ldbu	r2,-48(fp)
   106a4:	1000161e 	bne	r2,zero,10700 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   106a8:	e0bffd17 	ldw	r2,-12(fp)
   106ac:	00c00fc4 	movi	r3,63
   106b0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   106b4:	e0bffd17 	ldw	r2,-12(fp)
   106b8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   106bc:	e0bffd17 	ldw	r2,-12(fp)
   106c0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   106c4:	d0e72d17 	ldw	r3,-25420(gp)
   106c8:	e0bffd17 	ldw	r2,-12(fp)
   106cc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   106d0:	e0bffd17 	ldw	r2,-12(fp)
   106d4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   106d8:	e0bffd17 	ldw	r2,-12(fp)
   106dc:	d0a72d15 	stw	r2,-25420(gp)
   106e0:	e0bff717 	ldw	r2,-36(fp)
   106e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106e8:	e0bff817 	ldw	r2,-32(fp)
   106ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   106f0:	e0bfff17 	ldw	r2,-4(fp)
   106f4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   106f8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   106fc:	00003a06 	br	107e8 <OSFlagDel+0x230>
   10700:	e0bff717 	ldw	r2,-36(fp)
   10704:	e0bff915 	stw	r2,-28(fp)
   10708:	e0bff917 	ldw	r2,-28(fp)
   1070c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10710:	e0bfff17 	ldw	r2,-4(fp)
   10714:	00c01244 	movi	r3,73
   10718:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1071c:	e0bffd17 	ldw	r2,-12(fp)
   10720:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10724:	00003006 	br	107e8 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	10800117 	ldw	r2,4(r2)
   10730:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10734:	00000606 	br	10750 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10738:	000b883a 	mov	r5,zero
   1073c:	e13ff517 	ldw	r4,-44(fp)
   10740:	00117240 	call	11724 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10744:	e0bff517 	ldw	r2,-44(fp)
   10748:	10800017 	ldw	r2,0(r2)
   1074c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10750:	e0bff517 	ldw	r2,-44(fp)
   10754:	103ff81e 	bne	r2,zero,10738 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10758:	e0bffd17 	ldw	r2,-12(fp)
   1075c:	00c00fc4 	movi	r3,63
   10760:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1076c:	e0bffd17 	ldw	r2,-12(fp)
   10770:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10774:	d0e72d17 	ldw	r3,-25420(gp)
   10778:	e0bffd17 	ldw	r2,-12(fp)
   1077c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10780:	e0bffd17 	ldw	r2,-12(fp)
   10784:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	d0a72d15 	stw	r2,-25420(gp)
   10790:	e0bff717 	ldw	r2,-36(fp)
   10794:	e0bffa15 	stw	r2,-24(fp)
   10798:	e0bffa17 	ldw	r2,-24(fp)
   1079c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   107a0:	e0bff403 	ldbu	r2,-48(fp)
   107a4:	10800058 	cmpnei	r2,r2,1
   107a8:	1000011e 	bne	r2,zero,107b0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   107ac:	000f9440 	call	f944 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   107b8:	e03ff615 	stw	zero,-40(fp)
             break;
   107bc:	00000a06 	br	107e8 <OSFlagDel+0x230>
   107c0:	e0bff717 	ldw	r2,-36(fp)
   107c4:	e0bffb15 	stw	r2,-20(fp)
   107c8:	e0bffb17 	ldw	r2,-20(fp)
   107cc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   107d0:	e0bfff17 	ldw	r2,-4(fp)
   107d4:	00c001c4 	movi	r3,7
   107d8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   107dc:	e0bffd17 	ldw	r2,-12(fp)
   107e0:	e0bff615 	stw	r2,-40(fp)
             break;
   107e4:	0001883a 	nop
    }
    return (pgrp_return);
   107e8:	e0bff617 	ldw	r2,-40(fp)
}
   107ec:	e037883a 	mov	sp,fp
   107f0:	dfc00117 	ldw	ra,4(sp)
   107f4:	df000017 	ldw	fp,0(sp)
   107f8:	dec00204 	addi	sp,sp,8
   107fc:	f800283a 	ret

00010800 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10800:	defff604 	addi	sp,sp,-40
   10804:	dfc00915 	stw	ra,36(sp)
   10808:	df000815 	stw	fp,32(sp)
   1080c:	df000804 	addi	fp,sp,32
   10810:	e13ffd15 	stw	r4,-12(fp)
   10814:	e17ffe15 	stw	r5,-8(fp)
   10818:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1081c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	1000021e 	bne	r2,zero,10830 <OSFlagNameGet+0x30>
        return (0);
   10828:	0005883a 	mov	r2,zero
   1082c:	00003906 	br	10914 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	1000051e 	bne	r2,zero,1084c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10838:	e0bfff17 	ldw	r2,-4(fp)
   1083c:	00c01b84 	movi	r3,110
   10840:	10c00005 	stb	r3,0(r2)
        return (0);
   10844:	0005883a 	mov	r2,zero
   10848:	00003206 	br	10914 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1084c:	e0bffe17 	ldw	r2,-8(fp)
   10850:	1000051e 	bne	r2,zero,10868 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10854:	e0bfff17 	ldw	r2,-4(fp)
   10858:	00c00304 	movi	r3,12
   1085c:	10c00005 	stb	r3,0(r2)
        return (0);
   10860:	0005883a 	mov	r2,zero
   10864:	00002b06 	br	10914 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10868:	d0a72a03 	ldbu	r2,-25432(gp)
   1086c:	10803fcc 	andi	r2,r2,255
   10870:	10000526 	beq	r2,zero,10888 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10874:	e0bfff17 	ldw	r2,-4(fp)
   10878:	00c00444 	movi	r3,17
   1087c:	10c00005 	stb	r3,0(r2)
        return (0);
   10880:	0005883a 	mov	r2,zero
   10884:	00002306 	br	10914 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10888:	0005303a 	rdctl	r2,status
   1088c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10890:	e0fffc17 	ldw	r3,-16(fp)
   10894:	00bfff84 	movi	r2,-2
   10898:	1884703a 	and	r2,r3,r2
   1089c:	1001703a 	wrctl	status,r2
  
  return context;
   108a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   108a4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	10800003 	ldbu	r2,0(r2)
   108b0:	10803fcc 	andi	r2,r2,255
   108b4:	10800160 	cmpeqi	r2,r2,5
   108b8:	1000091e 	bne	r2,zero,108e0 <OSFlagNameGet+0xe0>
   108bc:	e0bff817 	ldw	r2,-32(fp)
   108c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108c4:	e0bff917 	ldw	r2,-28(fp)
   108c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   108cc:	e0bfff17 	ldw	r2,-4(fp)
   108d0:	00c00044 	movi	r3,1
   108d4:	10c00005 	stb	r3,0(r2)
        return (0);
   108d8:	0005883a 	mov	r2,zero
   108dc:	00000d06 	br	10914 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   108e0:	e0bffd17 	ldw	r2,-12(fp)
   108e4:	10800284 	addi	r2,r2,10
   108e8:	100b883a 	mov	r5,r2
   108ec:	e13ffe17 	ldw	r4,-8(fp)
   108f0:	000fa880 	call	fa88 <OS_StrCopy>
   108f4:	e0bffb05 	stb	r2,-20(fp)
   108f8:	e0bff817 	ldw	r2,-32(fp)
   108fc:	e0bffa15 	stw	r2,-24(fp)
   10900:	e0bffa17 	ldw	r2,-24(fp)
   10904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10908:	e0bfff17 	ldw	r2,-4(fp)
   1090c:	10000005 	stb	zero,0(r2)
    return (len);
   10910:	e0bffb03 	ldbu	r2,-20(fp)
}
   10914:	e037883a 	mov	sp,fp
   10918:	dfc00117 	ldw	ra,4(sp)
   1091c:	df000017 	ldw	fp,0(sp)
   10920:	dec00204 	addi	sp,sp,8
   10924:	f800283a 	ret

00010928 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10928:	defff504 	addi	sp,sp,-44
   1092c:	dfc00a15 	stw	ra,40(sp)
   10930:	df000915 	stw	fp,36(sp)
   10934:	df000904 	addi	fp,sp,36
   10938:	e13ffd15 	stw	r4,-12(fp)
   1093c:	e17ffe15 	stw	r5,-8(fp)
   10940:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10944:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10948:	e0bfff17 	ldw	r2,-4(fp)
   1094c:	10004326 	beq	r2,zero,10a5c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10950:	e0bffd17 	ldw	r2,-12(fp)
   10954:	1000041e 	bne	r2,zero,10968 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	00c01b84 	movi	r3,110
   10960:	10c00005 	stb	r3,0(r2)
        return;
   10964:	00003e06 	br	10a60 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10968:	e0bffe17 	ldw	r2,-8(fp)
   1096c:	1000041e 	bne	r2,zero,10980 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10970:	e0bfff17 	ldw	r2,-4(fp)
   10974:	00c00304 	movi	r3,12
   10978:	10c00005 	stb	r3,0(r2)
        return;
   1097c:	00003806 	br	10a60 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10980:	d0a72a03 	ldbu	r2,-25432(gp)
   10984:	10803fcc 	andi	r2,r2,255
   10988:	10000426 	beq	r2,zero,1099c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1098c:	e0bfff17 	ldw	r2,-4(fp)
   10990:	00c00484 	movi	r3,18
   10994:	10c00005 	stb	r3,0(r2)
        return;
   10998:	00003106 	br	10a60 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1099c:	0005303a 	rdctl	r2,status
   109a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109a4:	e0fffc17 	ldw	r3,-16(fp)
   109a8:	00bfff84 	movi	r2,-2
   109ac:	1884703a 	and	r2,r3,r2
   109b0:	1001703a 	wrctl	status,r2
  
  return context;
   109b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   109b8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   109bc:	e0bffd17 	ldw	r2,-12(fp)
   109c0:	10800003 	ldbu	r2,0(r2)
   109c4:	10803fcc 	andi	r2,r2,255
   109c8:	10800160 	cmpeqi	r2,r2,5
   109cc:	1000081e 	bne	r2,zero,109f0 <OSFlagNameSet+0xc8>
   109d0:	e0bff717 	ldw	r2,-36(fp)
   109d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109d8:	e0bff817 	ldw	r2,-32(fp)
   109dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   109e0:	e0bfff17 	ldw	r2,-4(fp)
   109e4:	00c00044 	movi	r3,1
   109e8:	10c00005 	stb	r3,0(r2)
        return;
   109ec:	00001c06 	br	10a60 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   109f0:	e13ffe17 	ldw	r4,-8(fp)
   109f4:	000fafc0 	call	fafc <OS_StrLen>
   109f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   109fc:	e0bffa03 	ldbu	r2,-24(fp)
   10a00:	10800830 	cmpltui	r2,r2,32
   10a04:	1000081e 	bne	r2,zero,10a28 <OSFlagNameSet+0x100>
   10a08:	e0bff717 	ldw	r2,-36(fp)
   10a0c:	e0bff915 	stw	r2,-28(fp)
   10a10:	e0bff917 	ldw	r2,-28(fp)
   10a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10a18:	e0bfff17 	ldw	r2,-4(fp)
   10a1c:	00c01cc4 	movi	r3,115
   10a20:	10c00005 	stb	r3,0(r2)
        return;
   10a24:	00000e06 	br	10a60 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10a28:	e0bffd17 	ldw	r2,-12(fp)
   10a2c:	10800284 	addi	r2,r2,10
   10a30:	e17ffe17 	ldw	r5,-8(fp)
   10a34:	1009883a 	mov	r4,r2
   10a38:	000fa880 	call	fa88 <OS_StrCopy>
   10a3c:	e0bff717 	ldw	r2,-36(fp)
   10a40:	e0bffb15 	stw	r2,-20(fp)
   10a44:	e0bffb17 	ldw	r2,-20(fp)
   10a48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10a4c:	e0bfff17 	ldw	r2,-4(fp)
   10a50:	10000005 	stb	zero,0(r2)
    return;
   10a54:	0001883a 	nop
   10a58:	00000106 	br	10a60 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10a5c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10a60:	e037883a 	mov	sp,fp
   10a64:	dfc00117 	ldw	ra,4(sp)
   10a68:	df000017 	ldw	fp,0(sp)
   10a6c:	dec00204 	addi	sp,sp,8
   10a70:	f800283a 	ret

00010a74 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10a74:	deffe104 	addi	sp,sp,-124
   10a78:	dfc01e15 	stw	ra,120(sp)
   10a7c:	df001d15 	stw	fp,116(sp)
   10a80:	df001d04 	addi	fp,sp,116
   10a84:	e13ffc15 	stw	r4,-16(fp)
   10a88:	2809883a 	mov	r4,r5
   10a8c:	3007883a 	mov	r3,r6
   10a90:	3805883a 	mov	r2,r7
   10a94:	e13ffd0d 	sth	r4,-12(fp)
   10a98:	e0fffe05 	stb	r3,-8(fp)
   10a9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10aa0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10aa4:	e0800217 	ldw	r2,8(fp)
   10aa8:	1000021e 	bne	r2,zero,10ab4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10aac:	0005883a 	mov	r2,zero
   10ab0:	00015906 	br	11018 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10ab4:	e0bffc17 	ldw	r2,-16(fp)
   10ab8:	1000051e 	bne	r2,zero,10ad0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10abc:	e0800217 	ldw	r2,8(fp)
   10ac0:	00c01b84 	movi	r3,110
   10ac4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10ac8:	0005883a 	mov	r2,zero
   10acc:	00015206 	br	11018 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10ad0:	d0a72a03 	ldbu	r2,-25432(gp)
   10ad4:	10803fcc 	andi	r2,r2,255
   10ad8:	10000526 	beq	r2,zero,10af0 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10adc:	e0800217 	ldw	r2,8(fp)
   10ae0:	00c00084 	movi	r3,2
   10ae4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10ae8:	0005883a 	mov	r2,zero
   10aec:	00014a06 	br	11018 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10af0:	d0a71c03 	ldbu	r2,-25488(gp)
   10af4:	10803fcc 	andi	r2,r2,255
   10af8:	10000526 	beq	r2,zero,10b10 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10afc:	e0800217 	ldw	r2,8(fp)
   10b00:	00c00344 	movi	r3,13
   10b04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10b08:	0005883a 	mov	r2,zero
   10b0c:	00014206 	br	11018 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10b10:	e0bffc17 	ldw	r2,-16(fp)
   10b14:	10800003 	ldbu	r2,0(r2)
   10b18:	10803fcc 	andi	r2,r2,255
   10b1c:	10800160 	cmpeqi	r2,r2,5
   10b20:	1000051e 	bne	r2,zero,10b38 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   10b24:	e0800217 	ldw	r2,8(fp)
   10b28:	00c00044 	movi	r3,1
   10b2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10b30:	0005883a 	mov	r2,zero
   10b34:	00013806 	br	11018 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10b38:	e0fffe03 	ldbu	r3,-8(fp)
   10b3c:	00bfe004 	movi	r2,-128
   10b40:	1884703a 	and	r2,r3,r2
   10b44:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10b48:	e0bfe603 	ldbu	r2,-104(fp)
   10b4c:	10000626 	beq	r2,zero,10b68 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10b50:	e0bffe03 	ldbu	r2,-8(fp)
   10b54:	10801fcc 	andi	r2,r2,127
   10b58:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10b5c:	00800044 	movi	r2,1
   10b60:	e0bfe405 	stb	r2,-112(fp)
   10b64:	00000106 	br	10b6c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   10b68:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b6c:	0005303a 	rdctl	r2,status
   10b70:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b74:	e0fff617 	ldw	r3,-40(fp)
   10b78:	00bfff84 	movi	r2,-2
   10b7c:	1884703a 	and	r2,r3,r2
   10b80:	1001703a 	wrctl	status,r2
  
  return context;
   10b84:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10b88:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   10b8c:	e0bffe03 	ldbu	r2,-8(fp)
   10b90:	10c00060 	cmpeqi	r3,r2,1
   10b94:	1800921e 	bne	r3,zero,10de0 <OSFlagPend+0x36c>
   10b98:	10c00088 	cmpgei	r3,r2,2
   10b9c:	1800021e 	bne	r3,zero,10ba8 <OSFlagPend+0x134>
   10ba0:	10006126 	beq	r2,zero,10d28 <OSFlagPend+0x2b4>
   10ba4:	0000bb06 	br	10e94 <OSFlagPend+0x420>
   10ba8:	10c000a0 	cmpeqi	r3,r2,2
   10bac:	1800031e 	bne	r3,zero,10bbc <OSFlagPend+0x148>
   10bb0:	108000e0 	cmpeqi	r2,r2,3
   10bb4:	10002f1e 	bne	r2,zero,10c74 <OSFlagPend+0x200>
   10bb8:	0000b606 	br	10e94 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10bbc:	e0bffc17 	ldw	r2,-16(fp)
   10bc0:	10c0020b 	ldhu	r3,8(r2)
   10bc4:	e0bffd0b 	ldhu	r2,-12(fp)
   10bc8:	1884703a 	and	r2,r3,r2
   10bcc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10bd0:	e0ffe80b 	ldhu	r3,-96(fp)
   10bd4:	e0bffd0b 	ldhu	r2,-12(fp)
   10bd8:	1880171e 	bne	r3,r2,10c38 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10bdc:	e0bfe403 	ldbu	r2,-112(fp)
   10be0:	10800058 	cmpnei	r2,r2,1
   10be4:	1000091e 	bne	r2,zero,10c0c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10be8:	e0bffc17 	ldw	r2,-16(fp)
   10bec:	1080020b 	ldhu	r2,8(r2)
   10bf0:	1007883a 	mov	r3,r2
   10bf4:	e0bfe80b 	ldhu	r2,-96(fp)
   10bf8:	0084303a 	nor	r2,zero,r2
   10bfc:	1884703a 	and	r2,r3,r2
   10c00:	1007883a 	mov	r3,r2
   10c04:	e0bffc17 	ldw	r2,-16(fp)
   10c08:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10c0c:	d0a72b17 	ldw	r2,-25428(gp)
   10c10:	e0ffe80b 	ldhu	r3,-96(fp)
   10c14:	10c00b0d 	sth	r3,44(r2)
   10c18:	e0bfe517 	ldw	r2,-108(fp)
   10c1c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c20:	e0bfe717 	ldw	r2,-100(fp)
   10c24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10c28:	e0800217 	ldw	r2,8(fp)
   10c2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10c30:	e0bfe80b 	ldhu	r2,-96(fp)
   10c34:	0000f806 	br	11018 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10c38:	e13ffd0b 	ldhu	r4,-12(fp)
   10c3c:	e17ffe03 	ldbu	r5,-8(fp)
   10c40:	e0bfff0b 	ldhu	r2,-4(fp)
   10c44:	e0fff704 	addi	r3,fp,-36
   10c48:	d8800015 	stw	r2,0(sp)
   10c4c:	280f883a 	mov	r7,r5
   10c50:	200d883a 	mov	r6,r4
   10c54:	180b883a 	mov	r5,r3
   10c58:	e13ffc17 	ldw	r4,-16(fp)
   10c5c:	00114e40 	call	114e4 <OS_FlagBlock>
   10c60:	e0bfe517 	ldw	r2,-108(fp)
   10c64:	e0bfe915 	stw	r2,-92(fp)
   10c68:	e0bfe917 	ldw	r2,-92(fp)
   10c6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10c70:	00009206 	br	10ebc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	10c0020b 	ldhu	r3,8(r2)
   10c7c:	e0bffd0b 	ldhu	r2,-12(fp)
   10c80:	1884703a 	and	r2,r3,r2
   10c84:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10c88:	e0bfe80b 	ldhu	r2,-96(fp)
   10c8c:	10001726 	beq	r2,zero,10cec <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10c90:	e0bfe403 	ldbu	r2,-112(fp)
   10c94:	10800058 	cmpnei	r2,r2,1
   10c98:	1000091e 	bne	r2,zero,10cc0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	1080020b 	ldhu	r2,8(r2)
   10ca4:	1007883a 	mov	r3,r2
   10ca8:	e0bfe80b 	ldhu	r2,-96(fp)
   10cac:	0084303a 	nor	r2,zero,r2
   10cb0:	1884703a 	and	r2,r3,r2
   10cb4:	1007883a 	mov	r3,r2
   10cb8:	e0bffc17 	ldw	r2,-16(fp)
   10cbc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10cc0:	d0a72b17 	ldw	r2,-25428(gp)
   10cc4:	e0ffe80b 	ldhu	r3,-96(fp)
   10cc8:	10c00b0d 	sth	r3,44(r2)
   10ccc:	e0bfe517 	ldw	r2,-108(fp)
   10cd0:	e0bfea15 	stw	r2,-88(fp)
   10cd4:	e0bfea17 	ldw	r2,-88(fp)
   10cd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10cdc:	e0800217 	ldw	r2,8(fp)
   10ce0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10ce4:	e0bfe80b 	ldhu	r2,-96(fp)
   10ce8:	0000cb06 	br	11018 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10cec:	e13ffd0b 	ldhu	r4,-12(fp)
   10cf0:	e17ffe03 	ldbu	r5,-8(fp)
   10cf4:	e0bfff0b 	ldhu	r2,-4(fp)
   10cf8:	e0fff704 	addi	r3,fp,-36
   10cfc:	d8800015 	stw	r2,0(sp)
   10d00:	280f883a 	mov	r7,r5
   10d04:	200d883a 	mov	r6,r4
   10d08:	180b883a 	mov	r5,r3
   10d0c:	e13ffc17 	ldw	r4,-16(fp)
   10d10:	00114e40 	call	114e4 <OS_FlagBlock>
   10d14:	e0bfe517 	ldw	r2,-108(fp)
   10d18:	e0bfeb15 	stw	r2,-84(fp)
   10d1c:	e0bfeb17 	ldw	r2,-84(fp)
   10d20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10d24:	00006506 	br	10ebc <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10d28:	e0bffc17 	ldw	r2,-16(fp)
   10d2c:	1080020b 	ldhu	r2,8(r2)
   10d30:	0084303a 	nor	r2,zero,r2
   10d34:	1007883a 	mov	r3,r2
   10d38:	e0bffd0b 	ldhu	r2,-12(fp)
   10d3c:	1884703a 	and	r2,r3,r2
   10d40:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10d44:	e0ffe80b 	ldhu	r3,-96(fp)
   10d48:	e0bffd0b 	ldhu	r2,-12(fp)
   10d4c:	1880151e 	bne	r3,r2,10da4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10d50:	e0bfe403 	ldbu	r2,-112(fp)
   10d54:	10800058 	cmpnei	r2,r2,1
   10d58:	1000071e 	bne	r2,zero,10d78 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10d5c:	e0bffc17 	ldw	r2,-16(fp)
   10d60:	10c0020b 	ldhu	r3,8(r2)
   10d64:	e0bfe80b 	ldhu	r2,-96(fp)
   10d68:	1884b03a 	or	r2,r3,r2
   10d6c:	1007883a 	mov	r3,r2
   10d70:	e0bffc17 	ldw	r2,-16(fp)
   10d74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10d78:	d0a72b17 	ldw	r2,-25428(gp)
   10d7c:	e0ffe80b 	ldhu	r3,-96(fp)
   10d80:	10c00b0d 	sth	r3,44(r2)
   10d84:	e0bfe517 	ldw	r2,-108(fp)
   10d88:	e0bfec15 	stw	r2,-80(fp)
   10d8c:	e0bfec17 	ldw	r2,-80(fp)
   10d90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10d94:	e0800217 	ldw	r2,8(fp)
   10d98:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10d9c:	e0bfe80b 	ldhu	r2,-96(fp)
   10da0:	00009d06 	br	11018 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10da4:	e13ffd0b 	ldhu	r4,-12(fp)
   10da8:	e17ffe03 	ldbu	r5,-8(fp)
   10dac:	e0bfff0b 	ldhu	r2,-4(fp)
   10db0:	e0fff704 	addi	r3,fp,-36
   10db4:	d8800015 	stw	r2,0(sp)
   10db8:	280f883a 	mov	r7,r5
   10dbc:	200d883a 	mov	r6,r4
   10dc0:	180b883a 	mov	r5,r3
   10dc4:	e13ffc17 	ldw	r4,-16(fp)
   10dc8:	00114e40 	call	114e4 <OS_FlagBlock>
   10dcc:	e0bfe517 	ldw	r2,-108(fp)
   10dd0:	e0bfed15 	stw	r2,-76(fp)
   10dd4:	e0bfed17 	ldw	r2,-76(fp)
   10dd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10ddc:	00003706 	br	10ebc <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10de0:	e0bffc17 	ldw	r2,-16(fp)
   10de4:	1080020b 	ldhu	r2,8(r2)
   10de8:	0084303a 	nor	r2,zero,r2
   10dec:	1007883a 	mov	r3,r2
   10df0:	e0bffd0b 	ldhu	r2,-12(fp)
   10df4:	1884703a 	and	r2,r3,r2
   10df8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10dfc:	e0bfe80b 	ldhu	r2,-96(fp)
   10e00:	10001526 	beq	r2,zero,10e58 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10e04:	e0bfe403 	ldbu	r2,-112(fp)
   10e08:	10800058 	cmpnei	r2,r2,1
   10e0c:	1000071e 	bne	r2,zero,10e2c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10e10:	e0bffc17 	ldw	r2,-16(fp)
   10e14:	10c0020b 	ldhu	r3,8(r2)
   10e18:	e0bfe80b 	ldhu	r2,-96(fp)
   10e1c:	1884b03a 	or	r2,r3,r2
   10e20:	1007883a 	mov	r3,r2
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10e2c:	d0a72b17 	ldw	r2,-25428(gp)
   10e30:	e0ffe80b 	ldhu	r3,-96(fp)
   10e34:	10c00b0d 	sth	r3,44(r2)
   10e38:	e0bfe517 	ldw	r2,-108(fp)
   10e3c:	e0bfee15 	stw	r2,-72(fp)
   10e40:	e0bfee17 	ldw	r2,-72(fp)
   10e44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10e48:	e0800217 	ldw	r2,8(fp)
   10e4c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10e50:	e0bfe80b 	ldhu	r2,-96(fp)
   10e54:	00007006 	br	11018 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10e58:	e13ffd0b 	ldhu	r4,-12(fp)
   10e5c:	e17ffe03 	ldbu	r5,-8(fp)
   10e60:	e0bfff0b 	ldhu	r2,-4(fp)
   10e64:	e0fff704 	addi	r3,fp,-36
   10e68:	d8800015 	stw	r2,0(sp)
   10e6c:	280f883a 	mov	r7,r5
   10e70:	200d883a 	mov	r6,r4
   10e74:	180b883a 	mov	r5,r3
   10e78:	e13ffc17 	ldw	r4,-16(fp)
   10e7c:	00114e40 	call	114e4 <OS_FlagBlock>
   10e80:	e0bfe517 	ldw	r2,-108(fp)
   10e84:	e0bfef15 	stw	r2,-68(fp)
   10e88:	e0bfef17 	ldw	r2,-68(fp)
   10e8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10e90:	00000a06 	br	10ebc <OSFlagPend+0x448>
   10e94:	e0bfe517 	ldw	r2,-108(fp)
   10e98:	e0bff015 	stw	r2,-64(fp)
   10e9c:	e0bff017 	ldw	r2,-64(fp)
   10ea0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10ea4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10ea8:	e0800217 	ldw	r2,8(fp)
   10eac:	00c01bc4 	movi	r3,111
   10eb0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10eb4:	e0bfe80b 	ldhu	r2,-96(fp)
   10eb8:	00005706 	br	11018 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10ebc:	000f9440 	call	f944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ec0:	0005303a 	rdctl	r2,status
   10ec4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ec8:	e0fff117 	ldw	r3,-60(fp)
   10ecc:	00bfff84 	movi	r2,-2
   10ed0:	1884703a 	and	r2,r3,r2
   10ed4:	1001703a 	wrctl	status,r2
  
  return context;
   10ed8:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   10edc:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10ee0:	d0a72b17 	ldw	r2,-25428(gp)
   10ee4:	10800c43 	ldbu	r2,49(r2)
   10ee8:	10803fcc 	andi	r2,r2,255
   10eec:	10001c26 	beq	r2,zero,10f60 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10ef0:	d0a72b17 	ldw	r2,-25428(gp)
   10ef4:	10800c43 	ldbu	r2,49(r2)
   10ef8:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10efc:	d0a72b17 	ldw	r2,-25428(gp)
   10f00:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10f04:	e0bff704 	addi	r2,fp,-36
   10f08:	1009883a 	mov	r4,r2
   10f0c:	00118180 	call	11818 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10f10:	d0a72b17 	ldw	r2,-25428(gp)
   10f14:	10000c05 	stb	zero,48(r2)
   10f18:	e0bfe517 	ldw	r2,-108(fp)
   10f1c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f20:	e0bff217 	ldw	r2,-56(fp)
   10f24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10f28:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   10f2c:	e0bff303 	ldbu	r2,-52(fp)
   10f30:	108000a0 	cmpeqi	r2,r2,2
   10f34:	10000426 	beq	r2,zero,10f48 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10f38:	e0800217 	ldw	r2,8(fp)
   10f3c:	00c00384 	movi	r3,14
   10f40:	10c00005 	stb	r3,0(r2)
                 break;
   10f44:	00000406 	br	10f58 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10f48:	e0800217 	ldw	r2,8(fp)
   10f4c:	00c00284 	movi	r3,10
   10f50:	10c00005 	stb	r3,0(r2)
                 break;
   10f54:	0001883a 	nop
        }
        return (flags_rdy);
   10f58:	e0bfe80b 	ldhu	r2,-96(fp)
   10f5c:	00002e06 	br	11018 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10f60:	d0a72b17 	ldw	r2,-25428(gp)
   10f64:	10800b0b 	ldhu	r2,44(r2)
   10f68:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10f6c:	e0bfe403 	ldbu	r2,-112(fp)
   10f70:	10800058 	cmpnei	r2,r2,1
   10f74:	1000211e 	bne	r2,zero,10ffc <OSFlagPend+0x588>
        switch (wait_type) {
   10f78:	e0bffe03 	ldbu	r2,-8(fp)
   10f7c:	10001616 	blt	r2,zero,10fd8 <OSFlagPend+0x564>
   10f80:	10c00090 	cmplti	r3,r2,2
   10f84:	18000c1e 	bne	r3,zero,10fb8 <OSFlagPend+0x544>
   10f88:	10800108 	cmpgei	r2,r2,4
   10f8c:	1000121e 	bne	r2,zero,10fd8 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10f90:	e0bffc17 	ldw	r2,-16(fp)
   10f94:	1080020b 	ldhu	r2,8(r2)
   10f98:	1007883a 	mov	r3,r2
   10f9c:	e0bfe80b 	ldhu	r2,-96(fp)
   10fa0:	0084303a 	nor	r2,zero,r2
   10fa4:	1884703a 	and	r2,r3,r2
   10fa8:	1007883a 	mov	r3,r2
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	10c0020d 	sth	r3,8(r2)
                 break;
   10fb4:	00001106 	br	10ffc <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10fb8:	e0bffc17 	ldw	r2,-16(fp)
   10fbc:	10c0020b 	ldhu	r3,8(r2)
   10fc0:	e0bfe80b 	ldhu	r2,-96(fp)
   10fc4:	1884b03a 	or	r2,r3,r2
   10fc8:	1007883a 	mov	r3,r2
   10fcc:	e0bffc17 	ldw	r2,-16(fp)
   10fd0:	10c0020d 	sth	r3,8(r2)
                 break;
   10fd4:	00000906 	br	10ffc <OSFlagPend+0x588>
   10fd8:	e0bfe517 	ldw	r2,-108(fp)
   10fdc:	e0bff415 	stw	r2,-48(fp)
   10fe0:	e0bff417 	ldw	r2,-48(fp)
   10fe4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10fe8:	e0800217 	ldw	r2,8(fp)
   10fec:	00c01bc4 	movi	r3,111
   10ff0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10ff4:	0005883a 	mov	r2,zero
   10ff8:	00000706 	br	11018 <OSFlagPend+0x5a4>
   10ffc:	e0bfe517 	ldw	r2,-108(fp)
   11000:	e0bff515 	stw	r2,-44(fp)
   11004:	e0bff517 	ldw	r2,-44(fp)
   11008:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1100c:	e0800217 	ldw	r2,8(fp)
   11010:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   11014:	e0bfe80b 	ldhu	r2,-96(fp)
}
   11018:	e037883a 	mov	sp,fp
   1101c:	dfc00117 	ldw	ra,4(sp)
   11020:	df000017 	ldw	fp,0(sp)
   11024:	dec00204 	addi	sp,sp,8
   11028:	f800283a 	ret

0001102c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1102c:	defffb04 	addi	sp,sp,-20
   11030:	df000415 	stw	fp,16(sp)
   11034:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11038:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1103c:	0005303a 	rdctl	r2,status
   11040:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11044:	e0fffe17 	ldw	r3,-8(fp)
   11048:	00bfff84 	movi	r2,-2
   1104c:	1884703a 	and	r2,r3,r2
   11050:	1001703a 	wrctl	status,r2
  
  return context;
   11054:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11058:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1105c:	d0a72b17 	ldw	r2,-25428(gp)
   11060:	10800b0b 	ldhu	r2,44(r2)
   11064:	e0bffd0d 	sth	r2,-12(fp)
   11068:	e0bffc17 	ldw	r2,-16(fp)
   1106c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11070:	e0bfff17 	ldw	r2,-4(fp)
   11074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   11078:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1107c:	e037883a 	mov	sp,fp
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00104 	addi	sp,sp,4
   11088:	f800283a 	ret

0001108c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1108c:	deffef04 	addi	sp,sp,-68
   11090:	dfc01015 	stw	ra,64(sp)
   11094:	df000f15 	stw	fp,60(sp)
   11098:	df000f04 	addi	fp,sp,60
   1109c:	e13ffc15 	stw	r4,-16(fp)
   110a0:	2807883a 	mov	r3,r5
   110a4:	3005883a 	mov	r2,r6
   110a8:	e1ffff15 	stw	r7,-4(fp)
   110ac:	e0fffd0d 	sth	r3,-12(fp)
   110b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   110b4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   110b8:	e0bfff17 	ldw	r2,-4(fp)
   110bc:	1000021e 	bne	r2,zero,110c8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   110c0:	0005883a 	mov	r2,zero
   110c4:	0000d106 	br	1140c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   110c8:	e0bffc17 	ldw	r2,-16(fp)
   110cc:	1000051e 	bne	r2,zero,110e4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   110d0:	e0bfff17 	ldw	r2,-4(fp)
   110d4:	00c01b84 	movi	r3,110
   110d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110dc:	0005883a 	mov	r2,zero
   110e0:	0000ca06 	br	1140c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   110e4:	e0bffc17 	ldw	r2,-16(fp)
   110e8:	10800003 	ldbu	r2,0(r2)
   110ec:	10803fcc 	andi	r2,r2,255
   110f0:	10800160 	cmpeqi	r2,r2,5
   110f4:	1000051e 	bne	r2,zero,1110c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   110f8:	e0bfff17 	ldw	r2,-4(fp)
   110fc:	00c00044 	movi	r3,1
   11100:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11104:	0005883a 	mov	r2,zero
   11108:	0000c006 	br	1140c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1110c:	0005303a 	rdctl	r2,status
   11110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11114:	e0fffb17 	ldw	r3,-20(fp)
   11118:	00bfff84 	movi	r2,-2
   1111c:	1884703a 	and	r2,r3,r2
   11120:	1001703a 	wrctl	status,r2
  
  return context;
   11124:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11128:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1112c:	e0bffe03 	ldbu	r2,-8(fp)
   11130:	10000326 	beq	r2,zero,11140 <OSFlagPost+0xb4>
   11134:	10800060 	cmpeqi	r2,r2,1
   11138:	10000b1e 	bne	r2,zero,11168 <OSFlagPost+0xdc>
   1113c:	00001206 	br	11188 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   11140:	e0bffc17 	ldw	r2,-16(fp)
   11144:	1080020b 	ldhu	r2,8(r2)
   11148:	1007883a 	mov	r3,r2
   1114c:	e0bffd0b 	ldhu	r2,-12(fp)
   11150:	0084303a 	nor	r2,zero,r2
   11154:	1884703a 	and	r2,r3,r2
   11158:	1007883a 	mov	r3,r2
   1115c:	e0bffc17 	ldw	r2,-16(fp)
   11160:	10c0020d 	sth	r3,8(r2)
             break;
   11164:	00001106 	br	111ac <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   11168:	e0bffc17 	ldw	r2,-16(fp)
   1116c:	10c0020b 	ldhu	r3,8(r2)
   11170:	e0bffd0b 	ldhu	r2,-12(fp)
   11174:	1884b03a 	or	r2,r3,r2
   11178:	1007883a 	mov	r3,r2
   1117c:	e0bffc17 	ldw	r2,-16(fp)
   11180:	10c0020d 	sth	r3,8(r2)
             break;
   11184:	00000906 	br	111ac <OSFlagPost+0x120>
   11188:	e0bff317 	ldw	r2,-52(fp)
   1118c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11190:	e0bff417 	ldw	r2,-48(fp)
   11194:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11198:	e0bfff17 	ldw	r2,-4(fp)
   1119c:	00c01c44 	movi	r3,113
   111a0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   111a4:	0005883a 	mov	r2,zero
   111a8:	00009806 	br	1140c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   111ac:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   111b0:	e0bffc17 	ldw	r2,-16(fp)
   111b4:	10800117 	ldw	r2,4(r2)
   111b8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   111bc:	00007706 	br	1139c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   111c0:	e0bff117 	ldw	r2,-60(fp)
   111c4:	10800483 	ldbu	r2,18(r2)
   111c8:	10803fcc 	andi	r2,r2,255
   111cc:	10c00060 	cmpeqi	r3,r2,1
   111d0:	18004a1e 	bne	r3,zero,112fc <OSFlagPost+0x270>
   111d4:	10c00088 	cmpgei	r3,r2,2
   111d8:	1800021e 	bne	r3,zero,111e4 <OSFlagPost+0x158>
   111dc:	10002f26 	beq	r2,zero,1129c <OSFlagPost+0x210>
   111e0:	00005b06 	br	11350 <OSFlagPost+0x2c4>
   111e4:	10c000a0 	cmpeqi	r3,r2,2
   111e8:	1800031e 	bne	r3,zero,111f8 <OSFlagPost+0x16c>
   111ec:	108000e0 	cmpeqi	r2,r2,3
   111f0:	1000171e 	bne	r2,zero,11250 <OSFlagPost+0x1c4>
   111f4:	00005606 	br	11350 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	10c0020b 	ldhu	r3,8(r2)
   11200:	e0bff117 	ldw	r2,-60(fp)
   11204:	1080040b 	ldhu	r2,16(r2)
   11208:	1884703a 	and	r2,r3,r2
   1120c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11210:	e0bff117 	ldw	r2,-60(fp)
   11214:	1080040b 	ldhu	r2,16(r2)
   11218:	10ffffcc 	andi	r3,r2,65535
   1121c:	e0bff60b 	ldhu	r2,-40(fp)
   11220:	1880541e 	bne	r3,r2,11374 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11224:	e0bff60b 	ldhu	r2,-40(fp)
   11228:	100b883a 	mov	r5,r2
   1122c:	e13ff117 	ldw	r4,-60(fp)
   11230:	00117240 	call	11724 <OS_FlagTaskRdy>
   11234:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11238:	e0bff683 	ldbu	r2,-38(fp)
   1123c:	10800058 	cmpnei	r2,r2,1
   11240:	10004c1e 	bne	r2,zero,11374 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11244:	00800044 	movi	r2,1
   11248:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1124c:	00004906 	br	11374 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	10c0020b 	ldhu	r3,8(r2)
   11258:	e0bff117 	ldw	r2,-60(fp)
   1125c:	1080040b 	ldhu	r2,16(r2)
   11260:	1884703a 	and	r2,r3,r2
   11264:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11268:	e0bff60b 	ldhu	r2,-40(fp)
   1126c:	10004326 	beq	r2,zero,1137c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11270:	e0bff60b 	ldhu	r2,-40(fp)
   11274:	100b883a 	mov	r5,r2
   11278:	e13ff117 	ldw	r4,-60(fp)
   1127c:	00117240 	call	11724 <OS_FlagTaskRdy>
   11280:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11284:	e0bff683 	ldbu	r2,-38(fp)
   11288:	10800058 	cmpnei	r2,r2,1
   1128c:	10003b1e 	bne	r2,zero,1137c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11290:	00800044 	movi	r2,1
   11294:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11298:	00003806 	br	1137c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1129c:	e0bffc17 	ldw	r2,-16(fp)
   112a0:	1080020b 	ldhu	r2,8(r2)
   112a4:	0084303a 	nor	r2,zero,r2
   112a8:	1007883a 	mov	r3,r2
   112ac:	e0bff117 	ldw	r2,-60(fp)
   112b0:	1080040b 	ldhu	r2,16(r2)
   112b4:	1884703a 	and	r2,r3,r2
   112b8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   112bc:	e0bff117 	ldw	r2,-60(fp)
   112c0:	1080040b 	ldhu	r2,16(r2)
   112c4:	10ffffcc 	andi	r3,r2,65535
   112c8:	e0bff60b 	ldhu	r2,-40(fp)
   112cc:	18802d1e 	bne	r3,r2,11384 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   112d0:	e0bff60b 	ldhu	r2,-40(fp)
   112d4:	100b883a 	mov	r5,r2
   112d8:	e13ff117 	ldw	r4,-60(fp)
   112dc:	00117240 	call	11724 <OS_FlagTaskRdy>
   112e0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   112e4:	e0bff683 	ldbu	r2,-38(fp)
   112e8:	10800058 	cmpnei	r2,r2,1
   112ec:	1000251e 	bne	r2,zero,11384 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   112f0:	00800044 	movi	r2,1
   112f4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   112f8:	00002206 	br	11384 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   112fc:	e0bffc17 	ldw	r2,-16(fp)
   11300:	1080020b 	ldhu	r2,8(r2)
   11304:	0084303a 	nor	r2,zero,r2
   11308:	1007883a 	mov	r3,r2
   1130c:	e0bff117 	ldw	r2,-60(fp)
   11310:	1080040b 	ldhu	r2,16(r2)
   11314:	1884703a 	and	r2,r3,r2
   11318:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1131c:	e0bff60b 	ldhu	r2,-40(fp)
   11320:	10001a26 	beq	r2,zero,1138c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11324:	e0bff60b 	ldhu	r2,-40(fp)
   11328:	100b883a 	mov	r5,r2
   1132c:	e13ff117 	ldw	r4,-60(fp)
   11330:	00117240 	call	11724 <OS_FlagTaskRdy>
   11334:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11338:	e0bff683 	ldbu	r2,-38(fp)
   1133c:	10800058 	cmpnei	r2,r2,1
   11340:	1000121e 	bne	r2,zero,1138c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11344:	00800044 	movi	r2,1
   11348:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1134c:	00000f06 	br	1138c <OSFlagPost+0x300>
   11350:	e0bff317 	ldw	r2,-52(fp)
   11354:	e0bff515 	stw	r2,-44(fp)
   11358:	e0bff517 	ldw	r2,-44(fp)
   1135c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11360:	e0bfff17 	ldw	r2,-4(fp)
   11364:	00c01bc4 	movi	r3,111
   11368:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1136c:	0005883a 	mov	r2,zero
   11370:	00002606 	br	1140c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11374:	0001883a 	nop
   11378:	00000506 	br	11390 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1137c:	0001883a 	nop
   11380:	00000306 	br	11390 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11384:	0001883a 	nop
   11388:	00000106 	br	11390 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1138c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11390:	e0bff117 	ldw	r2,-60(fp)
   11394:	10800017 	ldw	r2,0(r2)
   11398:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1139c:	e0bff117 	ldw	r2,-60(fp)
   113a0:	103f871e 	bne	r2,zero,111c0 <OSFlagPost+0x134>
   113a4:	e0bff317 	ldw	r2,-52(fp)
   113a8:	e0bff715 	stw	r2,-36(fp)
   113ac:	e0bff717 	ldw	r2,-36(fp)
   113b0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   113b4:	e0bff203 	ldbu	r2,-56(fp)
   113b8:	10800058 	cmpnei	r2,r2,1
   113bc:	1000011e 	bne	r2,zero,113c4 <OSFlagPost+0x338>
        OS_Sched();
   113c0:	000f9440 	call	f944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113c4:	0005303a 	rdctl	r2,status
   113c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113cc:	e0fffa17 	ldw	r3,-24(fp)
   113d0:	00bfff84 	movi	r2,-2
   113d4:	1884703a 	and	r2,r3,r2
   113d8:	1001703a 	wrctl	status,r2
  
  return context;
   113dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   113e0:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   113e4:	e0bffc17 	ldw	r2,-16(fp)
   113e8:	1080020b 	ldhu	r2,8(r2)
   113ec:	e0bff90d 	sth	r2,-28(fp)
   113f0:	e0bff317 	ldw	r2,-52(fp)
   113f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113f8:	e0bff817 	ldw	r2,-32(fp)
   113fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11400:	e0bfff17 	ldw	r2,-4(fp)
   11404:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11408:	e0bff90b 	ldhu	r2,-28(fp)
}
   1140c:	e037883a 	mov	sp,fp
   11410:	dfc00117 	ldw	ra,4(sp)
   11414:	df000017 	ldw	fp,0(sp)
   11418:	dec00204 	addi	sp,sp,8
   1141c:	f800283a 	ret

00011420 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11420:	defff904 	addi	sp,sp,-28
   11424:	df000615 	stw	fp,24(sp)
   11428:	df000604 	addi	fp,sp,24
   1142c:	e13ffe15 	stw	r4,-8(fp)
   11430:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   11434:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   11438:	e0bfff17 	ldw	r2,-4(fp)
   1143c:	1000021e 	bne	r2,zero,11448 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   11440:	0005883a 	mov	r2,zero
   11444:	00002306 	br	114d4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	1000051e 	bne	r2,zero,11464 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11450:	e0bfff17 	ldw	r2,-4(fp)
   11454:	00c01b84 	movi	r3,110
   11458:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1145c:	0005883a 	mov	r2,zero
   11460:	00001c06 	br	114d4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11464:	e0bffe17 	ldw	r2,-8(fp)
   11468:	10800003 	ldbu	r2,0(r2)
   1146c:	10803fcc 	andi	r2,r2,255
   11470:	10800160 	cmpeqi	r2,r2,5
   11474:	1000051e 	bne	r2,zero,1148c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11478:	e0bfff17 	ldw	r2,-4(fp)
   1147c:	00c00044 	movi	r3,1
   11480:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11484:	0005883a 	mov	r2,zero
   11488:	00001206 	br	114d4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1148c:	0005303a 	rdctl	r2,status
   11490:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11494:	e0fffc17 	ldw	r3,-16(fp)
   11498:	00bfff84 	movi	r2,-2
   1149c:	1884703a 	and	r2,r3,r2
   114a0:	1001703a 	wrctl	status,r2
  
  return context;
   114a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   114a8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   114ac:	e0bffe17 	ldw	r2,-8(fp)
   114b0:	1080020b 	ldhu	r2,8(r2)
   114b4:	e0bffb0d 	sth	r2,-20(fp)
   114b8:	e0bffa17 	ldw	r2,-24(fp)
   114bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114c0:	e0bffd17 	ldw	r2,-12(fp)
   114c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   114c8:	e0bfff17 	ldw	r2,-4(fp)
   114cc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   114d0:	e0bffb0b 	ldhu	r2,-20(fp)
}
   114d4:	e037883a 	mov	sp,fp
   114d8:	df000017 	ldw	fp,0(sp)
   114dc:	dec00104 	addi	sp,sp,4
   114e0:	f800283a 	ret

000114e4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   114e4:	defff804 	addi	sp,sp,-32
   114e8:	df000715 	stw	fp,28(sp)
   114ec:	df000704 	addi	fp,sp,28
   114f0:	e13ffb15 	stw	r4,-20(fp)
   114f4:	e17ffc15 	stw	r5,-16(fp)
   114f8:	3009883a 	mov	r4,r6
   114fc:	3807883a 	mov	r3,r7
   11500:	e0800117 	ldw	r2,4(fp)
   11504:	e13ffd0d 	sth	r4,-12(fp)
   11508:	e0fffe05 	stb	r3,-8(fp)
   1150c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11510:	d0a72b17 	ldw	r2,-25428(gp)
   11514:	d0e72b17 	ldw	r3,-25428(gp)
   11518:	18c00c03 	ldbu	r3,48(r3)
   1151c:	18c00814 	ori	r3,r3,32
   11520:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11524:	d0a72b17 	ldw	r2,-25428(gp)
   11528:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1152c:	d0a72b17 	ldw	r2,-25428(gp)
   11530:	e0ffff0b 	ldhu	r3,-4(fp)
   11534:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11538:	d0a72b17 	ldw	r2,-25428(gp)
   1153c:	e0fffc17 	ldw	r3,-16(fp)
   11540:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	e0fffd0b 	ldhu	r3,-12(fp)
   1154c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11550:	e0bffc17 	ldw	r2,-16(fp)
   11554:	e0fffe03 	ldbu	r3,-8(fp)
   11558:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1155c:	d0e72b17 	ldw	r3,-25428(gp)
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11568:	e0bffb17 	ldw	r2,-20(fp)
   1156c:	10c00117 	ldw	r3,4(r2)
   11570:	e0bffc17 	ldw	r2,-16(fp)
   11574:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   11578:	e0bffc17 	ldw	r2,-16(fp)
   1157c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11580:	e0bffc17 	ldw	r2,-16(fp)
   11584:	e0fffb17 	ldw	r3,-20(fp)
   11588:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1158c:	e0bffb17 	ldw	r2,-20(fp)
   11590:	10800117 	ldw	r2,4(r2)
   11594:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11598:	e0bff917 	ldw	r2,-28(fp)
   1159c:	10000326 	beq	r2,zero,115ac <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   115a0:	e0bff917 	ldw	r2,-28(fp)
   115a4:	e0fffc17 	ldw	r3,-16(fp)
   115a8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   115ac:	e0bffb17 	ldw	r2,-20(fp)
   115b0:	e0fffc17 	ldw	r3,-16(fp)
   115b4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   115b8:	d0a72b17 	ldw	r2,-25428(gp)
   115bc:	10800d03 	ldbu	r2,52(r2)
   115c0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   115c4:	e0fffa03 	ldbu	r3,-24(fp)
   115c8:	e13ffa03 	ldbu	r4,-24(fp)
   115cc:	d0a72844 	addi	r2,gp,-25439
   115d0:	2085883a 	add	r2,r4,r2
   115d4:	10800003 	ldbu	r2,0(r2)
   115d8:	1009883a 	mov	r4,r2
   115dc:	d0a72b17 	ldw	r2,-25428(gp)
   115e0:	10800d43 	ldbu	r2,53(r2)
   115e4:	0084303a 	nor	r2,zero,r2
   115e8:	2084703a 	and	r2,r4,r2
   115ec:	1009883a 	mov	r4,r2
   115f0:	d0a72844 	addi	r2,gp,-25439
   115f4:	1885883a 	add	r2,r3,r2
   115f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   115fc:	e0fffa03 	ldbu	r3,-24(fp)
   11600:	d0a72844 	addi	r2,gp,-25439
   11604:	1885883a 	add	r2,r3,r2
   11608:	10800003 	ldbu	r2,0(r2)
   1160c:	10803fcc 	andi	r2,r2,255
   11610:	1000071e 	bne	r2,zero,11630 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11614:	d0a72b17 	ldw	r2,-25428(gp)
   11618:	10800d83 	ldbu	r2,54(r2)
   1161c:	0084303a 	nor	r2,zero,r2
   11620:	1007883a 	mov	r3,r2
   11624:	d0a72803 	ldbu	r2,-25440(gp)
   11628:	1884703a 	and	r2,r3,r2
   1162c:	d0a72805 	stb	r2,-25440(gp)
    }
}
   11630:	0001883a 	nop
   11634:	e037883a 	mov	sp,fp
   11638:	df000017 	ldw	fp,0(sp)
   1163c:	dec00104 	addi	sp,sp,4
   11640:	f800283a 	ret

00011644 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11644:	defffb04 	addi	sp,sp,-20
   11648:	dfc00415 	stw	ra,16(sp)
   1164c:	df000315 	stw	fp,12(sp)
   11650:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11654:	0140dc04 	movi	r5,880
   11658:	010000b4 	movhi	r4,2
   1165c:	213a3004 	addi	r4,r4,-5952
   11660:	000f8880 	call	f888 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11664:	008000b4 	movhi	r2,2
   11668:	10ba3004 	addi	r2,r2,-5952
   1166c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11670:	008000b4 	movhi	r2,2
   11674:	10ba3b04 	addi	r2,r2,-5908
   11678:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1167c:	e03ffd0d 	sth	zero,-12(fp)
   11680:	00001306 	br	116d0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11684:	e0bffe17 	ldw	r2,-8(fp)
   11688:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1168c:	e0bffe17 	ldw	r2,-8(fp)
   11690:	e0ffff17 	ldw	r3,-4(fp)
   11694:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	00c00fc4 	movi	r3,63
   116a0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   116ac:	e0bffe17 	ldw	r2,-8(fp)
   116b0:	10800b04 	addi	r2,r2,44
   116b4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   116b8:	e0bfff17 	ldw	r2,-4(fp)
   116bc:	10800b04 	addi	r2,r2,44
   116c0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   116c4:	e0bffd0b 	ldhu	r2,-12(fp)
   116c8:	10800044 	addi	r2,r2,1
   116cc:	e0bffd0d 	sth	r2,-12(fp)
   116d0:	e0bffd0b 	ldhu	r2,-12(fp)
   116d4:	108004f0 	cmpltui	r2,r2,19
   116d8:	103fea1e 	bne	r2,zero,11684 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   116dc:	e0bffe17 	ldw	r2,-8(fp)
   116e0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   116e4:	e0bffe17 	ldw	r2,-8(fp)
   116e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   116ec:	e0bffe17 	ldw	r2,-8(fp)
   116f0:	00c00fc4 	movi	r3,63
   116f4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11700:	008000b4 	movhi	r2,2
   11704:	10ba3004 	addi	r2,r2,-5952
   11708:	d0a72d15 	stw	r2,-25420(gp)
#endif
}
   1170c:	0001883a 	nop
   11710:	e037883a 	mov	sp,fp
   11714:	dfc00117 	ldw	ra,4(sp)
   11718:	df000017 	ldw	fp,0(sp)
   1171c:	dec00204 	addi	sp,sp,8
   11720:	f800283a 	ret

00011724 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11724:	defffa04 	addi	sp,sp,-24
   11728:	dfc00515 	stw	ra,20(sp)
   1172c:	df000415 	stw	fp,16(sp)
   11730:	df000404 	addi	fp,sp,16
   11734:	e13ffe15 	stw	r4,-8(fp)
   11738:	2805883a 	mov	r2,r5
   1173c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11740:	e0bffe17 	ldw	r2,-8(fp)
   11744:	10800217 	ldw	r2,8(r2)
   11748:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1174c:	e0bffd17 	ldw	r2,-12(fp)
   11750:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11754:	e0bffd17 	ldw	r2,-12(fp)
   11758:	e0ffff0b 	ldhu	r3,-4(fp)
   1175c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11760:	e0bffd17 	ldw	r2,-12(fp)
   11764:	10c00c03 	ldbu	r3,48(r2)
   11768:	00bff7c4 	movi	r2,-33
   1176c:	1884703a 	and	r2,r3,r2
   11770:	1007883a 	mov	r3,r2
   11774:	e0bffd17 	ldw	r2,-12(fp)
   11778:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1177c:	e0bffd17 	ldw	r2,-12(fp)
   11780:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11784:	e0bffd17 	ldw	r2,-12(fp)
   11788:	10800c03 	ldbu	r2,48(r2)
   1178c:	10803fcc 	andi	r2,r2,255
   11790:	1000181e 	bne	r2,zero,117f4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11794:	e0bffd17 	ldw	r2,-12(fp)
   11798:	10c00d83 	ldbu	r3,54(r2)
   1179c:	d0a72803 	ldbu	r2,-25440(gp)
   117a0:	1884b03a 	or	r2,r3,r2
   117a4:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   117a8:	e0bffd17 	ldw	r2,-12(fp)
   117ac:	10800d03 	ldbu	r2,52(r2)
   117b0:	10c03fcc 	andi	r3,r2,255
   117b4:	e0bffd17 	ldw	r2,-12(fp)
   117b8:	10800d03 	ldbu	r2,52(r2)
   117bc:	11003fcc 	andi	r4,r2,255
   117c0:	d0a72844 	addi	r2,gp,-25439
   117c4:	2085883a 	add	r2,r4,r2
   117c8:	11000003 	ldbu	r4,0(r2)
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	10800d43 	ldbu	r2,53(r2)
   117d4:	2084b03a 	or	r2,r4,r2
   117d8:	1009883a 	mov	r4,r2
   117dc:	d0a72844 	addi	r2,gp,-25439
   117e0:	1885883a 	add	r2,r3,r2
   117e4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   117e8:	00800044 	movi	r2,1
   117ec:	e0bffc05 	stb	r2,-16(fp)
   117f0:	00000106 	br	117f8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   117f4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   117f8:	e13ffe17 	ldw	r4,-8(fp)
   117fc:	00118180 	call	11818 <OS_FlagUnlink>
    return (sched);
   11800:	e0bffc03 	ldbu	r2,-16(fp)
}
   11804:	e037883a 	mov	sp,fp
   11808:	dfc00117 	ldw	ra,4(sp)
   1180c:	df000017 	ldw	fp,0(sp)
   11810:	dec00204 	addi	sp,sp,8
   11814:	f800283a 	ret

00011818 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11818:	defffa04 	addi	sp,sp,-24
   1181c:	df000515 	stw	fp,20(sp)
   11820:	df000504 	addi	fp,sp,20
   11824:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11828:	e0bfff17 	ldw	r2,-4(fp)
   1182c:	10800117 	ldw	r2,4(r2)
   11830:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11834:	e0bfff17 	ldw	r2,-4(fp)
   11838:	10800017 	ldw	r2,0(r2)
   1183c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11840:	e0bffb17 	ldw	r2,-20(fp)
   11844:	10000b1e 	bne	r2,zero,11874 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   11848:	e0bfff17 	ldw	r2,-4(fp)
   1184c:	10800317 	ldw	r2,12(r2)
   11850:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11854:	e0bffd17 	ldw	r2,-12(fp)
   11858:	e0fffc17 	ldw	r3,-16(fp)
   1185c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11860:	e0bffc17 	ldw	r2,-16(fp)
   11864:	10000b26 	beq	r2,zero,11894 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   11868:	e0bffc17 	ldw	r2,-16(fp)
   1186c:	10000115 	stw	zero,4(r2)
   11870:	00000806 	br	11894 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11874:	e0bffb17 	ldw	r2,-20(fp)
   11878:	e0fffc17 	ldw	r3,-16(fp)
   1187c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	10000326 	beq	r2,zero,11894 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11888:	e0bffc17 	ldw	r2,-16(fp)
   1188c:	e0fffb17 	ldw	r3,-20(fp)
   11890:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11894:	e0bfff17 	ldw	r2,-4(fp)
   11898:	10800217 	ldw	r2,8(r2)
   1189c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   118a0:	e0bffe17 	ldw	r2,-8(fp)
   118a4:	10000a15 	stw	zero,40(r2)
#endif
}
   118a8:	0001883a 	nop
   118ac:	e037883a 	mov	sp,fp
   118b0:	df000017 	ldw	fp,0(sp)
   118b4:	dec00104 	addi	sp,sp,4
   118b8:	f800283a 	ret

000118bc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   118bc:	defff404 	addi	sp,sp,-48
   118c0:	df000b15 	stw	fp,44(sp)
   118c4:	df000b04 	addi	fp,sp,44
   118c8:	e13ffc15 	stw	r4,-16(fp)
   118cc:	e17ffd15 	stw	r5,-12(fp)
   118d0:	e1bffe15 	stw	r6,-8(fp)
   118d4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   118d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   118dc:	e0bfff17 	ldw	r2,-4(fp)
   118e0:	1000021e 	bne	r2,zero,118ec <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   118e4:	0005883a 	mov	r2,zero
   118e8:	00006506 	br	11a80 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   118ec:	e0bffc17 	ldw	r2,-16(fp)
   118f0:	1000051e 	bne	r2,zero,11908 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   118f4:	e0bfff17 	ldw	r2,-4(fp)
   118f8:	00c01884 	movi	r3,98
   118fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11900:	0005883a 	mov	r2,zero
   11904:	00005e06 	br	11a80 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	108000cc 	andi	r2,r2,3
   11910:	10000526 	beq	r2,zero,11928 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11914:	e0bfff17 	ldw	r2,-4(fp)
   11918:	00c01884 	movi	r3,98
   1191c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11920:	0005883a 	mov	r2,zero
   11924:	00005606 	br	11a80 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11928:	e0bffd17 	ldw	r2,-12(fp)
   1192c:	108000a8 	cmpgeui	r2,r2,2
   11930:	1000051e 	bne	r2,zero,11948 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11934:	e0bfff17 	ldw	r2,-4(fp)
   11938:	00c016c4 	movi	r3,91
   1193c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11940:	0005883a 	mov	r2,zero
   11944:	00004e06 	br	11a80 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11948:	e0bffe17 	ldw	r2,-8(fp)
   1194c:	10800128 	cmpgeui	r2,r2,4
   11950:	1000051e 	bne	r2,zero,11968 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	00c01704 	movi	r3,92
   1195c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11960:	0005883a 	mov	r2,zero
   11964:	00004606 	br	11a80 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11968:	0005303a 	rdctl	r2,status
   1196c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11970:	e0fffb17 	ldw	r3,-20(fp)
   11974:	00bfff84 	movi	r2,-2
   11978:	1884703a 	and	r2,r3,r2
   1197c:	1001703a 	wrctl	status,r2
  
  return context;
   11980:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11984:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11988:	d0a72517 	ldw	r2,-25452(gp)
   1198c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11990:	d0a72517 	ldw	r2,-25452(gp)
   11994:	10000326 	beq	r2,zero,119a4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11998:	d0a72517 	ldw	r2,-25452(gp)
   1199c:	10800117 	ldw	r2,4(r2)
   119a0:	d0a72515 	stw	r2,-25452(gp)
   119a4:	e0bff817 	ldw	r2,-32(fp)
   119a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119ac:	e0bff917 	ldw	r2,-28(fp)
   119b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   119b4:	e0bffa17 	ldw	r2,-24(fp)
   119b8:	1000051e 	bne	r2,zero,119d0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   119bc:	e0bfff17 	ldw	r2,-4(fp)
   119c0:	00c01684 	movi	r3,90
   119c4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   119c8:	0005883a 	mov	r2,zero
   119cc:	00002c06 	br	11a80 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   119d0:	e0bffc17 	ldw	r2,-16(fp)
   119d4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   119d8:	e0fffc17 	ldw	r3,-16(fp)
   119dc:	e0bffe17 	ldw	r2,-8(fp)
   119e0:	1885883a 	add	r2,r3,r2
   119e4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   119e8:	e03ff715 	stw	zero,-36(fp)
   119ec:	00000c06 	br	11a20 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   119f0:	e0bff617 	ldw	r2,-40(fp)
   119f4:	e0fff517 	ldw	r3,-44(fp)
   119f8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   119fc:	e0bff517 	ldw	r2,-44(fp)
   11a00:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11a04:	e0fff517 	ldw	r3,-44(fp)
   11a08:	e0bffe17 	ldw	r2,-8(fp)
   11a0c:	1885883a 	add	r2,r3,r2
   11a10:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11a14:	e0bff717 	ldw	r2,-36(fp)
   11a18:	10800044 	addi	r2,r2,1
   11a1c:	e0bff715 	stw	r2,-36(fp)
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	10bfffc4 	addi	r2,r2,-1
   11a28:	e0fff717 	ldw	r3,-36(fp)
   11a2c:	18bff036 	bltu	r3,r2,119f0 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11a30:	e0bff617 	ldw	r2,-40(fp)
   11a34:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11a38:	e0bffa17 	ldw	r2,-24(fp)
   11a3c:	e0fffc17 	ldw	r3,-16(fp)
   11a40:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11a44:	e0bffa17 	ldw	r2,-24(fp)
   11a48:	e0fffc17 	ldw	r3,-16(fp)
   11a4c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11a50:	e0bffa17 	ldw	r2,-24(fp)
   11a54:	e0fffd17 	ldw	r3,-12(fp)
   11a58:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11a5c:	e0bffa17 	ldw	r2,-24(fp)
   11a60:	e0fffd17 	ldw	r3,-12(fp)
   11a64:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11a68:	e0bffa17 	ldw	r2,-24(fp)
   11a6c:	e0fffe17 	ldw	r3,-8(fp)
   11a70:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11a74:	e0bfff17 	ldw	r2,-4(fp)
   11a78:	10000005 	stb	zero,0(r2)
    return (pmem);
   11a7c:	e0bffa17 	ldw	r2,-24(fp)
}
   11a80:	e037883a 	mov	sp,fp
   11a84:	df000017 	ldw	fp,0(sp)
   11a88:	dec00104 	addi	sp,sp,4
   11a8c:	f800283a 	ret

00011a90 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11a90:	defff804 	addi	sp,sp,-32
   11a94:	df000715 	stw	fp,28(sp)
   11a98:	df000704 	addi	fp,sp,28
   11a9c:	e13ffe15 	stw	r4,-8(fp)
   11aa0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11aa4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11aa8:	e0bfff17 	ldw	r2,-4(fp)
   11aac:	1000021e 	bne	r2,zero,11ab8 <OSMemGet+0x28>
        return ((void *)0);
   11ab0:	0005883a 	mov	r2,zero
   11ab4:	00002e06 	br	11b70 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11ab8:	e0bffe17 	ldw	r2,-8(fp)
   11abc:	1000051e 	bne	r2,zero,11ad4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11ac0:	e0bfff17 	ldw	r2,-4(fp)
   11ac4:	00c01804 	movi	r3,96
   11ac8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11acc:	0005883a 	mov	r2,zero
   11ad0:	00002706 	br	11b70 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ad4:	0005303a 	rdctl	r2,status
   11ad8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11adc:	e0fffd17 	ldw	r3,-12(fp)
   11ae0:	00bfff84 	movi	r2,-2
   11ae4:	1884703a 	and	r2,r3,r2
   11ae8:	1001703a 	wrctl	status,r2
  
  return context;
   11aec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11af0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11af4:	e0bffe17 	ldw	r2,-8(fp)
   11af8:	10800417 	ldw	r2,16(r2)
   11afc:	10001426 	beq	r2,zero,11b50 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11b00:	e0bffe17 	ldw	r2,-8(fp)
   11b04:	10800117 	ldw	r2,4(r2)
   11b08:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11b0c:	e0bffb17 	ldw	r2,-20(fp)
   11b10:	10c00017 	ldw	r3,0(r2)
   11b14:	e0bffe17 	ldw	r2,-8(fp)
   11b18:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11b1c:	e0bffe17 	ldw	r2,-8(fp)
   11b20:	10800417 	ldw	r2,16(r2)
   11b24:	10ffffc4 	addi	r3,r2,-1
   11b28:	e0bffe17 	ldw	r2,-8(fp)
   11b2c:	10c00415 	stw	r3,16(r2)
   11b30:	e0bff917 	ldw	r2,-28(fp)
   11b34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b38:	e0bffa17 	ldw	r2,-24(fp)
   11b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11b40:	e0bfff17 	ldw	r2,-4(fp)
   11b44:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11b48:	e0bffb17 	ldw	r2,-20(fp)
   11b4c:	00000806 	br	11b70 <OSMemGet+0xe0>
   11b50:	e0bff917 	ldw	r2,-28(fp)
   11b54:	e0bffc15 	stw	r2,-16(fp)
   11b58:	e0bffc17 	ldw	r2,-16(fp)
   11b5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11b60:	e0bfff17 	ldw	r2,-4(fp)
   11b64:	00c01744 	movi	r3,93
   11b68:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11b6c:	0005883a 	mov	r2,zero
}
   11b70:	e037883a 	mov	sp,fp
   11b74:	df000017 	ldw	fp,0(sp)
   11b78:	dec00104 	addi	sp,sp,4
   11b7c:	f800283a 	ret

00011b80 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11b80:	defff704 	addi	sp,sp,-36
   11b84:	dfc00815 	stw	ra,32(sp)
   11b88:	df000715 	stw	fp,28(sp)
   11b8c:	df000704 	addi	fp,sp,28
   11b90:	e13ffd15 	stw	r4,-12(fp)
   11b94:	e17ffe15 	stw	r5,-8(fp)
   11b98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11b9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11ba0:	e0bfff17 	ldw	r2,-4(fp)
   11ba4:	1000021e 	bne	r2,zero,11bb0 <OSMemNameGet+0x30>
        return (0);
   11ba8:	0005883a 	mov	r2,zero
   11bac:	00002b06 	br	11c5c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11bb0:	e0bffd17 	ldw	r2,-12(fp)
   11bb4:	1000051e 	bne	r2,zero,11bcc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11bb8:	e0bfff17 	ldw	r2,-4(fp)
   11bbc:	00c01804 	movi	r3,96
   11bc0:	10c00005 	stb	r3,0(r2)
        return (0);
   11bc4:	0005883a 	mov	r2,zero
   11bc8:	00002406 	br	11c5c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11bcc:	e0bffe17 	ldw	r2,-8(fp)
   11bd0:	1000051e 	bne	r2,zero,11be8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11bd4:	e0bfff17 	ldw	r2,-4(fp)
   11bd8:	00c00304 	movi	r3,12
   11bdc:	10c00005 	stb	r3,0(r2)
        return (0);
   11be0:	0005883a 	mov	r2,zero
   11be4:	00001d06 	br	11c5c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11be8:	d0a72a03 	ldbu	r2,-25432(gp)
   11bec:	10803fcc 	andi	r2,r2,255
   11bf0:	10000526 	beq	r2,zero,11c08 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11bf4:	e0bfff17 	ldw	r2,-4(fp)
   11bf8:	00c00444 	movi	r3,17
   11bfc:	10c00005 	stb	r3,0(r2)
        return (0);
   11c00:	0005883a 	mov	r2,zero
   11c04:	00001506 	br	11c5c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c08:	0005303a 	rdctl	r2,status
   11c0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c10:	e0fffb17 	ldw	r3,-20(fp)
   11c14:	00bfff84 	movi	r2,-2
   11c18:	1884703a 	and	r2,r3,r2
   11c1c:	1001703a 	wrctl	status,r2
  
  return context;
   11c20:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11c24:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11c28:	e0bffd17 	ldw	r2,-12(fp)
   11c2c:	10800504 	addi	r2,r2,20
   11c30:	100b883a 	mov	r5,r2
   11c34:	e13ffe17 	ldw	r4,-8(fp)
   11c38:	000fa880 	call	fa88 <OS_StrCopy>
   11c3c:	e0bffa05 	stb	r2,-24(fp)
   11c40:	e0bff917 	ldw	r2,-28(fp)
   11c44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c48:	e0bffc17 	ldw	r2,-16(fp)
   11c4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11c50:	e0bfff17 	ldw	r2,-4(fp)
   11c54:	10000005 	stb	zero,0(r2)
    return (len);
   11c58:	e0bffa03 	ldbu	r2,-24(fp)
}
   11c5c:	e037883a 	mov	sp,fp
   11c60:	dfc00117 	ldw	ra,4(sp)
   11c64:	df000017 	ldw	fp,0(sp)
   11c68:	dec00204 	addi	sp,sp,8
   11c6c:	f800283a 	ret

00011c70 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11c70:	defff604 	addi	sp,sp,-40
   11c74:	dfc00915 	stw	ra,36(sp)
   11c78:	df000815 	stw	fp,32(sp)
   11c7c:	df000804 	addi	fp,sp,32
   11c80:	e13ffd15 	stw	r4,-12(fp)
   11c84:	e17ffe15 	stw	r5,-8(fp)
   11c88:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11c90:	e0bfff17 	ldw	r2,-4(fp)
   11c94:	10003526 	beq	r2,zero,11d6c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11c98:	e0bffd17 	ldw	r2,-12(fp)
   11c9c:	1000041e 	bne	r2,zero,11cb0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11ca0:	e0bfff17 	ldw	r2,-4(fp)
   11ca4:	00c01804 	movi	r3,96
   11ca8:	10c00005 	stb	r3,0(r2)
        return;
   11cac:	00003006 	br	11d70 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11cb0:	e0bffe17 	ldw	r2,-8(fp)
   11cb4:	1000041e 	bne	r2,zero,11cc8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11cb8:	e0bfff17 	ldw	r2,-4(fp)
   11cbc:	00c00304 	movi	r3,12
   11cc0:	10c00005 	stb	r3,0(r2)
        return;
   11cc4:	00002a06 	br	11d70 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11cc8:	d0a72a03 	ldbu	r2,-25432(gp)
   11ccc:	10803fcc 	andi	r2,r2,255
   11cd0:	10000426 	beq	r2,zero,11ce4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11cd4:	e0bfff17 	ldw	r2,-4(fp)
   11cd8:	00c00484 	movi	r3,18
   11cdc:	10c00005 	stb	r3,0(r2)
        return;
   11ce0:	00002306 	br	11d70 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ce4:	0005303a 	rdctl	r2,status
   11ce8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cec:	e0fffc17 	ldw	r3,-16(fp)
   11cf0:	00bfff84 	movi	r2,-2
   11cf4:	1884703a 	and	r2,r3,r2
   11cf8:	1001703a 	wrctl	status,r2
  
  return context;
   11cfc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11d00:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11d04:	e13ffe17 	ldw	r4,-8(fp)
   11d08:	000fafc0 	call	fafc <OS_StrLen>
   11d0c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11d10:	e0bffa03 	ldbu	r2,-24(fp)
   11d14:	10800830 	cmpltui	r2,r2,32
   11d18:	1000081e 	bne	r2,zero,11d3c <OSMemNameSet+0xcc>
   11d1c:	e0bff817 	ldw	r2,-32(fp)
   11d20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d24:	e0bff917 	ldw	r2,-28(fp)
   11d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11d2c:	e0bfff17 	ldw	r2,-4(fp)
   11d30:	00c018c4 	movi	r3,99
   11d34:	10c00005 	stb	r3,0(r2)
        return;
   11d38:	00000d06 	br	11d70 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11d3c:	e0bffd17 	ldw	r2,-12(fp)
   11d40:	10800504 	addi	r2,r2,20
   11d44:	e17ffe17 	ldw	r5,-8(fp)
   11d48:	1009883a 	mov	r4,r2
   11d4c:	000fa880 	call	fa88 <OS_StrCopy>
   11d50:	e0bff817 	ldw	r2,-32(fp)
   11d54:	e0bffb15 	stw	r2,-20(fp)
   11d58:	e0bffb17 	ldw	r2,-20(fp)
   11d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11d60:	e0bfff17 	ldw	r2,-4(fp)
   11d64:	10000005 	stb	zero,0(r2)
   11d68:	00000106 	br	11d70 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11d6c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11d70:	e037883a 	mov	sp,fp
   11d74:	dfc00117 	ldw	ra,4(sp)
   11d78:	df000017 	ldw	fp,0(sp)
   11d7c:	dec00204 	addi	sp,sp,8
   11d80:	f800283a 	ret

00011d84 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11d84:	defff904 	addi	sp,sp,-28
   11d88:	df000615 	stw	fp,24(sp)
   11d8c:	df000604 	addi	fp,sp,24
   11d90:	e13ffe15 	stw	r4,-8(fp)
   11d94:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11d98:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11d9c:	e0bffe17 	ldw	r2,-8(fp)
   11da0:	1000021e 	bne	r2,zero,11dac <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11da4:	00801804 	movi	r2,96
   11da8:	00002806 	br	11e4c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11dac:	e0bfff17 	ldw	r2,-4(fp)
   11db0:	1000021e 	bne	r2,zero,11dbc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11db4:	008017c4 	movi	r2,95
   11db8:	00002406 	br	11e4c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11dbc:	0005303a 	rdctl	r2,status
   11dc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dc4:	e0fffd17 	ldw	r3,-12(fp)
   11dc8:	00bfff84 	movi	r2,-2
   11dcc:	1884703a 	and	r2,r3,r2
   11dd0:	1001703a 	wrctl	status,r2
  
  return context;
   11dd4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11dd8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11ddc:	e0bffe17 	ldw	r2,-8(fp)
   11de0:	10c00417 	ldw	r3,16(r2)
   11de4:	e0bffe17 	ldw	r2,-8(fp)
   11de8:	10800317 	ldw	r2,12(r2)
   11dec:	18800636 	bltu	r3,r2,11e08 <OSMemPut+0x84>
   11df0:	e0bffa17 	ldw	r2,-24(fp)
   11df4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11df8:	e0bffb17 	ldw	r2,-20(fp)
   11dfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11e00:	00801784 	movi	r2,94
   11e04:	00001106 	br	11e4c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11e08:	e0bffe17 	ldw	r2,-8(fp)
   11e0c:	10c00117 	ldw	r3,4(r2)
   11e10:	e0bfff17 	ldw	r2,-4(fp)
   11e14:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11e18:	e0bffe17 	ldw	r2,-8(fp)
   11e1c:	e0ffff17 	ldw	r3,-4(fp)
   11e20:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11e24:	e0bffe17 	ldw	r2,-8(fp)
   11e28:	10800417 	ldw	r2,16(r2)
   11e2c:	10c00044 	addi	r3,r2,1
   11e30:	e0bffe17 	ldw	r2,-8(fp)
   11e34:	10c00415 	stw	r3,16(r2)
   11e38:	e0bffa17 	ldw	r2,-24(fp)
   11e3c:	e0bffc15 	stw	r2,-16(fp)
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11e48:	0005883a 	mov	r2,zero
}
   11e4c:	e037883a 	mov	sp,fp
   11e50:	df000017 	ldw	fp,0(sp)
   11e54:	dec00104 	addi	sp,sp,4
   11e58:	f800283a 	ret

00011e5c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11e5c:	defffa04 	addi	sp,sp,-24
   11e60:	df000515 	stw	fp,20(sp)
   11e64:	df000504 	addi	fp,sp,20
   11e68:	e13ffe15 	stw	r4,-8(fp)
   11e6c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11e70:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11e74:	e0bffe17 	ldw	r2,-8(fp)
   11e78:	1000021e 	bne	r2,zero,11e84 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11e7c:	00801804 	movi	r2,96
   11e80:	00002c06 	br	11f34 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11e84:	e0bfff17 	ldw	r2,-4(fp)
   11e88:	1000021e 	bne	r2,zero,11e94 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11e8c:	00801844 	movi	r2,97
   11e90:	00002806 	br	11f34 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e94:	0005303a 	rdctl	r2,status
   11e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e9c:	e0fffc17 	ldw	r3,-16(fp)
   11ea0:	00bfff84 	movi	r2,-2
   11ea4:	1884703a 	and	r2,r3,r2
   11ea8:	1001703a 	wrctl	status,r2
  
  return context;
   11eac:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11eb0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11eb4:	e0bffe17 	ldw	r2,-8(fp)
   11eb8:	10c00017 	ldw	r3,0(r2)
   11ebc:	e0bfff17 	ldw	r2,-4(fp)
   11ec0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11ec4:	e0bffe17 	ldw	r2,-8(fp)
   11ec8:	10c00117 	ldw	r3,4(r2)
   11ecc:	e0bfff17 	ldw	r2,-4(fp)
   11ed0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11ed4:	e0bffe17 	ldw	r2,-8(fp)
   11ed8:	10c00217 	ldw	r3,8(r2)
   11edc:	e0bfff17 	ldw	r2,-4(fp)
   11ee0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11ee4:	e0bffe17 	ldw	r2,-8(fp)
   11ee8:	10c00317 	ldw	r3,12(r2)
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11ef4:	e0bffe17 	ldw	r2,-8(fp)
   11ef8:	10c00417 	ldw	r3,16(r2)
   11efc:	e0bfff17 	ldw	r2,-4(fp)
   11f00:	10c00415 	stw	r3,16(r2)
   11f04:	e0bffb17 	ldw	r2,-20(fp)
   11f08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f0c:	e0bffd17 	ldw	r2,-12(fp)
   11f10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11f14:	e0bfff17 	ldw	r2,-4(fp)
   11f18:	10c00317 	ldw	r3,12(r2)
   11f1c:	e0bfff17 	ldw	r2,-4(fp)
   11f20:	10800417 	ldw	r2,16(r2)
   11f24:	1887c83a 	sub	r3,r3,r2
   11f28:	e0bfff17 	ldw	r2,-4(fp)
   11f2c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11f30:	0005883a 	mov	r2,zero
}
   11f34:	e037883a 	mov	sp,fp
   11f38:	df000017 	ldw	fp,0(sp)
   11f3c:	dec00104 	addi	sp,sp,4
   11f40:	f800283a 	ret

00011f44 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11f44:	defffc04 	addi	sp,sp,-16
   11f48:	dfc00315 	stw	ra,12(sp)
   11f4c:	df000215 	stw	fp,8(sp)
   11f50:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11f54:	01430c04 	movi	r5,3120
   11f58:	010000b4 	movhi	r4,2
   11f5c:	213b0c04 	addi	r4,r4,-5072
   11f60:	000f8880 	call	f888 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11f64:	008000b4 	movhi	r2,2
   11f68:	10bb0c04 	addi	r2,r2,-5072
   11f6c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11f70:	e03fff0d 	sth	zero,-4(fp)
   11f74:	00001306 	br	11fc4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11f78:	e0bfff0b 	ldhu	r2,-4(fp)
   11f7c:	10800044 	addi	r2,r2,1
   11f80:	10c00d24 	muli	r3,r2,52
   11f84:	008000b4 	movhi	r2,2
   11f88:	10bb0c04 	addi	r2,r2,-5072
   11f8c:	1887883a 	add	r3,r3,r2
   11f90:	e0bffe17 	ldw	r2,-8(fp)
   11f94:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11f98:	e0bffe17 	ldw	r2,-8(fp)
   11f9c:	00c00fc4 	movi	r3,63
   11fa0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11fa4:	e0bffe17 	ldw	r2,-8(fp)
   11fa8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11fac:	e0bffe17 	ldw	r2,-8(fp)
   11fb0:	10800d04 	addi	r2,r2,52
   11fb4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11fb8:	e0bfff0b 	ldhu	r2,-4(fp)
   11fbc:	10800044 	addi	r2,r2,1
   11fc0:	e0bfff0d 	sth	r2,-4(fp)
   11fc4:	e0bfff0b 	ldhu	r2,-4(fp)
   11fc8:	10800ef0 	cmpltui	r2,r2,59
   11fcc:	103fea1e 	bne	r2,zero,11f78 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11fd0:	e0bffe17 	ldw	r2,-8(fp)
   11fd4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11fd8:	e0bffe17 	ldw	r2,-8(fp)
   11fdc:	00c00fc4 	movi	r3,63
   11fe0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11fe4:	e0bffe17 	ldw	r2,-8(fp)
   11fe8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11fec:	008000b4 	movhi	r2,2
   11ff0:	10bb0c04 	addi	r2,r2,-5072
   11ff4:	d0a72515 	stw	r2,-25452(gp)
#endif
}
   11ff8:	0001883a 	nop
   11ffc:	e037883a 	mov	sp,fp
   12000:	dfc00117 	ldw	ra,4(sp)
   12004:	df000017 	ldw	fp,0(sp)
   12008:	dec00204 	addi	sp,sp,8
   1200c:	f800283a 	ret

00012010 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12010:	defff804 	addi	sp,sp,-32
   12014:	df000715 	stw	fp,28(sp)
   12018:	df000704 	addi	fp,sp,28
   1201c:	e13ffe15 	stw	r4,-8(fp)
   12020:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12024:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12028:	e0bfff17 	ldw	r2,-4(fp)
   1202c:	1000021e 	bne	r2,zero,12038 <OSQAccept+0x28>
        return ((void *)0);
   12030:	0005883a 	mov	r2,zero
   12034:	00004206 	br	12140 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12038:	e0bffe17 	ldw	r2,-8(fp)
   1203c:	1000051e 	bne	r2,zero,12054 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12040:	e0bfff17 	ldw	r2,-4(fp)
   12044:	00c00104 	movi	r3,4
   12048:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1204c:	0005883a 	mov	r2,zero
   12050:	00003b06 	br	12140 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12054:	e0bffe17 	ldw	r2,-8(fp)
   12058:	10800003 	ldbu	r2,0(r2)
   1205c:	10803fcc 	andi	r2,r2,255
   12060:	108000a0 	cmpeqi	r2,r2,2
   12064:	1000051e 	bne	r2,zero,1207c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	00c00044 	movi	r3,1
   12070:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12074:	0005883a 	mov	r2,zero
   12078:	00003106 	br	12140 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1207c:	0005303a 	rdctl	r2,status
   12080:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12084:	e0fffd17 	ldw	r3,-12(fp)
   12088:	00bfff84 	movi	r2,-2
   1208c:	1884703a 	and	r2,r3,r2
   12090:	1001703a 	wrctl	status,r2
  
  return context;
   12094:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12098:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1209c:	e0bffe17 	ldw	r2,-8(fp)
   120a0:	10800117 	ldw	r2,4(r2)
   120a4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   120a8:	e0bffc17 	ldw	r2,-16(fp)
   120ac:	1080058b 	ldhu	r2,22(r2)
   120b0:	10bfffcc 	andi	r2,r2,65535
   120b4:	10001926 	beq	r2,zero,1211c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   120b8:	e0bffc17 	ldw	r2,-16(fp)
   120bc:	10800417 	ldw	r2,16(r2)
   120c0:	11000104 	addi	r4,r2,4
   120c4:	e0fffc17 	ldw	r3,-16(fp)
   120c8:	19000415 	stw	r4,16(r3)
   120cc:	10800017 	ldw	r2,0(r2)
   120d0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   120d4:	e0bffc17 	ldw	r2,-16(fp)
   120d8:	1080058b 	ldhu	r2,22(r2)
   120dc:	10bfffc4 	addi	r2,r2,-1
   120e0:	1007883a 	mov	r3,r2
   120e4:	e0bffc17 	ldw	r2,-16(fp)
   120e8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   120ec:	e0bffc17 	ldw	r2,-16(fp)
   120f0:	10c00417 	ldw	r3,16(r2)
   120f4:	e0bffc17 	ldw	r2,-16(fp)
   120f8:	10800217 	ldw	r2,8(r2)
   120fc:	1880041e 	bne	r3,r2,12110 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12100:	e0bffc17 	ldw	r2,-16(fp)
   12104:	10c00117 	ldw	r3,4(r2)
   12108:	e0bffc17 	ldw	r2,-16(fp)
   1210c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12110:	e0bfff17 	ldw	r2,-4(fp)
   12114:	10000005 	stb	zero,0(r2)
   12118:	00000406 	br	1212c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1211c:	e0bfff17 	ldw	r2,-4(fp)
   12120:	00c007c4 	movi	r3,31
   12124:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   12128:	e03ff915 	stw	zero,-28(fp)
   1212c:	e0bffa17 	ldw	r2,-24(fp)
   12130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12134:	e0bffb17 	ldw	r2,-20(fp)
   12138:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1213c:	e0bff917 	ldw	r2,-28(fp)
}
   12140:	e037883a 	mov	sp,fp
   12144:	df000017 	ldw	fp,0(sp)
   12148:	dec00104 	addi	sp,sp,4
   1214c:	f800283a 	ret

00012150 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   12150:	defff404 	addi	sp,sp,-48
   12154:	dfc00b15 	stw	ra,44(sp)
   12158:	df000a15 	stw	fp,40(sp)
   1215c:	df000a04 	addi	fp,sp,40
   12160:	e13ffe15 	stw	r4,-8(fp)
   12164:	2805883a 	mov	r2,r5
   12168:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1216c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12170:	d0a72a03 	ldbu	r2,-25432(gp)
   12174:	10803fcc 	andi	r2,r2,255
   12178:	10000226 	beq	r2,zero,12184 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1217c:	0005883a 	mov	r2,zero
   12180:	00005906 	br	122e8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12184:	0005303a 	rdctl	r2,status
   12188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1218c:	e0fffd17 	ldw	r3,-12(fp)
   12190:	00bfff84 	movi	r2,-2
   12194:	1884703a 	and	r2,r3,r2
   12198:	1001703a 	wrctl	status,r2
  
  return context;
   1219c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   121a0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   121a4:	d0a72917 	ldw	r2,-25436(gp)
   121a8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   121ac:	d0a72917 	ldw	r2,-25436(gp)
   121b0:	10000326 	beq	r2,zero,121c0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   121b4:	d0a72917 	ldw	r2,-25436(gp)
   121b8:	10800117 	ldw	r2,4(r2)
   121bc:	d0a72915 	stw	r2,-25436(gp)
   121c0:	e0bff717 	ldw	r2,-36(fp)
   121c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121c8:	e0bff817 	ldw	r2,-32(fp)
   121cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   121d0:	e0bff617 	ldw	r2,-40(fp)
   121d4:	10004326 	beq	r2,zero,122e4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121d8:	0005303a 	rdctl	r2,status
   121dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121e0:	e0fff917 	ldw	r3,-28(fp)
   121e4:	00bfff84 	movi	r2,-2
   121e8:	1884703a 	and	r2,r3,r2
   121ec:	1001703a 	wrctl	status,r2
  
  return context;
   121f0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   121f4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   121f8:	d0a72717 	ldw	r2,-25444(gp)
   121fc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12200:	e0bffb17 	ldw	r2,-20(fp)
   12204:	10002d26 	beq	r2,zero,122bc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   12208:	d0a72717 	ldw	r2,-25444(gp)
   1220c:	10800017 	ldw	r2,0(r2)
   12210:	d0a72715 	stw	r2,-25444(gp)
   12214:	e0bff717 	ldw	r2,-36(fp)
   12218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1221c:	e0bffa17 	ldw	r2,-24(fp)
   12220:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   12224:	e0bffb17 	ldw	r2,-20(fp)
   12228:	e0fffe17 	ldw	r3,-8(fp)
   1222c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   12230:	e0bfff0b 	ldhu	r2,-4(fp)
   12234:	1085883a 	add	r2,r2,r2
   12238:	1085883a 	add	r2,r2,r2
   1223c:	1007883a 	mov	r3,r2
   12240:	e0bffe17 	ldw	r2,-8(fp)
   12244:	10c7883a 	add	r3,r2,r3
   12248:	e0bffb17 	ldw	r2,-20(fp)
   1224c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   12250:	e0bffb17 	ldw	r2,-20(fp)
   12254:	e0fffe17 	ldw	r3,-8(fp)
   12258:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1225c:	e0bffb17 	ldw	r2,-20(fp)
   12260:	e0fffe17 	ldw	r3,-8(fp)
   12264:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12268:	e0bffb17 	ldw	r2,-20(fp)
   1226c:	e0ffff0b 	ldhu	r3,-4(fp)
   12270:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   12274:	e0bffb17 	ldw	r2,-20(fp)
   12278:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1227c:	e0bff617 	ldw	r2,-40(fp)
   12280:	00c00084 	movi	r3,2
   12284:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12288:	e0bff617 	ldw	r2,-40(fp)
   1228c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12290:	e0bff617 	ldw	r2,-40(fp)
   12294:	e0fffb17 	ldw	r3,-20(fp)
   12298:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1229c:	e0bff617 	ldw	r2,-40(fp)
   122a0:	00c00fc4 	movi	r3,63
   122a4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   122a8:	e0bff617 	ldw	r2,-40(fp)
   122ac:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   122b0:	e13ff617 	ldw	r4,-40(fp)
   122b4:	000f4a80 	call	f4a8 <OS_EventWaitListInit>
   122b8:	00000a06 	br	122e4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   122bc:	d0e72917 	ldw	r3,-25436(gp)
   122c0:	e0bff617 	ldw	r2,-40(fp)
   122c4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   122c8:	e0bff617 	ldw	r2,-40(fp)
   122cc:	d0a72915 	stw	r2,-25436(gp)
   122d0:	e0bff717 	ldw	r2,-36(fp)
   122d4:	e0bffc15 	stw	r2,-16(fp)
   122d8:	e0bffc17 	ldw	r2,-16(fp)
   122dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   122e0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   122e4:	e0bff617 	ldw	r2,-40(fp)
}
   122e8:	e037883a 	mov	sp,fp
   122ec:	dfc00117 	ldw	ra,4(sp)
   122f0:	df000017 	ldw	fp,0(sp)
   122f4:	dec00204 	addi	sp,sp,8
   122f8:	f800283a 	ret

000122fc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   122fc:	defff204 	addi	sp,sp,-56
   12300:	dfc00d15 	stw	ra,52(sp)
   12304:	df000c15 	stw	fp,48(sp)
   12308:	df000c04 	addi	fp,sp,48
   1230c:	e13ffd15 	stw	r4,-12(fp)
   12310:	2805883a 	mov	r2,r5
   12314:	e1bfff15 	stw	r6,-4(fp)
   12318:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1231c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12320:	e0bfff17 	ldw	r2,-4(fp)
   12324:	1000021e 	bne	r2,zero,12330 <OSQDel+0x34>
        return (pevent);
   12328:	e0bffd17 	ldw	r2,-12(fp)
   1232c:	00008e06 	br	12568 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12330:	e0bffd17 	ldw	r2,-12(fp)
   12334:	1000051e 	bne	r2,zero,1234c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12338:	e0bfff17 	ldw	r2,-4(fp)
   1233c:	00c00104 	movi	r3,4
   12340:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12344:	e0bffd17 	ldw	r2,-12(fp)
   12348:	00008706 	br	12568 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1234c:	e0bffd17 	ldw	r2,-12(fp)
   12350:	10800003 	ldbu	r2,0(r2)
   12354:	10803fcc 	andi	r2,r2,255
   12358:	108000a0 	cmpeqi	r2,r2,2
   1235c:	1000051e 	bne	r2,zero,12374 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12360:	e0bfff17 	ldw	r2,-4(fp)
   12364:	00c00044 	movi	r3,1
   12368:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1236c:	e0bffd17 	ldw	r2,-12(fp)
   12370:	00007d06 	br	12568 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12374:	d0a72a03 	ldbu	r2,-25432(gp)
   12378:	10803fcc 	andi	r2,r2,255
   1237c:	10000526 	beq	r2,zero,12394 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12380:	e0bfff17 	ldw	r2,-4(fp)
   12384:	00c003c4 	movi	r3,15
   12388:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1238c:	e0bffd17 	ldw	r2,-12(fp)
   12390:	00007506 	br	12568 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12394:	0005303a 	rdctl	r2,status
   12398:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1239c:	e0fffc17 	ldw	r3,-16(fp)
   123a0:	00bfff84 	movi	r2,-2
   123a4:	1884703a 	and	r2,r3,r2
   123a8:	1001703a 	wrctl	status,r2
  
  return context;
   123ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   123b0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   123b4:	e0bffd17 	ldw	r2,-12(fp)
   123b8:	10800283 	ldbu	r2,10(r2)
   123bc:	10803fcc 	andi	r2,r2,255
   123c0:	10000326 	beq	r2,zero,123d0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   123c4:	00800044 	movi	r2,1
   123c8:	e0bff405 	stb	r2,-48(fp)
   123cc:	00000106 	br	123d4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   123d0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   123d4:	e0bffe03 	ldbu	r2,-8(fp)
   123d8:	10000326 	beq	r2,zero,123e8 <OSQDel+0xec>
   123dc:	10800060 	cmpeqi	r2,r2,1
   123e0:	1000301e 	bne	r2,zero,124a4 <OSQDel+0x1a8>
   123e4:	00005506 	br	1253c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   123e8:	e0bff403 	ldbu	r2,-48(fp)
   123ec:	10001e1e 	bne	r2,zero,12468 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   123f0:	e0bffd17 	ldw	r2,-12(fp)
   123f4:	00c00fc4 	movi	r3,63
   123f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   123fc:	e0bffd17 	ldw	r2,-12(fp)
   12400:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12404:	e0bffd17 	ldw	r2,-12(fp)
   12408:	10800117 	ldw	r2,4(r2)
   1240c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12410:	d0e72717 	ldw	r3,-25444(gp)
   12414:	e0bff817 	ldw	r2,-32(fp)
   12418:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1241c:	e0bff817 	ldw	r2,-32(fp)
   12420:	d0a72715 	stw	r2,-25444(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12424:	e0bffd17 	ldw	r2,-12(fp)
   12428:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1242c:	d0e72917 	ldw	r3,-25436(gp)
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12438:	e0bffd17 	ldw	r2,-12(fp)
   1243c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12440:	e0bffd17 	ldw	r2,-12(fp)
   12444:	d0a72915 	stw	r2,-25436(gp)
   12448:	e0bff617 	ldw	r2,-40(fp)
   1244c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12450:	e0bff717 	ldw	r2,-36(fp)
   12454:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12458:	e0bfff17 	ldw	r2,-4(fp)
   1245c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12460:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12464:	00003f06 	br	12564 <OSQDel+0x268>
   12468:	e0bff617 	ldw	r2,-40(fp)
   1246c:	e0bff915 	stw	r2,-28(fp)
   12470:	e0bff917 	ldw	r2,-28(fp)
   12474:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12478:	e0bfff17 	ldw	r2,-4(fp)
   1247c:	00c01244 	movi	r3,73
   12480:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12484:	e0bffd17 	ldw	r2,-12(fp)
   12488:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1248c:	00003506 	br	12564 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12490:	000f883a 	mov	r7,zero
   12494:	01800104 	movi	r6,4
   12498:	000b883a 	mov	r5,zero
   1249c:	e13ffd17 	ldw	r4,-12(fp)
   124a0:	000eef80 	call	eef8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   124a4:	e0bffd17 	ldw	r2,-12(fp)
   124a8:	10800283 	ldbu	r2,10(r2)
   124ac:	10803fcc 	andi	r2,r2,255
   124b0:	103ff71e 	bne	r2,zero,12490 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   124b4:	e0bffd17 	ldw	r2,-12(fp)
   124b8:	00c00fc4 	movi	r3,63
   124bc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   124c0:	e0bffd17 	ldw	r2,-12(fp)
   124c4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   124c8:	e0bffd17 	ldw	r2,-12(fp)
   124cc:	10800117 	ldw	r2,4(r2)
   124d0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   124d4:	d0e72717 	ldw	r3,-25444(gp)
   124d8:	e0bff817 	ldw	r2,-32(fp)
   124dc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   124e0:	e0bff817 	ldw	r2,-32(fp)
   124e4:	d0a72715 	stw	r2,-25444(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   124e8:	e0bffd17 	ldw	r2,-12(fp)
   124ec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   124f0:	d0e72917 	ldw	r3,-25436(gp)
   124f4:	e0bffd17 	ldw	r2,-12(fp)
   124f8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   124fc:	e0bffd17 	ldw	r2,-12(fp)
   12500:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12504:	e0bffd17 	ldw	r2,-12(fp)
   12508:	d0a72915 	stw	r2,-25436(gp)
   1250c:	e0bff617 	ldw	r2,-40(fp)
   12510:	e0bffa15 	stw	r2,-24(fp)
   12514:	e0bffa17 	ldw	r2,-24(fp)
   12518:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1251c:	e0bff403 	ldbu	r2,-48(fp)
   12520:	10800058 	cmpnei	r2,r2,1
   12524:	1000011e 	bne	r2,zero,1252c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12528:	000f9440 	call	f944 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1252c:	e0bfff17 	ldw	r2,-4(fp)
   12530:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12534:	e03ff515 	stw	zero,-44(fp)
             break;
   12538:	00000a06 	br	12564 <OSQDel+0x268>
   1253c:	e0bff617 	ldw	r2,-40(fp)
   12540:	e0bffb15 	stw	r2,-20(fp)
   12544:	e0bffb17 	ldw	r2,-20(fp)
   12548:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1254c:	e0bfff17 	ldw	r2,-4(fp)
   12550:	00c001c4 	movi	r3,7
   12554:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12558:	e0bffd17 	ldw	r2,-12(fp)
   1255c:	e0bff515 	stw	r2,-44(fp)
             break;
   12560:	0001883a 	nop
    }
    return (pevent_return);
   12564:	e0bff517 	ldw	r2,-44(fp)
}
   12568:	e037883a 	mov	sp,fp
   1256c:	dfc00117 	ldw	ra,4(sp)
   12570:	df000017 	ldw	fp,0(sp)
   12574:	dec00204 	addi	sp,sp,8
   12578:	f800283a 	ret

0001257c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1257c:	defffa04 	addi	sp,sp,-24
   12580:	df000515 	stw	fp,20(sp)
   12584:	df000504 	addi	fp,sp,20
   12588:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1258c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12590:	e0bfff17 	ldw	r2,-4(fp)
   12594:	1000021e 	bne	r2,zero,125a0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12598:	00800104 	movi	r2,4
   1259c:	00002106 	br	12624 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   125a0:	e0bfff17 	ldw	r2,-4(fp)
   125a4:	10800003 	ldbu	r2,0(r2)
   125a8:	10803fcc 	andi	r2,r2,255
   125ac:	108000a0 	cmpeqi	r2,r2,2
   125b0:	1000021e 	bne	r2,zero,125bc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   125b4:	00800044 	movi	r2,1
   125b8:	00001a06 	br	12624 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125bc:	0005303a 	rdctl	r2,status
   125c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125c4:	e0fffd17 	ldw	r3,-12(fp)
   125c8:	00bfff84 	movi	r2,-2
   125cc:	1884703a 	and	r2,r3,r2
   125d0:	1001703a 	wrctl	status,r2
  
  return context;
   125d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   125d8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   125dc:	e0bfff17 	ldw	r2,-4(fp)
   125e0:	10800117 	ldw	r2,4(r2)
   125e4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   125e8:	e0bffc17 	ldw	r2,-16(fp)
   125ec:	10c00117 	ldw	r3,4(r2)
   125f0:	e0bffc17 	ldw	r2,-16(fp)
   125f4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   125f8:	e0bffc17 	ldw	r2,-16(fp)
   125fc:	10c00117 	ldw	r3,4(r2)
   12600:	e0bffc17 	ldw	r2,-16(fp)
   12604:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12608:	e0bffc17 	ldw	r2,-16(fp)
   1260c:	1000058d 	sth	zero,22(r2)
   12610:	e0bffb17 	ldw	r2,-20(fp)
   12614:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12618:	e0bffe17 	ldw	r2,-8(fp)
   1261c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12620:	0005883a 	mov	r2,zero
}
   12624:	e037883a 	mov	sp,fp
   12628:	df000017 	ldw	fp,0(sp)
   1262c:	dec00104 	addi	sp,sp,4
   12630:	f800283a 	ret

00012634 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12634:	defff304 	addi	sp,sp,-52
   12638:	dfc00c15 	stw	ra,48(sp)
   1263c:	df000b15 	stw	fp,44(sp)
   12640:	df000b04 	addi	fp,sp,44
   12644:	e13ffd15 	stw	r4,-12(fp)
   12648:	2805883a 	mov	r2,r5
   1264c:	e1bfff15 	stw	r6,-4(fp)
   12650:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12654:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12658:	e0bfff17 	ldw	r2,-4(fp)
   1265c:	1000021e 	bne	r2,zero,12668 <OSQPend+0x34>
        return ((void *)0);
   12660:	0005883a 	mov	r2,zero
   12664:	00009106 	br	128ac <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12668:	e0bffd17 	ldw	r2,-12(fp)
   1266c:	1000051e 	bne	r2,zero,12684 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12670:	e0bfff17 	ldw	r2,-4(fp)
   12674:	00c00104 	movi	r3,4
   12678:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1267c:	0005883a 	mov	r2,zero
   12680:	00008a06 	br	128ac <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12684:	e0bffd17 	ldw	r2,-12(fp)
   12688:	10800003 	ldbu	r2,0(r2)
   1268c:	10803fcc 	andi	r2,r2,255
   12690:	108000a0 	cmpeqi	r2,r2,2
   12694:	1000051e 	bne	r2,zero,126ac <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12698:	e0bfff17 	ldw	r2,-4(fp)
   1269c:	00c00044 	movi	r3,1
   126a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   126a4:	0005883a 	mov	r2,zero
   126a8:	00008006 	br	128ac <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   126ac:	d0a72a03 	ldbu	r2,-25432(gp)
   126b0:	10803fcc 	andi	r2,r2,255
   126b4:	10000526 	beq	r2,zero,126cc <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   126b8:	e0bfff17 	ldw	r2,-4(fp)
   126bc:	00c00084 	movi	r3,2
   126c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   126c4:	0005883a 	mov	r2,zero
   126c8:	00007806 	br	128ac <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   126cc:	d0a71c03 	ldbu	r2,-25488(gp)
   126d0:	10803fcc 	andi	r2,r2,255
   126d4:	10000526 	beq	r2,zero,126ec <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   126d8:	e0bfff17 	ldw	r2,-4(fp)
   126dc:	00c00344 	movi	r3,13
   126e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   126e4:	0005883a 	mov	r2,zero
   126e8:	00007006 	br	128ac <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126ec:	0005303a 	rdctl	r2,status
   126f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126f4:	e0fffc17 	ldw	r3,-16(fp)
   126f8:	00bfff84 	movi	r2,-2
   126fc:	1884703a 	and	r2,r3,r2
   12700:	1001703a 	wrctl	status,r2
  
  return context;
   12704:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12708:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	10800117 	ldw	r2,4(r2)
   12714:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12718:	e0bff817 	ldw	r2,-32(fp)
   1271c:	1080058b 	ldhu	r2,22(r2)
   12720:	10bfffcc 	andi	r2,r2,65535
   12724:	10001e26 	beq	r2,zero,127a0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12728:	e0bff817 	ldw	r2,-32(fp)
   1272c:	10800417 	ldw	r2,16(r2)
   12730:	11000104 	addi	r4,r2,4
   12734:	e0fff817 	ldw	r3,-32(fp)
   12738:	19000415 	stw	r4,16(r3)
   1273c:	10800017 	ldw	r2,0(r2)
   12740:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12744:	e0bff817 	ldw	r2,-32(fp)
   12748:	1080058b 	ldhu	r2,22(r2)
   1274c:	10bfffc4 	addi	r2,r2,-1
   12750:	1007883a 	mov	r3,r2
   12754:	e0bff817 	ldw	r2,-32(fp)
   12758:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1275c:	e0bff817 	ldw	r2,-32(fp)
   12760:	10c00417 	ldw	r3,16(r2)
   12764:	e0bff817 	ldw	r2,-32(fp)
   12768:	10800217 	ldw	r2,8(r2)
   1276c:	1880041e 	bne	r3,r2,12780 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   12770:	e0bff817 	ldw	r2,-32(fp)
   12774:	10c00117 	ldw	r3,4(r2)
   12778:	e0bff817 	ldw	r2,-32(fp)
   1277c:	10c00415 	stw	r3,16(r2)
   12780:	e0bff617 	ldw	r2,-40(fp)
   12784:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12788:	e0bff717 	ldw	r2,-36(fp)
   1278c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12790:	e0bfff17 	ldw	r2,-4(fp)
   12794:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12798:	e0bff517 	ldw	r2,-44(fp)
   1279c:	00004306 	br	128ac <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   127a0:	d0a72b17 	ldw	r2,-25428(gp)
   127a4:	d0e72b17 	ldw	r3,-25428(gp)
   127a8:	18c00c03 	ldbu	r3,48(r3)
   127ac:	18c00114 	ori	r3,r3,4
   127b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   127b4:	d0a72b17 	ldw	r2,-25428(gp)
   127b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   127bc:	d0a72b17 	ldw	r2,-25428(gp)
   127c0:	e0fffe0b 	ldhu	r3,-8(fp)
   127c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   127c8:	e13ffd17 	ldw	r4,-12(fp)
   127cc:	000f0900 	call	f090 <OS_EventTaskWait>
   127d0:	e0bff617 	ldw	r2,-40(fp)
   127d4:	e0bffb15 	stw	r2,-20(fp)
   127d8:	e0bffb17 	ldw	r2,-20(fp)
   127dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   127e0:	000f9440 	call	f944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127e4:	0005303a 	rdctl	r2,status
   127e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127ec:	e0fff917 	ldw	r3,-28(fp)
   127f0:	00bfff84 	movi	r2,-2
   127f4:	1884703a 	and	r2,r3,r2
   127f8:	1001703a 	wrctl	status,r2
  
  return context;
   127fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12800:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12804:	d0a72b17 	ldw	r2,-25428(gp)
   12808:	10800c43 	ldbu	r2,49(r2)
   1280c:	10803fcc 	andi	r2,r2,255
   12810:	10000326 	beq	r2,zero,12820 <OSQPend+0x1ec>
   12814:	108000a0 	cmpeqi	r2,r2,2
   12818:	1000071e 	bne	r2,zero,12838 <OSQPend+0x204>
   1281c:	00000b06 	br	1284c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12820:	d0a72b17 	ldw	r2,-25428(gp)
   12824:	10800917 	ldw	r2,36(r2)
   12828:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1282c:	e0bfff17 	ldw	r2,-4(fp)
   12830:	10000005 	stb	zero,0(r2)
             break;
   12834:	00000e06 	br	12870 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12838:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1283c:	e0bfff17 	ldw	r2,-4(fp)
   12840:	00c00384 	movi	r3,14
   12844:	10c00005 	stb	r3,0(r2)
             break;
   12848:	00000906 	br	12870 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1284c:	d0a72b17 	ldw	r2,-25428(gp)
   12850:	e17ffd17 	ldw	r5,-12(fp)
   12854:	1009883a 	mov	r4,r2
   12858:	000f2f00 	call	f2f0 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1285c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12860:	e0bfff17 	ldw	r2,-4(fp)
   12864:	00c00284 	movi	r3,10
   12868:	10c00005 	stb	r3,0(r2)
             break;
   1286c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12870:	d0a72b17 	ldw	r2,-25428(gp)
   12874:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12878:	d0a72b17 	ldw	r2,-25428(gp)
   1287c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12880:	d0a72b17 	ldw	r2,-25428(gp)
   12884:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12888:	d0a72b17 	ldw	r2,-25428(gp)
   1288c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12890:	d0a72b17 	ldw	r2,-25428(gp)
   12894:	10000915 	stw	zero,36(r2)
   12898:	e0bff617 	ldw	r2,-40(fp)
   1289c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128a0:	e0bffa17 	ldw	r2,-24(fp)
   128a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   128a8:	e0bff517 	ldw	r2,-44(fp)
}
   128ac:	e037883a 	mov	sp,fp
   128b0:	dfc00117 	ldw	ra,4(sp)
   128b4:	df000017 	ldw	fp,0(sp)
   128b8:	dec00204 	addi	sp,sp,8
   128bc:	f800283a 	ret

000128c0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   128c0:	defff604 	addi	sp,sp,-40
   128c4:	dfc00915 	stw	ra,36(sp)
   128c8:	df000815 	stw	fp,32(sp)
   128cc:	df000804 	addi	fp,sp,32
   128d0:	e13ffd15 	stw	r4,-12(fp)
   128d4:	2805883a 	mov	r2,r5
   128d8:	e1bfff15 	stw	r6,-4(fp)
   128dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   128e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   128e4:	e0bfff17 	ldw	r2,-4(fp)
   128e8:	1000021e 	bne	r2,zero,128f4 <OSQPendAbort+0x34>
        return (0);
   128ec:	0005883a 	mov	r2,zero
   128f0:	00004906 	br	12a18 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   128f4:	e0bffd17 	ldw	r2,-12(fp)
   128f8:	1000051e 	bne	r2,zero,12910 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   128fc:	e0bfff17 	ldw	r2,-4(fp)
   12900:	00c00104 	movi	r3,4
   12904:	10c00005 	stb	r3,0(r2)
        return (0);
   12908:	0005883a 	mov	r2,zero
   1290c:	00004206 	br	12a18 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12910:	e0bffd17 	ldw	r2,-12(fp)
   12914:	10800003 	ldbu	r2,0(r2)
   12918:	10803fcc 	andi	r2,r2,255
   1291c:	108000a0 	cmpeqi	r2,r2,2
   12920:	1000051e 	bne	r2,zero,12938 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12924:	e0bfff17 	ldw	r2,-4(fp)
   12928:	00c00044 	movi	r3,1
   1292c:	10c00005 	stb	r3,0(r2)
        return (0);
   12930:	0005883a 	mov	r2,zero
   12934:	00003806 	br	12a18 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12938:	0005303a 	rdctl	r2,status
   1293c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12940:	e0fffc17 	ldw	r3,-16(fp)
   12944:	00bfff84 	movi	r2,-2
   12948:	1884703a 	and	r2,r3,r2
   1294c:	1001703a 	wrctl	status,r2
  
  return context;
   12950:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12954:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12958:	e0bffd17 	ldw	r2,-12(fp)
   1295c:	10800283 	ldbu	r2,10(r2)
   12960:	10803fcc 	andi	r2,r2,255
   12964:	10002526 	beq	r2,zero,129fc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12968:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1296c:	e0bffe03 	ldbu	r2,-8(fp)
   12970:	10800060 	cmpeqi	r2,r2,1
   12974:	10000e26 	beq	r2,zero,129b0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12978:	00000806 	br	1299c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1297c:	01c00084 	movi	r7,2
   12980:	01800104 	movi	r6,4
   12984:	000b883a 	mov	r5,zero
   12988:	e13ffd17 	ldw	r4,-12(fp)
   1298c:	000eef80 	call	eef8 <OS_EventTaskRdy>
                     nbr_tasks++;
   12990:	e0bff803 	ldbu	r2,-32(fp)
   12994:	10800044 	addi	r2,r2,1
   12998:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1299c:	e0bffd17 	ldw	r2,-12(fp)
   129a0:	10800283 	ldbu	r2,10(r2)
   129a4:	10803fcc 	andi	r2,r2,255
   129a8:	103ff41e 	bne	r2,zero,1297c <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   129ac:	00000906 	br	129d4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   129b0:	01c00084 	movi	r7,2
   129b4:	01800104 	movi	r6,4
   129b8:	000b883a 	mov	r5,zero
   129bc:	e13ffd17 	ldw	r4,-12(fp)
   129c0:	000eef80 	call	eef8 <OS_EventTaskRdy>
                 nbr_tasks++;
   129c4:	e0bff803 	ldbu	r2,-32(fp)
   129c8:	10800044 	addi	r2,r2,1
   129cc:	e0bff805 	stb	r2,-32(fp)
                 break;
   129d0:	0001883a 	nop
   129d4:	e0bff917 	ldw	r2,-28(fp)
   129d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129dc:	e0bffa17 	ldw	r2,-24(fp)
   129e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   129e4:	000f9440 	call	f944 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   129e8:	e0bfff17 	ldw	r2,-4(fp)
   129ec:	00c00384 	movi	r3,14
   129f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   129f4:	e0bff803 	ldbu	r2,-32(fp)
   129f8:	00000706 	br	12a18 <OSQPendAbort+0x158>
   129fc:	e0bff917 	ldw	r2,-28(fp)
   12a00:	e0bffb15 	stw	r2,-20(fp)
   12a04:	e0bffb17 	ldw	r2,-20(fp)
   12a08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12a0c:	e0bfff17 	ldw	r2,-4(fp)
   12a10:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12a14:	0005883a 	mov	r2,zero
}
   12a18:	e037883a 	mov	sp,fp
   12a1c:	dfc00117 	ldw	ra,4(sp)
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00204 	addi	sp,sp,8
   12a28:	f800283a 	ret

00012a2c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12a2c:	defff604 	addi	sp,sp,-40
   12a30:	dfc00915 	stw	ra,36(sp)
   12a34:	df000815 	stw	fp,32(sp)
   12a38:	df000804 	addi	fp,sp,32
   12a3c:	e13ffe15 	stw	r4,-8(fp)
   12a40:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12a44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12a48:	e0bffe17 	ldw	r2,-8(fp)
   12a4c:	1000021e 	bne	r2,zero,12a58 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12a50:	00800104 	movi	r2,4
   12a54:	00004a06 	br	12b80 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12a58:	e0bffe17 	ldw	r2,-8(fp)
   12a5c:	10800003 	ldbu	r2,0(r2)
   12a60:	10803fcc 	andi	r2,r2,255
   12a64:	108000a0 	cmpeqi	r2,r2,2
   12a68:	1000021e 	bne	r2,zero,12a74 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12a6c:	00800044 	movi	r2,1
   12a70:	00004306 	br	12b80 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a74:	0005303a 	rdctl	r2,status
   12a78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a7c:	e0fffd17 	ldw	r3,-12(fp)
   12a80:	00bfff84 	movi	r2,-2
   12a84:	1884703a 	and	r2,r3,r2
   12a88:	1001703a 	wrctl	status,r2
  
  return context;
   12a8c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12a90:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12a94:	e0bffe17 	ldw	r2,-8(fp)
   12a98:	10800283 	ldbu	r2,10(r2)
   12a9c:	10803fcc 	andi	r2,r2,255
   12aa0:	10000c26 	beq	r2,zero,12ad4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12aa4:	000f883a 	mov	r7,zero
   12aa8:	01800104 	movi	r6,4
   12aac:	e17fff17 	ldw	r5,-4(fp)
   12ab0:	e13ffe17 	ldw	r4,-8(fp)
   12ab4:	000eef80 	call	eef8 <OS_EventTaskRdy>
   12ab8:	e0bff817 	ldw	r2,-32(fp)
   12abc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ac0:	e0bff917 	ldw	r2,-28(fp)
   12ac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12ac8:	000f9440 	call	f944 <OS_Sched>
        return (OS_ERR_NONE);
   12acc:	0005883a 	mov	r2,zero
   12ad0:	00002b06 	br	12b80 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12ad4:	e0bffe17 	ldw	r2,-8(fp)
   12ad8:	10800117 	ldw	r2,4(r2)
   12adc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12ae0:	e0bffb17 	ldw	r2,-20(fp)
   12ae4:	10c0058b 	ldhu	r3,22(r2)
   12ae8:	e0bffb17 	ldw	r2,-20(fp)
   12aec:	1080050b 	ldhu	r2,20(r2)
   12af0:	18ffffcc 	andi	r3,r3,65535
   12af4:	10bfffcc 	andi	r2,r2,65535
   12af8:	18800636 	bltu	r3,r2,12b14 <OSQPost+0xe8>
   12afc:	e0bff817 	ldw	r2,-32(fp)
   12b00:	e0bffa15 	stw	r2,-24(fp)
   12b04:	e0bffa17 	ldw	r2,-24(fp)
   12b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12b0c:	00800784 	movi	r2,30
   12b10:	00001b06 	br	12b80 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12b14:	e0bffb17 	ldw	r2,-20(fp)
   12b18:	10800317 	ldw	r2,12(r2)
   12b1c:	11000104 	addi	r4,r2,4
   12b20:	e0fffb17 	ldw	r3,-20(fp)
   12b24:	19000315 	stw	r4,12(r3)
   12b28:	e0ffff17 	ldw	r3,-4(fp)
   12b2c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12b30:	e0bffb17 	ldw	r2,-20(fp)
   12b34:	1080058b 	ldhu	r2,22(r2)
   12b38:	10800044 	addi	r2,r2,1
   12b3c:	1007883a 	mov	r3,r2
   12b40:	e0bffb17 	ldw	r2,-20(fp)
   12b44:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12b48:	e0bffb17 	ldw	r2,-20(fp)
   12b4c:	10c00317 	ldw	r3,12(r2)
   12b50:	e0bffb17 	ldw	r2,-20(fp)
   12b54:	10800217 	ldw	r2,8(r2)
   12b58:	1880041e 	bne	r3,r2,12b6c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12b5c:	e0bffb17 	ldw	r2,-20(fp)
   12b60:	10c00117 	ldw	r3,4(r2)
   12b64:	e0bffb17 	ldw	r2,-20(fp)
   12b68:	10c00315 	stw	r3,12(r2)
   12b6c:	e0bff817 	ldw	r2,-32(fp)
   12b70:	e0bffc15 	stw	r2,-16(fp)
   12b74:	e0bffc17 	ldw	r2,-16(fp)
   12b78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12b7c:	0005883a 	mov	r2,zero
}
   12b80:	e037883a 	mov	sp,fp
   12b84:	dfc00117 	ldw	ra,4(sp)
   12b88:	df000017 	ldw	fp,0(sp)
   12b8c:	dec00204 	addi	sp,sp,8
   12b90:	f800283a 	ret

00012b94 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12b94:	defff604 	addi	sp,sp,-40
   12b98:	dfc00915 	stw	ra,36(sp)
   12b9c:	df000815 	stw	fp,32(sp)
   12ba0:	df000804 	addi	fp,sp,32
   12ba4:	e13ffe15 	stw	r4,-8(fp)
   12ba8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12bac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12bb0:	e0bffe17 	ldw	r2,-8(fp)
   12bb4:	1000021e 	bne	r2,zero,12bc0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12bb8:	00800104 	movi	r2,4
   12bbc:	00004c06 	br	12cf0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12bc0:	e0bffe17 	ldw	r2,-8(fp)
   12bc4:	10800003 	ldbu	r2,0(r2)
   12bc8:	10803fcc 	andi	r2,r2,255
   12bcc:	108000a0 	cmpeqi	r2,r2,2
   12bd0:	1000021e 	bne	r2,zero,12bdc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12bd4:	00800044 	movi	r2,1
   12bd8:	00004506 	br	12cf0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bdc:	0005303a 	rdctl	r2,status
   12be0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12be4:	e0fffd17 	ldw	r3,-12(fp)
   12be8:	00bfff84 	movi	r2,-2
   12bec:	1884703a 	and	r2,r3,r2
   12bf0:	1001703a 	wrctl	status,r2
  
  return context;
   12bf4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12bf8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12bfc:	e0bffe17 	ldw	r2,-8(fp)
   12c00:	10800283 	ldbu	r2,10(r2)
   12c04:	10803fcc 	andi	r2,r2,255
   12c08:	10000c26 	beq	r2,zero,12c3c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c0c:	000f883a 	mov	r7,zero
   12c10:	01800104 	movi	r6,4
   12c14:	e17fff17 	ldw	r5,-4(fp)
   12c18:	e13ffe17 	ldw	r4,-8(fp)
   12c1c:	000eef80 	call	eef8 <OS_EventTaskRdy>
   12c20:	e0bff817 	ldw	r2,-32(fp)
   12c24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c28:	e0bff917 	ldw	r2,-28(fp)
   12c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12c30:	000f9440 	call	f944 <OS_Sched>
        return (OS_ERR_NONE);
   12c34:	0005883a 	mov	r2,zero
   12c38:	00002d06 	br	12cf0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12c3c:	e0bffe17 	ldw	r2,-8(fp)
   12c40:	10800117 	ldw	r2,4(r2)
   12c44:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12c48:	e0bffb17 	ldw	r2,-20(fp)
   12c4c:	10c0058b 	ldhu	r3,22(r2)
   12c50:	e0bffb17 	ldw	r2,-20(fp)
   12c54:	1080050b 	ldhu	r2,20(r2)
   12c58:	18ffffcc 	andi	r3,r3,65535
   12c5c:	10bfffcc 	andi	r2,r2,65535
   12c60:	18800636 	bltu	r3,r2,12c7c <OSQPostFront+0xe8>
   12c64:	e0bff817 	ldw	r2,-32(fp)
   12c68:	e0bffa15 	stw	r2,-24(fp)
   12c6c:	e0bffa17 	ldw	r2,-24(fp)
   12c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12c74:	00800784 	movi	r2,30
   12c78:	00001d06 	br	12cf0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12c7c:	e0bffb17 	ldw	r2,-20(fp)
   12c80:	10c00417 	ldw	r3,16(r2)
   12c84:	e0bffb17 	ldw	r2,-20(fp)
   12c88:	10800117 	ldw	r2,4(r2)
   12c8c:	1880041e 	bne	r3,r2,12ca0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12c90:	e0bffb17 	ldw	r2,-20(fp)
   12c94:	10c00217 	ldw	r3,8(r2)
   12c98:	e0bffb17 	ldw	r2,-20(fp)
   12c9c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12ca0:	e0bffb17 	ldw	r2,-20(fp)
   12ca4:	10800417 	ldw	r2,16(r2)
   12ca8:	10ffff04 	addi	r3,r2,-4
   12cac:	e0bffb17 	ldw	r2,-20(fp)
   12cb0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12cb4:	e0bffb17 	ldw	r2,-20(fp)
   12cb8:	10800417 	ldw	r2,16(r2)
   12cbc:	e0ffff17 	ldw	r3,-4(fp)
   12cc0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12cc4:	e0bffb17 	ldw	r2,-20(fp)
   12cc8:	1080058b 	ldhu	r2,22(r2)
   12ccc:	10800044 	addi	r2,r2,1
   12cd0:	1007883a 	mov	r3,r2
   12cd4:	e0bffb17 	ldw	r2,-20(fp)
   12cd8:	10c0058d 	sth	r3,22(r2)
   12cdc:	e0bff817 	ldw	r2,-32(fp)
   12ce0:	e0bffc15 	stw	r2,-16(fp)
   12ce4:	e0bffc17 	ldw	r2,-16(fp)
   12ce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12cec:	0005883a 	mov	r2,zero
}
   12cf0:	e037883a 	mov	sp,fp
   12cf4:	dfc00117 	ldw	ra,4(sp)
   12cf8:	df000017 	ldw	fp,0(sp)
   12cfc:	dec00204 	addi	sp,sp,8
   12d00:	f800283a 	ret

00012d04 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12d04:	defff504 	addi	sp,sp,-44
   12d08:	dfc00a15 	stw	ra,40(sp)
   12d0c:	df000915 	stw	fp,36(sp)
   12d10:	df000904 	addi	fp,sp,36
   12d14:	e13ffd15 	stw	r4,-12(fp)
   12d18:	e17ffe15 	stw	r5,-8(fp)
   12d1c:	3005883a 	mov	r2,r6
   12d20:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d24:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d28:	e0bffd17 	ldw	r2,-12(fp)
   12d2c:	1000021e 	bne	r2,zero,12d38 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12d30:	00800104 	movi	r2,4
   12d34:	00007106 	br	12efc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12d38:	e0bffd17 	ldw	r2,-12(fp)
   12d3c:	10800003 	ldbu	r2,0(r2)
   12d40:	10803fcc 	andi	r2,r2,255
   12d44:	108000a0 	cmpeqi	r2,r2,2
   12d48:	1000021e 	bne	r2,zero,12d54 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12d4c:	00800044 	movi	r2,1
   12d50:	00006a06 	br	12efc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d54:	0005303a 	rdctl	r2,status
   12d58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d5c:	e0fffc17 	ldw	r3,-16(fp)
   12d60:	00bfff84 	movi	r2,-2
   12d64:	1884703a 	and	r2,r3,r2
   12d68:	1001703a 	wrctl	status,r2
  
  return context;
   12d6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12d70:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12d74:	e0bffd17 	ldw	r2,-12(fp)
   12d78:	10800283 	ldbu	r2,10(r2)
   12d7c:	10803fcc 	andi	r2,r2,255
   12d80:	10001d26 	beq	r2,zero,12df8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12d84:	e0bfff03 	ldbu	r2,-4(fp)
   12d88:	1080004c 	andi	r2,r2,1
   12d8c:	10000b26 	beq	r2,zero,12dbc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12d90:	00000506 	br	12da8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12d94:	000f883a 	mov	r7,zero
   12d98:	01800104 	movi	r6,4
   12d9c:	e17ffe17 	ldw	r5,-8(fp)
   12da0:	e13ffd17 	ldw	r4,-12(fp)
   12da4:	000eef80 	call	eef8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12da8:	e0bffd17 	ldw	r2,-12(fp)
   12dac:	10800283 	ldbu	r2,10(r2)
   12db0:	10803fcc 	andi	r2,r2,255
   12db4:	103ff71e 	bne	r2,zero,12d94 <OSQPostOpt+0x90>
   12db8:	00000506 	br	12dd0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12dbc:	000f883a 	mov	r7,zero
   12dc0:	01800104 	movi	r6,4
   12dc4:	e17ffe17 	ldw	r5,-8(fp)
   12dc8:	e13ffd17 	ldw	r4,-12(fp)
   12dcc:	000eef80 	call	eef8 <OS_EventTaskRdy>
   12dd0:	e0bff717 	ldw	r2,-36(fp)
   12dd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12dd8:	e0bff817 	ldw	r2,-32(fp)
   12ddc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12de0:	e0bfff03 	ldbu	r2,-4(fp)
   12de4:	1080010c 	andi	r2,r2,4
   12de8:	1000011e 	bne	r2,zero,12df0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12dec:	000f9440 	call	f944 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12df0:	0005883a 	mov	r2,zero
   12df4:	00004106 	br	12efc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12df8:	e0bffd17 	ldw	r2,-12(fp)
   12dfc:	10800117 	ldw	r2,4(r2)
   12e00:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12e04:	e0bffa17 	ldw	r2,-24(fp)
   12e08:	10c0058b 	ldhu	r3,22(r2)
   12e0c:	e0bffa17 	ldw	r2,-24(fp)
   12e10:	1080050b 	ldhu	r2,20(r2)
   12e14:	18ffffcc 	andi	r3,r3,65535
   12e18:	10bfffcc 	andi	r2,r2,65535
   12e1c:	18800636 	bltu	r3,r2,12e38 <OSQPostOpt+0x134>
   12e20:	e0bff717 	ldw	r2,-36(fp)
   12e24:	e0bff915 	stw	r2,-28(fp)
   12e28:	e0bff917 	ldw	r2,-28(fp)
   12e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12e30:	00800784 	movi	r2,30
   12e34:	00003106 	br	12efc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12e38:	e0bfff03 	ldbu	r2,-4(fp)
   12e3c:	1080008c 	andi	r2,r2,2
   12e40:	10001326 	beq	r2,zero,12e90 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12e44:	e0bffa17 	ldw	r2,-24(fp)
   12e48:	10c00417 	ldw	r3,16(r2)
   12e4c:	e0bffa17 	ldw	r2,-24(fp)
   12e50:	10800117 	ldw	r2,4(r2)
   12e54:	1880041e 	bne	r3,r2,12e68 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12e58:	e0bffa17 	ldw	r2,-24(fp)
   12e5c:	10c00217 	ldw	r3,8(r2)
   12e60:	e0bffa17 	ldw	r2,-24(fp)
   12e64:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12e68:	e0bffa17 	ldw	r2,-24(fp)
   12e6c:	10800417 	ldw	r2,16(r2)
   12e70:	10ffff04 	addi	r3,r2,-4
   12e74:	e0bffa17 	ldw	r2,-24(fp)
   12e78:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12e7c:	e0bffa17 	ldw	r2,-24(fp)
   12e80:	10800417 	ldw	r2,16(r2)
   12e84:	e0fffe17 	ldw	r3,-8(fp)
   12e88:	10c00015 	stw	r3,0(r2)
   12e8c:	00001006 	br	12ed0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12e90:	e0bffa17 	ldw	r2,-24(fp)
   12e94:	10800317 	ldw	r2,12(r2)
   12e98:	11000104 	addi	r4,r2,4
   12e9c:	e0fffa17 	ldw	r3,-24(fp)
   12ea0:	19000315 	stw	r4,12(r3)
   12ea4:	e0fffe17 	ldw	r3,-8(fp)
   12ea8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12eac:	e0bffa17 	ldw	r2,-24(fp)
   12eb0:	10c00317 	ldw	r3,12(r2)
   12eb4:	e0bffa17 	ldw	r2,-24(fp)
   12eb8:	10800217 	ldw	r2,8(r2)
   12ebc:	1880041e 	bne	r3,r2,12ed0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12ec0:	e0bffa17 	ldw	r2,-24(fp)
   12ec4:	10c00117 	ldw	r3,4(r2)
   12ec8:	e0bffa17 	ldw	r2,-24(fp)
   12ecc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12ed0:	e0bffa17 	ldw	r2,-24(fp)
   12ed4:	1080058b 	ldhu	r2,22(r2)
   12ed8:	10800044 	addi	r2,r2,1
   12edc:	1007883a 	mov	r3,r2
   12ee0:	e0bffa17 	ldw	r2,-24(fp)
   12ee4:	10c0058d 	sth	r3,22(r2)
   12ee8:	e0bff717 	ldw	r2,-36(fp)
   12eec:	e0bffb15 	stw	r2,-20(fp)
   12ef0:	e0bffb17 	ldw	r2,-20(fp)
   12ef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12ef8:	0005883a 	mov	r2,zero
}
   12efc:	e037883a 	mov	sp,fp
   12f00:	dfc00117 	ldw	ra,4(sp)
   12f04:	df000017 	ldw	fp,0(sp)
   12f08:	dec00204 	addi	sp,sp,8
   12f0c:	f800283a 	ret

00012f10 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12f10:	defff604 	addi	sp,sp,-40
   12f14:	df000915 	stw	fp,36(sp)
   12f18:	df000904 	addi	fp,sp,36
   12f1c:	e13ffe15 	stw	r4,-8(fp)
   12f20:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12f24:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12f28:	e0bffe17 	ldw	r2,-8(fp)
   12f2c:	1000021e 	bne	r2,zero,12f38 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12f30:	00800104 	movi	r2,4
   12f34:	00004906 	br	1305c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12f38:	e0bfff17 	ldw	r2,-4(fp)
   12f3c:	1000021e 	bne	r2,zero,12f48 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12f40:	00800244 	movi	r2,9
   12f44:	00004506 	br	1305c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12f48:	e0bffe17 	ldw	r2,-8(fp)
   12f4c:	10800003 	ldbu	r2,0(r2)
   12f50:	10803fcc 	andi	r2,r2,255
   12f54:	108000a0 	cmpeqi	r2,r2,2
   12f58:	1000021e 	bne	r2,zero,12f64 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12f5c:	00800044 	movi	r2,1
   12f60:	00003e06 	br	1305c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f64:	0005303a 	rdctl	r2,status
   12f68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f6c:	e0fffd17 	ldw	r3,-12(fp)
   12f70:	00bfff84 	movi	r2,-2
   12f74:	1884703a 	and	r2,r3,r2
   12f78:	1001703a 	wrctl	status,r2
  
  return context;
   12f7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12f80:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12f84:	e0bffe17 	ldw	r2,-8(fp)
   12f88:	10c00283 	ldbu	r3,10(r2)
   12f8c:	e0bfff17 	ldw	r2,-4(fp)
   12f90:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12f94:	e0bffe17 	ldw	r2,-8(fp)
   12f98:	108002c4 	addi	r2,r2,11
   12f9c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12fa0:	e0bfff17 	ldw	r2,-4(fp)
   12fa4:	10800204 	addi	r2,r2,8
   12fa8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12fac:	e03ff705 	stb	zero,-36(fp)
   12fb0:	00000b06 	br	12fe0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12fb4:	e0bff917 	ldw	r2,-28(fp)
   12fb8:	10c00044 	addi	r3,r2,1
   12fbc:	e0fff915 	stw	r3,-28(fp)
   12fc0:	e0fff817 	ldw	r3,-32(fp)
   12fc4:	19000044 	addi	r4,r3,1
   12fc8:	e13ff815 	stw	r4,-32(fp)
   12fcc:	18c00003 	ldbu	r3,0(r3)
   12fd0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12fd4:	e0bff703 	ldbu	r2,-36(fp)
   12fd8:	10800044 	addi	r2,r2,1
   12fdc:	e0bff705 	stb	r2,-36(fp)
   12fe0:	e0bff703 	ldbu	r2,-36(fp)
   12fe4:	108000f0 	cmpltui	r2,r2,3
   12fe8:	103ff21e 	bne	r2,zero,12fb4 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12fec:	e0bffe17 	ldw	r2,-8(fp)
   12ff0:	10800117 	ldw	r2,4(r2)
   12ff4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   12ff8:	e0bffc17 	ldw	r2,-16(fp)
   12ffc:	1080058b 	ldhu	r2,22(r2)
   13000:	10bfffcc 	andi	r2,r2,65535
   13004:	10000626 	beq	r2,zero,13020 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13008:	e0bffc17 	ldw	r2,-16(fp)
   1300c:	10800417 	ldw	r2,16(r2)
   13010:	10c00017 	ldw	r3,0(r2)
   13014:	e0bfff17 	ldw	r2,-4(fp)
   13018:	10c00015 	stw	r3,0(r2)
   1301c:	00000206 	br	13028 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13020:	e0bfff17 	ldw	r2,-4(fp)
   13024:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   13028:	e0bffc17 	ldw	r2,-16(fp)
   1302c:	10c0058b 	ldhu	r3,22(r2)
   13030:	e0bfff17 	ldw	r2,-4(fp)
   13034:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   13038:	e0bffc17 	ldw	r2,-16(fp)
   1303c:	10c0050b 	ldhu	r3,20(r2)
   13040:	e0bfff17 	ldw	r2,-4(fp)
   13044:	10c0018d 	sth	r3,6(r2)
   13048:	e0bffa17 	ldw	r2,-24(fp)
   1304c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13050:	e0bffb17 	ldw	r2,-20(fp)
   13054:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13058:	0005883a 	mov	r2,zero
}
   1305c:	e037883a 	mov	sp,fp
   13060:	df000017 	ldw	fp,0(sp)
   13064:	dec00104 	addi	sp,sp,4
   13068:	f800283a 	ret

0001306c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1306c:	defffb04 	addi	sp,sp,-20
   13070:	dfc00415 	stw	ra,16(sp)
   13074:	df000315 	stw	fp,12(sp)
   13078:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1307c:	01407804 	movi	r5,480
   13080:	010000b4 	movhi	r4,2
   13084:	21001804 	addi	r4,r4,96
   13088:	000f8880 	call	f888 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1308c:	008000b4 	movhi	r2,2
   13090:	10801804 	addi	r2,r2,96
   13094:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13098:	008000b4 	movhi	r2,2
   1309c:	10801e04 	addi	r2,r2,120
   130a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   130a4:	e03ffd0d 	sth	zero,-12(fp)
   130a8:	00000c06 	br	130dc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   130ac:	e0bffe17 	ldw	r2,-8(fp)
   130b0:	e0ffff17 	ldw	r3,-4(fp)
   130b4:	10c00015 	stw	r3,0(r2)
        pq1++;
   130b8:	e0bffe17 	ldw	r2,-8(fp)
   130bc:	10800604 	addi	r2,r2,24
   130c0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   130c4:	e0bfff17 	ldw	r2,-4(fp)
   130c8:	10800604 	addi	r2,r2,24
   130cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   130d0:	e0bffd0b 	ldhu	r2,-12(fp)
   130d4:	10800044 	addi	r2,r2,1
   130d8:	e0bffd0d 	sth	r2,-12(fp)
   130dc:	e0bffd0b 	ldhu	r2,-12(fp)
   130e0:	108004f0 	cmpltui	r2,r2,19
   130e4:	103ff11e 	bne	r2,zero,130ac <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   130e8:	e0bffe17 	ldw	r2,-8(fp)
   130ec:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   130f0:	008000b4 	movhi	r2,2
   130f4:	10801804 	addi	r2,r2,96
   130f8:	d0a72715 	stw	r2,-25444(gp)
#endif
}
   130fc:	0001883a 	nop
   13100:	e037883a 	mov	sp,fp
   13104:	dfc00117 	ldw	ra,4(sp)
   13108:	df000017 	ldw	fp,0(sp)
   1310c:	dec00204 	addi	sp,sp,8
   13110:	f800283a 	ret

00013114 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   13114:	defffa04 	addi	sp,sp,-24
   13118:	df000515 	stw	fp,20(sp)
   1311c:	df000504 	addi	fp,sp,20
   13120:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13124:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13128:	e0bfff17 	ldw	r2,-4(fp)
   1312c:	1000021e 	bne	r2,zero,13138 <OSSemAccept+0x24>
        return (0);
   13130:	0005883a 	mov	r2,zero
   13134:	00001f06 	br	131b4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13138:	e0bfff17 	ldw	r2,-4(fp)
   1313c:	10800003 	ldbu	r2,0(r2)
   13140:	10803fcc 	andi	r2,r2,255
   13144:	108000e0 	cmpeqi	r2,r2,3
   13148:	1000021e 	bne	r2,zero,13154 <OSSemAccept+0x40>
        return (0);
   1314c:	0005883a 	mov	r2,zero
   13150:	00001806 	br	131b4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13154:	0005303a 	rdctl	r2,status
   13158:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1315c:	e0fffe17 	ldw	r3,-8(fp)
   13160:	00bfff84 	movi	r2,-2
   13164:	1884703a 	and	r2,r3,r2
   13168:	1001703a 	wrctl	status,r2
  
  return context;
   1316c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13170:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   13174:	e0bfff17 	ldw	r2,-4(fp)
   13178:	1080020b 	ldhu	r2,8(r2)
   1317c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13180:	e0bffd0b 	ldhu	r2,-12(fp)
   13184:	10000626 	beq	r2,zero,131a0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13188:	e0bfff17 	ldw	r2,-4(fp)
   1318c:	1080020b 	ldhu	r2,8(r2)
   13190:	10bfffc4 	addi	r2,r2,-1
   13194:	1007883a 	mov	r3,r2
   13198:	e0bfff17 	ldw	r2,-4(fp)
   1319c:	10c0020d 	sth	r3,8(r2)
   131a0:	e0bffb17 	ldw	r2,-20(fp)
   131a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131a8:	e0bffc17 	ldw	r2,-16(fp)
   131ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   131b0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   131b4:	e037883a 	mov	sp,fp
   131b8:	df000017 	ldw	fp,0(sp)
   131bc:	dec00104 	addi	sp,sp,4
   131c0:	f800283a 	ret

000131c4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   131c4:	defff904 	addi	sp,sp,-28
   131c8:	dfc00615 	stw	ra,24(sp)
   131cc:	df000515 	stw	fp,20(sp)
   131d0:	df000504 	addi	fp,sp,20
   131d4:	2005883a 	mov	r2,r4
   131d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   131dc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   131e0:	d0a72a03 	ldbu	r2,-25432(gp)
   131e4:	10803fcc 	andi	r2,r2,255
   131e8:	10000226 	beq	r2,zero,131f4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   131ec:	0005883a 	mov	r2,zero
   131f0:	00002506 	br	13288 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131f4:	0005303a 	rdctl	r2,status
   131f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131fc:	e0fffe17 	ldw	r3,-8(fp)
   13200:	00bfff84 	movi	r2,-2
   13204:	1884703a 	and	r2,r3,r2
   13208:	1001703a 	wrctl	status,r2
  
  return context;
   1320c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13210:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13214:	d0a72917 	ldw	r2,-25436(gp)
   13218:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1321c:	d0a72917 	ldw	r2,-25436(gp)
   13220:	10000326 	beq	r2,zero,13230 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13224:	d0a72917 	ldw	r2,-25436(gp)
   13228:	10800117 	ldw	r2,4(r2)
   1322c:	d0a72915 	stw	r2,-25436(gp)
   13230:	e0bffb17 	ldw	r2,-20(fp)
   13234:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13238:	e0bffc17 	ldw	r2,-16(fp)
   1323c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   13240:	e0bffd17 	ldw	r2,-12(fp)
   13244:	10000f26 	beq	r2,zero,13284 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   13248:	e0bffd17 	ldw	r2,-12(fp)
   1324c:	00c000c4 	movi	r3,3
   13250:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   13254:	e0bffd17 	ldw	r2,-12(fp)
   13258:	e0ffff0b 	ldhu	r3,-4(fp)
   1325c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   13260:	e0bffd17 	ldw	r2,-12(fp)
   13264:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   13268:	e0bffd17 	ldw	r2,-12(fp)
   1326c:	00c00fc4 	movi	r3,63
   13270:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   13274:	e0bffd17 	ldw	r2,-12(fp)
   13278:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1327c:	e13ffd17 	ldw	r4,-12(fp)
   13280:	000f4a80 	call	f4a8 <OS_EventWaitListInit>
    }
    return (pevent);
   13284:	e0bffd17 	ldw	r2,-12(fp)
}
   13288:	e037883a 	mov	sp,fp
   1328c:	dfc00117 	ldw	ra,4(sp)
   13290:	df000017 	ldw	fp,0(sp)
   13294:	dec00204 	addi	sp,sp,8
   13298:	f800283a 	ret

0001329c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1329c:	defff304 	addi	sp,sp,-52
   132a0:	dfc00c15 	stw	ra,48(sp)
   132a4:	df000b15 	stw	fp,44(sp)
   132a8:	df000b04 	addi	fp,sp,44
   132ac:	e13ffd15 	stw	r4,-12(fp)
   132b0:	2805883a 	mov	r2,r5
   132b4:	e1bfff15 	stw	r6,-4(fp)
   132b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   132bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	1000021e 	bne	r2,zero,132d0 <OSSemDel+0x34>
        return (pevent);
   132c8:	e0bffd17 	ldw	r2,-12(fp)
   132cc:	00007e06 	br	134c8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   132d0:	e0bffd17 	ldw	r2,-12(fp)
   132d4:	1000051e 	bne	r2,zero,132ec <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   132d8:	e0bfff17 	ldw	r2,-4(fp)
   132dc:	00c00104 	movi	r3,4
   132e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   132e4:	e0bffd17 	ldw	r2,-12(fp)
   132e8:	00007706 	br	134c8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   132ec:	e0bffd17 	ldw	r2,-12(fp)
   132f0:	10800003 	ldbu	r2,0(r2)
   132f4:	10803fcc 	andi	r2,r2,255
   132f8:	108000e0 	cmpeqi	r2,r2,3
   132fc:	1000051e 	bne	r2,zero,13314 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13300:	e0bfff17 	ldw	r2,-4(fp)
   13304:	00c00044 	movi	r3,1
   13308:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1330c:	e0bffd17 	ldw	r2,-12(fp)
   13310:	00006d06 	br	134c8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13314:	d0a72a03 	ldbu	r2,-25432(gp)
   13318:	10803fcc 	andi	r2,r2,255
   1331c:	10000526 	beq	r2,zero,13334 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	00c003c4 	movi	r3,15
   13328:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1332c:	e0bffd17 	ldw	r2,-12(fp)
   13330:	00006506 	br	134c8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13334:	0005303a 	rdctl	r2,status
   13338:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1333c:	e0fffc17 	ldw	r3,-16(fp)
   13340:	00bfff84 	movi	r2,-2
   13344:	1884703a 	and	r2,r3,r2
   13348:	1001703a 	wrctl	status,r2
  
  return context;
   1334c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13350:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   13354:	e0bffd17 	ldw	r2,-12(fp)
   13358:	10800283 	ldbu	r2,10(r2)
   1335c:	10803fcc 	andi	r2,r2,255
   13360:	10000326 	beq	r2,zero,13370 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13364:	00800044 	movi	r2,1
   13368:	e0bff505 	stb	r2,-44(fp)
   1336c:	00000106 	br	13374 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13370:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   13374:	e0bffe03 	ldbu	r2,-8(fp)
   13378:	10000326 	beq	r2,zero,13388 <OSSemDel+0xec>
   1337c:	10800060 	cmpeqi	r2,r2,1
   13380:	1000281e 	bne	r2,zero,13424 <OSSemDel+0x188>
   13384:	00004506 	br	1349c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13388:	e0bff503 	ldbu	r2,-44(fp)
   1338c:	1000161e 	bne	r2,zero,133e8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13390:	e0bffd17 	ldw	r2,-12(fp)
   13394:	00c00fc4 	movi	r3,63
   13398:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1339c:	e0bffd17 	ldw	r2,-12(fp)
   133a0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   133a4:	e0bffd17 	ldw	r2,-12(fp)
   133a8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   133ac:	d0e72917 	ldw	r3,-25436(gp)
   133b0:	e0bffd17 	ldw	r2,-12(fp)
   133b4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   133b8:	e0bffd17 	ldw	r2,-12(fp)
   133bc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	d0a72915 	stw	r2,-25436(gp)
   133c8:	e0bff717 	ldw	r2,-36(fp)
   133cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133d0:	e0bff817 	ldw	r2,-32(fp)
   133d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   133d8:	e0bfff17 	ldw	r2,-4(fp)
   133dc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   133e0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   133e4:	00003706 	br	134c4 <OSSemDel+0x228>
   133e8:	e0bff717 	ldw	r2,-36(fp)
   133ec:	e0bff915 	stw	r2,-28(fp)
   133f0:	e0bff917 	ldw	r2,-28(fp)
   133f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   133f8:	e0bfff17 	ldw	r2,-4(fp)
   133fc:	00c01244 	movi	r3,73
   13400:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13404:	e0bffd17 	ldw	r2,-12(fp)
   13408:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1340c:	00002d06 	br	134c4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13410:	000f883a 	mov	r7,zero
   13414:	01800044 	movi	r6,1
   13418:	000b883a 	mov	r5,zero
   1341c:	e13ffd17 	ldw	r4,-12(fp)
   13420:	000eef80 	call	eef8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   13424:	e0bffd17 	ldw	r2,-12(fp)
   13428:	10800283 	ldbu	r2,10(r2)
   1342c:	10803fcc 	andi	r2,r2,255
   13430:	103ff71e 	bne	r2,zero,13410 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	00c00fc4 	movi	r3,63
   1343c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13440:	e0bffd17 	ldw	r2,-12(fp)
   13444:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13448:	e0bffd17 	ldw	r2,-12(fp)
   1344c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13450:	d0e72917 	ldw	r3,-25436(gp)
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13464:	e0bffd17 	ldw	r2,-12(fp)
   13468:	d0a72915 	stw	r2,-25436(gp)
   1346c:	e0bff717 	ldw	r2,-36(fp)
   13470:	e0bffa15 	stw	r2,-24(fp)
   13474:	e0bffa17 	ldw	r2,-24(fp)
   13478:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1347c:	e0bff503 	ldbu	r2,-44(fp)
   13480:	10800058 	cmpnei	r2,r2,1
   13484:	1000011e 	bne	r2,zero,1348c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13488:	000f9440 	call	f944 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1348c:	e0bfff17 	ldw	r2,-4(fp)
   13490:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13494:	e03ff615 	stw	zero,-40(fp)
             break;
   13498:	00000a06 	br	134c4 <OSSemDel+0x228>
   1349c:	e0bff717 	ldw	r2,-36(fp)
   134a0:	e0bffb15 	stw	r2,-20(fp)
   134a4:	e0bffb17 	ldw	r2,-20(fp)
   134a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   134ac:	e0bfff17 	ldw	r2,-4(fp)
   134b0:	00c001c4 	movi	r3,7
   134b4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   134b8:	e0bffd17 	ldw	r2,-12(fp)
   134bc:	e0bff615 	stw	r2,-40(fp)
             break;
   134c0:	0001883a 	nop
    }
    return (pevent_return);
   134c4:	e0bff617 	ldw	r2,-40(fp)
}
   134c8:	e037883a 	mov	sp,fp
   134cc:	dfc00117 	ldw	ra,4(sp)
   134d0:	df000017 	ldw	fp,0(sp)
   134d4:	dec00204 	addi	sp,sp,8
   134d8:	f800283a 	ret

000134dc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   134dc:	defff504 	addi	sp,sp,-44
   134e0:	dfc00a15 	stw	ra,40(sp)
   134e4:	df000915 	stw	fp,36(sp)
   134e8:	df000904 	addi	fp,sp,36
   134ec:	e13ffd15 	stw	r4,-12(fp)
   134f0:	2805883a 	mov	r2,r5
   134f4:	e1bfff15 	stw	r6,-4(fp)
   134f8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   134fc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13500:	e0bfff17 	ldw	r2,-4(fp)
   13504:	10007226 	beq	r2,zero,136d0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13508:	e0bffd17 	ldw	r2,-12(fp)
   1350c:	1000041e 	bne	r2,zero,13520 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13510:	e0bfff17 	ldw	r2,-4(fp)
   13514:	00c00104 	movi	r3,4
   13518:	10c00005 	stb	r3,0(r2)
        return;
   1351c:	00006d06 	br	136d4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13520:	e0bffd17 	ldw	r2,-12(fp)
   13524:	10800003 	ldbu	r2,0(r2)
   13528:	10803fcc 	andi	r2,r2,255
   1352c:	108000e0 	cmpeqi	r2,r2,3
   13530:	1000041e 	bne	r2,zero,13544 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13534:	e0bfff17 	ldw	r2,-4(fp)
   13538:	00c00044 	movi	r3,1
   1353c:	10c00005 	stb	r3,0(r2)
        return;
   13540:	00006406 	br	136d4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13544:	d0a72a03 	ldbu	r2,-25432(gp)
   13548:	10803fcc 	andi	r2,r2,255
   1354c:	10000426 	beq	r2,zero,13560 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13550:	e0bfff17 	ldw	r2,-4(fp)
   13554:	00c00084 	movi	r3,2
   13558:	10c00005 	stb	r3,0(r2)
        return;
   1355c:	00005d06 	br	136d4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13560:	d0a71c03 	ldbu	r2,-25488(gp)
   13564:	10803fcc 	andi	r2,r2,255
   13568:	10000426 	beq	r2,zero,1357c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1356c:	e0bfff17 	ldw	r2,-4(fp)
   13570:	00c00344 	movi	r3,13
   13574:	10c00005 	stb	r3,0(r2)
        return;
   13578:	00005606 	br	136d4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1357c:	0005303a 	rdctl	r2,status
   13580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13584:	e0fffc17 	ldw	r3,-16(fp)
   13588:	00bfff84 	movi	r2,-2
   1358c:	1884703a 	and	r2,r3,r2
   13590:	1001703a 	wrctl	status,r2
  
  return context;
   13594:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13598:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1359c:	e0bffd17 	ldw	r2,-12(fp)
   135a0:	1080020b 	ldhu	r2,8(r2)
   135a4:	10bfffcc 	andi	r2,r2,65535
   135a8:	10000d26 	beq	r2,zero,135e0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   135ac:	e0bffd17 	ldw	r2,-12(fp)
   135b0:	1080020b 	ldhu	r2,8(r2)
   135b4:	10bfffc4 	addi	r2,r2,-1
   135b8:	1007883a 	mov	r3,r2
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	10c0020d 	sth	r3,8(r2)
   135c4:	e0bff717 	ldw	r2,-36(fp)
   135c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135cc:	e0bff817 	ldw	r2,-32(fp)
   135d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   135d4:	e0bfff17 	ldw	r2,-4(fp)
   135d8:	10000005 	stb	zero,0(r2)
        return;
   135dc:	00003d06 	br	136d4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   135e0:	d0a72b17 	ldw	r2,-25428(gp)
   135e4:	d0e72b17 	ldw	r3,-25428(gp)
   135e8:	18c00c03 	ldbu	r3,48(r3)
   135ec:	18c00054 	ori	r3,r3,1
   135f0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   135f4:	d0a72b17 	ldw	r2,-25428(gp)
   135f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   135fc:	d0a72b17 	ldw	r2,-25428(gp)
   13600:	e0fffe0b 	ldhu	r3,-8(fp)
   13604:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13608:	e13ffd17 	ldw	r4,-12(fp)
   1360c:	000f0900 	call	f090 <OS_EventTaskWait>
   13610:	e0bff717 	ldw	r2,-36(fp)
   13614:	e0bffb15 	stw	r2,-20(fp)
   13618:	e0bffb17 	ldw	r2,-20(fp)
   1361c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13620:	000f9440 	call	f944 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13624:	0005303a 	rdctl	r2,status
   13628:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1362c:	e0fff917 	ldw	r3,-28(fp)
   13630:	00bfff84 	movi	r2,-2
   13634:	1884703a 	and	r2,r3,r2
   13638:	1001703a 	wrctl	status,r2
  
  return context;
   1363c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13640:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13644:	d0a72b17 	ldw	r2,-25428(gp)
   13648:	10800c43 	ldbu	r2,49(r2)
   1364c:	10803fcc 	andi	r2,r2,255
   13650:	10000326 	beq	r2,zero,13660 <OSSemPend+0x184>
   13654:	108000a0 	cmpeqi	r2,r2,2
   13658:	1000041e 	bne	r2,zero,1366c <OSSemPend+0x190>
   1365c:	00000706 	br	1367c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13660:	e0bfff17 	ldw	r2,-4(fp)
   13664:	10000005 	stb	zero,0(r2)
             break;
   13668:	00000c06 	br	1369c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1366c:	e0bfff17 	ldw	r2,-4(fp)
   13670:	00c00384 	movi	r3,14
   13674:	10c00005 	stb	r3,0(r2)
             break;
   13678:	00000806 	br	1369c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1367c:	d0a72b17 	ldw	r2,-25428(gp)
   13680:	e17ffd17 	ldw	r5,-12(fp)
   13684:	1009883a 	mov	r4,r2
   13688:	000f2f00 	call	f2f0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1368c:	e0bfff17 	ldw	r2,-4(fp)
   13690:	00c00284 	movi	r3,10
   13694:	10c00005 	stb	r3,0(r2)
             break;
   13698:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1369c:	d0a72b17 	ldw	r2,-25428(gp)
   136a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   136a4:	d0a72b17 	ldw	r2,-25428(gp)
   136a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   136ac:	d0a72b17 	ldw	r2,-25428(gp)
   136b0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   136b4:	d0a72b17 	ldw	r2,-25428(gp)
   136b8:	10000815 	stw	zero,32(r2)
   136bc:	e0bff717 	ldw	r2,-36(fp)
   136c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136c4:	e0bffa17 	ldw	r2,-24(fp)
   136c8:	1001703a 	wrctl	status,r2
   136cc:	00000106 	br	136d4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   136d0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   136d4:	e037883a 	mov	sp,fp
   136d8:	dfc00117 	ldw	ra,4(sp)
   136dc:	df000017 	ldw	fp,0(sp)
   136e0:	dec00204 	addi	sp,sp,8
   136e4:	f800283a 	ret

000136e8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   136e8:	defff604 	addi	sp,sp,-40
   136ec:	dfc00915 	stw	ra,36(sp)
   136f0:	df000815 	stw	fp,32(sp)
   136f4:	df000804 	addi	fp,sp,32
   136f8:	e13ffd15 	stw	r4,-12(fp)
   136fc:	2805883a 	mov	r2,r5
   13700:	e1bfff15 	stw	r6,-4(fp)
   13704:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13708:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1370c:	e0bfff17 	ldw	r2,-4(fp)
   13710:	1000021e 	bne	r2,zero,1371c <OSSemPendAbort+0x34>
        return (0);
   13714:	0005883a 	mov	r2,zero
   13718:	00004906 	br	13840 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1371c:	e0bffd17 	ldw	r2,-12(fp)
   13720:	1000051e 	bne	r2,zero,13738 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13724:	e0bfff17 	ldw	r2,-4(fp)
   13728:	00c00104 	movi	r3,4
   1372c:	10c00005 	stb	r3,0(r2)
        return (0);
   13730:	0005883a 	mov	r2,zero
   13734:	00004206 	br	13840 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	10800003 	ldbu	r2,0(r2)
   13740:	10803fcc 	andi	r2,r2,255
   13744:	108000e0 	cmpeqi	r2,r2,3
   13748:	1000051e 	bne	r2,zero,13760 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1374c:	e0bfff17 	ldw	r2,-4(fp)
   13750:	00c00044 	movi	r3,1
   13754:	10c00005 	stb	r3,0(r2)
        return (0);
   13758:	0005883a 	mov	r2,zero
   1375c:	00003806 	br	13840 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13760:	0005303a 	rdctl	r2,status
   13764:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13768:	e0fffc17 	ldw	r3,-16(fp)
   1376c:	00bfff84 	movi	r2,-2
   13770:	1884703a 	and	r2,r3,r2
   13774:	1001703a 	wrctl	status,r2
  
  return context;
   13778:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1377c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13780:	e0bffd17 	ldw	r2,-12(fp)
   13784:	10800283 	ldbu	r2,10(r2)
   13788:	10803fcc 	andi	r2,r2,255
   1378c:	10002526 	beq	r2,zero,13824 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13790:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13794:	e0bffe03 	ldbu	r2,-8(fp)
   13798:	10800060 	cmpeqi	r2,r2,1
   1379c:	10000e26 	beq	r2,zero,137d8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   137a0:	00000806 	br	137c4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   137a4:	01c00084 	movi	r7,2
   137a8:	01800044 	movi	r6,1
   137ac:	000b883a 	mov	r5,zero
   137b0:	e13ffd17 	ldw	r4,-12(fp)
   137b4:	000eef80 	call	eef8 <OS_EventTaskRdy>
                     nbr_tasks++;
   137b8:	e0bff803 	ldbu	r2,-32(fp)
   137bc:	10800044 	addi	r2,r2,1
   137c0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   137c4:	e0bffd17 	ldw	r2,-12(fp)
   137c8:	10800283 	ldbu	r2,10(r2)
   137cc:	10803fcc 	andi	r2,r2,255
   137d0:	103ff41e 	bne	r2,zero,137a4 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   137d4:	00000906 	br	137fc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   137d8:	01c00084 	movi	r7,2
   137dc:	01800044 	movi	r6,1
   137e0:	000b883a 	mov	r5,zero
   137e4:	e13ffd17 	ldw	r4,-12(fp)
   137e8:	000eef80 	call	eef8 <OS_EventTaskRdy>
                 nbr_tasks++;
   137ec:	e0bff803 	ldbu	r2,-32(fp)
   137f0:	10800044 	addi	r2,r2,1
   137f4:	e0bff805 	stb	r2,-32(fp)
                 break;
   137f8:	0001883a 	nop
   137fc:	e0bff917 	ldw	r2,-28(fp)
   13800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13804:	e0bffa17 	ldw	r2,-24(fp)
   13808:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1380c:	000f9440 	call	f944 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13810:	e0bfff17 	ldw	r2,-4(fp)
   13814:	00c00384 	movi	r3,14
   13818:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1381c:	e0bff803 	ldbu	r2,-32(fp)
   13820:	00000706 	br	13840 <OSSemPendAbort+0x158>
   13824:	e0bff917 	ldw	r2,-28(fp)
   13828:	e0bffb15 	stw	r2,-20(fp)
   1382c:	e0bffb17 	ldw	r2,-20(fp)
   13830:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13834:	e0bfff17 	ldw	r2,-4(fp)
   13838:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1383c:	0005883a 	mov	r2,zero
}
   13840:	e037883a 	mov	sp,fp
   13844:	dfc00117 	ldw	ra,4(sp)
   13848:	df000017 	ldw	fp,0(sp)
   1384c:	dec00204 	addi	sp,sp,8
   13850:	f800283a 	ret

00013854 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13854:	defff804 	addi	sp,sp,-32
   13858:	dfc00715 	stw	ra,28(sp)
   1385c:	df000615 	stw	fp,24(sp)
   13860:	df000604 	addi	fp,sp,24
   13864:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13868:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	1000021e 	bne	r2,zero,1387c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13874:	00800104 	movi	r2,4
   13878:	00003506 	br	13950 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1387c:	e0bfff17 	ldw	r2,-4(fp)
   13880:	10800003 	ldbu	r2,0(r2)
   13884:	10803fcc 	andi	r2,r2,255
   13888:	108000e0 	cmpeqi	r2,r2,3
   1388c:	1000021e 	bne	r2,zero,13898 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13890:	00800044 	movi	r2,1
   13894:	00002e06 	br	13950 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13898:	0005303a 	rdctl	r2,status
   1389c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138a0:	e0fffe17 	ldw	r3,-8(fp)
   138a4:	00bfff84 	movi	r2,-2
   138a8:	1884703a 	and	r2,r3,r2
   138ac:	1001703a 	wrctl	status,r2
  
  return context;
   138b0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   138b4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   138b8:	e0bfff17 	ldw	r2,-4(fp)
   138bc:	10800283 	ldbu	r2,10(r2)
   138c0:	10803fcc 	andi	r2,r2,255
   138c4:	10000c26 	beq	r2,zero,138f8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   138c8:	000f883a 	mov	r7,zero
   138cc:	01800044 	movi	r6,1
   138d0:	000b883a 	mov	r5,zero
   138d4:	e13fff17 	ldw	r4,-4(fp)
   138d8:	000eef80 	call	eef8 <OS_EventTaskRdy>
   138dc:	e0bffa17 	ldw	r2,-24(fp)
   138e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138e4:	e0bffb17 	ldw	r2,-20(fp)
   138e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   138ec:	000f9440 	call	f944 <OS_Sched>
        return (OS_ERR_NONE);
   138f0:	0005883a 	mov	r2,zero
   138f4:	00001606 	br	13950 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   138f8:	e0bfff17 	ldw	r2,-4(fp)
   138fc:	1080020b 	ldhu	r2,8(r2)
   13900:	10ffffcc 	andi	r3,r2,65535
   13904:	00bfffd4 	movui	r2,65535
   13908:	18800c26 	beq	r3,r2,1393c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1390c:	e0bfff17 	ldw	r2,-4(fp)
   13910:	1080020b 	ldhu	r2,8(r2)
   13914:	10800044 	addi	r2,r2,1
   13918:	1007883a 	mov	r3,r2
   1391c:	e0bfff17 	ldw	r2,-4(fp)
   13920:	10c0020d 	sth	r3,8(r2)
   13924:	e0bffa17 	ldw	r2,-24(fp)
   13928:	e0bffc15 	stw	r2,-16(fp)
   1392c:	e0bffc17 	ldw	r2,-16(fp)
   13930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13934:	0005883a 	mov	r2,zero
   13938:	00000506 	br	13950 <OSSemPost+0xfc>
   1393c:	e0bffa17 	ldw	r2,-24(fp)
   13940:	e0bffd15 	stw	r2,-12(fp)
   13944:	e0bffd17 	ldw	r2,-12(fp)
   13948:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1394c:	00800c84 	movi	r2,50
}
   13950:	e037883a 	mov	sp,fp
   13954:	dfc00117 	ldw	ra,4(sp)
   13958:	df000017 	ldw	fp,0(sp)
   1395c:	dec00204 	addi	sp,sp,8
   13960:	f800283a 	ret

00013964 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13964:	defff704 	addi	sp,sp,-36
   13968:	df000815 	stw	fp,32(sp)
   1396c:	df000804 	addi	fp,sp,32
   13970:	e13ffe15 	stw	r4,-8(fp)
   13974:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13978:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1397c:	e0bffe17 	ldw	r2,-8(fp)
   13980:	1000021e 	bne	r2,zero,1398c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13984:	00800104 	movi	r2,4
   13988:	00003606 	br	13a64 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	1000021e 	bne	r2,zero,1399c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13994:	00800244 	movi	r2,9
   13998:	00003206 	br	13a64 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1399c:	e0bffe17 	ldw	r2,-8(fp)
   139a0:	10800003 	ldbu	r2,0(r2)
   139a4:	10803fcc 	andi	r2,r2,255
   139a8:	108000e0 	cmpeqi	r2,r2,3
   139ac:	1000021e 	bne	r2,zero,139b8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   139b0:	00800044 	movi	r2,1
   139b4:	00002b06 	br	13a64 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139b8:	0005303a 	rdctl	r2,status
   139bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139c0:	e0fffd17 	ldw	r3,-12(fp)
   139c4:	00bfff84 	movi	r2,-2
   139c8:	1884703a 	and	r2,r3,r2
   139cc:	1001703a 	wrctl	status,r2
  
  return context;
   139d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   139d4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   139d8:	e0bffe17 	ldw	r2,-8(fp)
   139dc:	10c00283 	ldbu	r3,10(r2)
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   139e8:	e0bffe17 	ldw	r2,-8(fp)
   139ec:	108002c4 	addi	r2,r2,11
   139f0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   139f4:	e0bfff17 	ldw	r2,-4(fp)
   139f8:	10800084 	addi	r2,r2,2
   139fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13a00:	e03ffa05 	stb	zero,-24(fp)
   13a04:	00000b06 	br	13a34 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13a08:	e0bff917 	ldw	r2,-28(fp)
   13a0c:	10c00044 	addi	r3,r2,1
   13a10:	e0fff915 	stw	r3,-28(fp)
   13a14:	e0fff817 	ldw	r3,-32(fp)
   13a18:	19000044 	addi	r4,r3,1
   13a1c:	e13ff815 	stw	r4,-32(fp)
   13a20:	18c00003 	ldbu	r3,0(r3)
   13a24:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13a28:	e0bffa03 	ldbu	r2,-24(fp)
   13a2c:	10800044 	addi	r2,r2,1
   13a30:	e0bffa05 	stb	r2,-24(fp)
   13a34:	e0bffa03 	ldbu	r2,-24(fp)
   13a38:	108000f0 	cmpltui	r2,r2,3
   13a3c:	103ff21e 	bne	r2,zero,13a08 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13a40:	e0bffe17 	ldw	r2,-8(fp)
   13a44:	10c0020b 	ldhu	r3,8(r2)
   13a48:	e0bfff17 	ldw	r2,-4(fp)
   13a4c:	10c0000d 	sth	r3,0(r2)
   13a50:	e0bffb17 	ldw	r2,-20(fp)
   13a54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a58:	e0bffc17 	ldw	r2,-16(fp)
   13a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13a60:	0005883a 	mov	r2,zero
}
   13a64:	e037883a 	mov	sp,fp
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00104 	addi	sp,sp,4
   13a70:	f800283a 	ret

00013a74 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13a74:	defff904 	addi	sp,sp,-28
   13a78:	df000615 	stw	fp,24(sp)
   13a7c:	df000604 	addi	fp,sp,24
   13a80:	e13ffd15 	stw	r4,-12(fp)
   13a84:	2805883a 	mov	r2,r5
   13a88:	e1bfff15 	stw	r6,-4(fp)
   13a8c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13a90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	10003126 	beq	r2,zero,13b60 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
   13aa0:	1000041e 	bne	r2,zero,13ab4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13aa4:	e0bfff17 	ldw	r2,-4(fp)
   13aa8:	00c00104 	movi	r3,4
   13aac:	10c00005 	stb	r3,0(r2)
        return;
   13ab0:	00002c06 	br	13b64 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13ab4:	e0bffd17 	ldw	r2,-12(fp)
   13ab8:	10800003 	ldbu	r2,0(r2)
   13abc:	10803fcc 	andi	r2,r2,255
   13ac0:	108000e0 	cmpeqi	r2,r2,3
   13ac4:	1000041e 	bne	r2,zero,13ad8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13ac8:	e0bfff17 	ldw	r2,-4(fp)
   13acc:	00c00044 	movi	r3,1
   13ad0:	10c00005 	stb	r3,0(r2)
        return;
   13ad4:	00002306 	br	13b64 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ad8:	0005303a 	rdctl	r2,status
   13adc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ae0:	e0fffc17 	ldw	r3,-16(fp)
   13ae4:	00bfff84 	movi	r2,-2
   13ae8:	1884703a 	and	r2,r3,r2
   13aec:	1001703a 	wrctl	status,r2
  
  return context;
   13af0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13af4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13af8:	e0bfff17 	ldw	r2,-4(fp)
   13afc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13b00:	e0bffd17 	ldw	r2,-12(fp)
   13b04:	1080020b 	ldhu	r2,8(r2)
   13b08:	10bfffcc 	andi	r2,r2,65535
   13b0c:	10000426 	beq	r2,zero,13b20 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13b10:	e0bffd17 	ldw	r2,-12(fp)
   13b14:	e0fffe0b 	ldhu	r3,-8(fp)
   13b18:	10c0020d 	sth	r3,8(r2)
   13b1c:	00000b06 	br	13b4c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13b20:	e0bffd17 	ldw	r2,-12(fp)
   13b24:	10800283 	ldbu	r2,10(r2)
   13b28:	10803fcc 	andi	r2,r2,255
   13b2c:	1000041e 	bne	r2,zero,13b40 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13b30:	e0bffd17 	ldw	r2,-12(fp)
   13b34:	e0fffe0b 	ldhu	r3,-8(fp)
   13b38:	10c0020d 	sth	r3,8(r2)
   13b3c:	00000306 	br	13b4c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13b40:	e0bfff17 	ldw	r2,-4(fp)
   13b44:	00c01244 	movi	r3,73
   13b48:	10c00005 	stb	r3,0(r2)
   13b4c:	e0bffa17 	ldw	r2,-24(fp)
   13b50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b54:	e0bffb17 	ldw	r2,-20(fp)
   13b58:	1001703a 	wrctl	status,r2
   13b5c:	00000106 	br	13b64 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13b60:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13b64:	e037883a 	mov	sp,fp
   13b68:	df000017 	ldw	fp,0(sp)
   13b6c:	dec00104 	addi	sp,sp,4
   13b70:	f800283a 	ret

00013b74 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13b74:	defff104 	addi	sp,sp,-60
   13b78:	dfc00e15 	stw	ra,56(sp)
   13b7c:	df000d15 	stw	fp,52(sp)
   13b80:	df000d04 	addi	fp,sp,52
   13b84:	2007883a 	mov	r3,r4
   13b88:	2805883a 	mov	r2,r5
   13b8c:	e0fffe05 	stb	r3,-8(fp)
   13b90:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13b94:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13b98:	e0bffe03 	ldbu	r2,-8(fp)
   13b9c:	10800530 	cmpltui	r2,r2,20
   13ba0:	1000051e 	bne	r2,zero,13bb8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13ba4:	e0bffe03 	ldbu	r2,-8(fp)
   13ba8:	10803fe0 	cmpeqi	r2,r2,255
   13bac:	1000021e 	bne	r2,zero,13bb8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13bb0:	00800a84 	movi	r2,42
   13bb4:	00012606 	br	14050 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13bb8:	e0bfff03 	ldbu	r2,-4(fp)
   13bbc:	10800530 	cmpltui	r2,r2,20
   13bc0:	1000021e 	bne	r2,zero,13bcc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13bc4:	00800a84 	movi	r2,42
   13bc8:	00012106 	br	14050 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bcc:	0005303a 	rdctl	r2,status
   13bd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bd4:	e0fffd17 	ldw	r3,-12(fp)
   13bd8:	00bfff84 	movi	r2,-2
   13bdc:	1884703a 	and	r2,r3,r2
   13be0:	1001703a 	wrctl	status,r2
  
  return context;
   13be4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13be8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13bec:	e0ffff03 	ldbu	r3,-4(fp)
   13bf0:	008000b4 	movhi	r2,2
   13bf4:	1086a404 	addi	r2,r2,6800
   13bf8:	18c7883a 	add	r3,r3,r3
   13bfc:	18c7883a 	add	r3,r3,r3
   13c00:	10c5883a 	add	r2,r2,r3
   13c04:	10800017 	ldw	r2,0(r2)
   13c08:	10000626 	beq	r2,zero,13c24 <OSTaskChangePrio+0xb0>
   13c0c:	e0bff517 	ldw	r2,-44(fp)
   13c10:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c14:	e0bff617 	ldw	r2,-40(fp)
   13c18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13c1c:	00800a04 	movi	r2,40
   13c20:	00010b06 	br	14050 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13c24:	e0bffe03 	ldbu	r2,-8(fp)
   13c28:	10803fd8 	cmpnei	r2,r2,255
   13c2c:	1000031e 	bne	r2,zero,13c3c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13c30:	d0a72b17 	ldw	r2,-25428(gp)
   13c34:	10800c83 	ldbu	r2,50(r2)
   13c38:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13c3c:	e0fffe03 	ldbu	r3,-8(fp)
   13c40:	008000b4 	movhi	r2,2
   13c44:	1086a404 	addi	r2,r2,6800
   13c48:	18c7883a 	add	r3,r3,r3
   13c4c:	18c7883a 	add	r3,r3,r3
   13c50:	10c5883a 	add	r2,r2,r3
   13c54:	10800017 	ldw	r2,0(r2)
   13c58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13c5c:	e0bff817 	ldw	r2,-32(fp)
   13c60:	1000061e 	bne	r2,zero,13c7c <OSTaskChangePrio+0x108>
   13c64:	e0bff517 	ldw	r2,-44(fp)
   13c68:	e0bff715 	stw	r2,-36(fp)
   13c6c:	e0bff717 	ldw	r2,-36(fp)
   13c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13c74:	00800a44 	movi	r2,41
   13c78:	0000f506 	br	14050 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13c7c:	e0bff817 	ldw	r2,-32(fp)
   13c80:	10800058 	cmpnei	r2,r2,1
   13c84:	1000061e 	bne	r2,zero,13ca0 <OSTaskChangePrio+0x12c>
   13c88:	e0bff517 	ldw	r2,-44(fp)
   13c8c:	e0bff915 	stw	r2,-28(fp)
   13c90:	e0bff917 	ldw	r2,-28(fp)
   13c94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13c98:	008010c4 	movi	r2,67
   13c9c:	0000ec06 	br	14050 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13ca0:	e0bfff03 	ldbu	r2,-4(fp)
   13ca4:	1004d0fa 	srli	r2,r2,3
   13ca8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13cac:	e0bfff03 	ldbu	r2,-4(fp)
   13cb0:	108001cc 	andi	r2,r2,7
   13cb4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13cb8:	e0bffb03 	ldbu	r2,-20(fp)
   13cbc:	00c00044 	movi	r3,1
   13cc0:	1884983a 	sll	r2,r3,r2
   13cc4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13cc8:	e0bffb43 	ldbu	r2,-19(fp)
   13ccc:	00c00044 	movi	r3,1
   13cd0:	1884983a 	sll	r2,r3,r2
   13cd4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13cd8:	e0fffe03 	ldbu	r3,-8(fp)
   13cdc:	008000b4 	movhi	r2,2
   13ce0:	1086a404 	addi	r2,r2,6800
   13ce4:	18c7883a 	add	r3,r3,r3
   13ce8:	18c7883a 	add	r3,r3,r3
   13cec:	10c5883a 	add	r2,r2,r3
   13cf0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13cf4:	e0ffff03 	ldbu	r3,-4(fp)
   13cf8:	008000b4 	movhi	r2,2
   13cfc:	1086a404 	addi	r2,r2,6800
   13d00:	18c7883a 	add	r3,r3,r3
   13d04:	18c7883a 	add	r3,r3,r3
   13d08:	10c5883a 	add	r2,r2,r3
   13d0c:	e0fff817 	ldw	r3,-32(fp)
   13d10:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13d14:	e0bff817 	ldw	r2,-32(fp)
   13d18:	10800d03 	ldbu	r2,52(r2)
   13d1c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13d20:	e0bff817 	ldw	r2,-32(fp)
   13d24:	10800d83 	ldbu	r2,54(r2)
   13d28:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13d2c:	e0bff817 	ldw	r2,-32(fp)
   13d30:	10800d43 	ldbu	r2,53(r2)
   13d34:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13d38:	e0fffc03 	ldbu	r3,-16(fp)
   13d3c:	d0a72844 	addi	r2,gp,-25439
   13d40:	1885883a 	add	r2,r3,r2
   13d44:	10c00003 	ldbu	r3,0(r2)
   13d48:	e0bffc83 	ldbu	r2,-14(fp)
   13d4c:	1884703a 	and	r2,r3,r2
   13d50:	10803fcc 	andi	r2,r2,255
   13d54:	10002826 	beq	r2,zero,13df8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   13d58:	e0fffc03 	ldbu	r3,-16(fp)
   13d5c:	e13ffc03 	ldbu	r4,-16(fp)
   13d60:	d0a72844 	addi	r2,gp,-25439
   13d64:	2085883a 	add	r2,r4,r2
   13d68:	10800003 	ldbu	r2,0(r2)
   13d6c:	1009883a 	mov	r4,r2
   13d70:	e0bffc83 	ldbu	r2,-14(fp)
   13d74:	0084303a 	nor	r2,zero,r2
   13d78:	2084703a 	and	r2,r4,r2
   13d7c:	1009883a 	mov	r4,r2
   13d80:	d0a72844 	addi	r2,gp,-25439
   13d84:	1885883a 	add	r2,r3,r2
   13d88:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13d8c:	e0fffc03 	ldbu	r3,-16(fp)
   13d90:	d0a72844 	addi	r2,gp,-25439
   13d94:	1885883a 	add	r2,r3,r2
   13d98:	10800003 	ldbu	r2,0(r2)
   13d9c:	10803fcc 	andi	r2,r2,255
   13da0:	1000061e 	bne	r2,zero,13dbc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13da4:	e0bffc43 	ldbu	r2,-15(fp)
   13da8:	0084303a 	nor	r2,zero,r2
   13dac:	1007883a 	mov	r3,r2
   13db0:	d0a72803 	ldbu	r2,-25440(gp)
   13db4:	1884703a 	and	r2,r3,r2
   13db8:	d0a72805 	stb	r2,-25440(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13dbc:	d0e72803 	ldbu	r3,-25440(gp)
   13dc0:	e0bffb83 	ldbu	r2,-18(fp)
   13dc4:	1884b03a 	or	r2,r3,r2
   13dc8:	d0a72805 	stb	r2,-25440(gp)
         OSRdyTbl[y_new] |= bitx_new;
   13dcc:	e0fffb03 	ldbu	r3,-20(fp)
   13dd0:	e13ffb03 	ldbu	r4,-20(fp)
   13dd4:	d0a72844 	addi	r2,gp,-25439
   13dd8:	2085883a 	add	r2,r4,r2
   13ddc:	11000003 	ldbu	r4,0(r2)
   13de0:	e0bffbc3 	ldbu	r2,-17(fp)
   13de4:	2084b03a 	or	r2,r4,r2
   13de8:	1009883a 	mov	r4,r2
   13dec:	d0a72844 	addi	r2,gp,-25439
   13df0:	1885883a 	add	r2,r3,r2
   13df4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13df8:	e0bff817 	ldw	r2,-32(fp)
   13dfc:	10800717 	ldw	r2,28(r2)
   13e00:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13e04:	e0bff317 	ldw	r2,-52(fp)
   13e08:	10003326 	beq	r2,zero,13ed8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13e0c:	e0bffc03 	ldbu	r2,-16(fp)
   13e10:	e0fffc03 	ldbu	r3,-16(fp)
   13e14:	e13ff317 	ldw	r4,-52(fp)
   13e18:	20c7883a 	add	r3,r4,r3
   13e1c:	18c002c4 	addi	r3,r3,11
   13e20:	18c00003 	ldbu	r3,0(r3)
   13e24:	1809883a 	mov	r4,r3
   13e28:	e0fffc83 	ldbu	r3,-14(fp)
   13e2c:	00c6303a 	nor	r3,zero,r3
   13e30:	20c6703a 	and	r3,r4,r3
   13e34:	1809883a 	mov	r4,r3
   13e38:	e0fff317 	ldw	r3,-52(fp)
   13e3c:	1885883a 	add	r2,r3,r2
   13e40:	108002c4 	addi	r2,r2,11
   13e44:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13e48:	e0bffc03 	ldbu	r2,-16(fp)
   13e4c:	e0fff317 	ldw	r3,-52(fp)
   13e50:	1885883a 	add	r2,r3,r2
   13e54:	108002c4 	addi	r2,r2,11
   13e58:	10800003 	ldbu	r2,0(r2)
   13e5c:	10803fcc 	andi	r2,r2,255
   13e60:	1000091e 	bne	r2,zero,13e88 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13e64:	e0bff317 	ldw	r2,-52(fp)
   13e68:	10800283 	ldbu	r2,10(r2)
   13e6c:	1007883a 	mov	r3,r2
   13e70:	e0bffc43 	ldbu	r2,-15(fp)
   13e74:	0084303a 	nor	r2,zero,r2
   13e78:	1884703a 	and	r2,r3,r2
   13e7c:	1007883a 	mov	r3,r2
   13e80:	e0bff317 	ldw	r2,-52(fp)
   13e84:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13e88:	e0bff317 	ldw	r2,-52(fp)
   13e8c:	10c00283 	ldbu	r3,10(r2)
   13e90:	e0bffb83 	ldbu	r2,-18(fp)
   13e94:	1884b03a 	or	r2,r3,r2
   13e98:	1007883a 	mov	r3,r2
   13e9c:	e0bff317 	ldw	r2,-52(fp)
   13ea0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13ea4:	e0bffb03 	ldbu	r2,-20(fp)
   13ea8:	e0fffb03 	ldbu	r3,-20(fp)
   13eac:	e13ff317 	ldw	r4,-52(fp)
   13eb0:	20c7883a 	add	r3,r4,r3
   13eb4:	18c002c4 	addi	r3,r3,11
   13eb8:	19000003 	ldbu	r4,0(r3)
   13ebc:	e0fffbc3 	ldbu	r3,-17(fp)
   13ec0:	20c6b03a 	or	r3,r4,r3
   13ec4:	1809883a 	mov	r4,r3
   13ec8:	e0fff317 	ldw	r3,-52(fp)
   13ecc:	1885883a 	add	r2,r3,r2
   13ed0:	108002c4 	addi	r2,r2,11
   13ed4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13ed8:	e0bff817 	ldw	r2,-32(fp)
   13edc:	10800817 	ldw	r2,32(r2)
   13ee0:	10004226 	beq	r2,zero,13fec <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13ee4:	e0bff817 	ldw	r2,-32(fp)
   13ee8:	10800817 	ldw	r2,32(r2)
   13eec:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13ef0:	e0bff417 	ldw	r2,-48(fp)
   13ef4:	10800017 	ldw	r2,0(r2)
   13ef8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13efc:	00003906 	br	13fe4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13f00:	e0bffc03 	ldbu	r2,-16(fp)
   13f04:	e0fffc03 	ldbu	r3,-16(fp)
   13f08:	e13ff317 	ldw	r4,-52(fp)
   13f0c:	20c7883a 	add	r3,r4,r3
   13f10:	18c002c4 	addi	r3,r3,11
   13f14:	18c00003 	ldbu	r3,0(r3)
   13f18:	1809883a 	mov	r4,r3
   13f1c:	e0fffc83 	ldbu	r3,-14(fp)
   13f20:	00c6303a 	nor	r3,zero,r3
   13f24:	20c6703a 	and	r3,r4,r3
   13f28:	1809883a 	mov	r4,r3
   13f2c:	e0fff317 	ldw	r3,-52(fp)
   13f30:	1885883a 	add	r2,r3,r2
   13f34:	108002c4 	addi	r2,r2,11
   13f38:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13f3c:	e0bffc03 	ldbu	r2,-16(fp)
   13f40:	e0fff317 	ldw	r3,-52(fp)
   13f44:	1885883a 	add	r2,r3,r2
   13f48:	108002c4 	addi	r2,r2,11
   13f4c:	10800003 	ldbu	r2,0(r2)
   13f50:	10803fcc 	andi	r2,r2,255
   13f54:	1000091e 	bne	r2,zero,13f7c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   13f58:	e0bff317 	ldw	r2,-52(fp)
   13f5c:	10800283 	ldbu	r2,10(r2)
   13f60:	1007883a 	mov	r3,r2
   13f64:	e0bffc43 	ldbu	r2,-15(fp)
   13f68:	0084303a 	nor	r2,zero,r2
   13f6c:	1884703a 	and	r2,r3,r2
   13f70:	1007883a 	mov	r3,r2
   13f74:	e0bff317 	ldw	r2,-52(fp)
   13f78:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13f7c:	e0bff317 	ldw	r2,-52(fp)
   13f80:	10c00283 	ldbu	r3,10(r2)
   13f84:	e0bffb83 	ldbu	r2,-18(fp)
   13f88:	1884b03a 	or	r2,r3,r2
   13f8c:	1007883a 	mov	r3,r2
   13f90:	e0bff317 	ldw	r2,-52(fp)
   13f94:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13f98:	e0bffb03 	ldbu	r2,-20(fp)
   13f9c:	e0fffb03 	ldbu	r3,-20(fp)
   13fa0:	e13ff317 	ldw	r4,-52(fp)
   13fa4:	20c7883a 	add	r3,r4,r3
   13fa8:	18c002c4 	addi	r3,r3,11
   13fac:	19000003 	ldbu	r4,0(r3)
   13fb0:	e0fffbc3 	ldbu	r3,-17(fp)
   13fb4:	20c6b03a 	or	r3,r4,r3
   13fb8:	1809883a 	mov	r4,r3
   13fbc:	e0fff317 	ldw	r3,-52(fp)
   13fc0:	1885883a 	add	r2,r3,r2
   13fc4:	108002c4 	addi	r2,r2,11
   13fc8:	11000005 	stb	r4,0(r2)
            pevents++;
   13fcc:	e0bff417 	ldw	r2,-48(fp)
   13fd0:	10800104 	addi	r2,r2,4
   13fd4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13fd8:	e0bff417 	ldw	r2,-48(fp)
   13fdc:	10800017 	ldw	r2,0(r2)
   13fe0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13fe4:	e0bff317 	ldw	r2,-52(fp)
   13fe8:	103fc51e 	bne	r2,zero,13f00 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13fec:	e0bff817 	ldw	r2,-32(fp)
   13ff0:	e0ffff03 	ldbu	r3,-4(fp)
   13ff4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13ff8:	e0bff817 	ldw	r2,-32(fp)
   13ffc:	e0fffb03 	ldbu	r3,-20(fp)
   14000:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14004:	e0bff817 	ldw	r2,-32(fp)
   14008:	e0fffb43 	ldbu	r3,-19(fp)
   1400c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14010:	e0bff817 	ldw	r2,-32(fp)
   14014:	e0fffb83 	ldbu	r3,-18(fp)
   14018:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1401c:	e0bff817 	ldw	r2,-32(fp)
   14020:	e0fffbc3 	ldbu	r3,-17(fp)
   14024:	10c00d45 	stb	r3,53(r2)
   14028:	e0bff517 	ldw	r2,-44(fp)
   1402c:	e0bffa15 	stw	r2,-24(fp)
   14030:	e0bffa17 	ldw	r2,-24(fp)
   14034:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14038:	d0a71c43 	ldbu	r2,-25487(gp)
   1403c:	10803fcc 	andi	r2,r2,255
   14040:	10800058 	cmpnei	r2,r2,1
   14044:	1000011e 	bne	r2,zero,1404c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   14048:	000f9440 	call	f944 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1404c:	0005883a 	mov	r2,zero
}
   14050:	e037883a 	mov	sp,fp
   14054:	dfc00117 	ldw	ra,4(sp)
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00204 	addi	sp,sp,8
   14060:	f800283a 	ret

00014064 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   14064:	deffee04 	addi	sp,sp,-72
   14068:	dfc01115 	stw	ra,68(sp)
   1406c:	df001015 	stw	fp,64(sp)
   14070:	df001004 	addi	fp,sp,64
   14074:	e13ffc15 	stw	r4,-16(fp)
   14078:	e17ffd15 	stw	r5,-12(fp)
   1407c:	e1bffe15 	stw	r6,-8(fp)
   14080:	3805883a 	mov	r2,r7
   14084:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14088:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1408c:	e0bfff03 	ldbu	r2,-4(fp)
   14090:	10800570 	cmpltui	r2,r2,21
   14094:	1000021e 	bne	r2,zero,140a0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14098:	00800a84 	movi	r2,42
   1409c:	00005706 	br	141fc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140a0:	0005303a 	rdctl	r2,status
   140a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140a8:	e0fffb17 	ldw	r3,-20(fp)
   140ac:	00bfff84 	movi	r2,-2
   140b0:	1884703a 	and	r2,r3,r2
   140b4:	1001703a 	wrctl	status,r2
  
  return context;
   140b8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   140bc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   140c0:	d0a72a03 	ldbu	r2,-25432(gp)
   140c4:	10803fcc 	andi	r2,r2,255
   140c8:	10000626 	beq	r2,zero,140e4 <OSTaskCreate+0x80>
   140cc:	e0bff317 	ldw	r2,-52(fp)
   140d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140d4:	e0bff417 	ldw	r2,-48(fp)
   140d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   140dc:	00800f04 	movi	r2,60
   140e0:	00004606 	br	141fc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   140e4:	e0ffff03 	ldbu	r3,-4(fp)
   140e8:	008000b4 	movhi	r2,2
   140ec:	1086a404 	addi	r2,r2,6800
   140f0:	18c7883a 	add	r3,r3,r3
   140f4:	18c7883a 	add	r3,r3,r3
   140f8:	10c5883a 	add	r2,r2,r3
   140fc:	10800017 	ldw	r2,0(r2)
   14100:	1000391e 	bne	r2,zero,141e8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14104:	e0ffff03 	ldbu	r3,-4(fp)
   14108:	008000b4 	movhi	r2,2
   1410c:	1086a404 	addi	r2,r2,6800
   14110:	18c7883a 	add	r3,r3,r3
   14114:	18c7883a 	add	r3,r3,r3
   14118:	10c5883a 	add	r2,r2,r3
   1411c:	00c00044 	movi	r3,1
   14120:	10c00015 	stw	r3,0(r2)
   14124:	e0bff317 	ldw	r2,-52(fp)
   14128:	e0bff515 	stw	r2,-44(fp)
   1412c:	e0bff517 	ldw	r2,-44(fp)
   14130:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   14134:	000f883a 	mov	r7,zero
   14138:	e1bffe17 	ldw	r6,-8(fp)
   1413c:	e17ffd17 	ldw	r5,-12(fp)
   14140:	e13ffc17 	ldw	r4,-16(fp)
   14144:	00172a00 	call	172a0 <OSTaskStkInit>
   14148:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1414c:	e0bfff03 	ldbu	r2,-4(fp)
   14150:	d8000215 	stw	zero,8(sp)
   14154:	d8000115 	stw	zero,4(sp)
   14158:	d8000015 	stw	zero,0(sp)
   1415c:	000f883a 	mov	r7,zero
   14160:	000d883a 	mov	r6,zero
   14164:	e17ff717 	ldw	r5,-36(fp)
   14168:	1009883a 	mov	r4,r2
   1416c:	000fd440 	call	fd44 <OS_TCBInit>
   14170:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   14174:	e0bff803 	ldbu	r2,-32(fp)
   14178:	1000061e 	bne	r2,zero,14194 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1417c:	d0a71c43 	ldbu	r2,-25487(gp)
   14180:	10803fcc 	andi	r2,r2,255
   14184:	10800058 	cmpnei	r2,r2,1
   14188:	1000151e 	bne	r2,zero,141e0 <OSTaskCreate+0x17c>
                OS_Sched();
   1418c:	000f9440 	call	f944 <OS_Sched>
   14190:	00001306 	br	141e0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14194:	0005303a 	rdctl	r2,status
   14198:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1419c:	e0fffa17 	ldw	r3,-24(fp)
   141a0:	00bfff84 	movi	r2,-2
   141a4:	1884703a 	and	r2,r3,r2
   141a8:	1001703a 	wrctl	status,r2
  
  return context;
   141ac:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   141b0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   141b4:	e0ffff03 	ldbu	r3,-4(fp)
   141b8:	008000b4 	movhi	r2,2
   141bc:	1086a404 	addi	r2,r2,6800
   141c0:	18c7883a 	add	r3,r3,r3
   141c4:	18c7883a 	add	r3,r3,r3
   141c8:	10c5883a 	add	r2,r2,r3
   141cc:	10000015 	stw	zero,0(r2)
   141d0:	e0bff317 	ldw	r2,-52(fp)
   141d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141d8:	e0bff617 	ldw	r2,-40(fp)
   141dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   141e0:	e0bff803 	ldbu	r2,-32(fp)
   141e4:	00000506 	br	141fc <OSTaskCreate+0x198>
   141e8:	e0bff317 	ldw	r2,-52(fp)
   141ec:	e0bff915 	stw	r2,-28(fp)
   141f0:	e0bff917 	ldw	r2,-28(fp)
   141f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   141f8:	00800a04 	movi	r2,40
}
   141fc:	e037883a 	mov	sp,fp
   14200:	dfc00117 	ldw	ra,4(sp)
   14204:	df000017 	ldw	fp,0(sp)
   14208:	dec00204 	addi	sp,sp,8
   1420c:	f800283a 	ret

00014210 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14210:	deffec04 	addi	sp,sp,-80
   14214:	dfc01315 	stw	ra,76(sp)
   14218:	df001215 	stw	fp,72(sp)
   1421c:	df001204 	addi	fp,sp,72
   14220:	e13ffa15 	stw	r4,-24(fp)
   14224:	e17ffb15 	stw	r5,-20(fp)
   14228:	e1bffc15 	stw	r6,-16(fp)
   1422c:	3809883a 	mov	r4,r7
   14230:	e0c00217 	ldw	r3,8(fp)
   14234:	e0800617 	ldw	r2,24(fp)
   14238:	e13ffd05 	stb	r4,-12(fp)
   1423c:	e0fffe0d 	sth	r3,-8(fp)
   14240:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14244:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14248:	e0bffd03 	ldbu	r2,-12(fp)
   1424c:	10800570 	cmpltui	r2,r2,21
   14250:	1000021e 	bne	r2,zero,1425c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   14254:	00800a84 	movi	r2,42
   14258:	00006106 	br	143e0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1425c:	0005303a 	rdctl	r2,status
   14260:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14264:	e0fff917 	ldw	r3,-28(fp)
   14268:	00bfff84 	movi	r2,-2
   1426c:	1884703a 	and	r2,r3,r2
   14270:	1001703a 	wrctl	status,r2
  
  return context;
   14274:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14278:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1427c:	d0a72a03 	ldbu	r2,-25432(gp)
   14280:	10803fcc 	andi	r2,r2,255
   14284:	10000626 	beq	r2,zero,142a0 <OSTaskCreateExt+0x90>
   14288:	e0bff117 	ldw	r2,-60(fp)
   1428c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14290:	e0bff217 	ldw	r2,-56(fp)
   14294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14298:	00800f04 	movi	r2,60
   1429c:	00005006 	br	143e0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   142a0:	e0fffd03 	ldbu	r3,-12(fp)
   142a4:	008000b4 	movhi	r2,2
   142a8:	1086a404 	addi	r2,r2,6800
   142ac:	18c7883a 	add	r3,r3,r3
   142b0:	18c7883a 	add	r3,r3,r3
   142b4:	10c5883a 	add	r2,r2,r3
   142b8:	10800017 	ldw	r2,0(r2)
   142bc:	1000431e 	bne	r2,zero,143cc <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   142c0:	e0fffd03 	ldbu	r3,-12(fp)
   142c4:	008000b4 	movhi	r2,2
   142c8:	1086a404 	addi	r2,r2,6800
   142cc:	18c7883a 	add	r3,r3,r3
   142d0:	18c7883a 	add	r3,r3,r3
   142d4:	10c5883a 	add	r2,r2,r3
   142d8:	00c00044 	movi	r3,1
   142dc:	10c00015 	stw	r3,0(r2)
   142e0:	e0bff117 	ldw	r2,-60(fp)
   142e4:	e0bff315 	stw	r2,-52(fp)
   142e8:	e0bff317 	ldw	r2,-52(fp)
   142ec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   142f0:	e0bfff0b 	ldhu	r2,-4(fp)
   142f4:	100d883a 	mov	r6,r2
   142f8:	e1400417 	ldw	r5,16(fp)
   142fc:	e1000317 	ldw	r4,12(fp)
   14300:	00152700 	call	15270 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14304:	e0bfff0b 	ldhu	r2,-4(fp)
   14308:	100f883a 	mov	r7,r2
   1430c:	e1bffc17 	ldw	r6,-16(fp)
   14310:	e17ffb17 	ldw	r5,-20(fp)
   14314:	e13ffa17 	ldw	r4,-24(fp)
   14318:	00172a00 	call	172a0 <OSTaskStkInit>
   1431c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   14320:	e0fffd03 	ldbu	r3,-12(fp)
   14324:	e13ffe0b 	ldhu	r4,-8(fp)
   14328:	e0bfff0b 	ldhu	r2,-4(fp)
   1432c:	d8800215 	stw	r2,8(sp)
   14330:	e0800517 	ldw	r2,20(fp)
   14334:	d8800115 	stw	r2,4(sp)
   14338:	e0800417 	ldw	r2,16(fp)
   1433c:	d8800015 	stw	r2,0(sp)
   14340:	200f883a 	mov	r7,r4
   14344:	e1800317 	ldw	r6,12(fp)
   14348:	e17ff517 	ldw	r5,-44(fp)
   1434c:	1809883a 	mov	r4,r3
   14350:	000fd440 	call	fd44 <OS_TCBInit>
   14354:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   14358:	e0bff603 	ldbu	r2,-40(fp)
   1435c:	1000061e 	bne	r2,zero,14378 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   14360:	d0a71c43 	ldbu	r2,-25487(gp)
   14364:	10803fcc 	andi	r2,r2,255
   14368:	10800058 	cmpnei	r2,r2,1
   1436c:	1000151e 	bne	r2,zero,143c4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   14370:	000f9440 	call	f944 <OS_Sched>
   14374:	00001306 	br	143c4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14378:	0005303a 	rdctl	r2,status
   1437c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14380:	e0fff817 	ldw	r3,-32(fp)
   14384:	00bfff84 	movi	r2,-2
   14388:	1884703a 	and	r2,r3,r2
   1438c:	1001703a 	wrctl	status,r2
  
  return context;
   14390:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14394:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14398:	e0fffd03 	ldbu	r3,-12(fp)
   1439c:	008000b4 	movhi	r2,2
   143a0:	1086a404 	addi	r2,r2,6800
   143a4:	18c7883a 	add	r3,r3,r3
   143a8:	18c7883a 	add	r3,r3,r3
   143ac:	10c5883a 	add	r2,r2,r3
   143b0:	10000015 	stw	zero,0(r2)
   143b4:	e0bff117 	ldw	r2,-60(fp)
   143b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143bc:	e0bff417 	ldw	r2,-48(fp)
   143c0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   143c4:	e0bff603 	ldbu	r2,-40(fp)
   143c8:	00000506 	br	143e0 <OSTaskCreateExt+0x1d0>
   143cc:	e0bff117 	ldw	r2,-60(fp)
   143d0:	e0bff715 	stw	r2,-36(fp)
   143d4:	e0bff717 	ldw	r2,-36(fp)
   143d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   143dc:	00800a04 	movi	r2,40
}
   143e0:	e037883a 	mov	sp,fp
   143e4:	dfc00117 	ldw	ra,4(sp)
   143e8:	df000017 	ldw	fp,0(sp)
   143ec:	dec00204 	addi	sp,sp,8
   143f0:	f800283a 	ret

000143f4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   143f4:	defff404 	addi	sp,sp,-48
   143f8:	dfc00b15 	stw	ra,44(sp)
   143fc:	df000a15 	stw	fp,40(sp)
   14400:	df000a04 	addi	fp,sp,40
   14404:	2005883a 	mov	r2,r4
   14408:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1440c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14410:	d0a72a03 	ldbu	r2,-25432(gp)
   14414:	10803fcc 	andi	r2,r2,255
   14418:	10000226 	beq	r2,zero,14424 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   1441c:	00801004 	movi	r2,64
   14420:	0000c006 	br	14724 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   14424:	e0bfff03 	ldbu	r2,-4(fp)
   14428:	10800518 	cmpnei	r2,r2,20
   1442c:	1000021e 	bne	r2,zero,14438 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   14430:	00800f84 	movi	r2,62
   14434:	0000bb06 	br	14724 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   14438:	e0bfff03 	ldbu	r2,-4(fp)
   1443c:	10800530 	cmpltui	r2,r2,20
   14440:	1000051e 	bne	r2,zero,14458 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   14444:	e0bfff03 	ldbu	r2,-4(fp)
   14448:	10803fe0 	cmpeqi	r2,r2,255
   1444c:	1000021e 	bne	r2,zero,14458 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   14450:	00800a84 	movi	r2,42
   14454:	0000b306 	br	14724 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14458:	0005303a 	rdctl	r2,status
   1445c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14460:	e0fffe17 	ldw	r3,-8(fp)
   14464:	00bfff84 	movi	r2,-2
   14468:	1884703a 	and	r2,r3,r2
   1446c:	1001703a 	wrctl	status,r2
  
  return context;
   14470:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14474:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14478:	e0bfff03 	ldbu	r2,-4(fp)
   1447c:	10803fd8 	cmpnei	r2,r2,255
   14480:	1000031e 	bne	r2,zero,14490 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14484:	d0a72b17 	ldw	r2,-25428(gp)
   14488:	10800c83 	ldbu	r2,50(r2)
   1448c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14490:	e0ffff03 	ldbu	r3,-4(fp)
   14494:	008000b4 	movhi	r2,2
   14498:	1086a404 	addi	r2,r2,6800
   1449c:	18c7883a 	add	r3,r3,r3
   144a0:	18c7883a 	add	r3,r3,r3
   144a4:	10c5883a 	add	r2,r2,r3
   144a8:	10800017 	ldw	r2,0(r2)
   144ac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   144b0:	e0bff817 	ldw	r2,-32(fp)
   144b4:	1000061e 	bne	r2,zero,144d0 <OSTaskDel+0xdc>
   144b8:	e0bff617 	ldw	r2,-40(fp)
   144bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144c0:	e0bff717 	ldw	r2,-36(fp)
   144c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   144c8:	008010c4 	movi	r2,67
   144cc:	00009506 	br	14724 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   144d0:	e0bff817 	ldw	r2,-32(fp)
   144d4:	10800058 	cmpnei	r2,r2,1
   144d8:	1000061e 	bne	r2,zero,144f4 <OSTaskDel+0x100>
   144dc:	e0bff617 	ldw	r2,-40(fp)
   144e0:	e0bff915 	stw	r2,-28(fp)
   144e4:	e0bff917 	ldw	r2,-28(fp)
   144e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   144ec:	00800f44 	movi	r2,61
   144f0:	00008c06 	br	14724 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   144f4:	e0bff817 	ldw	r2,-32(fp)
   144f8:	10800d03 	ldbu	r2,52(r2)
   144fc:	10c03fcc 	andi	r3,r2,255
   14500:	e0bff817 	ldw	r2,-32(fp)
   14504:	10800d03 	ldbu	r2,52(r2)
   14508:	11003fcc 	andi	r4,r2,255
   1450c:	d0a72844 	addi	r2,gp,-25439
   14510:	2085883a 	add	r2,r4,r2
   14514:	10800003 	ldbu	r2,0(r2)
   14518:	1009883a 	mov	r4,r2
   1451c:	e0bff817 	ldw	r2,-32(fp)
   14520:	10800d43 	ldbu	r2,53(r2)
   14524:	0084303a 	nor	r2,zero,r2
   14528:	2084703a 	and	r2,r4,r2
   1452c:	1009883a 	mov	r4,r2
   14530:	d0a72844 	addi	r2,gp,-25439
   14534:	1885883a 	add	r2,r3,r2
   14538:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1453c:	e0bff817 	ldw	r2,-32(fp)
   14540:	10800d03 	ldbu	r2,52(r2)
   14544:	10c03fcc 	andi	r3,r2,255
   14548:	d0a72844 	addi	r2,gp,-25439
   1454c:	1885883a 	add	r2,r3,r2
   14550:	10800003 	ldbu	r2,0(r2)
   14554:	10803fcc 	andi	r2,r2,255
   14558:	1000071e 	bne	r2,zero,14578 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1455c:	e0bff817 	ldw	r2,-32(fp)
   14560:	10800d83 	ldbu	r2,54(r2)
   14564:	0084303a 	nor	r2,zero,r2
   14568:	1007883a 	mov	r3,r2
   1456c:	d0a72803 	ldbu	r2,-25440(gp)
   14570:	1884703a 	and	r2,r3,r2
   14574:	d0a72805 	stb	r2,-25440(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14578:	e0bff817 	ldw	r2,-32(fp)
   1457c:	10800717 	ldw	r2,28(r2)
   14580:	10000526 	beq	r2,zero,14598 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14584:	e0bff817 	ldw	r2,-32(fp)
   14588:	10800717 	ldw	r2,28(r2)
   1458c:	100b883a 	mov	r5,r2
   14590:	e13ff817 	ldw	r4,-32(fp)
   14594:	000f2f00 	call	f2f0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14598:	e0bff817 	ldw	r2,-32(fp)
   1459c:	10800817 	ldw	r2,32(r2)
   145a0:	10000526 	beq	r2,zero,145b8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   145a4:	e0bff817 	ldw	r2,-32(fp)
   145a8:	10800817 	ldw	r2,32(r2)
   145ac:	100b883a 	mov	r5,r2
   145b0:	e13ff817 	ldw	r4,-32(fp)
   145b4:	000f3a80 	call	f3a8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   145b8:	e0bff817 	ldw	r2,-32(fp)
   145bc:	10800a17 	ldw	r2,40(r2)
   145c0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   145c4:	e0bffb17 	ldw	r2,-20(fp)
   145c8:	10000226 	beq	r2,zero,145d4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   145cc:	e13ffb17 	ldw	r4,-20(fp)
   145d0:	00118180 	call	11818 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   145d4:	e0bff817 	ldw	r2,-32(fp)
   145d8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   145dc:	e0bff817 	ldw	r2,-32(fp)
   145e0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   145e4:	e0bff817 	ldw	r2,-32(fp)
   145e8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   145ec:	d0a71c03 	ldbu	r2,-25488(gp)
   145f0:	10803fcc 	andi	r2,r2,255
   145f4:	10803fe0 	cmpeqi	r2,r2,255
   145f8:	1000031e 	bne	r2,zero,14608 <OSTaskDel+0x214>
        OSLockNesting++;
   145fc:	d0a71c03 	ldbu	r2,-25488(gp)
   14600:	10800044 	addi	r2,r2,1
   14604:	d0a71c05 	stb	r2,-25488(gp)
   14608:	e0bff617 	ldw	r2,-40(fp)
   1460c:	e0bffd15 	stw	r2,-12(fp)
   14610:	e0bffd17 	ldw	r2,-12(fp)
   14614:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14618:	000eed80 	call	eed8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1461c:	0005303a 	rdctl	r2,status
   14620:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14624:	e0fffa17 	ldw	r3,-24(fp)
   14628:	00bfff84 	movi	r2,-2
   1462c:	1884703a 	and	r2,r3,r2
   14630:	1001703a 	wrctl	status,r2
  
  return context;
   14634:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   14638:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1463c:	d0a71c03 	ldbu	r2,-25488(gp)
   14640:	10803fcc 	andi	r2,r2,255
   14644:	10000326 	beq	r2,zero,14654 <OSTaskDel+0x260>
        OSLockNesting--;
   14648:	d0a71c03 	ldbu	r2,-25488(gp)
   1464c:	10bfffc4 	addi	r2,r2,-1
   14650:	d0a71c05 	stb	r2,-25488(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14654:	e13ff817 	ldw	r4,-32(fp)
   14658:	00174200 	call	17420 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1465c:	d0a72443 	ldbu	r2,-25455(gp)
   14660:	10bfffc4 	addi	r2,r2,-1
   14664:	d0a72445 	stb	r2,-25455(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14668:	e0ffff03 	ldbu	r3,-4(fp)
   1466c:	008000b4 	movhi	r2,2
   14670:	1086a404 	addi	r2,r2,6800
   14674:	18c7883a 	add	r3,r3,r3
   14678:	18c7883a 	add	r3,r3,r3
   1467c:	10c5883a 	add	r2,r2,r3
   14680:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14684:	e0bff817 	ldw	r2,-32(fp)
   14688:	10800617 	ldw	r2,24(r2)
   1468c:	1000071e 	bne	r2,zero,146ac <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14690:	e0bff817 	ldw	r2,-32(fp)
   14694:	10800517 	ldw	r2,20(r2)
   14698:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1469c:	e0bff817 	ldw	r2,-32(fp)
   146a0:	10800517 	ldw	r2,20(r2)
   146a4:	d0a71f15 	stw	r2,-25476(gp)
   146a8:	00000a06 	br	146d4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   146ac:	e0bff817 	ldw	r2,-32(fp)
   146b0:	10800617 	ldw	r2,24(r2)
   146b4:	e0fff817 	ldw	r3,-32(fp)
   146b8:	18c00517 	ldw	r3,20(r3)
   146bc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   146c0:	e0bff817 	ldw	r2,-32(fp)
   146c4:	10800517 	ldw	r2,20(r2)
   146c8:	e0fff817 	ldw	r3,-32(fp)
   146cc:	18c00617 	ldw	r3,24(r3)
   146d0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   146d4:	d0e72317 	ldw	r3,-25460(gp)
   146d8:	e0bff817 	ldw	r2,-32(fp)
   146dc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   146e0:	e0bff817 	ldw	r2,-32(fp)
   146e4:	d0a72315 	stw	r2,-25460(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   146e8:	e0bff817 	ldw	r2,-32(fp)
   146ec:	00c00fc4 	movi	r3,63
   146f0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   146f4:	e0bff817 	ldw	r2,-32(fp)
   146f8:	10001345 	stb	zero,77(r2)
   146fc:	e0bff617 	ldw	r2,-40(fp)
   14700:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14704:	e0bffc17 	ldw	r2,-16(fp)
   14708:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1470c:	d0a71c43 	ldbu	r2,-25487(gp)
   14710:	10803fcc 	andi	r2,r2,255
   14714:	10800058 	cmpnei	r2,r2,1
   14718:	1000011e 	bne	r2,zero,14720 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   1471c:	000f9440 	call	f944 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14720:	0005883a 	mov	r2,zero
}
   14724:	e037883a 	mov	sp,fp
   14728:	dfc00117 	ldw	ra,4(sp)
   1472c:	df000017 	ldw	fp,0(sp)
   14730:	dec00204 	addi	sp,sp,8
   14734:	f800283a 	ret

00014738 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14738:	defff504 	addi	sp,sp,-44
   1473c:	df000a15 	stw	fp,40(sp)
   14740:	df000a04 	addi	fp,sp,40
   14744:	2005883a 	mov	r2,r4
   14748:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1474c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14750:	e0bfff03 	ldbu	r2,-4(fp)
   14754:	10800518 	cmpnei	r2,r2,20
   14758:	1000021e 	bne	r2,zero,14764 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1475c:	00800f84 	movi	r2,62
   14760:	00004506 	br	14878 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14764:	e0bfff03 	ldbu	r2,-4(fp)
   14768:	10800530 	cmpltui	r2,r2,20
   1476c:	1000051e 	bne	r2,zero,14784 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14770:	e0bfff03 	ldbu	r2,-4(fp)
   14774:	10803fe0 	cmpeqi	r2,r2,255
   14778:	1000021e 	bne	r2,zero,14784 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1477c:	00800a84 	movi	r2,42
   14780:	00003d06 	br	14878 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14784:	e0bfff03 	ldbu	r2,-4(fp)
   14788:	10803fd8 	cmpnei	r2,r2,255
   1478c:	1000111e 	bne	r2,zero,147d4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14790:	0005303a 	rdctl	r2,status
   14794:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14798:	e0fff917 	ldw	r3,-28(fp)
   1479c:	00bfff84 	movi	r2,-2
   147a0:	1884703a 	and	r2,r3,r2
   147a4:	1001703a 	wrctl	status,r2
  
  return context;
   147a8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   147ac:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   147b0:	d0a72b17 	ldw	r2,-25428(gp)
   147b4:	10800dc3 	ldbu	r2,55(r2)
   147b8:	e0bff805 	stb	r2,-32(fp)
   147bc:	e0bff617 	ldw	r2,-40(fp)
   147c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147c4:	e0bffe17 	ldw	r2,-8(fp)
   147c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   147cc:	e0bff803 	ldbu	r2,-32(fp)
   147d0:	00002906 	br	14878 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147d4:	0005303a 	rdctl	r2,status
   147d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147dc:	e0fff717 	ldw	r3,-36(fp)
   147e0:	00bfff84 	movi	r2,-2
   147e4:	1884703a 	and	r2,r3,r2
   147e8:	1001703a 	wrctl	status,r2
  
  return context;
   147ec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   147f0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   147f4:	e0ffff03 	ldbu	r3,-4(fp)
   147f8:	008000b4 	movhi	r2,2
   147fc:	1086a404 	addi	r2,r2,6800
   14800:	18c7883a 	add	r3,r3,r3
   14804:	18c7883a 	add	r3,r3,r3
   14808:	10c5883a 	add	r2,r2,r3
   1480c:	10800017 	ldw	r2,0(r2)
   14810:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14814:	e0bffb17 	ldw	r2,-20(fp)
   14818:	1000061e 	bne	r2,zero,14834 <OSTaskDelReq+0xfc>
   1481c:	e0bff617 	ldw	r2,-40(fp)
   14820:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14824:	e0bffa17 	ldw	r2,-24(fp)
   14828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1482c:	008010c4 	movi	r2,67
   14830:	00001106 	br	14878 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14834:	e0bffb17 	ldw	r2,-20(fp)
   14838:	10800058 	cmpnei	r2,r2,1
   1483c:	1000061e 	bne	r2,zero,14858 <OSTaskDelReq+0x120>
   14840:	e0bff617 	ldw	r2,-40(fp)
   14844:	e0bffc15 	stw	r2,-16(fp)
   14848:	e0bffc17 	ldw	r2,-16(fp)
   1484c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14850:	00800f44 	movi	r2,61
   14854:	00000806 	br	14878 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14858:	e0bffb17 	ldw	r2,-20(fp)
   1485c:	00c00fc4 	movi	r3,63
   14860:	10c00dc5 	stb	r3,55(r2)
   14864:	e0bff617 	ldw	r2,-40(fp)
   14868:	e0bffd15 	stw	r2,-12(fp)
   1486c:	e0bffd17 	ldw	r2,-12(fp)
   14870:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14874:	0005883a 	mov	r2,zero
}
   14878:	e037883a 	mov	sp,fp
   1487c:	df000017 	ldw	fp,0(sp)
   14880:	dec00104 	addi	sp,sp,4
   14884:	f800283a 	ret

00014888 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14888:	defff404 	addi	sp,sp,-48
   1488c:	dfc00b15 	stw	ra,44(sp)
   14890:	df000a15 	stw	fp,40(sp)
   14894:	df000a04 	addi	fp,sp,40
   14898:	2005883a 	mov	r2,r4
   1489c:	e17ffe15 	stw	r5,-8(fp)
   148a0:	e1bfff15 	stw	r6,-4(fp)
   148a4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   148a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   148ac:	e0bfff17 	ldw	r2,-4(fp)
   148b0:	1000021e 	bne	r2,zero,148bc <OSTaskNameGet+0x34>
        return (0);
   148b4:	0005883a 	mov	r2,zero
   148b8:	00005406 	br	14a0c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   148bc:	e0bffd03 	ldbu	r2,-12(fp)
   148c0:	10800570 	cmpltui	r2,r2,21
   148c4:	1000081e 	bne	r2,zero,148e8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   148c8:	e0bffd03 	ldbu	r2,-12(fp)
   148cc:	10803fe0 	cmpeqi	r2,r2,255
   148d0:	1000051e 	bne	r2,zero,148e8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   148d4:	e0bfff17 	ldw	r2,-4(fp)
   148d8:	00c00a84 	movi	r3,42
   148dc:	10c00005 	stb	r3,0(r2)
            return (0);
   148e0:	0005883a 	mov	r2,zero
   148e4:	00004906 	br	14a0c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   148e8:	e0bffe17 	ldw	r2,-8(fp)
   148ec:	1000051e 	bne	r2,zero,14904 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   148f0:	e0bfff17 	ldw	r2,-4(fp)
   148f4:	00c00304 	movi	r3,12
   148f8:	10c00005 	stb	r3,0(r2)
        return (0);
   148fc:	0005883a 	mov	r2,zero
   14900:	00004206 	br	14a0c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14904:	d0a72a03 	ldbu	r2,-25432(gp)
   14908:	10803fcc 	andi	r2,r2,255
   1490c:	10000526 	beq	r2,zero,14924 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14910:	e0bfff17 	ldw	r2,-4(fp)
   14914:	00c00444 	movi	r3,17
   14918:	10c00005 	stb	r3,0(r2)
        return (0);
   1491c:	0005883a 	mov	r2,zero
   14920:	00003a06 	br	14a0c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14924:	0005303a 	rdctl	r2,status
   14928:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1492c:	e0fffc17 	ldw	r3,-16(fp)
   14930:	00bfff84 	movi	r2,-2
   14934:	1884703a 	and	r2,r3,r2
   14938:	1001703a 	wrctl	status,r2
  
  return context;
   1493c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14940:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14944:	e0bffd03 	ldbu	r2,-12(fp)
   14948:	10803fd8 	cmpnei	r2,r2,255
   1494c:	1000031e 	bne	r2,zero,1495c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14950:	d0a72b17 	ldw	r2,-25428(gp)
   14954:	10800c83 	ldbu	r2,50(r2)
   14958:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1495c:	e0fffd03 	ldbu	r3,-12(fp)
   14960:	008000b4 	movhi	r2,2
   14964:	1086a404 	addi	r2,r2,6800
   14968:	18c7883a 	add	r3,r3,r3
   1496c:	18c7883a 	add	r3,r3,r3
   14970:	10c5883a 	add	r2,r2,r3
   14974:	10800017 	ldw	r2,0(r2)
   14978:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1497c:	e0bff817 	ldw	r2,-32(fp)
   14980:	1000091e 	bne	r2,zero,149a8 <OSTaskNameGet+0x120>
   14984:	e0bff617 	ldw	r2,-40(fp)
   14988:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1498c:	e0bff717 	ldw	r2,-36(fp)
   14990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	00c010c4 	movi	r3,67
   1499c:	10c00005 	stb	r3,0(r2)
        return (0);
   149a0:	0005883a 	mov	r2,zero
   149a4:	00001906 	br	14a0c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   149a8:	e0bff817 	ldw	r2,-32(fp)
   149ac:	10800058 	cmpnei	r2,r2,1
   149b0:	1000091e 	bne	r2,zero,149d8 <OSTaskNameGet+0x150>
   149b4:	e0bff617 	ldw	r2,-40(fp)
   149b8:	e0bff915 	stw	r2,-28(fp)
   149bc:	e0bff917 	ldw	r2,-28(fp)
   149c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	00c010c4 	movi	r3,67
   149cc:	10c00005 	stb	r3,0(r2)
        return (0);
   149d0:	0005883a 	mov	r2,zero
   149d4:	00000d06 	br	14a0c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   149d8:	e0bff817 	ldw	r2,-32(fp)
   149dc:	10801304 	addi	r2,r2,76
   149e0:	100b883a 	mov	r5,r2
   149e4:	e13ffe17 	ldw	r4,-8(fp)
   149e8:	000fa880 	call	fa88 <OS_StrCopy>
   149ec:	e0bffb05 	stb	r2,-20(fp)
   149f0:	e0bff617 	ldw	r2,-40(fp)
   149f4:	e0bffa15 	stw	r2,-24(fp)
   149f8:	e0bffa17 	ldw	r2,-24(fp)
   149fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a00:	e0bfff17 	ldw	r2,-4(fp)
   14a04:	10000005 	stb	zero,0(r2)
    return (len);
   14a08:	e0bffb03 	ldbu	r2,-20(fp)
}
   14a0c:	e037883a 	mov	sp,fp
   14a10:	dfc00117 	ldw	ra,4(sp)
   14a14:	df000017 	ldw	fp,0(sp)
   14a18:	dec00204 	addi	sp,sp,8
   14a1c:	f800283a 	ret

00014a20 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14a20:	defff304 	addi	sp,sp,-52
   14a24:	dfc00c15 	stw	ra,48(sp)
   14a28:	df000b15 	stw	fp,44(sp)
   14a2c:	df000b04 	addi	fp,sp,44
   14a30:	2005883a 	mov	r2,r4
   14a34:	e17ffe15 	stw	r5,-8(fp)
   14a38:	e1bfff15 	stw	r6,-4(fp)
   14a3c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14a40:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14a44:	e0bfff17 	ldw	r2,-4(fp)
   14a48:	10005c26 	beq	r2,zero,14bbc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14a4c:	e0bffd03 	ldbu	r2,-12(fp)
   14a50:	10800570 	cmpltui	r2,r2,21
   14a54:	1000071e 	bne	r2,zero,14a74 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14a58:	e0bffd03 	ldbu	r2,-12(fp)
   14a5c:	10803fe0 	cmpeqi	r2,r2,255
   14a60:	1000041e 	bne	r2,zero,14a74 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	00c00a84 	movi	r3,42
   14a6c:	10c00005 	stb	r3,0(r2)
            return;
   14a70:	00005306 	br	14bc0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14a74:	e0bffe17 	ldw	r2,-8(fp)
   14a78:	1000041e 	bne	r2,zero,14a8c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14a7c:	e0bfff17 	ldw	r2,-4(fp)
   14a80:	00c00304 	movi	r3,12
   14a84:	10c00005 	stb	r3,0(r2)
        return;
   14a88:	00004d06 	br	14bc0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14a8c:	d0a72a03 	ldbu	r2,-25432(gp)
   14a90:	10803fcc 	andi	r2,r2,255
   14a94:	10000426 	beq	r2,zero,14aa8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14a98:	e0bfff17 	ldw	r2,-4(fp)
   14a9c:	00c00484 	movi	r3,18
   14aa0:	10c00005 	stb	r3,0(r2)
        return;
   14aa4:	00004606 	br	14bc0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14aa8:	0005303a 	rdctl	r2,status
   14aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ab0:	e0fffc17 	ldw	r3,-16(fp)
   14ab4:	00bfff84 	movi	r2,-2
   14ab8:	1884703a 	and	r2,r3,r2
   14abc:	1001703a 	wrctl	status,r2
  
  return context;
   14ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14ac4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14ac8:	e0bffd03 	ldbu	r2,-12(fp)
   14acc:	10803fd8 	cmpnei	r2,r2,255
   14ad0:	1000031e 	bne	r2,zero,14ae0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14ad4:	d0a72b17 	ldw	r2,-25428(gp)
   14ad8:	10800c83 	ldbu	r2,50(r2)
   14adc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ae0:	e0fffd03 	ldbu	r3,-12(fp)
   14ae4:	008000b4 	movhi	r2,2
   14ae8:	1086a404 	addi	r2,r2,6800
   14aec:	18c7883a 	add	r3,r3,r3
   14af0:	18c7883a 	add	r3,r3,r3
   14af4:	10c5883a 	add	r2,r2,r3
   14af8:	10800017 	ldw	r2,0(r2)
   14afc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14b00:	e0bff717 	ldw	r2,-36(fp)
   14b04:	1000081e 	bne	r2,zero,14b28 <OSTaskNameSet+0x108>
   14b08:	e0bff517 	ldw	r2,-44(fp)
   14b0c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b10:	e0bff617 	ldw	r2,-40(fp)
   14b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b18:	e0bfff17 	ldw	r2,-4(fp)
   14b1c:	00c010c4 	movi	r3,67
   14b20:	10c00005 	stb	r3,0(r2)
        return;
   14b24:	00002606 	br	14bc0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14b28:	e0bff717 	ldw	r2,-36(fp)
   14b2c:	10800058 	cmpnei	r2,r2,1
   14b30:	1000081e 	bne	r2,zero,14b54 <OSTaskNameSet+0x134>
   14b34:	e0bff517 	ldw	r2,-44(fp)
   14b38:	e0bff815 	stw	r2,-32(fp)
   14b3c:	e0bff817 	ldw	r2,-32(fp)
   14b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b44:	e0bfff17 	ldw	r2,-4(fp)
   14b48:	00c010c4 	movi	r3,67
   14b4c:	10c00005 	stb	r3,0(r2)
        return;
   14b50:	00001b06 	br	14bc0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14b54:	e13ffe17 	ldw	r4,-8(fp)
   14b58:	000fafc0 	call	fafc <OS_StrLen>
   14b5c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14b60:	e0bffa03 	ldbu	r2,-24(fp)
   14b64:	10800830 	cmpltui	r2,r2,32
   14b68:	1000081e 	bne	r2,zero,14b8c <OSTaskNameSet+0x16c>
   14b6c:	e0bff517 	ldw	r2,-44(fp)
   14b70:	e0bff915 	stw	r2,-28(fp)
   14b74:	e0bff917 	ldw	r2,-28(fp)
   14b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	00c01044 	movi	r3,65
   14b84:	10c00005 	stb	r3,0(r2)
        return;
   14b88:	00000d06 	br	14bc0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14b8c:	e0bff717 	ldw	r2,-36(fp)
   14b90:	10801304 	addi	r2,r2,76
   14b94:	e17ffe17 	ldw	r5,-8(fp)
   14b98:	1009883a 	mov	r4,r2
   14b9c:	000fa880 	call	fa88 <OS_StrCopy>
   14ba0:	e0bff517 	ldw	r2,-44(fp)
   14ba4:	e0bffb15 	stw	r2,-20(fp)
   14ba8:	e0bffb17 	ldw	r2,-20(fp)
   14bac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14bb0:	e0bfff17 	ldw	r2,-4(fp)
   14bb4:	10000005 	stb	zero,0(r2)
   14bb8:	00000106 	br	14bc0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14bbc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14bc0:	e037883a 	mov	sp,fp
   14bc4:	dfc00117 	ldw	ra,4(sp)
   14bc8:	df000017 	ldw	fp,0(sp)
   14bcc:	dec00204 	addi	sp,sp,8
   14bd0:	f800283a 	ret

00014bd4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14bd4:	defff404 	addi	sp,sp,-48
   14bd8:	dfc00b15 	stw	ra,44(sp)
   14bdc:	df000a15 	stw	fp,40(sp)
   14be0:	df000a04 	addi	fp,sp,40
   14be4:	2005883a 	mov	r2,r4
   14be8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14bec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14bf0:	e0bfff03 	ldbu	r2,-4(fp)
   14bf4:	10800530 	cmpltui	r2,r2,20
   14bf8:	1000021e 	bne	r2,zero,14c04 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14bfc:	00800a84 	movi	r2,42
   14c00:	00006406 	br	14d94 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c04:	0005303a 	rdctl	r2,status
   14c08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c0c:	e0fffe17 	ldw	r3,-8(fp)
   14c10:	00bfff84 	movi	r2,-2
   14c14:	1884703a 	and	r2,r3,r2
   14c18:	1001703a 	wrctl	status,r2
  
  return context;
   14c1c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14c20:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14c24:	e0ffff03 	ldbu	r3,-4(fp)
   14c28:	008000b4 	movhi	r2,2
   14c2c:	1086a404 	addi	r2,r2,6800
   14c30:	18c7883a 	add	r3,r3,r3
   14c34:	18c7883a 	add	r3,r3,r3
   14c38:	10c5883a 	add	r2,r2,r3
   14c3c:	10800017 	ldw	r2,0(r2)
   14c40:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14c44:	e0bff817 	ldw	r2,-32(fp)
   14c48:	1000061e 	bne	r2,zero,14c64 <OSTaskResume+0x90>
   14c4c:	e0bff617 	ldw	r2,-40(fp)
   14c50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c54:	e0bff717 	ldw	r2,-36(fp)
   14c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14c5c:	00801184 	movi	r2,70
   14c60:	00004c06 	br	14d94 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14c64:	e0bff817 	ldw	r2,-32(fp)
   14c68:	10800058 	cmpnei	r2,r2,1
   14c6c:	1000061e 	bne	r2,zero,14c88 <OSTaskResume+0xb4>
   14c70:	e0bff617 	ldw	r2,-40(fp)
   14c74:	e0bff915 	stw	r2,-28(fp)
   14c78:	e0bff917 	ldw	r2,-28(fp)
   14c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14c80:	008010c4 	movi	r2,67
   14c84:	00004306 	br	14d94 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14c88:	e0bff817 	ldw	r2,-32(fp)
   14c8c:	10800c03 	ldbu	r2,48(r2)
   14c90:	10803fcc 	andi	r2,r2,255
   14c94:	1080020c 	andi	r2,r2,8
   14c98:	10003926 	beq	r2,zero,14d80 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14c9c:	e0bff817 	ldw	r2,-32(fp)
   14ca0:	10c00c03 	ldbu	r3,48(r2)
   14ca4:	00bffdc4 	movi	r2,-9
   14ca8:	1884703a 	and	r2,r3,r2
   14cac:	1007883a 	mov	r3,r2
   14cb0:	e0bff817 	ldw	r2,-32(fp)
   14cb4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14cb8:	e0bff817 	ldw	r2,-32(fp)
   14cbc:	10800c03 	ldbu	r2,48(r2)
   14cc0:	10803fcc 	andi	r2,r2,255
   14cc4:	1000281e 	bne	r2,zero,14d68 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14cc8:	e0bff817 	ldw	r2,-32(fp)
   14ccc:	10800b8b 	ldhu	r2,46(r2)
   14cd0:	10bfffcc 	andi	r2,r2,65535
   14cd4:	10001f1e 	bne	r2,zero,14d54 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14cd8:	e0bff817 	ldw	r2,-32(fp)
   14cdc:	10c00d83 	ldbu	r3,54(r2)
   14ce0:	d0a72803 	ldbu	r2,-25440(gp)
   14ce4:	1884b03a 	or	r2,r3,r2
   14ce8:	d0a72805 	stb	r2,-25440(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14cec:	e0bff817 	ldw	r2,-32(fp)
   14cf0:	10800d03 	ldbu	r2,52(r2)
   14cf4:	10c03fcc 	andi	r3,r2,255
   14cf8:	e0bff817 	ldw	r2,-32(fp)
   14cfc:	10800d03 	ldbu	r2,52(r2)
   14d00:	11003fcc 	andi	r4,r2,255
   14d04:	d0a72844 	addi	r2,gp,-25439
   14d08:	2085883a 	add	r2,r4,r2
   14d0c:	11000003 	ldbu	r4,0(r2)
   14d10:	e0bff817 	ldw	r2,-32(fp)
   14d14:	10800d43 	ldbu	r2,53(r2)
   14d18:	2084b03a 	or	r2,r4,r2
   14d1c:	1009883a 	mov	r4,r2
   14d20:	d0a72844 	addi	r2,gp,-25439
   14d24:	1885883a 	add	r2,r3,r2
   14d28:	11000005 	stb	r4,0(r2)
   14d2c:	e0bff617 	ldw	r2,-40(fp)
   14d30:	e0bffa15 	stw	r2,-24(fp)
   14d34:	e0bffa17 	ldw	r2,-24(fp)
   14d38:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14d3c:	d0a71c43 	ldbu	r2,-25487(gp)
   14d40:	10803fcc 	andi	r2,r2,255
   14d44:	10800058 	cmpnei	r2,r2,1
   14d48:	10000b1e 	bne	r2,zero,14d78 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   14d4c:	000f9440 	call	f944 <OS_Sched>
   14d50:	00000906 	br	14d78 <OSTaskResume+0x1a4>
   14d54:	e0bff617 	ldw	r2,-40(fp)
   14d58:	e0bffb15 	stw	r2,-20(fp)
   14d5c:	e0bffb17 	ldw	r2,-20(fp)
   14d60:	1001703a 	wrctl	status,r2
   14d64:	00000406 	br	14d78 <OSTaskResume+0x1a4>
   14d68:	e0bff617 	ldw	r2,-40(fp)
   14d6c:	e0bffc15 	stw	r2,-16(fp)
   14d70:	e0bffc17 	ldw	r2,-16(fp)
   14d74:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14d78:	0005883a 	mov	r2,zero
   14d7c:	00000506 	br	14d94 <OSTaskResume+0x1c0>
   14d80:	e0bff617 	ldw	r2,-40(fp)
   14d84:	e0bffd15 	stw	r2,-12(fp)
   14d88:	e0bffd17 	ldw	r2,-12(fp)
   14d8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14d90:	00801104 	movi	r2,68
}
   14d94:	e037883a 	mov	sp,fp
   14d98:	dfc00117 	ldw	ra,4(sp)
   14d9c:	df000017 	ldw	fp,0(sp)
   14da0:	dec00204 	addi	sp,sp,8
   14da4:	f800283a 	ret

00014da8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14da8:	defff304 	addi	sp,sp,-52
   14dac:	df000c15 	stw	fp,48(sp)
   14db0:	df000c04 	addi	fp,sp,48
   14db4:	2005883a 	mov	r2,r4
   14db8:	e17fff15 	stw	r5,-4(fp)
   14dbc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14dc0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14dc4:	e0bffe03 	ldbu	r2,-8(fp)
   14dc8:	10800570 	cmpltui	r2,r2,21
   14dcc:	1000051e 	bne	r2,zero,14de4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14dd0:	e0bffe03 	ldbu	r2,-8(fp)
   14dd4:	10803fe0 	cmpeqi	r2,r2,255
   14dd8:	1000021e 	bne	r2,zero,14de4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14ddc:	00800a84 	movi	r2,42
   14de0:	00005d06 	br	14f58 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14de4:	e0bfff17 	ldw	r2,-4(fp)
   14de8:	1000021e 	bne	r2,zero,14df4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14dec:	00800244 	movi	r2,9
   14df0:	00005906 	br	14f58 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14df4:	e0bfff17 	ldw	r2,-4(fp)
   14df8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14dfc:	e0bfff17 	ldw	r2,-4(fp)
   14e00:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e04:	0005303a 	rdctl	r2,status
   14e08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e0c:	e0fffd17 	ldw	r3,-12(fp)
   14e10:	00bfff84 	movi	r2,-2
   14e14:	1884703a 	and	r2,r3,r2
   14e18:	1001703a 	wrctl	status,r2
  
  return context;
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   14e20:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14e24:	e0bffe03 	ldbu	r2,-8(fp)
   14e28:	10803fd8 	cmpnei	r2,r2,255
   14e2c:	1000031e 	bne	r2,zero,14e3c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14e30:	d0a72b17 	ldw	r2,-25428(gp)
   14e34:	10800c83 	ldbu	r2,50(r2)
   14e38:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14e3c:	e0fffe03 	ldbu	r3,-8(fp)
   14e40:	008000b4 	movhi	r2,2
   14e44:	1086a404 	addi	r2,r2,6800
   14e48:	18c7883a 	add	r3,r3,r3
   14e4c:	18c7883a 	add	r3,r3,r3
   14e50:	10c5883a 	add	r2,r2,r3
   14e54:	10800017 	ldw	r2,0(r2)
   14e58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14e5c:	e0bff817 	ldw	r2,-32(fp)
   14e60:	1000061e 	bne	r2,zero,14e7c <OSTaskStkChk+0xd4>
   14e64:	e0bff617 	ldw	r2,-40(fp)
   14e68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e6c:	e0bff717 	ldw	r2,-36(fp)
   14e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14e74:	008010c4 	movi	r2,67
   14e78:	00003706 	br	14f58 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14e7c:	e0bff817 	ldw	r2,-32(fp)
   14e80:	10800058 	cmpnei	r2,r2,1
   14e84:	1000061e 	bne	r2,zero,14ea0 <OSTaskStkChk+0xf8>
   14e88:	e0bff617 	ldw	r2,-40(fp)
   14e8c:	e0bff915 	stw	r2,-28(fp)
   14e90:	e0bff917 	ldw	r2,-28(fp)
   14e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14e98:	008010c4 	movi	r2,67
   14e9c:	00002e06 	br	14f58 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14ea0:	e0bff817 	ldw	r2,-32(fp)
   14ea4:	1080040b 	ldhu	r2,16(r2)
   14ea8:	10bfffcc 	andi	r2,r2,65535
   14eac:	1080004c 	andi	r2,r2,1
   14eb0:	1000061e 	bne	r2,zero,14ecc <OSTaskStkChk+0x124>
   14eb4:	e0bff617 	ldw	r2,-40(fp)
   14eb8:	e0bffa15 	stw	r2,-24(fp)
   14ebc:	e0bffa17 	ldw	r2,-24(fp)
   14ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14ec4:	00801144 	movi	r2,69
   14ec8:	00002306 	br	14f58 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   14ecc:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14ed0:	e0bff817 	ldw	r2,-32(fp)
   14ed4:	10800317 	ldw	r2,12(r2)
   14ed8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14edc:	e0bff817 	ldw	r2,-32(fp)
   14ee0:	10800217 	ldw	r2,8(r2)
   14ee4:	e0bff415 	stw	r2,-48(fp)
   14ee8:	e0bff617 	ldw	r2,-40(fp)
   14eec:	e0bffb15 	stw	r2,-20(fp)
   14ef0:	e0bffb17 	ldw	r2,-20(fp)
   14ef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14ef8:	00000306 	br	14f08 <OSTaskStkChk+0x160>
        nfree++;
   14efc:	e0bff517 	ldw	r2,-44(fp)
   14f00:	10800044 	addi	r2,r2,1
   14f04:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14f08:	e0bff417 	ldw	r2,-48(fp)
   14f0c:	10c00104 	addi	r3,r2,4
   14f10:	e0fff415 	stw	r3,-48(fp)
   14f14:	10800017 	ldw	r2,0(r2)
   14f18:	103ff826 	beq	r2,zero,14efc <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14f1c:	e0bff517 	ldw	r2,-44(fp)
   14f20:	1085883a 	add	r2,r2,r2
   14f24:	1085883a 	add	r2,r2,r2
   14f28:	1007883a 	mov	r3,r2
   14f2c:	e0bfff17 	ldw	r2,-4(fp)
   14f30:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14f34:	e0fffc17 	ldw	r3,-16(fp)
   14f38:	e0bff517 	ldw	r2,-44(fp)
   14f3c:	1885c83a 	sub	r2,r3,r2
   14f40:	1085883a 	add	r2,r2,r2
   14f44:	1085883a 	add	r2,r2,r2
   14f48:	1007883a 	mov	r3,r2
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14f54:	0005883a 	mov	r2,zero
}
   14f58:	e037883a 	mov	sp,fp
   14f5c:	df000017 	ldw	fp,0(sp)
   14f60:	dec00104 	addi	sp,sp,4
   14f64:	f800283a 	ret

00014f68 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14f68:	defff504 	addi	sp,sp,-44
   14f6c:	dfc00a15 	stw	ra,40(sp)
   14f70:	df000915 	stw	fp,36(sp)
   14f74:	df000904 	addi	fp,sp,36
   14f78:	2005883a 	mov	r2,r4
   14f7c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14f80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14f84:	e0bfff03 	ldbu	r2,-4(fp)
   14f88:	10800518 	cmpnei	r2,r2,20
   14f8c:	1000021e 	bne	r2,zero,14f98 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   14f90:	008011c4 	movi	r2,71
   14f94:	00006806 	br	15138 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14f98:	e0bfff03 	ldbu	r2,-4(fp)
   14f9c:	10800530 	cmpltui	r2,r2,20
   14fa0:	1000051e 	bne	r2,zero,14fb8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14fa4:	e0bfff03 	ldbu	r2,-4(fp)
   14fa8:	10803fe0 	cmpeqi	r2,r2,255
   14fac:	1000021e 	bne	r2,zero,14fb8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   14fb0:	00800a84 	movi	r2,42
   14fb4:	00006006 	br	15138 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fb8:	0005303a 	rdctl	r2,status
   14fbc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fc0:	e0fffe17 	ldw	r3,-8(fp)
   14fc4:	00bfff84 	movi	r2,-2
   14fc8:	1884703a 	and	r2,r3,r2
   14fcc:	1001703a 	wrctl	status,r2
  
  return context;
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14fd4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14fd8:	e0bfff03 	ldbu	r2,-4(fp)
   14fdc:	10803fd8 	cmpnei	r2,r2,255
   14fe0:	1000061e 	bne	r2,zero,14ffc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14fe4:	d0a72b17 	ldw	r2,-25428(gp)
   14fe8:	10800c83 	ldbu	r2,50(r2)
   14fec:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14ff0:	00800044 	movi	r2,1
   14ff4:	e0bff705 	stb	r2,-36(fp)
   14ff8:	00000906 	br	15020 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14ffc:	d0a72b17 	ldw	r2,-25428(gp)
   15000:	10800c83 	ldbu	r2,50(r2)
   15004:	10c03fcc 	andi	r3,r2,255
   15008:	e0bfff03 	ldbu	r2,-4(fp)
   1500c:	1880031e 	bne	r3,r2,1501c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   15010:	00800044 	movi	r2,1
   15014:	e0bff705 	stb	r2,-36(fp)
   15018:	00000106 	br	15020 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1501c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15020:	e0ffff03 	ldbu	r3,-4(fp)
   15024:	008000b4 	movhi	r2,2
   15028:	1086a404 	addi	r2,r2,6800
   1502c:	18c7883a 	add	r3,r3,r3
   15030:	18c7883a 	add	r3,r3,r3
   15034:	10c5883a 	add	r2,r2,r3
   15038:	10800017 	ldw	r2,0(r2)
   1503c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15040:	e0bffa17 	ldw	r2,-24(fp)
   15044:	1000061e 	bne	r2,zero,15060 <OSTaskSuspend+0xf8>
   15048:	e0bff817 	ldw	r2,-32(fp)
   1504c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15050:	e0bff917 	ldw	r2,-28(fp)
   15054:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   15058:	00801204 	movi	r2,72
   1505c:	00003606 	br	15138 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   15060:	e0bffa17 	ldw	r2,-24(fp)
   15064:	10800058 	cmpnei	r2,r2,1
   15068:	1000061e 	bne	r2,zero,15084 <OSTaskSuspend+0x11c>
   1506c:	e0bff817 	ldw	r2,-32(fp)
   15070:	e0bffb15 	stw	r2,-20(fp)
   15074:	e0bffb17 	ldw	r2,-20(fp)
   15078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1507c:	008010c4 	movi	r2,67
   15080:	00002d06 	br	15138 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   15084:	e0bffa17 	ldw	r2,-24(fp)
   15088:	10800d03 	ldbu	r2,52(r2)
   1508c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15090:	e0fffd03 	ldbu	r3,-12(fp)
   15094:	e13ffd03 	ldbu	r4,-12(fp)
   15098:	d0a72844 	addi	r2,gp,-25439
   1509c:	2085883a 	add	r2,r4,r2
   150a0:	10800003 	ldbu	r2,0(r2)
   150a4:	1009883a 	mov	r4,r2
   150a8:	e0bffa17 	ldw	r2,-24(fp)
   150ac:	10800d43 	ldbu	r2,53(r2)
   150b0:	0084303a 	nor	r2,zero,r2
   150b4:	2084703a 	and	r2,r4,r2
   150b8:	1009883a 	mov	r4,r2
   150bc:	d0a72844 	addi	r2,gp,-25439
   150c0:	1885883a 	add	r2,r3,r2
   150c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   150c8:	e0fffd03 	ldbu	r3,-12(fp)
   150cc:	d0a72844 	addi	r2,gp,-25439
   150d0:	1885883a 	add	r2,r3,r2
   150d4:	10800003 	ldbu	r2,0(r2)
   150d8:	10803fcc 	andi	r2,r2,255
   150dc:	1000071e 	bne	r2,zero,150fc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   150e0:	e0bffa17 	ldw	r2,-24(fp)
   150e4:	10800d83 	ldbu	r2,54(r2)
   150e8:	0084303a 	nor	r2,zero,r2
   150ec:	1007883a 	mov	r3,r2
   150f0:	d0a72803 	ldbu	r2,-25440(gp)
   150f4:	1884703a 	and	r2,r3,r2
   150f8:	d0a72805 	stb	r2,-25440(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   150fc:	e0bffa17 	ldw	r2,-24(fp)
   15100:	10800c03 	ldbu	r2,48(r2)
   15104:	10800214 	ori	r2,r2,8
   15108:	1007883a 	mov	r3,r2
   1510c:	e0bffa17 	ldw	r2,-24(fp)
   15110:	10c00c05 	stb	r3,48(r2)
   15114:	e0bff817 	ldw	r2,-32(fp)
   15118:	e0bffc15 	stw	r2,-16(fp)
   1511c:	e0bffc17 	ldw	r2,-16(fp)
   15120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   15124:	e0bff703 	ldbu	r2,-36(fp)
   15128:	10800058 	cmpnei	r2,r2,1
   1512c:	1000011e 	bne	r2,zero,15134 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   15130:	000f9440 	call	f944 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15134:	0005883a 	mov	r2,zero
}
   15138:	e037883a 	mov	sp,fp
   1513c:	dfc00117 	ldw	ra,4(sp)
   15140:	df000017 	ldw	fp,0(sp)
   15144:	dec00204 	addi	sp,sp,8
   15148:	f800283a 	ret

0001514c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1514c:	defff604 	addi	sp,sp,-40
   15150:	dfc00915 	stw	ra,36(sp)
   15154:	df000815 	stw	fp,32(sp)
   15158:	df000804 	addi	fp,sp,32
   1515c:	2005883a 	mov	r2,r4
   15160:	e17fff15 	stw	r5,-4(fp)
   15164:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15168:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1516c:	e0bffe03 	ldbu	r2,-8(fp)
   15170:	10800570 	cmpltui	r2,r2,21
   15174:	1000051e 	bne	r2,zero,1518c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   15178:	e0bffe03 	ldbu	r2,-8(fp)
   1517c:	10803fe0 	cmpeqi	r2,r2,255
   15180:	1000021e 	bne	r2,zero,1518c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   15184:	00800a84 	movi	r2,42
   15188:	00003406 	br	1525c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1518c:	e0bfff17 	ldw	r2,-4(fp)
   15190:	1000021e 	bne	r2,zero,1519c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   15194:	00800244 	movi	r2,9
   15198:	00003006 	br	1525c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1519c:	0005303a 	rdctl	r2,status
   151a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151a4:	e0fffd17 	ldw	r3,-12(fp)
   151a8:	00bfff84 	movi	r2,-2
   151ac:	1884703a 	and	r2,r3,r2
   151b0:	1001703a 	wrctl	status,r2
  
  return context;
   151b4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   151b8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   151bc:	e0bffe03 	ldbu	r2,-8(fp)
   151c0:	10803fd8 	cmpnei	r2,r2,255
   151c4:	1000031e 	bne	r2,zero,151d4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   151c8:	d0a72b17 	ldw	r2,-25428(gp)
   151cc:	10800c83 	ldbu	r2,50(r2)
   151d0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   151d4:	e0fffe03 	ldbu	r3,-8(fp)
   151d8:	008000b4 	movhi	r2,2
   151dc:	1086a404 	addi	r2,r2,6800
   151e0:	18c7883a 	add	r3,r3,r3
   151e4:	18c7883a 	add	r3,r3,r3
   151e8:	10c5883a 	add	r2,r2,r3
   151ec:	10800017 	ldw	r2,0(r2)
   151f0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   151f4:	e0bffa17 	ldw	r2,-24(fp)
   151f8:	1000061e 	bne	r2,zero,15214 <OSTaskQuery+0xc8>
   151fc:	e0bff817 	ldw	r2,-32(fp)
   15200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15204:	e0bff917 	ldw	r2,-28(fp)
   15208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1520c:	00800a44 	movi	r2,41
   15210:	00001206 	br	1525c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15214:	e0bffa17 	ldw	r2,-24(fp)
   15218:	10800058 	cmpnei	r2,r2,1
   1521c:	1000061e 	bne	r2,zero,15238 <OSTaskQuery+0xec>
   15220:	e0bff817 	ldw	r2,-32(fp)
   15224:	e0bffb15 	stw	r2,-20(fp)
   15228:	e0bffb17 	ldw	r2,-20(fp)
   1522c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15230:	008010c4 	movi	r2,67
   15234:	00000906 	br	1525c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   15238:	01801b04 	movi	r6,108
   1523c:	e17ffa17 	ldw	r5,-24(fp)
   15240:	e13fff17 	ldw	r4,-4(fp)
   15244:	000f8dc0 	call	f8dc <OS_MemCopy>
   15248:	e0bff817 	ldw	r2,-32(fp)
   1524c:	e0bffc15 	stw	r2,-16(fp)
   15250:	e0bffc17 	ldw	r2,-16(fp)
   15254:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15258:	0005883a 	mov	r2,zero
}
   1525c:	e037883a 	mov	sp,fp
   15260:	dfc00117 	ldw	ra,4(sp)
   15264:	df000017 	ldw	fp,0(sp)
   15268:	dec00204 	addi	sp,sp,8
   1526c:	f800283a 	ret

00015270 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   15270:	defffc04 	addi	sp,sp,-16
   15274:	df000315 	stw	fp,12(sp)
   15278:	df000304 	addi	fp,sp,12
   1527c:	e13ffd15 	stw	r4,-12(fp)
   15280:	e17ffe15 	stw	r5,-8(fp)
   15284:	3005883a 	mov	r2,r6
   15288:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1528c:	e0bfff0b 	ldhu	r2,-4(fp)
   15290:	1080004c 	andi	r2,r2,1
   15294:	10000d26 	beq	r2,zero,152cc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15298:	e0bfff0b 	ldhu	r2,-4(fp)
   1529c:	1080008c 	andi	r2,r2,2
   152a0:	10000a26 	beq	r2,zero,152cc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   152a4:	00000706 	br	152c4 <OS_TaskStkClr+0x54>
                size--;
   152a8:	e0bffe17 	ldw	r2,-8(fp)
   152ac:	10bfffc4 	addi	r2,r2,-1
   152b0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   152b4:	e0bffd17 	ldw	r2,-12(fp)
   152b8:	10c00104 	addi	r3,r2,4
   152bc:	e0fffd15 	stw	r3,-12(fp)
   152c0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   152c4:	e0bffe17 	ldw	r2,-8(fp)
   152c8:	103ff71e 	bne	r2,zero,152a8 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   152cc:	0001883a 	nop
   152d0:	e037883a 	mov	sp,fp
   152d4:	df000017 	ldw	fp,0(sp)
   152d8:	dec00104 	addi	sp,sp,4
   152dc:	f800283a 	ret

000152e0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   152e0:	defff904 	addi	sp,sp,-28
   152e4:	dfc00615 	stw	ra,24(sp)
   152e8:	df000515 	stw	fp,20(sp)
   152ec:	df000504 	addi	fp,sp,20
   152f0:	2005883a 	mov	r2,r4
   152f4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   152f8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   152fc:	d0a72a03 	ldbu	r2,-25432(gp)
   15300:	10803fcc 	andi	r2,r2,255
   15304:	1000311e 	bne	r2,zero,153cc <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   15308:	e0bfff0b 	ldhu	r2,-4(fp)
   1530c:	10003026 	beq	r2,zero,153d0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15310:	0005303a 	rdctl	r2,status
   15314:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15318:	e0fffe17 	ldw	r3,-8(fp)
   1531c:	00bfff84 	movi	r2,-2
   15320:	1884703a 	and	r2,r3,r2
   15324:	1001703a 	wrctl	status,r2
  
  return context;
   15328:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1532c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15330:	d0a72b17 	ldw	r2,-25428(gp)
   15334:	10800d03 	ldbu	r2,52(r2)
   15338:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1533c:	e0fffd03 	ldbu	r3,-12(fp)
   15340:	e13ffd03 	ldbu	r4,-12(fp)
   15344:	d0a72844 	addi	r2,gp,-25439
   15348:	2085883a 	add	r2,r4,r2
   1534c:	10800003 	ldbu	r2,0(r2)
   15350:	1009883a 	mov	r4,r2
   15354:	d0a72b17 	ldw	r2,-25428(gp)
   15358:	10800d43 	ldbu	r2,53(r2)
   1535c:	0084303a 	nor	r2,zero,r2
   15360:	2084703a 	and	r2,r4,r2
   15364:	1009883a 	mov	r4,r2
   15368:	d0a72844 	addi	r2,gp,-25439
   1536c:	1885883a 	add	r2,r3,r2
   15370:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15374:	e0fffd03 	ldbu	r3,-12(fp)
   15378:	d0a72844 	addi	r2,gp,-25439
   1537c:	1885883a 	add	r2,r3,r2
   15380:	10800003 	ldbu	r2,0(r2)
   15384:	10803fcc 	andi	r2,r2,255
   15388:	1000071e 	bne	r2,zero,153a8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1538c:	d0a72b17 	ldw	r2,-25428(gp)
   15390:	10800d83 	ldbu	r2,54(r2)
   15394:	0084303a 	nor	r2,zero,r2
   15398:	1007883a 	mov	r3,r2
   1539c:	d0a72803 	ldbu	r2,-25440(gp)
   153a0:	1884703a 	and	r2,r3,r2
   153a4:	d0a72805 	stb	r2,-25440(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   153a8:	d0a72b17 	ldw	r2,-25428(gp)
   153ac:	e0ffff0b 	ldhu	r3,-4(fp)
   153b0:	10c00b8d 	sth	r3,46(r2)
   153b4:	e0bffb17 	ldw	r2,-20(fp)
   153b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153bc:	e0bffc17 	ldw	r2,-16(fp)
   153c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   153c4:	000f9440 	call	f944 <OS_Sched>
   153c8:	00000106 	br	153d0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   153cc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   153d0:	e037883a 	mov	sp,fp
   153d4:	dfc00117 	ldw	ra,4(sp)
   153d8:	df000017 	ldw	fp,0(sp)
   153dc:	dec00204 	addi	sp,sp,8
   153e0:	f800283a 	ret

000153e4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   153e4:	defff704 	addi	sp,sp,-36
   153e8:	dfc00815 	stw	ra,32(sp)
   153ec:	df000715 	stw	fp,28(sp)
   153f0:	dc000615 	stw	r16,24(sp)
   153f4:	df000704 	addi	fp,sp,28
   153f8:	2011883a 	mov	r8,r4
   153fc:	2809883a 	mov	r4,r5
   15400:	3007883a 	mov	r3,r6
   15404:	3805883a 	mov	r2,r7
   15408:	e23ffb05 	stb	r8,-20(fp)
   1540c:	e13ffc05 	stb	r4,-16(fp)
   15410:	e0fffd05 	stb	r3,-12(fp)
   15414:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15418:	d0a72a03 	ldbu	r2,-25432(gp)
   1541c:	10803fcc 	andi	r2,r2,255
   15420:	10000226 	beq	r2,zero,1542c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   15424:	00801544 	movi	r2,85
   15428:	00003d06 	br	15520 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1542c:	e0bffb03 	ldbu	r2,-20(fp)
   15430:	1000081e 	bne	r2,zero,15454 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   15434:	e0bffc03 	ldbu	r2,-16(fp)
   15438:	1000061e 	bne	r2,zero,15454 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   1543c:	e0bffd03 	ldbu	r2,-12(fp)
   15440:	1000041e 	bne	r2,zero,15454 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   15444:	e0bffe0b 	ldhu	r2,-8(fp)
   15448:	1000021e 	bne	r2,zero,15454 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   1544c:	00801504 	movi	r2,84
   15450:	00003306 	br	15520 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
   15454:	e0bffc03 	ldbu	r2,-16(fp)
   15458:	10800f30 	cmpltui	r2,r2,60
   1545c:	1000021e 	bne	r2,zero,15468 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15460:	00801444 	movi	r2,81
   15464:	00002e06 	br	15520 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
   15468:	e0bffd03 	ldbu	r2,-12(fp)
   1546c:	10800f30 	cmpltui	r2,r2,60
   15470:	1000021e 	bne	r2,zero,1547c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   15474:	00801484 	movi	r2,82
   15478:	00002906 	br	15520 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
   1547c:	e0bffe0b 	ldhu	r2,-8(fp)
   15480:	1080fa30 	cmpltui	r2,r2,1000
   15484:	1000021e 	bne	r2,zero,15490 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   15488:	008014c4 	movi	r2,83
   1548c:	00002406 	br	15520 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15490:	e0bffb03 	ldbu	r2,-20(fp)
   15494:	10c38424 	muli	r3,r2,3600
   15498:	e0bffc03 	ldbu	r2,-16(fp)
   1549c:	10800f24 	muli	r2,r2,60
   154a0:	1887883a 	add	r3,r3,r2
   154a4:	e0bffd03 	ldbu	r2,-12(fp)
   154a8:	1885883a 	add	r2,r3,r2
   154ac:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   154b0:	e0bffe0b 	ldhu	r2,-8(fp)
   154b4:	1080fa24 	muli	r2,r2,1000
   154b8:	0140fa04 	movi	r5,1000
   154bc:	1009883a 	mov	r4,r2
   154c0:	0000b680 	call	b68 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   154c4:	8085883a 	add	r2,r16,r2
   154c8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   154cc:	e0bffa17 	ldw	r2,-24(fp)
   154d0:	1004d43a 	srli	r2,r2,16
   154d4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   154d8:	e0bffa17 	ldw	r2,-24(fp)
   154dc:	10bfffcc 	andi	r2,r2,65535
   154e0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   154e4:	e0bffa17 	ldw	r2,-24(fp)
   154e8:	10bfffcc 	andi	r2,r2,65535
   154ec:	1009883a 	mov	r4,r2
   154f0:	00152e00 	call	152e0 <OSTimeDly>
    while (loops > 0) {
   154f4:	00000706 	br	15514 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
   154f8:	01200014 	movui	r4,32768
   154fc:	00152e00 	call	152e0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15500:	01200014 	movui	r4,32768
   15504:	00152e00 	call	152e0 <OSTimeDly>
        loops--;
   15508:	e0bff90b 	ldhu	r2,-28(fp)
   1550c:	10bfffc4 	addi	r2,r2,-1
   15510:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15514:	e0bff90b 	ldhu	r2,-28(fp)
   15518:	103ff71e 	bne	r2,zero,154f8 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1551c:	0005883a 	mov	r2,zero
}
   15520:	e6ffff04 	addi	sp,fp,-4
   15524:	dfc00217 	ldw	ra,8(sp)
   15528:	df000117 	ldw	fp,4(sp)
   1552c:	dc000017 	ldw	r16,0(sp)
   15530:	dec00304 	addi	sp,sp,12
   15534:	f800283a 	ret

00015538 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15538:	defff504 	addi	sp,sp,-44
   1553c:	dfc00a15 	stw	ra,40(sp)
   15540:	df000915 	stw	fp,36(sp)
   15544:	df000904 	addi	fp,sp,36
   15548:	2005883a 	mov	r2,r4
   1554c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15550:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15554:	e0bfff03 	ldbu	r2,-4(fp)
   15558:	10800530 	cmpltui	r2,r2,20
   1555c:	1000021e 	bne	r2,zero,15568 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15560:	00800a84 	movi	r2,42
   15564:	00006406 	br	156f8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15568:	0005303a 	rdctl	r2,status
   1556c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15570:	e0fffe17 	ldw	r3,-8(fp)
   15574:	00bfff84 	movi	r2,-2
   15578:	1884703a 	and	r2,r3,r2
   1557c:	1001703a 	wrctl	status,r2
  
  return context;
   15580:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15584:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15588:	e0ffff03 	ldbu	r3,-4(fp)
   1558c:	008000b4 	movhi	r2,2
   15590:	1086a404 	addi	r2,r2,6800
   15594:	18c7883a 	add	r3,r3,r3
   15598:	18c7883a 	add	r3,r3,r3
   1559c:	10c5883a 	add	r2,r2,r3
   155a0:	10800017 	ldw	r2,0(r2)
   155a4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   155a8:	e0bff917 	ldw	r2,-28(fp)
   155ac:	1000061e 	bne	r2,zero,155c8 <OSTimeDlyResume+0x90>
   155b0:	e0bff717 	ldw	r2,-36(fp)
   155b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155b8:	e0bff817 	ldw	r2,-32(fp)
   155bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   155c0:	008010c4 	movi	r2,67
   155c4:	00004c06 	br	156f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   155c8:	e0bff917 	ldw	r2,-28(fp)
   155cc:	10800058 	cmpnei	r2,r2,1
   155d0:	1000061e 	bne	r2,zero,155ec <OSTimeDlyResume+0xb4>
   155d4:	e0bff717 	ldw	r2,-36(fp)
   155d8:	e0bffa15 	stw	r2,-24(fp)
   155dc:	e0bffa17 	ldw	r2,-24(fp)
   155e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   155e4:	008010c4 	movi	r2,67
   155e8:	00004306 	br	156f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   155ec:	e0bff917 	ldw	r2,-28(fp)
   155f0:	10800b8b 	ldhu	r2,46(r2)
   155f4:	10bfffcc 	andi	r2,r2,65535
   155f8:	1000061e 	bne	r2,zero,15614 <OSTimeDlyResume+0xdc>
   155fc:	e0bff717 	ldw	r2,-36(fp)
   15600:	e0bffb15 	stw	r2,-20(fp)
   15604:	e0bffb17 	ldw	r2,-20(fp)
   15608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1560c:	00801404 	movi	r2,80
   15610:	00003906 	br	156f8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15614:	e0bff917 	ldw	r2,-28(fp)
   15618:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1561c:	e0bff917 	ldw	r2,-28(fp)
   15620:	10800c03 	ldbu	r2,48(r2)
   15624:	10803fcc 	andi	r2,r2,255
   15628:	10800dcc 	andi	r2,r2,55
   1562c:	10000b26 	beq	r2,zero,1565c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15630:	e0bff917 	ldw	r2,-28(fp)
   15634:	10c00c03 	ldbu	r3,48(r2)
   15638:	00bff204 	movi	r2,-56
   1563c:	1884703a 	and	r2,r3,r2
   15640:	1007883a 	mov	r3,r2
   15644:	e0bff917 	ldw	r2,-28(fp)
   15648:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1564c:	e0bff917 	ldw	r2,-28(fp)
   15650:	00c00044 	movi	r3,1
   15654:	10c00c45 	stb	r3,49(r2)
   15658:	00000206 	br	15664 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1565c:	e0bff917 	ldw	r2,-28(fp)
   15660:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15664:	e0bff917 	ldw	r2,-28(fp)
   15668:	10800c03 	ldbu	r2,48(r2)
   1566c:	10803fcc 	andi	r2,r2,255
   15670:	1080020c 	andi	r2,r2,8
   15674:	10001b1e 	bne	r2,zero,156e4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15678:	e0bff917 	ldw	r2,-28(fp)
   1567c:	10c00d83 	ldbu	r3,54(r2)
   15680:	d0a72803 	ldbu	r2,-25440(gp)
   15684:	1884b03a 	or	r2,r3,r2
   15688:	d0a72805 	stb	r2,-25440(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1568c:	e0bff917 	ldw	r2,-28(fp)
   15690:	10800d03 	ldbu	r2,52(r2)
   15694:	10c03fcc 	andi	r3,r2,255
   15698:	e0bff917 	ldw	r2,-28(fp)
   1569c:	10800d03 	ldbu	r2,52(r2)
   156a0:	11003fcc 	andi	r4,r2,255
   156a4:	d0a72844 	addi	r2,gp,-25439
   156a8:	2085883a 	add	r2,r4,r2
   156ac:	11000003 	ldbu	r4,0(r2)
   156b0:	e0bff917 	ldw	r2,-28(fp)
   156b4:	10800d43 	ldbu	r2,53(r2)
   156b8:	2084b03a 	or	r2,r4,r2
   156bc:	1009883a 	mov	r4,r2
   156c0:	d0a72844 	addi	r2,gp,-25439
   156c4:	1885883a 	add	r2,r3,r2
   156c8:	11000005 	stb	r4,0(r2)
   156cc:	e0bff717 	ldw	r2,-36(fp)
   156d0:	e0bffc15 	stw	r2,-16(fp)
   156d4:	e0bffc17 	ldw	r2,-16(fp)
   156d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   156dc:	000f9440 	call	f944 <OS_Sched>
   156e0:	00000406 	br	156f4 <OSTimeDlyResume+0x1bc>
   156e4:	e0bff717 	ldw	r2,-36(fp)
   156e8:	e0bffd15 	stw	r2,-12(fp)
   156ec:	e0bffd17 	ldw	r2,-12(fp)
   156f0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   156f4:	0005883a 	mov	r2,zero
}
   156f8:	e037883a 	mov	sp,fp
   156fc:	dfc00117 	ldw	ra,4(sp)
   15700:	df000017 	ldw	fp,0(sp)
   15704:	dec00204 	addi	sp,sp,8
   15708:	f800283a 	ret

0001570c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1570c:	defffb04 	addi	sp,sp,-20
   15710:	df000415 	stw	fp,16(sp)
   15714:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15718:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1571c:	0005303a 	rdctl	r2,status
   15720:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15724:	e0fffe17 	ldw	r3,-8(fp)
   15728:	00bfff84 	movi	r2,-2
   1572c:	1884703a 	and	r2,r3,r2
   15730:	1001703a 	wrctl	status,r2
  
  return context;
   15734:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15738:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1573c:	d0a72c17 	ldw	r2,-25424(gp)
   15740:	e0bffd15 	stw	r2,-12(fp)
   15744:	e0bffc17 	ldw	r2,-16(fp)
   15748:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1574c:	e0bfff17 	ldw	r2,-4(fp)
   15750:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15754:	e0bffd17 	ldw	r2,-12(fp)
}
   15758:	e037883a 	mov	sp,fp
   1575c:	df000017 	ldw	fp,0(sp)
   15760:	dec00104 	addi	sp,sp,4
   15764:	f800283a 	ret

00015768 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15768:	defffb04 	addi	sp,sp,-20
   1576c:	df000415 	stw	fp,16(sp)
   15770:	df000404 	addi	fp,sp,16
   15774:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15778:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1577c:	0005303a 	rdctl	r2,status
   15780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15784:	e0fffd17 	ldw	r3,-12(fp)
   15788:	00bfff84 	movi	r2,-2
   1578c:	1884703a 	and	r2,r3,r2
   15790:	1001703a 	wrctl	status,r2
  
  return context;
   15794:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15798:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1579c:	e0bfff17 	ldw	r2,-4(fp)
   157a0:	d0a72c15 	stw	r2,-25424(gp)
   157a4:	e0bffc17 	ldw	r2,-16(fp)
   157a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157ac:	e0bffe17 	ldw	r2,-8(fp)
   157b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   157b4:	0001883a 	nop
   157b8:	e037883a 	mov	sp,fp
   157bc:	df000017 	ldw	fp,0(sp)
   157c0:	dec00104 	addi	sp,sp,4
   157c4:	f800283a 	ret

000157c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   157c8:	defffd04 	addi	sp,sp,-12
   157cc:	dfc00215 	stw	ra,8(sp)
   157d0:	df000115 	stw	fp,4(sp)
   157d4:	df000104 	addi	fp,sp,4
   157d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   157dc:	d1600804 	addi	r5,gp,-32736
   157e0:	e13fff17 	ldw	r4,-4(fp)
   157e4:	00168500 	call	16850 <alt_dev_llist_insert>
}
   157e8:	e037883a 	mov	sp,fp
   157ec:	dfc00117 	ldw	ra,4(sp)
   157f0:	df000017 	ldw	fp,0(sp)
   157f4:	dec00204 	addi	sp,sp,8
   157f8:	f800283a 	ret

000157fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   157fc:	defffd04 	addi	sp,sp,-12
   15800:	dfc00215 	stw	ra,8(sp)
   15804:	df000115 	stw	fp,4(sp)
   15808:	df000104 	addi	fp,sp,4
   1580c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   15810:	00171ac0 	call	171ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15814:	00800044 	movi	r2,1
   15818:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1581c:	0001883a 	nop
   15820:	e037883a 	mov	sp,fp
   15824:	dfc00117 	ldw	ra,4(sp)
   15828:	df000017 	ldw	fp,0(sp)
   1582c:	dec00204 	addi	sp,sp,8
   15830:	f800283a 	ret

00015834 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15834:	defffe04 	addi	sp,sp,-8
   15838:	dfc00115 	stw	ra,4(sp)
   1583c:	df000015 	stw	fp,0(sp)
   15840:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   15844:	01c0fa04 	movi	r7,1000
   15848:	01800084 	movi	r6,2
   1584c:	000b883a 	mov	r5,zero
   15850:	01010034 	movhi	r4,1024
   15854:	21041004 	addi	r4,r4,4160
   15858:	001664c0 	call	1664c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1585c:	01800044 	movi	r6,1
   15860:	000b883a 	mov	r5,zero
   15864:	010000b4 	movhi	r4,2
   15868:	2122e104 	addi	r4,r4,-29820
   1586c:	0015a0c0 	call	15a0c <altera_avalon_jtag_uart_init>
   15870:	010000b4 	movhi	r4,2
   15874:	2122d704 	addi	r4,r4,-29860
   15878:	00157c80 	call	157c8 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   1587c:	00c00044 	movi	r3,1
   15880:	00810034 	movhi	r2,1024
   15884:	10840004 	addi	r2,r2,4096
   15888:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1588c:	0001883a 	nop
}
   15890:	0001883a 	nop
   15894:	e037883a 	mov	sp,fp
   15898:	dfc00117 	ldw	ra,4(sp)
   1589c:	df000017 	ldw	fp,0(sp)
   158a0:	dec00204 	addi	sp,sp,8
   158a4:	f800283a 	ret

000158a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   158a8:	defffa04 	addi	sp,sp,-24
   158ac:	dfc00515 	stw	ra,20(sp)
   158b0:	df000415 	stw	fp,16(sp)
   158b4:	df000404 	addi	fp,sp,16
   158b8:	e13ffd15 	stw	r4,-12(fp)
   158bc:	e17ffe15 	stw	r5,-8(fp)
   158c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   158c4:	e0bffd17 	ldw	r2,-12(fp)
   158c8:	10800017 	ldw	r2,0(r2)
   158cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   158d0:	e0bffc17 	ldw	r2,-16(fp)
   158d4:	10c00a04 	addi	r3,r2,40
   158d8:	e0bffd17 	ldw	r2,-12(fp)
   158dc:	10800217 	ldw	r2,8(r2)
   158e0:	100f883a 	mov	r7,r2
   158e4:	e1bfff17 	ldw	r6,-4(fp)
   158e8:	e17ffe17 	ldw	r5,-8(fp)
   158ec:	1809883a 	mov	r4,r3
   158f0:	00160540 	call	16054 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   158f4:	e037883a 	mov	sp,fp
   158f8:	dfc00117 	ldw	ra,4(sp)
   158fc:	df000017 	ldw	fp,0(sp)
   15900:	dec00204 	addi	sp,sp,8
   15904:	f800283a 	ret

00015908 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15908:	defffa04 	addi	sp,sp,-24
   1590c:	dfc00515 	stw	ra,20(sp)
   15910:	df000415 	stw	fp,16(sp)
   15914:	df000404 	addi	fp,sp,16
   15918:	e13ffd15 	stw	r4,-12(fp)
   1591c:	e17ffe15 	stw	r5,-8(fp)
   15920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15924:	e0bffd17 	ldw	r2,-12(fp)
   15928:	10800017 	ldw	r2,0(r2)
   1592c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15930:	e0bffc17 	ldw	r2,-16(fp)
   15934:	10c00a04 	addi	r3,r2,40
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	10800217 	ldw	r2,8(r2)
   15940:	100f883a 	mov	r7,r2
   15944:	e1bfff17 	ldw	r6,-4(fp)
   15948:	e17ffe17 	ldw	r5,-8(fp)
   1594c:	1809883a 	mov	r4,r3
   15950:	00163100 	call	16310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15954:	e037883a 	mov	sp,fp
   15958:	dfc00117 	ldw	ra,4(sp)
   1595c:	df000017 	ldw	fp,0(sp)
   15960:	dec00204 	addi	sp,sp,8
   15964:	f800283a 	ret

00015968 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15968:	defffc04 	addi	sp,sp,-16
   1596c:	dfc00315 	stw	ra,12(sp)
   15970:	df000215 	stw	fp,8(sp)
   15974:	df000204 	addi	fp,sp,8
   15978:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1597c:	e0bfff17 	ldw	r2,-4(fp)
   15980:	10800017 	ldw	r2,0(r2)
   15984:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15988:	e0bffe17 	ldw	r2,-8(fp)
   1598c:	10c00a04 	addi	r3,r2,40
   15990:	e0bfff17 	ldw	r2,-4(fp)
   15994:	10800217 	ldw	r2,8(r2)
   15998:	100b883a 	mov	r5,r2
   1599c:	1809883a 	mov	r4,r3
   159a0:	0015efc0 	call	15efc <altera_avalon_jtag_uart_close>
}
   159a4:	e037883a 	mov	sp,fp
   159a8:	dfc00117 	ldw	ra,4(sp)
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00204 	addi	sp,sp,8
   159b4:	f800283a 	ret

000159b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   159b8:	defffa04 	addi	sp,sp,-24
   159bc:	dfc00515 	stw	ra,20(sp)
   159c0:	df000415 	stw	fp,16(sp)
   159c4:	df000404 	addi	fp,sp,16
   159c8:	e13ffd15 	stw	r4,-12(fp)
   159cc:	e17ffe15 	stw	r5,-8(fp)
   159d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   159d4:	e0bffd17 	ldw	r2,-12(fp)
   159d8:	10800017 	ldw	r2,0(r2)
   159dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   159e0:	e0bffc17 	ldw	r2,-16(fp)
   159e4:	10800a04 	addi	r2,r2,40
   159e8:	e1bfff17 	ldw	r6,-4(fp)
   159ec:	e17ffe17 	ldw	r5,-8(fp)
   159f0:	1009883a 	mov	r4,r2
   159f4:	0015f640 	call	15f64 <altera_avalon_jtag_uart_ioctl>
}
   159f8:	e037883a 	mov	sp,fp
   159fc:	dfc00117 	ldw	ra,4(sp)
   15a00:	df000017 	ldw	fp,0(sp)
   15a04:	dec00204 	addi	sp,sp,8
   15a08:	f800283a 	ret

00015a0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15a0c:	defff104 	addi	sp,sp,-60
   15a10:	dfc00e15 	stw	ra,56(sp)
   15a14:	df000d15 	stw	fp,52(sp)
   15a18:	df000d04 	addi	fp,sp,52
   15a1c:	e13ff915 	stw	r4,-28(fp)
   15a20:	e17ffa15 	stw	r5,-24(fp)
   15a24:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15a28:	e0bff917 	ldw	r2,-28(fp)
   15a2c:	10800c04 	addi	r2,r2,48
   15a30:	e0bff415 	stw	r2,-48(fp)
   15a34:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15a38:	e0bff80b 	ldhu	r2,-32(fp)
   15a3c:	e0fff884 	addi	r3,fp,-30
   15a40:	180b883a 	mov	r5,r3
   15a44:	1009883a 	mov	r4,r2
   15a48:	00104b00 	call	104b0 <OSFlagCreate>
   15a4c:	1007883a 	mov	r3,r2
   15a50:	e0bff417 	ldw	r2,-48(fp)
   15a54:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15a58:	e0bff917 	ldw	r2,-28(fp)
   15a5c:	10800a04 	addi	r2,r2,40
   15a60:	e0bff515 	stw	r2,-44(fp)
   15a64:	00800044 	movi	r2,1
   15a68:	e0bff78d 	sth	r2,-34(fp)
   15a6c:	e0bff78b 	ldhu	r2,-34(fp)
   15a70:	1009883a 	mov	r4,r2
   15a74:	00131c40 	call	131c4 <OSSemCreate>
   15a78:	1007883a 	mov	r3,r2
   15a7c:	e0bff517 	ldw	r2,-44(fp)
   15a80:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15a84:	e0bff917 	ldw	r2,-28(fp)
   15a88:	10800b04 	addi	r2,r2,44
   15a8c:	e0bff615 	stw	r2,-40(fp)
   15a90:	00800044 	movi	r2,1
   15a94:	e0bff70d 	sth	r2,-36(fp)
   15a98:	e0bff70b 	ldhu	r2,-36(fp)
   15a9c:	1009883a 	mov	r4,r2
   15aa0:	00131c40 	call	131c4 <OSSemCreate>
   15aa4:	1007883a 	mov	r3,r2
   15aa8:	e0bff617 	ldw	r2,-40(fp)
   15aac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15ab0:	e0bff917 	ldw	r2,-28(fp)
   15ab4:	00c00044 	movi	r3,1
   15ab8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15abc:	e0bff917 	ldw	r2,-28(fp)
   15ac0:	10800017 	ldw	r2,0(r2)
   15ac4:	10800104 	addi	r2,r2,4
   15ac8:	1007883a 	mov	r3,r2
   15acc:	e0bff917 	ldw	r2,-28(fp)
   15ad0:	10800817 	ldw	r2,32(r2)
   15ad4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   15ad8:	e0bffa17 	ldw	r2,-24(fp)
   15adc:	e0fffb17 	ldw	r3,-20(fp)
   15ae0:	d8000015 	stw	zero,0(sp)
   15ae4:	e1fff917 	ldw	r7,-28(fp)
   15ae8:	01800074 	movhi	r6,1
   15aec:	3196d504 	addi	r6,r6,23380
   15af0:	180b883a 	mov	r5,r3
   15af4:	1009883a 	mov	r4,r2
   15af8:	00169d40 	call	169d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15afc:	e0bff917 	ldw	r2,-28(fp)
   15b00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15b04:	e0bff917 	ldw	r2,-28(fp)
   15b08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15b0c:	d0e73117 	ldw	r3,-25404(gp)
   15b10:	e1fff917 	ldw	r7,-28(fp)
   15b14:	01800074 	movhi	r6,1
   15b18:	31977e04 	addi	r6,r6,24056
   15b1c:	180b883a 	mov	r5,r3
   15b20:	1009883a 	mov	r4,r2
   15b24:	00166c80 	call	166c8 <alt_alarm_start>
   15b28:	1000040e 	bge	r2,zero,15b3c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15b2c:	e0fff917 	ldw	r3,-28(fp)
   15b30:	00a00034 	movhi	r2,32768
   15b34:	10bfffc4 	addi	r2,r2,-1
   15b38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15b3c:	0001883a 	nop
   15b40:	e037883a 	mov	sp,fp
   15b44:	dfc00117 	ldw	ra,4(sp)
   15b48:	df000017 	ldw	fp,0(sp)
   15b4c:	dec00204 	addi	sp,sp,8
   15b50:	f800283a 	ret

00015b54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15b54:	defff204 	addi	sp,sp,-56
   15b58:	dfc00d15 	stw	ra,52(sp)
   15b5c:	df000c15 	stw	fp,48(sp)
   15b60:	df000c04 	addi	fp,sp,48
   15b64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15b68:	e0bfff17 	ldw	r2,-4(fp)
   15b6c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   15b70:	e0bff617 	ldw	r2,-40(fp)
   15b74:	10800017 	ldw	r2,0(r2)
   15b78:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15b7c:	e0bff717 	ldw	r2,-36(fp)
   15b80:	10800104 	addi	r2,r2,4
   15b84:	10800037 	ldwio	r2,0(r2)
   15b88:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15b8c:	e0bff817 	ldw	r2,-32(fp)
   15b90:	1080c00c 	andi	r2,r2,768
   15b94:	10009126 	beq	r2,zero,15ddc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15b98:	e0bff817 	ldw	r2,-32(fp)
   15b9c:	1080400c 	andi	r2,r2,256
   15ba0:	10004726 	beq	r2,zero,15cc0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15ba4:	00800074 	movhi	r2,1
   15ba8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15bac:	e0bff617 	ldw	r2,-40(fp)
   15bb0:	10800d17 	ldw	r2,52(r2)
   15bb4:	10800044 	addi	r2,r2,1
   15bb8:	1081ffcc 	andi	r2,r2,2047
   15bbc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   15bc0:	e0bff617 	ldw	r2,-40(fp)
   15bc4:	10c00e17 	ldw	r3,56(r2)
   15bc8:	e0bff917 	ldw	r2,-28(fp)
   15bcc:	18802726 	beq	r3,r2,15c6c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15bd0:	e0bff717 	ldw	r2,-36(fp)
   15bd4:	10800037 	ldwio	r2,0(r2)
   15bd8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15bdc:	e0bff417 	ldw	r2,-48(fp)
   15be0:	10a0000c 	andi	r2,r2,32768
   15be4:	10002326 	beq	r2,zero,15c74 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15be8:	e0bff617 	ldw	r2,-40(fp)
   15bec:	10800d17 	ldw	r2,52(r2)
   15bf0:	e0fff417 	ldw	r3,-48(fp)
   15bf4:	1809883a 	mov	r4,r3
   15bf8:	e0fff617 	ldw	r3,-40(fp)
   15bfc:	1885883a 	add	r2,r3,r2
   15c00:	10801104 	addi	r2,r2,68
   15c04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15c08:	e0bff617 	ldw	r2,-40(fp)
   15c0c:	10800d17 	ldw	r2,52(r2)
   15c10:	10800044 	addi	r2,r2,1
   15c14:	10c1ffcc 	andi	r3,r2,2047
   15c18:	e0bff617 	ldw	r2,-40(fp)
   15c1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15c20:	e0bff617 	ldw	r2,-40(fp)
   15c24:	10800c17 	ldw	r2,48(r2)
   15c28:	e0bffb15 	stw	r2,-20(fp)
   15c2c:	00800044 	movi	r2,1
   15c30:	e0bffc0d 	sth	r2,-16(fp)
   15c34:	00800044 	movi	r2,1
   15c38:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15c3c:	d0a71c43 	ldbu	r2,-25487(gp)
   15c40:	10803fcc 	andi	r2,r2,255
   15c44:	103fd926 	beq	r2,zero,15bac <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
   15c48:	e0bffc0b 	ldhu	r2,-16(fp)
   15c4c:	e0fffc83 	ldbu	r3,-14(fp)
   15c50:	e13ffdc4 	addi	r4,fp,-9
   15c54:	200f883a 	mov	r7,r4
   15c58:	180d883a 	mov	r6,r3
   15c5c:	100b883a 	mov	r5,r2
   15c60:	e13ffb17 	ldw	r4,-20(fp)
   15c64:	001108c0 	call	1108c <OSFlagPost>
      }
   15c68:	003fd006 	br	15bac <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15c6c:	0001883a 	nop
   15c70:	00000106 	br	15c78 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15c74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15c78:	e0bff417 	ldw	r2,-48(fp)
   15c7c:	10bfffec 	andhi	r2,r2,65535
   15c80:	10000f26 	beq	r2,zero,15cc0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15c84:	e0bff617 	ldw	r2,-40(fp)
   15c88:	10c00817 	ldw	r3,32(r2)
   15c8c:	00bfff84 	movi	r2,-2
   15c90:	1886703a 	and	r3,r3,r2
   15c94:	e0bff617 	ldw	r2,-40(fp)
   15c98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15c9c:	e0bff717 	ldw	r2,-36(fp)
   15ca0:	10800104 	addi	r2,r2,4
   15ca4:	1007883a 	mov	r3,r2
   15ca8:	e0bff617 	ldw	r2,-40(fp)
   15cac:	10800817 	ldw	r2,32(r2)
   15cb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15cb4:	e0bff717 	ldw	r2,-36(fp)
   15cb8:	10800104 	addi	r2,r2,4
   15cbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15cc0:	e0bff817 	ldw	r2,-32(fp)
   15cc4:	1080800c 	andi	r2,r2,512
   15cc8:	103fac26 	beq	r2,zero,15b7c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15ccc:	e0bff817 	ldw	r2,-32(fp)
   15cd0:	1004d43a 	srli	r2,r2,16
   15cd4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15cd8:	00002606 	br	15d74 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15cdc:	e0bff717 	ldw	r2,-36(fp)
   15ce0:	e0fff617 	ldw	r3,-40(fp)
   15ce4:	18c01017 	ldw	r3,64(r3)
   15ce8:	e13ff617 	ldw	r4,-40(fp)
   15cec:	20c7883a 	add	r3,r4,r3
   15cf0:	18c21104 	addi	r3,r3,2116
   15cf4:	18c00003 	ldbu	r3,0(r3)
   15cf8:	18c03fcc 	andi	r3,r3,255
   15cfc:	18c0201c 	xori	r3,r3,128
   15d00:	18ffe004 	addi	r3,r3,-128
   15d04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15d08:	e0bff617 	ldw	r2,-40(fp)
   15d0c:	10801017 	ldw	r2,64(r2)
   15d10:	10800044 	addi	r2,r2,1
   15d14:	10c1ffcc 	andi	r3,r2,2047
   15d18:	e0bff617 	ldw	r2,-40(fp)
   15d1c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15d20:	e0bff617 	ldw	r2,-40(fp)
   15d24:	10800c17 	ldw	r2,48(r2)
   15d28:	e0bffa15 	stw	r2,-24(fp)
   15d2c:	00800084 	movi	r2,2
   15d30:	e0bffd0d 	sth	r2,-12(fp)
   15d34:	00800044 	movi	r2,1
   15d38:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15d3c:	d0a71c43 	ldbu	r2,-25487(gp)
   15d40:	10803fcc 	andi	r2,r2,255
   15d44:	10000826 	beq	r2,zero,15d68 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   15d48:	e0bffd0b 	ldhu	r2,-12(fp)
   15d4c:	e0fffd83 	ldbu	r3,-10(fp)
   15d50:	e13ffe04 	addi	r4,fp,-8
   15d54:	200f883a 	mov	r7,r4
   15d58:	180d883a 	mov	r6,r3
   15d5c:	100b883a 	mov	r5,r2
   15d60:	e13ffa17 	ldw	r4,-24(fp)
   15d64:	001108c0 	call	1108c <OSFlagPost>

        space--;
   15d68:	e0bff517 	ldw	r2,-44(fp)
   15d6c:	10bfffc4 	addi	r2,r2,-1
   15d70:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15d74:	e0bff517 	ldw	r2,-44(fp)
   15d78:	10000526 	beq	r2,zero,15d90 <altera_avalon_jtag_uart_irq+0x23c>
   15d7c:	e0bff617 	ldw	r2,-40(fp)
   15d80:	10c01017 	ldw	r3,64(r2)
   15d84:	e0bff617 	ldw	r2,-40(fp)
   15d88:	10800f17 	ldw	r2,60(r2)
   15d8c:	18bfd31e 	bne	r3,r2,15cdc <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   15d90:	e0bff517 	ldw	r2,-44(fp)
   15d94:	103f7926 	beq	r2,zero,15b7c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15d98:	e0bff617 	ldw	r2,-40(fp)
   15d9c:	10c00817 	ldw	r3,32(r2)
   15da0:	00bfff44 	movi	r2,-3
   15da4:	1886703a 	and	r3,r3,r2
   15da8:	e0bff617 	ldw	r2,-40(fp)
   15dac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15db0:	e0bff617 	ldw	r2,-40(fp)
   15db4:	10800017 	ldw	r2,0(r2)
   15db8:	10800104 	addi	r2,r2,4
   15dbc:	1007883a 	mov	r3,r2
   15dc0:	e0bff617 	ldw	r2,-40(fp)
   15dc4:	10800817 	ldw	r2,32(r2)
   15dc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15dcc:	e0bff717 	ldw	r2,-36(fp)
   15dd0:	10800104 	addi	r2,r2,4
   15dd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15dd8:	003f6806 	br	15b7c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   15ddc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   15de0:	0001883a 	nop
   15de4:	e037883a 	mov	sp,fp
   15de8:	dfc00117 	ldw	ra,4(sp)
   15dec:	df000017 	ldw	fp,0(sp)
   15df0:	dec00204 	addi	sp,sp,8
   15df4:	f800283a 	ret

00015df8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15df8:	defff904 	addi	sp,sp,-28
   15dfc:	dfc00615 	stw	ra,24(sp)
   15e00:	df000515 	stw	fp,20(sp)
   15e04:	df000504 	addi	fp,sp,20
   15e08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15e0c:	e0bfff17 	ldw	r2,-4(fp)
   15e10:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15e14:	e0bffb17 	ldw	r2,-20(fp)
   15e18:	10800017 	ldw	r2,0(r2)
   15e1c:	10800104 	addi	r2,r2,4
   15e20:	10800037 	ldwio	r2,0(r2)
   15e24:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15e28:	e0bffc17 	ldw	r2,-16(fp)
   15e2c:	1081000c 	andi	r2,r2,1024
   15e30:	10000b26 	beq	r2,zero,15e60 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15e34:	e0bffb17 	ldw	r2,-20(fp)
   15e38:	10800017 	ldw	r2,0(r2)
   15e3c:	10800104 	addi	r2,r2,4
   15e40:	1007883a 	mov	r3,r2
   15e44:	e0bffb17 	ldw	r2,-20(fp)
   15e48:	10800817 	ldw	r2,32(r2)
   15e4c:	10810014 	ori	r2,r2,1024
   15e50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15e54:	e0bffb17 	ldw	r2,-20(fp)
   15e58:	10000915 	stw	zero,36(r2)
   15e5c:	00002106 	br	15ee4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15e60:	e0bffb17 	ldw	r2,-20(fp)
   15e64:	10c00917 	ldw	r3,36(r2)
   15e68:	00a00034 	movhi	r2,32768
   15e6c:	10bfff04 	addi	r2,r2,-4
   15e70:	10c01c36 	bltu	r2,r3,15ee4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   15e74:	e0bffb17 	ldw	r2,-20(fp)
   15e78:	10800917 	ldw	r2,36(r2)
   15e7c:	10c00044 	addi	r3,r2,1
   15e80:	e0bffb17 	ldw	r2,-20(fp)
   15e84:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   15e88:	e0bffb17 	ldw	r2,-20(fp)
   15e8c:	10c00917 	ldw	r3,36(r2)
   15e90:	e0bffb17 	ldw	r2,-20(fp)
   15e94:	10800117 	ldw	r2,4(r2)
   15e98:	18801236 	bltu	r3,r2,15ee4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   15e9c:	e0bffb17 	ldw	r2,-20(fp)
   15ea0:	10800c17 	ldw	r2,48(r2)
   15ea4:	e0bffd15 	stw	r2,-12(fp)
   15ea8:	00800104 	movi	r2,4
   15eac:	e0bffe0d 	sth	r2,-8(fp)
   15eb0:	00800044 	movi	r2,1
   15eb4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15eb8:	d0a71c43 	ldbu	r2,-25487(gp)
   15ebc:	10803fcc 	andi	r2,r2,255
   15ec0:	10000826 	beq	r2,zero,15ee4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   15ec4:	e0bffe0b 	ldhu	r2,-8(fp)
   15ec8:	e0fffe83 	ldbu	r3,-6(fp)
   15ecc:	e13ffec4 	addi	r4,fp,-5
   15ed0:	200f883a 	mov	r7,r4
   15ed4:	180d883a 	mov	r6,r3
   15ed8:	100b883a 	mov	r5,r2
   15edc:	e13ffd17 	ldw	r4,-12(fp)
   15ee0:	001108c0 	call	1108c <OSFlagPost>
   15ee4:	d0a73117 	ldw	r2,-25404(gp)
    }
  }

  return alt_ticks_per_second();
}
   15ee8:	e037883a 	mov	sp,fp
   15eec:	dfc00117 	ldw	ra,4(sp)
   15ef0:	df000017 	ldw	fp,0(sp)
   15ef4:	dec00204 	addi	sp,sp,8
   15ef8:	f800283a 	ret

00015efc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15efc:	defffd04 	addi	sp,sp,-12
   15f00:	df000215 	stw	fp,8(sp)
   15f04:	df000204 	addi	fp,sp,8
   15f08:	e13ffe15 	stw	r4,-8(fp)
   15f0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15f10:	00000506 	br	15f28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15f14:	e0bfff17 	ldw	r2,-4(fp)
   15f18:	1090000c 	andi	r2,r2,16384
   15f1c:	10000226 	beq	r2,zero,15f28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15f20:	00bffd44 	movi	r2,-11
   15f24:	00000b06 	br	15f54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15f28:	e0bffe17 	ldw	r2,-8(fp)
   15f2c:	10c01017 	ldw	r3,64(r2)
   15f30:	e0bffe17 	ldw	r2,-8(fp)
   15f34:	10800f17 	ldw	r2,60(r2)
   15f38:	18800526 	beq	r3,r2,15f50 <altera_avalon_jtag_uart_close+0x54>
   15f3c:	e0bffe17 	ldw	r2,-8(fp)
   15f40:	10c00917 	ldw	r3,36(r2)
   15f44:	e0bffe17 	ldw	r2,-8(fp)
   15f48:	10800117 	ldw	r2,4(r2)
   15f4c:	18bff136 	bltu	r3,r2,15f14 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15f50:	0005883a 	mov	r2,zero
}
   15f54:	e037883a 	mov	sp,fp
   15f58:	df000017 	ldw	fp,0(sp)
   15f5c:	dec00104 	addi	sp,sp,4
   15f60:	f800283a 	ret

00015f64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15f64:	defffa04 	addi	sp,sp,-24
   15f68:	df000515 	stw	fp,20(sp)
   15f6c:	df000504 	addi	fp,sp,20
   15f70:	e13ffd15 	stw	r4,-12(fp)
   15f74:	e17ffe15 	stw	r5,-8(fp)
   15f78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15f7c:	00bff9c4 	movi	r2,-25
   15f80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15f84:	e0bffe17 	ldw	r2,-8(fp)
   15f88:	10da8060 	cmpeqi	r3,r2,27137
   15f8c:	1800031e 	bne	r3,zero,15f9c <altera_avalon_jtag_uart_ioctl+0x38>
   15f90:	109a80a0 	cmpeqi	r2,r2,27138
   15f94:	1000181e 	bne	r2,zero,15ff8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   15f98:	00002906 	br	16040 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15f9c:	e0bffd17 	ldw	r2,-12(fp)
   15fa0:	10c00117 	ldw	r3,4(r2)
   15fa4:	00a00034 	movhi	r2,32768
   15fa8:	10bfffc4 	addi	r2,r2,-1
   15fac:	18802126 	beq	r3,r2,16034 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   15fb0:	e0bfff17 	ldw	r2,-4(fp)
   15fb4:	10800017 	ldw	r2,0(r2)
   15fb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15fbc:	e0bffc17 	ldw	r2,-16(fp)
   15fc0:	10800090 	cmplti	r2,r2,2
   15fc4:	1000061e 	bne	r2,zero,15fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
   15fc8:	e0fffc17 	ldw	r3,-16(fp)
   15fcc:	00a00034 	movhi	r2,32768
   15fd0:	10bfffc4 	addi	r2,r2,-1
   15fd4:	18800226 	beq	r3,r2,15fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
   15fd8:	e0bffc17 	ldw	r2,-16(fp)
   15fdc:	00000206 	br	15fe8 <altera_avalon_jtag_uart_ioctl+0x84>
   15fe0:	00a00034 	movhi	r2,32768
   15fe4:	10bfff84 	addi	r2,r2,-2
   15fe8:	e0fffd17 	ldw	r3,-12(fp)
   15fec:	18800115 	stw	r2,4(r3)
      rc = 0;
   15ff0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15ff4:	00000f06 	br	16034 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15ff8:	e0bffd17 	ldw	r2,-12(fp)
   15ffc:	10c00117 	ldw	r3,4(r2)
   16000:	00a00034 	movhi	r2,32768
   16004:	10bfffc4 	addi	r2,r2,-1
   16008:	18800c26 	beq	r3,r2,1603c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1600c:	e0bffd17 	ldw	r2,-12(fp)
   16010:	10c00917 	ldw	r3,36(r2)
   16014:	e0bffd17 	ldw	r2,-12(fp)
   16018:	10800117 	ldw	r2,4(r2)
   1601c:	1885803a 	cmpltu	r2,r3,r2
   16020:	10c03fcc 	andi	r3,r2,255
   16024:	e0bfff17 	ldw	r2,-4(fp)
   16028:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1602c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16030:	00000206 	br	1603c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16034:	0001883a 	nop
   16038:	00000106 	br	16040 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1603c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16040:	e0bffb17 	ldw	r2,-20(fp)
}
   16044:	e037883a 	mov	sp,fp
   16048:	df000017 	ldw	fp,0(sp)
   1604c:	dec00104 	addi	sp,sp,4
   16050:	f800283a 	ret

00016054 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16054:	deffed04 	addi	sp,sp,-76
   16058:	dfc01215 	stw	ra,72(sp)
   1605c:	df001115 	stw	fp,68(sp)
   16060:	df001104 	addi	fp,sp,68
   16064:	e13ffc15 	stw	r4,-16(fp)
   16068:	e17ffd15 	stw	r5,-12(fp)
   1606c:	e1bffe15 	stw	r6,-8(fp)
   16070:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16074:	e0bffd17 	ldw	r2,-12(fp)
   16078:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1607c:	e0bffc17 	ldw	r2,-16(fp)
   16080:	10800a17 	ldw	r2,40(r2)
   16084:	e0bff815 	stw	r2,-32(fp)
   16088:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1608c:	e0bff90b 	ldhu	r2,-28(fp)
   16090:	e0fffb04 	addi	r3,fp,-20
   16094:	180d883a 	mov	r6,r3
   16098:	100b883a 	mov	r5,r2
   1609c:	e13ff817 	ldw	r4,-32(fp)
   160a0:	00134dc0 	call	134dc <OSSemPend>

  while (space > 0)
   160a4:	00006106 	br	1622c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   160a8:	e0bffc17 	ldw	r2,-16(fp)
   160ac:	10800d17 	ldw	r2,52(r2)
   160b0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   160b4:	e0bffc17 	ldw	r2,-16(fp)
   160b8:	10800e17 	ldw	r2,56(r2)
   160bc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   160c0:	e0fff317 	ldw	r3,-52(fp)
   160c4:	e0bff417 	ldw	r2,-48(fp)
   160c8:	18800536 	bltu	r3,r2,160e0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   160cc:	e0fff317 	ldw	r3,-52(fp)
   160d0:	e0bff417 	ldw	r2,-48(fp)
   160d4:	1885c83a 	sub	r2,r3,r2
   160d8:	e0bff115 	stw	r2,-60(fp)
   160dc:	00000406 	br	160f0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   160e0:	00c20004 	movi	r3,2048
   160e4:	e0bff417 	ldw	r2,-48(fp)
   160e8:	1885c83a 	sub	r2,r3,r2
   160ec:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   160f0:	e0bff117 	ldw	r2,-60(fp)
   160f4:	10001e26 	beq	r2,zero,16170 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   160f8:	e0fffe17 	ldw	r3,-8(fp)
   160fc:	e0bff117 	ldw	r2,-60(fp)
   16100:	1880022e 	bgeu	r3,r2,1610c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16104:	e0bffe17 	ldw	r2,-8(fp)
   16108:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1610c:	e0bffc17 	ldw	r2,-16(fp)
   16110:	10c01104 	addi	r3,r2,68
   16114:	e0bff417 	ldw	r2,-48(fp)
   16118:	1885883a 	add	r2,r3,r2
   1611c:	e1bff117 	ldw	r6,-60(fp)
   16120:	100b883a 	mov	r5,r2
   16124:	e13ff017 	ldw	r4,-64(fp)
   16128:	000676c0 	call	676c <memcpy>
      ptr   += n;
   1612c:	e0fff017 	ldw	r3,-64(fp)
   16130:	e0bff117 	ldw	r2,-60(fp)
   16134:	1885883a 	add	r2,r3,r2
   16138:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1613c:	e0fffe17 	ldw	r3,-8(fp)
   16140:	e0bff117 	ldw	r2,-60(fp)
   16144:	1885c83a 	sub	r2,r3,r2
   16148:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1614c:	e0fff417 	ldw	r3,-48(fp)
   16150:	e0bff117 	ldw	r2,-60(fp)
   16154:	1885883a 	add	r2,r3,r2
   16158:	10c1ffcc 	andi	r3,r2,2047
   1615c:	e0bffc17 	ldw	r2,-16(fp)
   16160:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16164:	e0bffe17 	ldw	r2,-8(fp)
   16168:	00bfcf16 	blt	zero,r2,160a8 <altera_avalon_jtag_uart_read+0x54>
   1616c:	00000106 	br	16174 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16170:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16174:	e0fff017 	ldw	r3,-64(fp)
   16178:	e0bffd17 	ldw	r2,-12(fp)
   1617c:	18802e1e 	bne	r3,r2,16238 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16180:	e0bfff17 	ldw	r2,-4(fp)
   16184:	1090000c 	andi	r2,r2,16384
   16188:	10002d1e 	bne	r2,zero,16240 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1618c:	d0a71c43 	ldbu	r2,-25487(gp)
   16190:	10803fcc 	andi	r2,r2,255
   16194:	10800058 	cmpnei	r2,r2,1
   16198:	1000161e 	bne	r2,zero,161f4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1619c:	e0bffc17 	ldw	r2,-16(fp)
   161a0:	10800c17 	ldw	r2,48(r2)
   161a4:	e0bff215 	stw	r2,-56(fp)
   161a8:	00800144 	movi	r2,5
   161ac:	e0bff98d 	sth	r2,-26(fp)
   161b0:	00bfe0c4 	movi	r2,-125
   161b4:	e0bffa05 	stb	r2,-24(fp)
   161b8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   161bc:	d0a71c43 	ldbu	r2,-25487(gp)
   161c0:	10803fcc 	andi	r2,r2,255
   161c4:	10001526 	beq	r2,zero,1621c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   161c8:	e0fff98b 	ldhu	r3,-26(fp)
   161cc:	e13ffa03 	ldbu	r4,-24(fp)
   161d0:	e17ffa8b 	ldhu	r5,-22(fp)
   161d4:	e0bffb44 	addi	r2,fp,-19
   161d8:	d8800015 	stw	r2,0(sp)
   161dc:	280f883a 	mov	r7,r5
   161e0:	200d883a 	mov	r6,r4
   161e4:	180b883a 	mov	r5,r3
   161e8:	e13ff217 	ldw	r4,-56(fp)
   161ec:	0010a740 	call	10a74 <OSFlagPend>
   161f0:	00000a06 	br	1621c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   161f4:	0001883a 	nop
   161f8:	e0bffc17 	ldw	r2,-16(fp)
   161fc:	10c00d17 	ldw	r3,52(r2)
   16200:	e0bff317 	ldw	r2,-52(fp)
   16204:	1880051e 	bne	r3,r2,1621c <altera_avalon_jtag_uart_read+0x1c8>
   16208:	e0bffc17 	ldw	r2,-16(fp)
   1620c:	10c00917 	ldw	r3,36(r2)
   16210:	e0bffc17 	ldw	r2,-16(fp)
   16214:	10800117 	ldw	r2,4(r2)
   16218:	18bff736 	bltu	r3,r2,161f8 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1621c:	e0bffc17 	ldw	r2,-16(fp)
   16220:	10c00d17 	ldw	r3,52(r2)
   16224:	e0bff317 	ldw	r2,-52(fp)
   16228:	18800726 	beq	r3,r2,16248 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1622c:	e0bffe17 	ldw	r2,-8(fp)
   16230:	00bf9d16 	blt	zero,r2,160a8 <altera_avalon_jtag_uart_read+0x54>
   16234:	00000506 	br	1624c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16238:	0001883a 	nop
   1623c:	00000306 	br	1624c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16240:	0001883a 	nop
   16244:	00000106 	br	1624c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16248:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1624c:	e0bffc17 	ldw	r2,-16(fp)
   16250:	10800a17 	ldw	r2,40(r2)
   16254:	1009883a 	mov	r4,r2
   16258:	00138540 	call	13854 <OSSemPost>

  if (ptr != buffer)
   1625c:	e0fff017 	ldw	r3,-64(fp)
   16260:	e0bffd17 	ldw	r2,-12(fp)
   16264:	18801826 	beq	r3,r2,162c8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16268:	0005303a 	rdctl	r2,status
   1626c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16270:	e0fff717 	ldw	r3,-36(fp)
   16274:	00bfff84 	movi	r2,-2
   16278:	1884703a 	and	r2,r3,r2
   1627c:	1001703a 	wrctl	status,r2
  
  return context;
   16280:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16284:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16288:	e0bffc17 	ldw	r2,-16(fp)
   1628c:	10800817 	ldw	r2,32(r2)
   16290:	10c00054 	ori	r3,r2,1
   16294:	e0bffc17 	ldw	r2,-16(fp)
   16298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1629c:	e0bffc17 	ldw	r2,-16(fp)
   162a0:	10800017 	ldw	r2,0(r2)
   162a4:	10800104 	addi	r2,r2,4
   162a8:	1007883a 	mov	r3,r2
   162ac:	e0bffc17 	ldw	r2,-16(fp)
   162b0:	10800817 	ldw	r2,32(r2)
   162b4:	18800035 	stwio	r2,0(r3)
   162b8:	e0bff617 	ldw	r2,-40(fp)
   162bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162c0:	e0bff517 	ldw	r2,-44(fp)
   162c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   162c8:	e0fff017 	ldw	r3,-64(fp)
   162cc:	e0bffd17 	ldw	r2,-12(fp)
   162d0:	18800426 	beq	r3,r2,162e4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   162d4:	e0fff017 	ldw	r3,-64(fp)
   162d8:	e0bffd17 	ldw	r2,-12(fp)
   162dc:	1885c83a 	sub	r2,r3,r2
   162e0:	00000606 	br	162fc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   162e4:	e0bfff17 	ldw	r2,-4(fp)
   162e8:	1090000c 	andi	r2,r2,16384
   162ec:	10000226 	beq	r2,zero,162f8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   162f0:	00bffd44 	movi	r2,-11
   162f4:	00000106 	br	162fc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   162f8:	00bffec4 	movi	r2,-5
}
   162fc:	e037883a 	mov	sp,fp
   16300:	dfc00117 	ldw	ra,4(sp)
   16304:	df000017 	ldw	fp,0(sp)
   16308:	dec00204 	addi	sp,sp,8
   1630c:	f800283a 	ret

00016310 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16310:	deffed04 	addi	sp,sp,-76
   16314:	dfc01215 	stw	ra,72(sp)
   16318:	df001115 	stw	fp,68(sp)
   1631c:	df001104 	addi	fp,sp,68
   16320:	e13ffc15 	stw	r4,-16(fp)
   16324:	e17ffd15 	stw	r5,-12(fp)
   16328:	e1bffe15 	stw	r6,-8(fp)
   1632c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16330:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16334:	e0bffd17 	ldw	r2,-12(fp)
   16338:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1633c:	e0bffc17 	ldw	r2,-16(fp)
   16340:	10800b17 	ldw	r2,44(r2)
   16344:	e0bff815 	stw	r2,-32(fp)
   16348:	e03ff90d 	sth	zero,-28(fp)
   1634c:	e0bff90b 	ldhu	r2,-28(fp)
   16350:	e0fffb44 	addi	r3,fp,-19
   16354:	180d883a 	mov	r6,r3
   16358:	100b883a 	mov	r5,r2
   1635c:	e13ff817 	ldw	r4,-32(fp)
   16360:	00134dc0 	call	134dc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16364:	00003706 	br	16444 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16368:	e0bffc17 	ldw	r2,-16(fp)
   1636c:	10800f17 	ldw	r2,60(r2)
   16370:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   16374:	e0bffc17 	ldw	r2,-16(fp)
   16378:	10801017 	ldw	r2,64(r2)
   1637c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16380:	e0fff417 	ldw	r3,-48(fp)
   16384:	e0bff017 	ldw	r2,-64(fp)
   16388:	1880062e 	bgeu	r3,r2,163a4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1638c:	e0fff017 	ldw	r3,-64(fp)
   16390:	e0bff417 	ldw	r2,-48(fp)
   16394:	1885c83a 	sub	r2,r3,r2
   16398:	10bfffc4 	addi	r2,r2,-1
   1639c:	e0bff115 	stw	r2,-60(fp)
   163a0:	00000b06 	br	163d0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   163a4:	e0bff017 	ldw	r2,-64(fp)
   163a8:	10000526 	beq	r2,zero,163c0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   163ac:	00c20004 	movi	r3,2048
   163b0:	e0bff417 	ldw	r2,-48(fp)
   163b4:	1885c83a 	sub	r2,r3,r2
   163b8:	e0bff115 	stw	r2,-60(fp)
   163bc:	00000406 	br	163d0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   163c0:	00c1ffc4 	movi	r3,2047
   163c4:	e0bff417 	ldw	r2,-48(fp)
   163c8:	1885c83a 	sub	r2,r3,r2
   163cc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   163d0:	e0bff117 	ldw	r2,-60(fp)
   163d4:	10001e26 	beq	r2,zero,16450 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   163d8:	e0fffe17 	ldw	r3,-8(fp)
   163dc:	e0bff117 	ldw	r2,-60(fp)
   163e0:	1880022e 	bgeu	r3,r2,163ec <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   163e4:	e0bffe17 	ldw	r2,-8(fp)
   163e8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   163ec:	e0bffc17 	ldw	r2,-16(fp)
   163f0:	10c21104 	addi	r3,r2,2116
   163f4:	e0bff417 	ldw	r2,-48(fp)
   163f8:	1885883a 	add	r2,r3,r2
   163fc:	e1bff117 	ldw	r6,-60(fp)
   16400:	e17ffd17 	ldw	r5,-12(fp)
   16404:	1009883a 	mov	r4,r2
   16408:	000676c0 	call	676c <memcpy>
      ptr   += n;
   1640c:	e0fffd17 	ldw	r3,-12(fp)
   16410:	e0bff117 	ldw	r2,-60(fp)
   16414:	1885883a 	add	r2,r3,r2
   16418:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1641c:	e0fffe17 	ldw	r3,-8(fp)
   16420:	e0bff117 	ldw	r2,-60(fp)
   16424:	1885c83a 	sub	r2,r3,r2
   16428:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1642c:	e0fff417 	ldw	r3,-48(fp)
   16430:	e0bff117 	ldw	r2,-60(fp)
   16434:	1885883a 	add	r2,r3,r2
   16438:	10c1ffcc 	andi	r3,r2,2047
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16444:	e0bffe17 	ldw	r2,-8(fp)
   16448:	00bfc716 	blt	zero,r2,16368 <altera_avalon_jtag_uart_write+0x58>
   1644c:	00000106 	br	16454 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16450:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16454:	0005303a 	rdctl	r2,status
   16458:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1645c:	e0fff717 	ldw	r3,-36(fp)
   16460:	00bfff84 	movi	r2,-2
   16464:	1884703a 	and	r2,r3,r2
   16468:	1001703a 	wrctl	status,r2
  
  return context;
   1646c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16470:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16474:	e0bffc17 	ldw	r2,-16(fp)
   16478:	10800817 	ldw	r2,32(r2)
   1647c:	10c00094 	ori	r3,r2,2
   16480:	e0bffc17 	ldw	r2,-16(fp)
   16484:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16488:	e0bffc17 	ldw	r2,-16(fp)
   1648c:	10800017 	ldw	r2,0(r2)
   16490:	10800104 	addi	r2,r2,4
   16494:	1007883a 	mov	r3,r2
   16498:	e0bffc17 	ldw	r2,-16(fp)
   1649c:	10800817 	ldw	r2,32(r2)
   164a0:	18800035 	stwio	r2,0(r3)
   164a4:	e0bff617 	ldw	r2,-40(fp)
   164a8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164ac:	e0bff317 	ldw	r2,-52(fp)
   164b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   164b4:	e0bffe17 	ldw	r2,-8(fp)
   164b8:	00802a0e 	bge	zero,r2,16564 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   164bc:	e0bfff17 	ldw	r2,-4(fp)
   164c0:	1090000c 	andi	r2,r2,16384
   164c4:	10002a1e 	bne	r2,zero,16570 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   164c8:	d0a71c43 	ldbu	r2,-25487(gp)
   164cc:	10803fcc 	andi	r2,r2,255
   164d0:	10800058 	cmpnei	r2,r2,1
   164d4:	1000161e 	bne	r2,zero,16530 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   164d8:	e0bffc17 	ldw	r2,-16(fp)
   164dc:	10800c17 	ldw	r2,48(r2)
   164e0:	e0bff515 	stw	r2,-44(fp)
   164e4:	00800184 	movi	r2,6
   164e8:	e0bff98d 	sth	r2,-26(fp)
   164ec:	00bfe0c4 	movi	r2,-125
   164f0:	e0bffa05 	stb	r2,-24(fp)
   164f4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   164f8:	d0a71c43 	ldbu	r2,-25487(gp)
   164fc:	10803fcc 	andi	r2,r2,255
   16500:	10001526 	beq	r2,zero,16558 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16504:	e0fff98b 	ldhu	r3,-26(fp)
   16508:	e13ffa03 	ldbu	r4,-24(fp)
   1650c:	e17ffa8b 	ldhu	r5,-22(fp)
   16510:	e0bffb04 	addi	r2,fp,-20
   16514:	d8800015 	stw	r2,0(sp)
   16518:	280f883a 	mov	r7,r5
   1651c:	200d883a 	mov	r6,r4
   16520:	180b883a 	mov	r5,r3
   16524:	e13ff517 	ldw	r4,-44(fp)
   16528:	0010a740 	call	10a74 <OSFlagPend>
   1652c:	00000a06 	br	16558 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16530:	0001883a 	nop
   16534:	e0bffc17 	ldw	r2,-16(fp)
   16538:	10c01017 	ldw	r3,64(r2)
   1653c:	e0bff017 	ldw	r2,-64(fp)
   16540:	1880051e 	bne	r3,r2,16558 <altera_avalon_jtag_uart_write+0x248>
   16544:	e0bffc17 	ldw	r2,-16(fp)
   16548:	10c00917 	ldw	r3,36(r2)
   1654c:	e0bffc17 	ldw	r2,-16(fp)
   16550:	10800117 	ldw	r2,4(r2)
   16554:	18bff736 	bltu	r3,r2,16534 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16558:	e0bffc17 	ldw	r2,-16(fp)
   1655c:	10800917 	ldw	r2,36(r2)
   16560:	1000051e 	bne	r2,zero,16578 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16564:	e0bffe17 	ldw	r2,-8(fp)
   16568:	00bfb616 	blt	zero,r2,16444 <altera_avalon_jtag_uart_write+0x134>
   1656c:	00000306 	br	1657c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16570:	0001883a 	nop
   16574:	00000106 	br	1657c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16578:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1657c:	e0bffc17 	ldw	r2,-16(fp)
   16580:	10800b17 	ldw	r2,44(r2)
   16584:	1009883a 	mov	r4,r2
   16588:	00138540 	call	13854 <OSSemPost>

  if (ptr != start)
   1658c:	e0fffd17 	ldw	r3,-12(fp)
   16590:	e0bff217 	ldw	r2,-56(fp)
   16594:	18800426 	beq	r3,r2,165a8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   16598:	e0fffd17 	ldw	r3,-12(fp)
   1659c:	e0bff217 	ldw	r2,-56(fp)
   165a0:	1885c83a 	sub	r2,r3,r2
   165a4:	00000606 	br	165c0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   165a8:	e0bfff17 	ldw	r2,-4(fp)
   165ac:	1090000c 	andi	r2,r2,16384
   165b0:	10000226 	beq	r2,zero,165bc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   165b4:	00bffd44 	movi	r2,-11
   165b8:	00000106 	br	165c0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   165bc:	00bffec4 	movi	r2,-5
}
   165c0:	e037883a 	mov	sp,fp
   165c4:	dfc00117 	ldw	ra,4(sp)
   165c8:	df000017 	ldw	fp,0(sp)
   165cc:	dec00204 	addi	sp,sp,8
   165d0:	f800283a 	ret

000165d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   165d4:	defffa04 	addi	sp,sp,-24
   165d8:	dfc00515 	stw	ra,20(sp)
   165dc:	df000415 	stw	fp,16(sp)
   165e0:	df000404 	addi	fp,sp,16
   165e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   165e8:	0007883a 	mov	r3,zero
   165ec:	e0bfff17 	ldw	r2,-4(fp)
   165f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   165f4:	e0bfff17 	ldw	r2,-4(fp)
   165f8:	10800104 	addi	r2,r2,4
   165fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16600:	0005303a 	rdctl	r2,status
   16604:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16608:	e0fffd17 	ldw	r3,-12(fp)
   1660c:	00bfff84 	movi	r2,-2
   16610:	1884703a 	and	r2,r3,r2
   16614:	1001703a 	wrctl	status,r2
  
  return context;
   16618:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1661c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   16620:	00170a40 	call	170a4 <alt_tick>
   16624:	e0bffc17 	ldw	r2,-16(fp)
   16628:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1662c:	e0bffe17 	ldw	r2,-8(fp)
   16630:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16634:	0001883a 	nop
   16638:	e037883a 	mov	sp,fp
   1663c:	dfc00117 	ldw	ra,4(sp)
   16640:	df000017 	ldw	fp,0(sp)
   16644:	dec00204 	addi	sp,sp,8
   16648:	f800283a 	ret

0001664c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1664c:	defff804 	addi	sp,sp,-32
   16650:	dfc00715 	stw	ra,28(sp)
   16654:	df000615 	stw	fp,24(sp)
   16658:	df000604 	addi	fp,sp,24
   1665c:	e13ffc15 	stw	r4,-16(fp)
   16660:	e17ffd15 	stw	r5,-12(fp)
   16664:	e1bffe15 	stw	r6,-8(fp)
   16668:	e1ffff15 	stw	r7,-4(fp)
   1666c:	e0bfff17 	ldw	r2,-4(fp)
   16670:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16674:	d0a73117 	ldw	r2,-25404(gp)
   16678:	1000021e 	bne	r2,zero,16684 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1667c:	e0bffb17 	ldw	r2,-20(fp)
   16680:	d0a73115 	stw	r2,-25404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16684:	e0bffc17 	ldw	r2,-16(fp)
   16688:	10800104 	addi	r2,r2,4
   1668c:	00c001c4 	movi	r3,7
   16690:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   16694:	d8000015 	stw	zero,0(sp)
   16698:	e1fffc17 	ldw	r7,-16(fp)
   1669c:	01800074 	movhi	r6,1
   166a0:	31997504 	addi	r6,r6,26068
   166a4:	e17ffe17 	ldw	r5,-8(fp)
   166a8:	e13ffd17 	ldw	r4,-12(fp)
   166ac:	00169d40 	call	169d4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   166b0:	0001883a 	nop
   166b4:	e037883a 	mov	sp,fp
   166b8:	dfc00117 	ldw	ra,4(sp)
   166bc:	df000017 	ldw	fp,0(sp)
   166c0:	dec00204 	addi	sp,sp,8
   166c4:	f800283a 	ret

000166c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   166c8:	defff504 	addi	sp,sp,-44
   166cc:	df000a15 	stw	fp,40(sp)
   166d0:	df000a04 	addi	fp,sp,40
   166d4:	e13ffc15 	stw	r4,-16(fp)
   166d8:	e17ffd15 	stw	r5,-12(fp)
   166dc:	e1bffe15 	stw	r6,-8(fp)
   166e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   166e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   166e8:	d0a73117 	ldw	r2,-25404(gp)
  
  if (alt_ticks_per_second ())
   166ec:	10003c26 	beq	r2,zero,167e0 <alt_alarm_start+0x118>
  {
    if (alarm)
   166f0:	e0bffc17 	ldw	r2,-16(fp)
   166f4:	10003826 	beq	r2,zero,167d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   166f8:	e0bffc17 	ldw	r2,-16(fp)
   166fc:	e0fffe17 	ldw	r3,-8(fp)
   16700:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16704:	e0bffc17 	ldw	r2,-16(fp)
   16708:	e0ffff17 	ldw	r3,-4(fp)
   1670c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16710:	0005303a 	rdctl	r2,status
   16714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16718:	e0fff917 	ldw	r3,-28(fp)
   1671c:	00bfff84 	movi	r2,-2
   16720:	1884703a 	and	r2,r3,r2
   16724:	1001703a 	wrctl	status,r2
  
  return context;
   16728:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1672c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16730:	d0a73217 	ldw	r2,-25400(gp)
      
      current_nticks = alt_nticks();
   16734:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16738:	e0fffd17 	ldw	r3,-12(fp)
   1673c:	e0bff617 	ldw	r2,-40(fp)
   16740:	1885883a 	add	r2,r3,r2
   16744:	10c00044 	addi	r3,r2,1
   16748:	e0bffc17 	ldw	r2,-16(fp)
   1674c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16750:	e0bffc17 	ldw	r2,-16(fp)
   16754:	10c00217 	ldw	r3,8(r2)
   16758:	e0bff617 	ldw	r2,-40(fp)
   1675c:	1880042e 	bgeu	r3,r2,16770 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16760:	e0bffc17 	ldw	r2,-16(fp)
   16764:	00c00044 	movi	r3,1
   16768:	10c00405 	stb	r3,16(r2)
   1676c:	00000206 	br	16778 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16770:	e0bffc17 	ldw	r2,-16(fp)
   16774:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16778:	e0bffc17 	ldw	r2,-16(fp)
   1677c:	d0e02d04 	addi	r3,gp,-32588
   16780:	e0fffa15 	stw	r3,-24(fp)
   16784:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16788:	e0bffb17 	ldw	r2,-20(fp)
   1678c:	e0fffa17 	ldw	r3,-24(fp)
   16790:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16794:	e0bffa17 	ldw	r2,-24(fp)
   16798:	10c00017 	ldw	r3,0(r2)
   1679c:	e0bffb17 	ldw	r2,-20(fp)
   167a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   167a4:	e0bffa17 	ldw	r2,-24(fp)
   167a8:	10800017 	ldw	r2,0(r2)
   167ac:	e0fffb17 	ldw	r3,-20(fp)
   167b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   167b4:	e0bffa17 	ldw	r2,-24(fp)
   167b8:	e0fffb17 	ldw	r3,-20(fp)
   167bc:	10c00015 	stw	r3,0(r2)
   167c0:	e0bff817 	ldw	r2,-32(fp)
   167c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167c8:	e0bff717 	ldw	r2,-36(fp)
   167cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   167d0:	0005883a 	mov	r2,zero
   167d4:	00000306 	br	167e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   167d8:	00bffa84 	movi	r2,-22
   167dc:	00000106 	br	167e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   167e0:	00bfde84 	movi	r2,-134
  }
}
   167e4:	e037883a 	mov	sp,fp
   167e8:	df000017 	ldw	fp,0(sp)
   167ec:	dec00104 	addi	sp,sp,4
   167f0:	f800283a 	ret

000167f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   167f4:	deffff04 	addi	sp,sp,-4
   167f8:	df000015 	stw	fp,0(sp)
   167fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16800:	0001883a 	nop
   16804:	e037883a 	mov	sp,fp
   16808:	df000017 	ldw	fp,0(sp)
   1680c:	dec00104 	addi	sp,sp,4
   16810:	f800283a 	ret

00016814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16814:	defffe04 	addi	sp,sp,-8
   16818:	dfc00115 	stw	ra,4(sp)
   1681c:	df000015 	stw	fp,0(sp)
   16820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16824:	d0a00b17 	ldw	r2,-32724(gp)
   16828:	10000326 	beq	r2,zero,16838 <alt_get_errno+0x24>
   1682c:	d0a00b17 	ldw	r2,-32724(gp)
   16830:	103ee83a 	callr	r2
   16834:	00000106 	br	1683c <alt_get_errno+0x28>
   16838:	d0a71004 	addi	r2,gp,-25536
}
   1683c:	e037883a 	mov	sp,fp
   16840:	dfc00117 	ldw	ra,4(sp)
   16844:	df000017 	ldw	fp,0(sp)
   16848:	dec00204 	addi	sp,sp,8
   1684c:	f800283a 	ret

00016850 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16850:	defffa04 	addi	sp,sp,-24
   16854:	dfc00515 	stw	ra,20(sp)
   16858:	df000415 	stw	fp,16(sp)
   1685c:	df000404 	addi	fp,sp,16
   16860:	e13ffe15 	stw	r4,-8(fp)
   16864:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16868:	e0bffe17 	ldw	r2,-8(fp)
   1686c:	10000326 	beq	r2,zero,1687c <alt_dev_llist_insert+0x2c>
   16870:	e0bffe17 	ldw	r2,-8(fp)
   16874:	10800217 	ldw	r2,8(r2)
   16878:	1000061e 	bne	r2,zero,16894 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1687c:	00168140 	call	16814 <alt_get_errno>
   16880:	1007883a 	mov	r3,r2
   16884:	00800584 	movi	r2,22
   16888:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1688c:	00bffa84 	movi	r2,-22
   16890:	00001306 	br	168e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16894:	e0bffe17 	ldw	r2,-8(fp)
   16898:	e0ffff17 	ldw	r3,-4(fp)
   1689c:	e0fffc15 	stw	r3,-16(fp)
   168a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   168a4:	e0bffd17 	ldw	r2,-12(fp)
   168a8:	e0fffc17 	ldw	r3,-16(fp)
   168ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   168b0:	e0bffc17 	ldw	r2,-16(fp)
   168b4:	10c00017 	ldw	r3,0(r2)
   168b8:	e0bffd17 	ldw	r2,-12(fp)
   168bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   168c0:	e0bffc17 	ldw	r2,-16(fp)
   168c4:	10800017 	ldw	r2,0(r2)
   168c8:	e0fffd17 	ldw	r3,-12(fp)
   168cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   168d0:	e0bffc17 	ldw	r2,-16(fp)
   168d4:	e0fffd17 	ldw	r3,-12(fp)
   168d8:	10c00015 	stw	r3,0(r2)

  return 0;  
   168dc:	0005883a 	mov	r2,zero
}
   168e0:	e037883a 	mov	sp,fp
   168e4:	dfc00117 	ldw	ra,4(sp)
   168e8:	df000017 	ldw	fp,0(sp)
   168ec:	dec00204 	addi	sp,sp,8
   168f0:	f800283a 	ret

000168f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   168f4:	defffd04 	addi	sp,sp,-12
   168f8:	dfc00215 	stw	ra,8(sp)
   168fc:	df000115 	stw	fp,4(sp)
   16900:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16904:	00800074 	movhi	r2,1
   16908:	109ef204 	addi	r2,r2,31688
   1690c:	e0bfff15 	stw	r2,-4(fp)
   16910:	00000606 	br	1692c <_do_ctors+0x38>
        (*ctor) (); 
   16914:	e0bfff17 	ldw	r2,-4(fp)
   16918:	10800017 	ldw	r2,0(r2)
   1691c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16920:	e0bfff17 	ldw	r2,-4(fp)
   16924:	10bfff04 	addi	r2,r2,-4
   16928:	e0bfff15 	stw	r2,-4(fp)
   1692c:	e0ffff17 	ldw	r3,-4(fp)
   16930:	00800074 	movhi	r2,1
   16934:	109ef304 	addi	r2,r2,31692
   16938:	18bff62e 	bgeu	r3,r2,16914 <_do_ctors+0x20>
        (*ctor) (); 
}
   1693c:	0001883a 	nop
   16940:	e037883a 	mov	sp,fp
   16944:	dfc00117 	ldw	ra,4(sp)
   16948:	df000017 	ldw	fp,0(sp)
   1694c:	dec00204 	addi	sp,sp,8
   16950:	f800283a 	ret

00016954 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16954:	defffd04 	addi	sp,sp,-12
   16958:	dfc00215 	stw	ra,8(sp)
   1695c:	df000115 	stw	fp,4(sp)
   16960:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16964:	00800074 	movhi	r2,1
   16968:	109ef204 	addi	r2,r2,31688
   1696c:	e0bfff15 	stw	r2,-4(fp)
   16970:	00000606 	br	1698c <_do_dtors+0x38>
        (*dtor) (); 
   16974:	e0bfff17 	ldw	r2,-4(fp)
   16978:	10800017 	ldw	r2,0(r2)
   1697c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16980:	e0bfff17 	ldw	r2,-4(fp)
   16984:	10bfff04 	addi	r2,r2,-4
   16988:	e0bfff15 	stw	r2,-4(fp)
   1698c:	e0ffff17 	ldw	r3,-4(fp)
   16990:	00800074 	movhi	r2,1
   16994:	109ef304 	addi	r2,r2,31692
   16998:	18bff62e 	bgeu	r3,r2,16974 <_do_dtors+0x20>
        (*dtor) (); 
}
   1699c:	0001883a 	nop
   169a0:	e037883a 	mov	sp,fp
   169a4:	dfc00117 	ldw	ra,4(sp)
   169a8:	df000017 	ldw	fp,0(sp)
   169ac:	dec00204 	addi	sp,sp,8
   169b0:	f800283a 	ret

000169b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   169b4:	deffff04 	addi	sp,sp,-4
   169b8:	df000015 	stw	fp,0(sp)
   169bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   169c0:	0001883a 	nop
   169c4:	e037883a 	mov	sp,fp
   169c8:	df000017 	ldw	fp,0(sp)
   169cc:	dec00104 	addi	sp,sp,4
   169d0:	f800283a 	ret

000169d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   169d4:	defff904 	addi	sp,sp,-28
   169d8:	dfc00615 	stw	ra,24(sp)
   169dc:	df000515 	stw	fp,20(sp)
   169e0:	df000504 	addi	fp,sp,20
   169e4:	e13ffc15 	stw	r4,-16(fp)
   169e8:	e17ffd15 	stw	r5,-12(fp)
   169ec:	e1bffe15 	stw	r6,-8(fp)
   169f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   169f4:	e0800217 	ldw	r2,8(fp)
   169f8:	d8800015 	stw	r2,0(sp)
   169fc:	e1ffff17 	ldw	r7,-4(fp)
   16a00:	e1bffe17 	ldw	r6,-8(fp)
   16a04:	e17ffd17 	ldw	r5,-12(fp)
   16a08:	e13ffc17 	ldw	r4,-16(fp)
   16a0c:	0016b840 	call	16b84 <alt_iic_isr_register>
}  
   16a10:	e037883a 	mov	sp,fp
   16a14:	dfc00117 	ldw	ra,4(sp)
   16a18:	df000017 	ldw	fp,0(sp)
   16a1c:	dec00204 	addi	sp,sp,8
   16a20:	f800283a 	ret

00016a24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   16a24:	defff904 	addi	sp,sp,-28
   16a28:	df000615 	stw	fp,24(sp)
   16a2c:	df000604 	addi	fp,sp,24
   16a30:	e13ffe15 	stw	r4,-8(fp)
   16a34:	e17fff15 	stw	r5,-4(fp)
   16a38:	e0bfff17 	ldw	r2,-4(fp)
   16a3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a40:	0005303a 	rdctl	r2,status
   16a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a48:	e0fffb17 	ldw	r3,-20(fp)
   16a4c:	00bfff84 	movi	r2,-2
   16a50:	1884703a 	and	r2,r3,r2
   16a54:	1001703a 	wrctl	status,r2
  
  return context;
   16a58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16a5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   16a60:	00c00044 	movi	r3,1
   16a64:	e0bffa17 	ldw	r2,-24(fp)
   16a68:	1884983a 	sll	r2,r3,r2
   16a6c:	1007883a 	mov	r3,r2
   16a70:	d0a73017 	ldw	r2,-25408(gp)
   16a74:	1884b03a 	or	r2,r3,r2
   16a78:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16a7c:	d0a73017 	ldw	r2,-25408(gp)
   16a80:	100170fa 	wrctl	ienable,r2
   16a84:	e0bffc17 	ldw	r2,-16(fp)
   16a88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a8c:	e0bffd17 	ldw	r2,-12(fp)
   16a90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16a94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   16a98:	0001883a 	nop
}
   16a9c:	e037883a 	mov	sp,fp
   16aa0:	df000017 	ldw	fp,0(sp)
   16aa4:	dec00104 	addi	sp,sp,4
   16aa8:	f800283a 	ret

00016aac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   16aac:	defff904 	addi	sp,sp,-28
   16ab0:	df000615 	stw	fp,24(sp)
   16ab4:	df000604 	addi	fp,sp,24
   16ab8:	e13ffe15 	stw	r4,-8(fp)
   16abc:	e17fff15 	stw	r5,-4(fp)
   16ac0:	e0bfff17 	ldw	r2,-4(fp)
   16ac4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ac8:	0005303a 	rdctl	r2,status
   16acc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ad0:	e0fffb17 	ldw	r3,-20(fp)
   16ad4:	00bfff84 	movi	r2,-2
   16ad8:	1884703a 	and	r2,r3,r2
   16adc:	1001703a 	wrctl	status,r2
  
  return context;
   16ae0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16ae4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   16ae8:	00c00044 	movi	r3,1
   16aec:	e0bffa17 	ldw	r2,-24(fp)
   16af0:	1884983a 	sll	r2,r3,r2
   16af4:	0084303a 	nor	r2,zero,r2
   16af8:	1007883a 	mov	r3,r2
   16afc:	d0a73017 	ldw	r2,-25408(gp)
   16b00:	1884703a 	and	r2,r3,r2
   16b04:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16b08:	d0a73017 	ldw	r2,-25408(gp)
   16b0c:	100170fa 	wrctl	ienable,r2
   16b10:	e0bffc17 	ldw	r2,-16(fp)
   16b14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b18:	e0bffd17 	ldw	r2,-12(fp)
   16b1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16b20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   16b24:	0001883a 	nop
}
   16b28:	e037883a 	mov	sp,fp
   16b2c:	df000017 	ldw	fp,0(sp)
   16b30:	dec00104 	addi	sp,sp,4
   16b34:	f800283a 	ret

00016b38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   16b38:	defffc04 	addi	sp,sp,-16
   16b3c:	df000315 	stw	fp,12(sp)
   16b40:	df000304 	addi	fp,sp,12
   16b44:	e13ffe15 	stw	r4,-8(fp)
   16b48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   16b4c:	000530fa 	rdctl	r2,ienable
   16b50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   16b54:	00c00044 	movi	r3,1
   16b58:	e0bfff17 	ldw	r2,-4(fp)
   16b5c:	1884983a 	sll	r2,r3,r2
   16b60:	1007883a 	mov	r3,r2
   16b64:	e0bffd17 	ldw	r2,-12(fp)
   16b68:	1884703a 	and	r2,r3,r2
   16b6c:	1004c03a 	cmpne	r2,r2,zero
   16b70:	10803fcc 	andi	r2,r2,255
}
   16b74:	e037883a 	mov	sp,fp
   16b78:	df000017 	ldw	fp,0(sp)
   16b7c:	dec00104 	addi	sp,sp,4
   16b80:	f800283a 	ret

00016b84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16b84:	defff504 	addi	sp,sp,-44
   16b88:	dfc00a15 	stw	ra,40(sp)
   16b8c:	df000915 	stw	fp,36(sp)
   16b90:	df000904 	addi	fp,sp,36
   16b94:	e13ffc15 	stw	r4,-16(fp)
   16b98:	e17ffd15 	stw	r5,-12(fp)
   16b9c:	e1bffe15 	stw	r6,-8(fp)
   16ba0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   16ba4:	00bffa84 	movi	r2,-22
   16ba8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   16bac:	e0bffd17 	ldw	r2,-12(fp)
   16bb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16bb4:	e0bff817 	ldw	r2,-32(fp)
   16bb8:	10800808 	cmpgei	r2,r2,32
   16bbc:	1000271e 	bne	r2,zero,16c5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bc0:	0005303a 	rdctl	r2,status
   16bc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bc8:	e0fffb17 	ldw	r3,-20(fp)
   16bcc:	00bfff84 	movi	r2,-2
   16bd0:	1884703a 	and	r2,r3,r2
   16bd4:	1001703a 	wrctl	status,r2
  
  return context;
   16bd8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   16bdc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   16be0:	008000b4 	movhi	r2,2
   16be4:	1086b904 	addi	r2,r2,6884
   16be8:	e0fff817 	ldw	r3,-32(fp)
   16bec:	180690fa 	slli	r3,r3,3
   16bf0:	10c5883a 	add	r2,r2,r3
   16bf4:	e0fffe17 	ldw	r3,-8(fp)
   16bf8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   16bfc:	008000b4 	movhi	r2,2
   16c00:	1086b904 	addi	r2,r2,6884
   16c04:	e0fff817 	ldw	r3,-32(fp)
   16c08:	180690fa 	slli	r3,r3,3
   16c0c:	10c5883a 	add	r2,r2,r3
   16c10:	10800104 	addi	r2,r2,4
   16c14:	e0ffff17 	ldw	r3,-4(fp)
   16c18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16c1c:	e0bffe17 	ldw	r2,-8(fp)
   16c20:	10000526 	beq	r2,zero,16c38 <alt_iic_isr_register+0xb4>
   16c24:	e0bff817 	ldw	r2,-32(fp)
   16c28:	100b883a 	mov	r5,r2
   16c2c:	e13ffc17 	ldw	r4,-16(fp)
   16c30:	0016a240 	call	16a24 <alt_ic_irq_enable>
   16c34:	00000406 	br	16c48 <alt_iic_isr_register+0xc4>
   16c38:	e0bff817 	ldw	r2,-32(fp)
   16c3c:	100b883a 	mov	r5,r2
   16c40:	e13ffc17 	ldw	r4,-16(fp)
   16c44:	0016aac0 	call	16aac <alt_ic_irq_disable>
   16c48:	e0bff715 	stw	r2,-36(fp)
   16c4c:	e0bffa17 	ldw	r2,-24(fp)
   16c50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c54:	e0bff917 	ldw	r2,-28(fp)
   16c58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   16c5c:	e0bff717 	ldw	r2,-36(fp)
}
   16c60:	e037883a 	mov	sp,fp
   16c64:	dfc00117 	ldw	ra,4(sp)
   16c68:	df000017 	ldw	fp,0(sp)
   16c6c:	dec00204 	addi	sp,sp,8
   16c70:	f800283a 	ret

00016c74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16c74:	defff904 	addi	sp,sp,-28
   16c78:	dfc00615 	stw	ra,24(sp)
   16c7c:	df000515 	stw	fp,20(sp)
   16c80:	df000504 	addi	fp,sp,20
   16c84:	e13ffc15 	stw	r4,-16(fp)
   16c88:	e17ffd15 	stw	r5,-12(fp)
   16c8c:	e1bffe15 	stw	r6,-8(fp)
   16c90:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   16c94:	e1bfff17 	ldw	r6,-4(fp)
   16c98:	e17ffe17 	ldw	r5,-8(fp)
   16c9c:	e13ffd17 	ldw	r4,-12(fp)
   16ca0:	0016eb40 	call	16eb4 <open>
   16ca4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   16ca8:	e0bffb17 	ldw	r2,-20(fp)
   16cac:	10001c16 	blt	r2,zero,16d20 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   16cb0:	008000b4 	movhi	r2,2
   16cb4:	10a27704 	addi	r2,r2,-30244
   16cb8:	e0fffb17 	ldw	r3,-20(fp)
   16cbc:	18c00324 	muli	r3,r3,12
   16cc0:	10c5883a 	add	r2,r2,r3
   16cc4:	10c00017 	ldw	r3,0(r2)
   16cc8:	e0bffc17 	ldw	r2,-16(fp)
   16ccc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16cd0:	008000b4 	movhi	r2,2
   16cd4:	10a27704 	addi	r2,r2,-30244
   16cd8:	e0fffb17 	ldw	r3,-20(fp)
   16cdc:	18c00324 	muli	r3,r3,12
   16ce0:	10c5883a 	add	r2,r2,r3
   16ce4:	10800104 	addi	r2,r2,4
   16ce8:	10c00017 	ldw	r3,0(r2)
   16cec:	e0bffc17 	ldw	r2,-16(fp)
   16cf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16cf4:	008000b4 	movhi	r2,2
   16cf8:	10a27704 	addi	r2,r2,-30244
   16cfc:	e0fffb17 	ldw	r3,-20(fp)
   16d00:	18c00324 	muli	r3,r3,12
   16d04:	10c5883a 	add	r2,r2,r3
   16d08:	10800204 	addi	r2,r2,8
   16d0c:	10c00017 	ldw	r3,0(r2)
   16d10:	e0bffc17 	ldw	r2,-16(fp)
   16d14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16d18:	e13ffb17 	ldw	r4,-20(fp)
   16d1c:	000daac0 	call	daac <alt_release_fd>
  }
} 
   16d20:	0001883a 	nop
   16d24:	e037883a 	mov	sp,fp
   16d28:	dfc00117 	ldw	ra,4(sp)
   16d2c:	df000017 	ldw	fp,0(sp)
   16d30:	dec00204 	addi	sp,sp,8
   16d34:	f800283a 	ret

00016d38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16d38:	defffb04 	addi	sp,sp,-20
   16d3c:	dfc00415 	stw	ra,16(sp)
   16d40:	df000315 	stw	fp,12(sp)
   16d44:	df000304 	addi	fp,sp,12
   16d48:	e13ffd15 	stw	r4,-12(fp)
   16d4c:	e17ffe15 	stw	r5,-8(fp)
   16d50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16d54:	01c07fc4 	movi	r7,511
   16d58:	01800044 	movi	r6,1
   16d5c:	e17ffd17 	ldw	r5,-12(fp)
   16d60:	010000b4 	movhi	r4,2
   16d64:	21227a04 	addi	r4,r4,-30232
   16d68:	0016c740 	call	16c74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16d6c:	01c07fc4 	movi	r7,511
   16d70:	000d883a 	mov	r6,zero
   16d74:	e17ffe17 	ldw	r5,-8(fp)
   16d78:	010000b4 	movhi	r4,2
   16d7c:	21227704 	addi	r4,r4,-30244
   16d80:	0016c740 	call	16c74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16d84:	01c07fc4 	movi	r7,511
   16d88:	01800044 	movi	r6,1
   16d8c:	e17fff17 	ldw	r5,-4(fp)
   16d90:	010000b4 	movhi	r4,2
   16d94:	21227d04 	addi	r4,r4,-30220
   16d98:	0016c740 	call	16c74 <alt_open_fd>
}  
   16d9c:	0001883a 	nop
   16da0:	e037883a 	mov	sp,fp
   16da4:	dfc00117 	ldw	ra,4(sp)
   16da8:	df000017 	ldw	fp,0(sp)
   16dac:	dec00204 	addi	sp,sp,8
   16db0:	f800283a 	ret

00016db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16db4:	defffe04 	addi	sp,sp,-8
   16db8:	dfc00115 	stw	ra,4(sp)
   16dbc:	df000015 	stw	fp,0(sp)
   16dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16dc4:	d0a00b17 	ldw	r2,-32724(gp)
   16dc8:	10000326 	beq	r2,zero,16dd8 <alt_get_errno+0x24>
   16dcc:	d0a00b17 	ldw	r2,-32724(gp)
   16dd0:	103ee83a 	callr	r2
   16dd4:	00000106 	br	16ddc <alt_get_errno+0x28>
   16dd8:	d0a71004 	addi	r2,gp,-25536
}
   16ddc:	e037883a 	mov	sp,fp
   16de0:	dfc00117 	ldw	ra,4(sp)
   16de4:	df000017 	ldw	fp,0(sp)
   16de8:	dec00204 	addi	sp,sp,8
   16dec:	f800283a 	ret

00016df0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16df0:	defffd04 	addi	sp,sp,-12
   16df4:	df000215 	stw	fp,8(sp)
   16df8:	df000204 	addi	fp,sp,8
   16dfc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16e00:	e0bfff17 	ldw	r2,-4(fp)
   16e04:	10800217 	ldw	r2,8(r2)
   16e08:	10d00034 	orhi	r3,r2,16384
   16e0c:	e0bfff17 	ldw	r2,-4(fp)
   16e10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16e14:	e03ffe15 	stw	zero,-8(fp)
   16e18:	00001d06 	br	16e90 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16e1c:	008000b4 	movhi	r2,2
   16e20:	10a27704 	addi	r2,r2,-30244
   16e24:	e0fffe17 	ldw	r3,-8(fp)
   16e28:	18c00324 	muli	r3,r3,12
   16e2c:	10c5883a 	add	r2,r2,r3
   16e30:	10c00017 	ldw	r3,0(r2)
   16e34:	e0bfff17 	ldw	r2,-4(fp)
   16e38:	10800017 	ldw	r2,0(r2)
   16e3c:	1880111e 	bne	r3,r2,16e84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16e40:	008000b4 	movhi	r2,2
   16e44:	10a27704 	addi	r2,r2,-30244
   16e48:	e0fffe17 	ldw	r3,-8(fp)
   16e4c:	18c00324 	muli	r3,r3,12
   16e50:	10c5883a 	add	r2,r2,r3
   16e54:	10800204 	addi	r2,r2,8
   16e58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16e5c:	1000090e 	bge	r2,zero,16e84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16e60:	e0bffe17 	ldw	r2,-8(fp)
   16e64:	10c00324 	muli	r3,r2,12
   16e68:	008000b4 	movhi	r2,2
   16e6c:	10a27704 	addi	r2,r2,-30244
   16e70:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16e74:	e0bfff17 	ldw	r2,-4(fp)
   16e78:	18800226 	beq	r3,r2,16e84 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16e7c:	00bffcc4 	movi	r2,-13
   16e80:	00000806 	br	16ea4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16e84:	e0bffe17 	ldw	r2,-8(fp)
   16e88:	10800044 	addi	r2,r2,1
   16e8c:	e0bffe15 	stw	r2,-8(fp)
   16e90:	d0a00a17 	ldw	r2,-32728(gp)
   16e94:	1007883a 	mov	r3,r2
   16e98:	e0bffe17 	ldw	r2,-8(fp)
   16e9c:	18bfdf2e 	bgeu	r3,r2,16e1c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16ea0:	0005883a 	mov	r2,zero
}
   16ea4:	e037883a 	mov	sp,fp
   16ea8:	df000017 	ldw	fp,0(sp)
   16eac:	dec00104 	addi	sp,sp,4
   16eb0:	f800283a 	ret

00016eb4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16eb4:	defff604 	addi	sp,sp,-40
   16eb8:	dfc00915 	stw	ra,36(sp)
   16ebc:	df000815 	stw	fp,32(sp)
   16ec0:	df000804 	addi	fp,sp,32
   16ec4:	e13ffd15 	stw	r4,-12(fp)
   16ec8:	e17ffe15 	stw	r5,-8(fp)
   16ecc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16ed0:	00bfffc4 	movi	r2,-1
   16ed4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16ed8:	00bffb44 	movi	r2,-19
   16edc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16ee0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16ee4:	d1600804 	addi	r5,gp,-32736
   16ee8:	e13ffd17 	ldw	r4,-12(fp)
   16eec:	00175280 	call	17528 <alt_find_dev>
   16ef0:	e0bff815 	stw	r2,-32(fp)
   16ef4:	e0bff817 	ldw	r2,-32(fp)
   16ef8:	1000051e 	bne	r2,zero,16f10 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16efc:	e13ffd17 	ldw	r4,-12(fp)
   16f00:	00175b80 	call	175b8 <alt_find_file>
   16f04:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   16f08:	00800044 	movi	r2,1
   16f0c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16f10:	e0bff817 	ldw	r2,-32(fp)
   16f14:	10002926 	beq	r2,zero,16fbc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16f18:	e13ff817 	ldw	r4,-32(fp)
   16f1c:	00176c00 	call	176c0 <alt_get_fd>
   16f20:	e0bff915 	stw	r2,-28(fp)
   16f24:	e0bff917 	ldw	r2,-28(fp)
   16f28:	1000030e 	bge	r2,zero,16f38 <open+0x84>
    {
      status = index;
   16f2c:	e0bff917 	ldw	r2,-28(fp)
   16f30:	e0bffa15 	stw	r2,-24(fp)
   16f34:	00002306 	br	16fc4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   16f38:	e0bff917 	ldw	r2,-28(fp)
   16f3c:	10c00324 	muli	r3,r2,12
   16f40:	008000b4 	movhi	r2,2
   16f44:	10a27704 	addi	r2,r2,-30244
   16f48:	1885883a 	add	r2,r3,r2
   16f4c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16f50:	e0fffe17 	ldw	r3,-8(fp)
   16f54:	00900034 	movhi	r2,16384
   16f58:	10bfffc4 	addi	r2,r2,-1
   16f5c:	1886703a 	and	r3,r3,r2
   16f60:	e0bffc17 	ldw	r2,-16(fp)
   16f64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16f68:	e0bffb17 	ldw	r2,-20(fp)
   16f6c:	1000051e 	bne	r2,zero,16f84 <open+0xd0>
   16f70:	e13ffc17 	ldw	r4,-16(fp)
   16f74:	0016df00 	call	16df0 <alt_file_locked>
   16f78:	e0bffa15 	stw	r2,-24(fp)
   16f7c:	e0bffa17 	ldw	r2,-24(fp)
   16f80:	10001016 	blt	r2,zero,16fc4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16f84:	e0bff817 	ldw	r2,-32(fp)
   16f88:	10800317 	ldw	r2,12(r2)
   16f8c:	10000826 	beq	r2,zero,16fb0 <open+0xfc>
   16f90:	e0bff817 	ldw	r2,-32(fp)
   16f94:	10800317 	ldw	r2,12(r2)
   16f98:	e1ffff17 	ldw	r7,-4(fp)
   16f9c:	e1bffe17 	ldw	r6,-8(fp)
   16fa0:	e17ffd17 	ldw	r5,-12(fp)
   16fa4:	e13ffc17 	ldw	r4,-16(fp)
   16fa8:	103ee83a 	callr	r2
   16fac:	00000106 	br	16fb4 <open+0x100>
   16fb0:	0005883a 	mov	r2,zero
   16fb4:	e0bffa15 	stw	r2,-24(fp)
   16fb8:	00000206 	br	16fc4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16fbc:	00bffb44 	movi	r2,-19
   16fc0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16fc4:	e0bffa17 	ldw	r2,-24(fp)
   16fc8:	1000090e 	bge	r2,zero,16ff0 <open+0x13c>
  {
    alt_release_fd (index);  
   16fcc:	e13ff917 	ldw	r4,-28(fp)
   16fd0:	000daac0 	call	daac <alt_release_fd>
    ALT_ERRNO = -status;
   16fd4:	0016db40 	call	16db4 <alt_get_errno>
   16fd8:	1007883a 	mov	r3,r2
   16fdc:	e0bffa17 	ldw	r2,-24(fp)
   16fe0:	0085c83a 	sub	r2,zero,r2
   16fe4:	18800015 	stw	r2,0(r3)
    return -1;
   16fe8:	00bfffc4 	movi	r2,-1
   16fec:	00000106 	br	16ff4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   16ff0:	e0bff917 	ldw	r2,-28(fp)
}
   16ff4:	e037883a 	mov	sp,fp
   16ff8:	dfc00117 	ldw	ra,4(sp)
   16ffc:	df000017 	ldw	fp,0(sp)
   17000:	dec00204 	addi	sp,sp,8
   17004:	f800283a 	ret

00017008 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17008:	defffa04 	addi	sp,sp,-24
   1700c:	df000515 	stw	fp,20(sp)
   17010:	df000504 	addi	fp,sp,20
   17014:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17018:	0005303a 	rdctl	r2,status
   1701c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17020:	e0fffc17 	ldw	r3,-16(fp)
   17024:	00bfff84 	movi	r2,-2
   17028:	1884703a 	and	r2,r3,r2
   1702c:	1001703a 	wrctl	status,r2
  
  return context;
   17030:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17034:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17038:	e0bfff17 	ldw	r2,-4(fp)
   1703c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   17040:	e0bffd17 	ldw	r2,-12(fp)
   17044:	10800017 	ldw	r2,0(r2)
   17048:	e0fffd17 	ldw	r3,-12(fp)
   1704c:	18c00117 	ldw	r3,4(r3)
   17050:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17054:	e0bffd17 	ldw	r2,-12(fp)
   17058:	10800117 	ldw	r2,4(r2)
   1705c:	e0fffd17 	ldw	r3,-12(fp)
   17060:	18c00017 	ldw	r3,0(r3)
   17064:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17068:	e0bffd17 	ldw	r2,-12(fp)
   1706c:	e0fffd17 	ldw	r3,-12(fp)
   17070:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17074:	e0bffd17 	ldw	r2,-12(fp)
   17078:	e0fffd17 	ldw	r3,-12(fp)
   1707c:	10c00015 	stw	r3,0(r2)
   17080:	e0bffb17 	ldw	r2,-20(fp)
   17084:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17088:	e0bffe17 	ldw	r2,-8(fp)
   1708c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   17090:	0001883a 	nop
   17094:	e037883a 	mov	sp,fp
   17098:	df000017 	ldw	fp,0(sp)
   1709c:	dec00104 	addi	sp,sp,4
   170a0:	f800283a 	ret

000170a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   170a4:	defffb04 	addi	sp,sp,-20
   170a8:	dfc00415 	stw	ra,16(sp)
   170ac:	df000315 	stw	fp,12(sp)
   170b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   170b4:	d0a02d17 	ldw	r2,-32588(gp)
   170b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   170bc:	d0a73217 	ldw	r2,-25400(gp)
   170c0:	10800044 	addi	r2,r2,1
   170c4:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   170c8:	00002e06 	br	17184 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   170cc:	e0bffd17 	ldw	r2,-12(fp)
   170d0:	10800017 	ldw	r2,0(r2)
   170d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   170d8:	e0bffd17 	ldw	r2,-12(fp)
   170dc:	10800403 	ldbu	r2,16(r2)
   170e0:	10803fcc 	andi	r2,r2,255
   170e4:	10000426 	beq	r2,zero,170f8 <alt_tick+0x54>
   170e8:	d0a73217 	ldw	r2,-25400(gp)
   170ec:	1000021e 	bne	r2,zero,170f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   170f0:	e0bffd17 	ldw	r2,-12(fp)
   170f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   170f8:	e0bffd17 	ldw	r2,-12(fp)
   170fc:	10800217 	ldw	r2,8(r2)
   17100:	d0e73217 	ldw	r3,-25400(gp)
   17104:	18801d36 	bltu	r3,r2,1717c <alt_tick+0xd8>
   17108:	e0bffd17 	ldw	r2,-12(fp)
   1710c:	10800403 	ldbu	r2,16(r2)
   17110:	10803fcc 	andi	r2,r2,255
   17114:	1000191e 	bne	r2,zero,1717c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17118:	e0bffd17 	ldw	r2,-12(fp)
   1711c:	10800317 	ldw	r2,12(r2)
   17120:	e0fffd17 	ldw	r3,-12(fp)
   17124:	18c00517 	ldw	r3,20(r3)
   17128:	1809883a 	mov	r4,r3
   1712c:	103ee83a 	callr	r2
   17130:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17134:	e0bfff17 	ldw	r2,-4(fp)
   17138:	1000031e 	bne	r2,zero,17148 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1713c:	e13ffd17 	ldw	r4,-12(fp)
   17140:	00170080 	call	17008 <alt_alarm_stop>
   17144:	00000d06 	br	1717c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17148:	e0bffd17 	ldw	r2,-12(fp)
   1714c:	10c00217 	ldw	r3,8(r2)
   17150:	e0bfff17 	ldw	r2,-4(fp)
   17154:	1887883a 	add	r3,r3,r2
   17158:	e0bffd17 	ldw	r2,-12(fp)
   1715c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17160:	e0bffd17 	ldw	r2,-12(fp)
   17164:	10c00217 	ldw	r3,8(r2)
   17168:	d0a73217 	ldw	r2,-25400(gp)
   1716c:	1880032e 	bgeu	r3,r2,1717c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   17170:	e0bffd17 	ldw	r2,-12(fp)
   17174:	00c00044 	movi	r3,1
   17178:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1717c:	e0bffe17 	ldw	r2,-8(fp)
   17180:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17184:	e0fffd17 	ldw	r3,-12(fp)
   17188:	d0a02d04 	addi	r2,gp,-32588
   1718c:	18bfcf1e 	bne	r3,r2,170cc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17190:	000ec980 	call	ec98 <OSTimeTick>
}
   17194:	0001883a 	nop
   17198:	e037883a 	mov	sp,fp
   1719c:	dfc00117 	ldw	ra,4(sp)
   171a0:	df000017 	ldw	fp,0(sp)
   171a4:	dec00204 	addi	sp,sp,8
   171a8:	f800283a 	ret

000171ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   171ac:	deffff04 	addi	sp,sp,-4
   171b0:	df000015 	stw	fp,0(sp)
   171b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   171b8:	000170fa 	wrctl	ienable,zero
}
   171bc:	0001883a 	nop
   171c0:	e037883a 	mov	sp,fp
   171c4:	df000017 	ldw	fp,0(sp)
   171c8:	dec00104 	addi	sp,sp,4
   171cc:	f800283a 	ret

000171d0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   171d0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   171d4:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   171d8:	d1272b17 	ldw	r4,-25428(gp)

      stw ra,  0(sp)
   171dc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   171e0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   171e4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   171e8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   171ec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   171f0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   171f4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   171f8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   171fc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   17200:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   17204:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   17208:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1720c:	00174440 	call	17444 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   17210:	d1272617 	ldw	r4,-25448(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   17214:	d1671e07 	ldb	r5,-25480(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   17218:	d1272b15 	stw	r4,-25428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1721c:	d1671e45 	stb	r5,-25479(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   17220:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   17224:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   17228:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1722c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   17230:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   17234:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   17238:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1723c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   17240:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   17244:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   17248:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1724c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   17250:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   17254:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   17258:	f800283a 	ret

0001725c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1725c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   17260:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   17264:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   17268:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1726c:	00174440 	call	17444 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   17270:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   17274:	d4a71c45 	stb	r18,-25487(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   17278:	003fe506 	br	17210 <OSCtxSw+0x40>

0001727c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1727c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   17280:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   17284:	10800054 	ori	r2,r2,1
      wrctl status, r2
   17288:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1728c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   17290:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   17294:	dec00204 	addi	sp,sp,8

      callr r2
   17298:	103ee83a 	callr	r2

      nop
   1729c:	0001883a 	nop

000172a0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   172a0:	defff704 	addi	sp,sp,-36
   172a4:	dfc00815 	stw	ra,32(sp)
   172a8:	df000715 	stw	fp,28(sp)
   172ac:	df000704 	addi	fp,sp,28
   172b0:	e13ffc15 	stw	r4,-16(fp)
   172b4:	e17ffd15 	stw	r5,-12(fp)
   172b8:	e1bffe15 	stw	r6,-8(fp)
   172bc:	3805883a 	mov	r2,r7
   172c0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   172c4:	e0fffe17 	ldw	r3,-8(fp)
   172c8:	00bfff04 	movi	r2,-4
   172cc:	1884703a 	and	r2,r3,r2
   172d0:	10bef704 	addi	r2,r2,-1060
   172d4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   172d8:	01810904 	movi	r6,1060
   172dc:	000b883a 	mov	r5,zero
   172e0:	e13ff917 	ldw	r4,-28(fp)
   172e4:	0006a100 	call	6a10 <memset>
   172e8:	e0bff917 	ldw	r2,-28(fp)
   172ec:	10c0bb04 	addi	r3,r2,748
   172f0:	e0bff917 	ldw	r2,-28(fp)
   172f4:	10c00115 	stw	r3,4(r2)
   172f8:	e0bff917 	ldw	r2,-28(fp)
   172fc:	10c0d504 	addi	r3,r2,852
   17300:	e0bff917 	ldw	r2,-28(fp)
   17304:	10c00215 	stw	r3,8(r2)
   17308:	e0bff917 	ldw	r2,-28(fp)
   1730c:	10c0ef04 	addi	r3,r2,956
   17310:	e0bff917 	ldw	r2,-28(fp)
   17314:	10c00315 	stw	r3,12(r2)
   17318:	e0fff917 	ldw	r3,-28(fp)
   1731c:	008000b4 	movhi	r2,2
   17320:	10a04304 	addi	r2,r2,-32500
   17324:	18800d15 	stw	r2,52(r3)
   17328:	e0bff917 	ldw	r2,-28(fp)
   1732c:	00c00044 	movi	r3,1
   17330:	10c02915 	stw	r3,164(r2)
   17334:	10002a15 	stw	zero,168(r2)
   17338:	e0bff917 	ldw	r2,-28(fp)
   1733c:	00ccc384 	movi	r3,13070
   17340:	10c02b0d 	sth	r3,172(r2)
   17344:	e0bff917 	ldw	r2,-28(fp)
   17348:	00eaf344 	movi	r3,-21555
   1734c:	10c02b8d 	sth	r3,174(r2)
   17350:	e0bff917 	ldw	r2,-28(fp)
   17354:	00c48d04 	movi	r3,4660
   17358:	10c02c0d 	sth	r3,176(r2)
   1735c:	e0bff917 	ldw	r2,-28(fp)
   17360:	00f99b44 	movi	r3,-6547
   17364:	10c02c8d 	sth	r3,178(r2)
   17368:	e0bff917 	ldw	r2,-28(fp)
   1736c:	00f7bb04 	movi	r3,-8468
   17370:	10c02d0d 	sth	r3,180(r2)
   17374:	e0bff917 	ldw	r2,-28(fp)
   17378:	00c00144 	movi	r3,5
   1737c:	10c02d8d 	sth	r3,182(r2)
   17380:	e0bff917 	ldw	r2,-28(fp)
   17384:	00c002c4 	movi	r3,11
   17388:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1738c:	e0bff917 	ldw	r2,-28(fp)
   17390:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   17394:	e0bffa17 	ldw	r2,-24(fp)
   17398:	10bff304 	addi	r2,r2,-52
   1739c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   173a0:	e0bffb17 	ldw	r2,-20(fp)
   173a4:	10800c04 	addi	r2,r2,48
   173a8:	e0fffc17 	ldw	r3,-16(fp)
   173ac:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   173b0:	e0bffb17 	ldw	r2,-20(fp)
   173b4:	10800b04 	addi	r2,r2,44
   173b8:	e0fffd17 	ldw	r3,-12(fp)
   173bc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   173c0:	e0bffb17 	ldw	r2,-20(fp)
   173c4:	10800a04 	addi	r2,r2,40
   173c8:	e0fff917 	ldw	r3,-28(fp)
   173cc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   173d0:	00800074 	movhi	r2,1
   173d4:	109c9f04 	addi	r2,r2,29308
   173d8:	10c00104 	addi	r3,r2,4
   173dc:	e0bffb17 	ldw	r2,-20(fp)
   173e0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   173e4:	e0bffb17 	ldw	r2,-20(fp)
}
   173e8:	e037883a 	mov	sp,fp
   173ec:	dfc00117 	ldw	ra,4(sp)
   173f0:	df000017 	ldw	fp,0(sp)
   173f4:	dec00204 	addi	sp,sp,8
   173f8:	f800283a 	ret

000173fc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   173fc:	defffe04 	addi	sp,sp,-8
   17400:	df000115 	stw	fp,4(sp)
   17404:	df000104 	addi	fp,sp,4
   17408:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1740c:	0001883a 	nop
   17410:	e037883a 	mov	sp,fp
   17414:	df000017 	ldw	fp,0(sp)
   17418:	dec00104 	addi	sp,sp,4
   1741c:	f800283a 	ret

00017420 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   17420:	defffe04 	addi	sp,sp,-8
   17424:	df000115 	stw	fp,4(sp)
   17428:	df000104 	addi	fp,sp,4
   1742c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   17430:	0001883a 	nop
   17434:	e037883a 	mov	sp,fp
   17438:	df000017 	ldw	fp,0(sp)
   1743c:	dec00104 	addi	sp,sp,4
   17440:	f800283a 	ret

00017444 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   17444:	deffff04 	addi	sp,sp,-4
   17448:	df000015 	stw	fp,0(sp)
   1744c:	d839883a 	mov	fp,sp
}
   17450:	0001883a 	nop
   17454:	e037883a 	mov	sp,fp
   17458:	df000017 	ldw	fp,0(sp)
   1745c:	dec00104 	addi	sp,sp,4
   17460:	f800283a 	ret

00017464 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   17464:	deffff04 	addi	sp,sp,-4
   17468:	df000015 	stw	fp,0(sp)
   1746c:	d839883a 	mov	fp,sp
}
   17470:	0001883a 	nop
   17474:	e037883a 	mov	sp,fp
   17478:	df000017 	ldw	fp,0(sp)
   1747c:	dec00104 	addi	sp,sp,4
   17480:	f800283a 	ret

00017484 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   17484:	deffff04 	addi	sp,sp,-4
   17488:	df000015 	stw	fp,0(sp)
   1748c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   17490:	0001883a 	nop
   17494:	e037883a 	mov	sp,fp
   17498:	df000017 	ldw	fp,0(sp)
   1749c:	dec00104 	addi	sp,sp,4
   174a0:	f800283a 	ret

000174a4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   174a4:	deffff04 	addi	sp,sp,-4
   174a8:	df000015 	stw	fp,0(sp)
   174ac:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   174b0:	0001883a 	nop
   174b4:	e037883a 	mov	sp,fp
   174b8:	df000017 	ldw	fp,0(sp)
   174bc:	dec00104 	addi	sp,sp,4
   174c0:	f800283a 	ret

000174c4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   174c4:	deffff04 	addi	sp,sp,-4
   174c8:	df000015 	stw	fp,0(sp)
   174cc:	d839883a 	mov	fp,sp
}
   174d0:	0001883a 	nop
   174d4:	e037883a 	mov	sp,fp
   174d8:	df000017 	ldw	fp,0(sp)
   174dc:	dec00104 	addi	sp,sp,4
   174e0:	f800283a 	ret

000174e4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   174e4:	deffff04 	addi	sp,sp,-4
   174e8:	df000015 	stw	fp,0(sp)
   174ec:	d839883a 	mov	fp,sp
}
   174f0:	0001883a 	nop
   174f4:	e037883a 	mov	sp,fp
   174f8:	df000017 	ldw	fp,0(sp)
   174fc:	dec00104 	addi	sp,sp,4
   17500:	f800283a 	ret

00017504 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   17504:	defffe04 	addi	sp,sp,-8
   17508:	df000115 	stw	fp,4(sp)
   1750c:	df000104 	addi	fp,sp,4
   17510:	e13fff15 	stw	r4,-4(fp)
}
   17514:	0001883a 	nop
   17518:	e037883a 	mov	sp,fp
   1751c:	df000017 	ldw	fp,0(sp)
   17520:	dec00104 	addi	sp,sp,4
   17524:	f800283a 	ret

00017528 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17528:	defffa04 	addi	sp,sp,-24
   1752c:	dfc00515 	stw	ra,20(sp)
   17530:	df000415 	stw	fp,16(sp)
   17534:	df000404 	addi	fp,sp,16
   17538:	e13ffe15 	stw	r4,-8(fp)
   1753c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   17540:	e0bfff17 	ldw	r2,-4(fp)
   17544:	10800017 	ldw	r2,0(r2)
   17548:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1754c:	e13ffe17 	ldw	r4,-8(fp)
   17550:	00015ec0 	call	15ec <strlen>
   17554:	10800044 	addi	r2,r2,1
   17558:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1755c:	00000d06 	br	17594 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17560:	e0bffc17 	ldw	r2,-16(fp)
   17564:	10800217 	ldw	r2,8(r2)
   17568:	e0fffd17 	ldw	r3,-12(fp)
   1756c:	180d883a 	mov	r6,r3
   17570:	e17ffe17 	ldw	r5,-8(fp)
   17574:	1009883a 	mov	r4,r2
   17578:	00178840 	call	17884 <memcmp>
   1757c:	1000021e 	bne	r2,zero,17588 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17580:	e0bffc17 	ldw	r2,-16(fp)
   17584:	00000706 	br	175a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   17588:	e0bffc17 	ldw	r2,-16(fp)
   1758c:	10800017 	ldw	r2,0(r2)
   17590:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17594:	e0fffc17 	ldw	r3,-16(fp)
   17598:	e0bfff17 	ldw	r2,-4(fp)
   1759c:	18bff01e 	bne	r3,r2,17560 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   175a0:	0005883a 	mov	r2,zero
}
   175a4:	e037883a 	mov	sp,fp
   175a8:	dfc00117 	ldw	ra,4(sp)
   175ac:	df000017 	ldw	fp,0(sp)
   175b0:	dec00204 	addi	sp,sp,8
   175b4:	f800283a 	ret

000175b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   175b8:	defffb04 	addi	sp,sp,-20
   175bc:	dfc00415 	stw	ra,16(sp)
   175c0:	df000315 	stw	fp,12(sp)
   175c4:	df000304 	addi	fp,sp,12
   175c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   175cc:	d0a00617 	ldw	r2,-32744(gp)
   175d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   175d4:	00003106 	br	1769c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   175d8:	e0bffd17 	ldw	r2,-12(fp)
   175dc:	10800217 	ldw	r2,8(r2)
   175e0:	1009883a 	mov	r4,r2
   175e4:	00015ec0 	call	15ec <strlen>
   175e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   175ec:	e0bffd17 	ldw	r2,-12(fp)
   175f0:	10c00217 	ldw	r3,8(r2)
   175f4:	e0bffe17 	ldw	r2,-8(fp)
   175f8:	10bfffc4 	addi	r2,r2,-1
   175fc:	1885883a 	add	r2,r3,r2
   17600:	10800003 	ldbu	r2,0(r2)
   17604:	10803fcc 	andi	r2,r2,255
   17608:	1080201c 	xori	r2,r2,128
   1760c:	10bfe004 	addi	r2,r2,-128
   17610:	10800bd8 	cmpnei	r2,r2,47
   17614:	1000031e 	bne	r2,zero,17624 <alt_find_file+0x6c>
    {
      len -= 1;
   17618:	e0bffe17 	ldw	r2,-8(fp)
   1761c:	10bfffc4 	addi	r2,r2,-1
   17620:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17624:	e0bffe17 	ldw	r2,-8(fp)
   17628:	e0ffff17 	ldw	r3,-4(fp)
   1762c:	1885883a 	add	r2,r3,r2
   17630:	10800003 	ldbu	r2,0(r2)
   17634:	10803fcc 	andi	r2,r2,255
   17638:	1080201c 	xori	r2,r2,128
   1763c:	10bfe004 	addi	r2,r2,-128
   17640:	10800be0 	cmpeqi	r2,r2,47
   17644:	1000081e 	bne	r2,zero,17668 <alt_find_file+0xb0>
   17648:	e0bffe17 	ldw	r2,-8(fp)
   1764c:	e0ffff17 	ldw	r3,-4(fp)
   17650:	1885883a 	add	r2,r3,r2
   17654:	10800003 	ldbu	r2,0(r2)
   17658:	10803fcc 	andi	r2,r2,255
   1765c:	1080201c 	xori	r2,r2,128
   17660:	10bfe004 	addi	r2,r2,-128
   17664:	10000a1e 	bne	r2,zero,17690 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17668:	e0bffd17 	ldw	r2,-12(fp)
   1766c:	10800217 	ldw	r2,8(r2)
   17670:	e0fffe17 	ldw	r3,-8(fp)
   17674:	180d883a 	mov	r6,r3
   17678:	e17fff17 	ldw	r5,-4(fp)
   1767c:	1009883a 	mov	r4,r2
   17680:	00178840 	call	17884 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17684:	1000021e 	bne	r2,zero,17690 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17688:	e0bffd17 	ldw	r2,-12(fp)
   1768c:	00000706 	br	176ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17690:	e0bffd17 	ldw	r2,-12(fp)
   17694:	10800017 	ldw	r2,0(r2)
   17698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1769c:	e0fffd17 	ldw	r3,-12(fp)
   176a0:	d0a00604 	addi	r2,gp,-32744
   176a4:	18bfcc1e 	bne	r3,r2,175d8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   176a8:	0005883a 	mov	r2,zero
}
   176ac:	e037883a 	mov	sp,fp
   176b0:	dfc00117 	ldw	ra,4(sp)
   176b4:	df000017 	ldw	fp,0(sp)
   176b8:	dec00204 	addi	sp,sp,8
   176bc:	f800283a 	ret

000176c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   176c0:	defff904 	addi	sp,sp,-28
   176c4:	dfc00615 	stw	ra,24(sp)
   176c8:	df000515 	stw	fp,20(sp)
   176cc:	df000504 	addi	fp,sp,20
   176d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   176d4:	00bffa04 	movi	r2,-24
   176d8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   176dc:	d0a71417 	ldw	r2,-25520(gp)
   176e0:	e0bffd15 	stw	r2,-12(fp)
   176e4:	e03ffe0d 	sth	zero,-8(fp)
   176e8:	e0bffe0b 	ldhu	r2,-8(fp)
   176ec:	e0fffe84 	addi	r3,fp,-6
   176f0:	180d883a 	mov	r6,r3
   176f4:	100b883a 	mov	r5,r2
   176f8:	e13ffd17 	ldw	r4,-12(fp)
   176fc:	00134dc0 	call	134dc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17700:	e03ffb15 	stw	zero,-20(fp)
   17704:	00001906 	br	1776c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   17708:	008000b4 	movhi	r2,2
   1770c:	10a27704 	addi	r2,r2,-30244
   17710:	e0fffb17 	ldw	r3,-20(fp)
   17714:	18c00324 	muli	r3,r3,12
   17718:	10c5883a 	add	r2,r2,r3
   1771c:	10800017 	ldw	r2,0(r2)
   17720:	10000f1e 	bne	r2,zero,17760 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   17724:	008000b4 	movhi	r2,2
   17728:	10a27704 	addi	r2,r2,-30244
   1772c:	e0fffb17 	ldw	r3,-20(fp)
   17730:	18c00324 	muli	r3,r3,12
   17734:	10c5883a 	add	r2,r2,r3
   17738:	e0ffff17 	ldw	r3,-4(fp)
   1773c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17740:	d0e00a17 	ldw	r3,-32728(gp)
   17744:	e0bffb17 	ldw	r2,-20(fp)
   17748:	1880020e 	bge	r3,r2,17754 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1774c:	e0bffb17 	ldw	r2,-20(fp)
   17750:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   17754:	e0bffb17 	ldw	r2,-20(fp)
   17758:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1775c:	00000606 	br	17778 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17760:	e0bffb17 	ldw	r2,-20(fp)
   17764:	10800044 	addi	r2,r2,1
   17768:	e0bffb15 	stw	r2,-20(fp)
   1776c:	e0bffb17 	ldw	r2,-20(fp)
   17770:	10800810 	cmplti	r2,r2,32
   17774:	103fe41e 	bne	r2,zero,17708 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   17778:	d0a71417 	ldw	r2,-25520(gp)
   1777c:	1009883a 	mov	r4,r2
   17780:	00138540 	call	13854 <OSSemPost>

  return rc;
   17784:	e0bffc17 	ldw	r2,-16(fp)
}
   17788:	e037883a 	mov	sp,fp
   1778c:	dfc00117 	ldw	ra,4(sp)
   17790:	df000017 	ldw	fp,0(sp)
   17794:	dec00204 	addi	sp,sp,8
   17798:	f800283a 	ret

0001779c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1779c:	defffe04 	addi	sp,sp,-8
   177a0:	df000115 	stw	fp,4(sp)
   177a4:	df000104 	addi	fp,sp,4
   177a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   177ac:	e0bfff17 	ldw	r2,-4(fp)
   177b0:	10bffe84 	addi	r2,r2,-6
   177b4:	10c00428 	cmpgeui	r3,r2,16
   177b8:	18001a1e 	bne	r3,zero,17824 <alt_exception_cause_generated_bad_addr+0x88>
   177bc:	100690ba 	slli	r3,r2,2
   177c0:	00800074 	movhi	r2,1
   177c4:	109df504 	addi	r2,r2,30676
   177c8:	1885883a 	add	r2,r3,r2
   177cc:	10800017 	ldw	r2,0(r2)
   177d0:	1000683a 	jmp	r2
   177d4:	00017814 	movui	zero,1504
   177d8:	00017814 	movui	zero,1504
   177dc:	00017824 	muli	zero,zero,1504
   177e0:	00017824 	muli	zero,zero,1504
   177e4:	00017824 	muli	zero,zero,1504
   177e8:	00017814 	movui	zero,1504
   177ec:	0001781c 	xori	zero,zero,1504
   177f0:	00017824 	muli	zero,zero,1504
   177f4:	00017814 	movui	zero,1504
   177f8:	00017814 	movui	zero,1504
   177fc:	00017824 	muli	zero,zero,1504
   17800:	00017814 	movui	zero,1504
   17804:	0001781c 	xori	zero,zero,1504
   17808:	00017824 	muli	zero,zero,1504
   1780c:	00017824 	muli	zero,zero,1504
   17810:	00017814 	movui	zero,1504
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   17814:	00800044 	movi	r2,1
   17818:	00000306 	br	17828 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1781c:	0005883a 	mov	r2,zero
   17820:	00000106 	br	17828 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   17824:	0005883a 	mov	r2,zero
  }
}
   17828:	e037883a 	mov	sp,fp
   1782c:	df000017 	ldw	fp,0(sp)
   17830:	dec00104 	addi	sp,sp,4
   17834:	f800283a 	ret

00017838 <atexit>:
   17838:	200b883a 	mov	r5,r4
   1783c:	000f883a 	mov	r7,zero
   17840:	000d883a 	mov	r6,zero
   17844:	0009883a 	mov	r4,zero
   17848:	00179001 	jmpi	17900 <__register_exitproc>

0001784c <exit>:
   1784c:	defffe04 	addi	sp,sp,-8
   17850:	000b883a 	mov	r5,zero
   17854:	dc000015 	stw	r16,0(sp)
   17858:	dfc00115 	stw	ra,4(sp)
   1785c:	2021883a 	mov	r16,r4
   17860:	0017a180 	call	17a18 <__call_exitprocs>
   17864:	008000b4 	movhi	r2,2
   17868:	10a6f404 	addi	r2,r2,-25648
   1786c:	11000017 	ldw	r4,0(r2)
   17870:	20800f17 	ldw	r2,60(r4)
   17874:	10000126 	beq	r2,zero,1787c <exit+0x30>
   17878:	103ee83a 	callr	r2
   1787c:	8009883a 	mov	r4,r16
   17880:	0017b980 	call	17b98 <_exit>

00017884 <memcmp>:
   17884:	01c000c4 	movi	r7,3
   17888:	3980192e 	bgeu	r7,r6,178f0 <memcmp+0x6c>
   1788c:	2144b03a 	or	r2,r4,r5
   17890:	11c4703a 	and	r2,r2,r7
   17894:	10000f26 	beq	r2,zero,178d4 <memcmp+0x50>
   17898:	20800003 	ldbu	r2,0(r4)
   1789c:	28c00003 	ldbu	r3,0(r5)
   178a0:	10c0151e 	bne	r2,r3,178f8 <memcmp+0x74>
   178a4:	31bfff84 	addi	r6,r6,-2
   178a8:	01ffffc4 	movi	r7,-1
   178ac:	00000406 	br	178c0 <memcmp+0x3c>
   178b0:	20800003 	ldbu	r2,0(r4)
   178b4:	28c00003 	ldbu	r3,0(r5)
   178b8:	31bfffc4 	addi	r6,r6,-1
   178bc:	10c00e1e 	bne	r2,r3,178f8 <memcmp+0x74>
   178c0:	21000044 	addi	r4,r4,1
   178c4:	29400044 	addi	r5,r5,1
   178c8:	31fff91e 	bne	r6,r7,178b0 <memcmp+0x2c>
   178cc:	0005883a 	mov	r2,zero
   178d0:	f800283a 	ret
   178d4:	20c00017 	ldw	r3,0(r4)
   178d8:	28800017 	ldw	r2,0(r5)
   178dc:	18bfee1e 	bne	r3,r2,17898 <memcmp+0x14>
   178e0:	31bfff04 	addi	r6,r6,-4
   178e4:	21000104 	addi	r4,r4,4
   178e8:	29400104 	addi	r5,r5,4
   178ec:	39bff936 	bltu	r7,r6,178d4 <memcmp+0x50>
   178f0:	303fe91e 	bne	r6,zero,17898 <memcmp+0x14>
   178f4:	003ff506 	br	178cc <memcmp+0x48>
   178f8:	10c5c83a 	sub	r2,r2,r3
   178fc:	f800283a 	ret

00017900 <__register_exitproc>:
   17900:	defffa04 	addi	sp,sp,-24
   17904:	dc000315 	stw	r16,12(sp)
   17908:	040000b4 	movhi	r16,2
   1790c:	8426f404 	addi	r16,r16,-25648
   17910:	80c00017 	ldw	r3,0(r16)
   17914:	dc400415 	stw	r17,16(sp)
   17918:	dfc00515 	stw	ra,20(sp)
   1791c:	18805217 	ldw	r2,328(r3)
   17920:	2023883a 	mov	r17,r4
   17924:	10003726 	beq	r2,zero,17a04 <__register_exitproc+0x104>
   17928:	10c00117 	ldw	r3,4(r2)
   1792c:	010007c4 	movi	r4,31
   17930:	20c00e16 	blt	r4,r3,1796c <__register_exitproc+0x6c>
   17934:	1a000044 	addi	r8,r3,1
   17938:	8800221e 	bne	r17,zero,179c4 <__register_exitproc+0xc4>
   1793c:	18c00084 	addi	r3,r3,2
   17940:	18c7883a 	add	r3,r3,r3
   17944:	18c7883a 	add	r3,r3,r3
   17948:	12000115 	stw	r8,4(r2)
   1794c:	10c7883a 	add	r3,r2,r3
   17950:	19400015 	stw	r5,0(r3)
   17954:	0005883a 	mov	r2,zero
   17958:	dfc00517 	ldw	ra,20(sp)
   1795c:	dc400417 	ldw	r17,16(sp)
   17960:	dc000317 	ldw	r16,12(sp)
   17964:	dec00604 	addi	sp,sp,24
   17968:	f800283a 	ret
   1796c:	00800034 	movhi	r2,0
   17970:	10830904 	addi	r2,r2,3108
   17974:	10002626 	beq	r2,zero,17a10 <__register_exitproc+0x110>
   17978:	01006404 	movi	r4,400
   1797c:	d9400015 	stw	r5,0(sp)
   17980:	d9800115 	stw	r6,4(sp)
   17984:	d9c00215 	stw	r7,8(sp)
   17988:	0000c240 	call	c24 <malloc>
   1798c:	d9400017 	ldw	r5,0(sp)
   17990:	d9800117 	ldw	r6,4(sp)
   17994:	d9c00217 	ldw	r7,8(sp)
   17998:	10001d26 	beq	r2,zero,17a10 <__register_exitproc+0x110>
   1799c:	81000017 	ldw	r4,0(r16)
   179a0:	10000115 	stw	zero,4(r2)
   179a4:	02000044 	movi	r8,1
   179a8:	22405217 	ldw	r9,328(r4)
   179ac:	0007883a 	mov	r3,zero
   179b0:	12400015 	stw	r9,0(r2)
   179b4:	20805215 	stw	r2,328(r4)
   179b8:	10006215 	stw	zero,392(r2)
   179bc:	10006315 	stw	zero,396(r2)
   179c0:	883fde26 	beq	r17,zero,1793c <__register_exitproc+0x3c>
   179c4:	18c9883a 	add	r4,r3,r3
   179c8:	2109883a 	add	r4,r4,r4
   179cc:	1109883a 	add	r4,r2,r4
   179d0:	21802215 	stw	r6,136(r4)
   179d4:	01800044 	movi	r6,1
   179d8:	12406217 	ldw	r9,392(r2)
   179dc:	30cc983a 	sll	r6,r6,r3
   179e0:	4992b03a 	or	r9,r9,r6
   179e4:	12406215 	stw	r9,392(r2)
   179e8:	21c04215 	stw	r7,264(r4)
   179ec:	01000084 	movi	r4,2
   179f0:	893fd21e 	bne	r17,r4,1793c <__register_exitproc+0x3c>
   179f4:	11006317 	ldw	r4,396(r2)
   179f8:	218cb03a 	or	r6,r4,r6
   179fc:	11806315 	stw	r6,396(r2)
   17a00:	003fce06 	br	1793c <__register_exitproc+0x3c>
   17a04:	18805304 	addi	r2,r3,332
   17a08:	18805215 	stw	r2,328(r3)
   17a0c:	003fc606 	br	17928 <__register_exitproc+0x28>
   17a10:	00bfffc4 	movi	r2,-1
   17a14:	003fd006 	br	17958 <__register_exitproc+0x58>

00017a18 <__call_exitprocs>:
   17a18:	defff504 	addi	sp,sp,-44
   17a1c:	df000915 	stw	fp,36(sp)
   17a20:	dd400615 	stw	r21,24(sp)
   17a24:	dc800315 	stw	r18,12(sp)
   17a28:	dfc00a15 	stw	ra,40(sp)
   17a2c:	ddc00815 	stw	r23,32(sp)
   17a30:	dd800715 	stw	r22,28(sp)
   17a34:	dd000515 	stw	r20,20(sp)
   17a38:	dcc00415 	stw	r19,16(sp)
   17a3c:	dc400215 	stw	r17,8(sp)
   17a40:	dc000115 	stw	r16,4(sp)
   17a44:	d9000015 	stw	r4,0(sp)
   17a48:	2839883a 	mov	fp,r5
   17a4c:	04800044 	movi	r18,1
   17a50:	057fffc4 	movi	r21,-1
   17a54:	008000b4 	movhi	r2,2
   17a58:	10a6f404 	addi	r2,r2,-25648
   17a5c:	12000017 	ldw	r8,0(r2)
   17a60:	45005217 	ldw	r20,328(r8)
   17a64:	44c05204 	addi	r19,r8,328
   17a68:	a0001c26 	beq	r20,zero,17adc <__call_exitprocs+0xc4>
   17a6c:	a0800117 	ldw	r2,4(r20)
   17a70:	15ffffc4 	addi	r23,r2,-1
   17a74:	b8000d16 	blt	r23,zero,17aac <__call_exitprocs+0x94>
   17a78:	14000044 	addi	r16,r2,1
   17a7c:	8421883a 	add	r16,r16,r16
   17a80:	8421883a 	add	r16,r16,r16
   17a84:	84402004 	addi	r17,r16,128
   17a88:	a463883a 	add	r17,r20,r17
   17a8c:	a421883a 	add	r16,r20,r16
   17a90:	e0001e26 	beq	fp,zero,17b0c <__call_exitprocs+0xf4>
   17a94:	80804017 	ldw	r2,256(r16)
   17a98:	e0801c26 	beq	fp,r2,17b0c <__call_exitprocs+0xf4>
   17a9c:	bdffffc4 	addi	r23,r23,-1
   17aa0:	843fff04 	addi	r16,r16,-4
   17aa4:	8c7fff04 	addi	r17,r17,-4
   17aa8:	bd7ff91e 	bne	r23,r21,17a90 <__call_exitprocs+0x78>
   17aac:	00800034 	movhi	r2,0
   17ab0:	10830e04 	addi	r2,r2,3128
   17ab4:	10000926 	beq	r2,zero,17adc <__call_exitprocs+0xc4>
   17ab8:	a0800117 	ldw	r2,4(r20)
   17abc:	1000301e 	bne	r2,zero,17b80 <__call_exitprocs+0x168>
   17ac0:	a0800017 	ldw	r2,0(r20)
   17ac4:	10003226 	beq	r2,zero,17b90 <__call_exitprocs+0x178>
   17ac8:	a009883a 	mov	r4,r20
   17acc:	98800015 	stw	r2,0(r19)
   17ad0:	0000c380 	call	c38 <free>
   17ad4:	9d000017 	ldw	r20,0(r19)
   17ad8:	a03fe41e 	bne	r20,zero,17a6c <__call_exitprocs+0x54>
   17adc:	dfc00a17 	ldw	ra,40(sp)
   17ae0:	df000917 	ldw	fp,36(sp)
   17ae4:	ddc00817 	ldw	r23,32(sp)
   17ae8:	dd800717 	ldw	r22,28(sp)
   17aec:	dd400617 	ldw	r21,24(sp)
   17af0:	dd000517 	ldw	r20,20(sp)
   17af4:	dcc00417 	ldw	r19,16(sp)
   17af8:	dc800317 	ldw	r18,12(sp)
   17afc:	dc400217 	ldw	r17,8(sp)
   17b00:	dc000117 	ldw	r16,4(sp)
   17b04:	dec00b04 	addi	sp,sp,44
   17b08:	f800283a 	ret
   17b0c:	a0800117 	ldw	r2,4(r20)
   17b10:	80c00017 	ldw	r3,0(r16)
   17b14:	10bfffc4 	addi	r2,r2,-1
   17b18:	15c01426 	beq	r2,r23,17b6c <__call_exitprocs+0x154>
   17b1c:	80000015 	stw	zero,0(r16)
   17b20:	183fde26 	beq	r3,zero,17a9c <__call_exitprocs+0x84>
   17b24:	95c8983a 	sll	r4,r18,r23
   17b28:	a0806217 	ldw	r2,392(r20)
   17b2c:	a5800117 	ldw	r22,4(r20)
   17b30:	2084703a 	and	r2,r4,r2
   17b34:	10000b26 	beq	r2,zero,17b64 <__call_exitprocs+0x14c>
   17b38:	a0806317 	ldw	r2,396(r20)
   17b3c:	2088703a 	and	r4,r4,r2
   17b40:	20000c1e 	bne	r4,zero,17b74 <__call_exitprocs+0x15c>
   17b44:	89400017 	ldw	r5,0(r17)
   17b48:	d9000017 	ldw	r4,0(sp)
   17b4c:	183ee83a 	callr	r3
   17b50:	a0800117 	ldw	r2,4(r20)
   17b54:	15bfbf1e 	bne	r2,r22,17a54 <__call_exitprocs+0x3c>
   17b58:	98800017 	ldw	r2,0(r19)
   17b5c:	153fcf26 	beq	r2,r20,17a9c <__call_exitprocs+0x84>
   17b60:	003fbc06 	br	17a54 <__call_exitprocs+0x3c>
   17b64:	183ee83a 	callr	r3
   17b68:	003ff906 	br	17b50 <__call_exitprocs+0x138>
   17b6c:	a5c00115 	stw	r23,4(r20)
   17b70:	003feb06 	br	17b20 <__call_exitprocs+0x108>
   17b74:	89000017 	ldw	r4,0(r17)
   17b78:	183ee83a 	callr	r3
   17b7c:	003ff406 	br	17b50 <__call_exitprocs+0x138>
   17b80:	a0800017 	ldw	r2,0(r20)
   17b84:	a027883a 	mov	r19,r20
   17b88:	1029883a 	mov	r20,r2
   17b8c:	003fb606 	br	17a68 <__call_exitprocs+0x50>
   17b90:	0005883a 	mov	r2,zero
   17b94:	003ffb06 	br	17b84 <__call_exitprocs+0x16c>

00017b98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17b98:	defffd04 	addi	sp,sp,-12
   17b9c:	df000215 	stw	fp,8(sp)
   17ba0:	df000204 	addi	fp,sp,8
   17ba4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17ba8:	d0271c45 	stb	zero,-25487(gp)
   17bac:	e0bfff17 	ldw	r2,-4(fp)
   17bb0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17bb4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17bb8:	10000226 	beq	r2,zero,17bc4 <_exit+0x2c>
    ALT_SIM_FAIL();
   17bbc:	002af070 	cmpltui	zero,zero,43969
   17bc0:	00000106 	br	17bc8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17bc4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17bc8:	003fff06 	br	17bc8 <_exit+0x30>
